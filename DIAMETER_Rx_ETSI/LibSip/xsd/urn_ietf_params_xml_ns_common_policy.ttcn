/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R4D                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          urn_ietf_params_xml_ns_common_policy.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Fri Mar  4 09:23:30 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- common-policy.xsd
//			/* xml version = "1.0" */
//			/* targetnamespace = "urn:ietf:params:xml:ns:common-policy" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module urn_ietf_params_xml_ns_common_policy {


import from XSD all;


/* /ruleset */


type record Ruleset
{
	record of RuleType rule_list
}
with {
  variant "name as uncapitalized";
  variant "element";
  variant (rule_list) "untagged";
  variant (rule_list[-]) "name as 'rule'";
};


/* /ruleset/rule */


type record RuleType
{
	XSD.ID id,
	ConditionsType conditions optional,
	ExtensibleType actions optional,
	ExtensibleType transformations optional
}
with {
  variant "name as uncapitalized";
  variant (id) "attribute";
};


/* //rule/conditions */


type record ConditionsType
{
	record length(1 .. infinity) of union {
		record length(0 .. 1) of IdentityType identity_list,
		record length(1) of SphereType sphere_list,
		record length(1) of ValidityType validity_list,
		record length(1 .. infinity) of XSD.String elem_list
	} choice_list
}
with {
  variant "name as uncapitalized";
  variant (choice_list) "untagged";
  variant (choice_list[-]) "untagged";
  variant (choice_list[-].identity_list) "untagged";
  variant (choice_list[-].identity_list[-]) "name as 'identity'";
  variant (choice_list[-].sphere_list) "untagged";
  variant (choice_list[-].sphere_list[-]) "name as 'sphere'";
  variant (choice_list[-].validity_list) "untagged";
  variant (choice_list[-].validity_list[-]) "name as 'validity'";
  variant (choice_list[-].elem_list) "untagged";
  variant (choice_list[-].elem_list[-]) "anyElement except unqualified, 'urn:ietf:params:xml:ns:common-policy'";
};


/* //conditions/identity */


type record IdentityType
{
	record length(1 .. infinity) of union {
		OneType one,
		ManyType many,
		XSD.String elem
	} choice_list
}
with {
  variant "name as uncapitalized";
  variant (choice_list) "untagged";
  variant (choice_list[-]) "untagged";
  variant (choice_list[-].elem) "anyElement except unqualified, 'urn:ietf:params:xml:ns:common-policy'";
};


/* //identity/one */


type record OneType
{
	XSD.AnyURI id,
	XSD.String elem optional
}
with {
  variant "name as uncapitalized";
  variant (id) "attribute";
  variant (elem) "anyElement except unqualified, 'urn:ietf:params:xml:ns:common-policy'";
};


/* //identity/many */


type record ManyType
{
	XSD.String domain optional,
	record of union {
		ExceptType except_,
		record length(0 .. 1) of XSD.String elem_list
	} choice_list
}
with {
  variant "name as uncapitalized";
  variant (domain) "attribute";
  variant (choice_list) "untagged";
  variant (choice_list[-]) "untagged";
  variant (choice_list[-].except_) "name as 'except'";
  variant (choice_list[-].elem_list) "untagged";
  variant (choice_list[-].elem_list[-]) "anyElement except unqualified, 'urn:ietf:params:xml:ns:common-policy'";
};


/* //many/except */


type record ExceptType
{
	XSD.String domain optional,
	XSD.AnyURI id optional
}
with {
  variant "name as uncapitalized";
  variant (domain) "attribute";
  variant (id) "attribute";
};


/* //conditions/sphere */


type record SphereType
{
	XSD.String value_
}
with {
  variant "name as uncapitalized";
  variant (value_) "name as 'value'";
  variant (value_) "attribute";
};


/* //conditions/validity */


type record ValidityType
{
	record length(1 .. infinity) of record {
		XSD.DateTime from_,
		XSD.DateTime until
	} sequence_list
}
with {
  variant "name as uncapitalized";
  variant (sequence_list) "untagged";
  variant (sequence_list[-]) "untagged";
  variant (sequence_list[-].from_) "name as 'from'";
};


/* //rule/actions or //rule/transformations */


type record ExtensibleType
{
	record of XSD.String elem_list
}
with {
  variant "name as uncapitalized";
  variant (elem_list) "untagged";
  variant (elem_list[-]) "anyElement except unqualified, 'urn:ietf:params:xml:ns:common-policy'";
};


}
with {
  encode "XML";
  variant "namespace as 'urn:ietf:params:xml:ns:common-policy' prefix 'cp'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
  variant "elementFormQualified";
}
