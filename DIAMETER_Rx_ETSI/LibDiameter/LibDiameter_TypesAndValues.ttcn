/**
*    @author   STF 434 and Iskratel Research Development V&V
*  @version  $Id: LibDiameter_TypesAndValues.ttcn 664 2013-10-08 14:39:08Z pintar $
*    @desc     This module defines message, header, structured and simple Diameter
*            types as well constants used by LipDiameter constructs. <br>
*            Note that any changes made to the definitions in this module
*            may be overwritten by future releases of this library
*            End users are encouraged to contact the distributers of this
*            module regarding their modifications or additions
*  @remark   Adding of new message and header types is ok;
*            Existing message or header types shall not be changed or removed
*/
//            Adapted to Titan    Elemer Lelik  2016.02.08
//            Further corrections may be needed 

module LibDiameter_TypesAndValues {

import from LibCommon_BasicTypesAndValues all;
import from LibCommon_DataStrings all;




    external function f_DIAMETER_Enc(in DIAMETER_MSG pl_pdu) return octetstring
    with { extension "prototype(convert) encode(RAW)" };

    external function f_DIAMETER_Dec(in octetstring pl_oct) return DIAMETER_MSG
    with { extension "prototype(convert) decode(RAW)" };



group BasicTypesAndConstants{

  group GlobalConstants{

    // Default DIAMETER protocol : TCP
    const charstring c_defaultTransportProtocol := "TCP";

    const Address c_address := {'0001'O, {ipv4 := {127, 0, 0,1}}};

  }

  group DiameterConstants{

    const charstring c_sync1 := "sync1";

    const UInt8 c_versionId := 1;

    const Oct2 c_ipv4AddressFamily := '0001'O;
    const Oct2 c_ipv6AddressFamily := '0002'O;

    group ApplicationIdConstants {
      const UInt32 c_applIdCommonMsg :=  0;            //For DWR, DWA
      const UInt32 c_applId3GPPCxDx := 16777216;        //For 3GPPCxDx messages 16777216 (Vendor specific applications = 16777216 - 4294967294(0x01000000-0xfffffffe))
      const UInt32 c_applId3GPPSh := 16777217;        //For 3GPPSh messages
      const UInt32 c_applIdRx := 16777236;            //For Rx messages
      const UInt32 c_applIdGx := 16777238;            //For Gx messages
    } //end group ApplicationIdConstants
    group SMINetworkManagementPrivateEnterpriseCodes_VendorIDAVP {
      const UInt32 c_vendId3gpp := 10415;            //Vendor idFor 3GPP
    }//end group SMINetworkManagementPrivateEnterpriseCodes_VendorIDAVP
    group AVPCodeConstants {
      group AVPCodeConstantsRFC3855{
        const integer c_accounting_Realtime_Required_AVP_Code := 483;             //Ref: RFC3588 9.8.7.  Accounting-Realtime-Required AVP
        const integer c_accounting_Record_Number_AVP_Code := 485;                //Ref: RFC3588 9.8.3.  Accounting-Record-Number AVP
        const integer c_accounting_Record_Type_AVP_Code := 480;                     //Ref: RFC3588 9.8.1.  Accounting-Record-Type AVP
        const integer c_accounting_Sub_Session_Id_AVP_Code := 287;                //Ref: RFC3588 9.8.6.  Accounting-Sub-Session-Id AVP
        const integer c_acct_Application_Id_AVP_Code := 259;                     //Ref: RFC3588 6.9.  Acct-Application-Id AVP
        const integer c_acct_Interim_Interval_AVP_Code := 85;                     //Ref: RFC3588 9.8.2.  Acct-Interim-Interval
        const integer c_acct_Multi_Session_Id_AVP_Code := 50;                     //Ref: RFC3588 9.8.5.  Acct-Multi-Session-Id AVP
        const integer c_acct_Session_Id_AVP_Code := 44;                             //Ref: RFC3588 9.8.4.  Acct-Session-Id AVP
        const integer c_auth_Application_Id_AVP_Code := 258;                     //Ref: RFC3588 6.8.  Auth-Application-Id AVP
        const integer c_class_AVP_Code := 25;                                     //Ref: RFC3588 8.20.  Class AVP
        const integer c_destination_Host_AVP_Code := 293;                         //Ref: RFC3588 6.5.  Destination-Host AVP
        const integer c_destination_Realm_AVP_Code := 283;                         //Ref: RFC3588 6.6.  Destination-Realm AVP
        const integer c_disconnect_Cause_AVP_Code := 273;                         //Ref: RFC3588 5.4.3.  Disconnect-Cause AVP
        const integer c_error_Message_AVP_Code := 281;                             //Ref: RFC3588 7.3.  Error-Message AVP
        const integer c_error_Reporting_Host_AVP_Code := 294;                     //Ref: RFC3588 7.4.  Error-Reporting-Host AVP
        const integer c_event_Timestamp_AVP_Code := 55;                             //Ref: RFC3588 8.21.  Event-Timestamp AVP
        const integer c_failed_AVP_Code := 279;                                     //Ref: RFC3588 7.5.  Failed-AVP AVP
        const integer c_firmware_Revision_AVP_Code := 267;                         //Ref: RFC3588 5.3.4.  Firmware-Revision AVP
        const integer c_host_IP_Address_AVP_Code := 257;                         //Ref: RFC3588 5.3.5.  Host-IP-Address AVP
        const integer c_inband_Security_Id_AVP_Code := 299;                         //Ref: RFC3588 6.10.  Inband-Security-Id AVP
        const integer c_origin_Host_AVP_Code := 264;                             //Ref: RFC3588 6.3.  Origin-Host AVP
        const integer c_origin_Realm_AVP_Code := 296;                             //Ref: RFC3588 6.4.  Origin-Realm AVP
        const integer c_origin_State_Id_AVP_Code := 278;                         //Ref: RFC3588 8.16.  Origin-State-Id AVP
        const integer c_product_Name_AVP_Code := 269;                             //Ref: RFC3588 5.3.7.  Product-Name AVP
        const integer c_proxy_Host_AVP_Code := 280;                                 //Ref: RFC3588 6.7.3.  Proxy-Host AVP
        const integer c_proxy_Info_AVP_Code := 284;                                 //Ref: RFC3588 6.7.2.  Proxy-Info AVP
        const integer c_proxy_State_AVP_Code := 33;                                 //Ref: RFC3588 6.7.4.  Proxy-State AVP
        const integer c_re_Auth_Request_Type_AVP_Code := 285;                     //Ref: RFC3588 8.12.  Re-Auth-Request-Type AVP
        const integer c_redirect_Host_AVP_Code := 292;                             //Ref: RFC3588 6.12.  Redirect-Host AVP
        //          const integer c_redirect_Host_Cache_Time_AVP_Code := 9999;             //NOTE Ref: RFC3588 Redirect_Host_Cache_Time_AVP_Code is NOT defined.
        const integer c_redirect_Host_Usage_AVP_Code := 261;                     //Ref: RFC3588 6.13.  Redirect-Host-Usage AVP
        const integer c_result_Code_AVP_Code := 268;                             //Ref: RFC3588 7.1.  Result-Code AVP
        const integer c_route_Record_AVP_Code := 282;                             //Ref: RFC3588 6.7.1.  Route-Record AVP
        const integer c_session_Id_AVP_Code := 263;                                 //Ref: RFC3588 8.8.  Session-Id AVP
        const integer c_supported_Vendor_Id_AVP_Code := 265;                     //Ref; RFC3588 5.3.6.  Supported-Vendor-Id AVP
        const integer c_termination_Cause_AVP_Code := 295;                         //Ref: RFC3588 8.15.  Termination-Cause AVP
        const integer c_user_Name_AVP_Code := 1;                                 //Ref: RFC3588 8.14.  User-Name AVP
        const integer c_vendor_Id_AVP_Code := 266;                                 //Ref: RFC3588 5.3.3.  Vendor-Id AVP
        const integer c_vendor_Specific_Appl_Id_AVP_Code := 260;                 //Ref: RFC3588 6.11.  Vendor-Specific-Application-Id AVP
      }//end of group AVPCodeConstantsRFC3855
      group AVPCodeConstantsRFC4740{
        /* ******** Cx *******/
        const integer c_auth_Grace_Period_AVP_Code := 276;                         //Ref: RFC3588 8.10.  Auth-Grace-Period AVP
        const integer c_auth_Session_State_AVP_Code := 277;                         //Ref: RFC3588 8.11.  Auth-Session-State AVP
        const integer c_authorization_Lifetime_AVP_Code := 291;                     //Ref: RFC3588 8.9.  Authorization-Lifetime AVP
        const integer c_redirect_Max_Cache_Time_AVP_Code := 262;                    //Ref: RFC3588 6.14.  Redirect-Max-Cache-Time AVP
        const integer c_sIP_Accounting_Information_AVP_Code := 368;                 //Ref: RFC4740 9.1.  SIP-Accounting-Information AVP
        const integer c_sIP_Accounting_Server_URI_AVP_Code := 369;                 //Ref: RFC4740 9.1.1.  SIP-Accounting-Server-URI AVP
        const integer c_sIP_AOR_AVP_Code := 122;                                 //Ref: RFC4740 9.8.  SIP-AOR AVP
        const integer c_sIP_Auth_Data_Item_AVP_Code := 376;                         //Ref: RFC4740 9.5.  SIP-Auth-Data-Item AVP
        const integer c_sIP_Authenticate_AVP_Code := 379;                         //Ref: RFC4740 9.5.3.  SIP-Authenticate AVP
        const integer c_sIP_Authentication_Info_AVP_Code := 381;                  //Ref: RFC4740 9.5.5.  SIP-Authentication-Info AVP
        const integer c_sIP_Authentication_Scheme_AVP_Code := 377;                 //Ref: RFC4740 9.5.1.  SIP-Authentication-Scheme AVP
        const integer c_sIP_Authorization_AVP_Code := 380;                          //Ref: RFC4740 9.5.4.  SIP-Authorization AVP
        const integer c_sIP_Credit_Control_Server_URI_AVP_Code := 370;             //Ref: RFC4740 9.1.2.  SIP-Credit-Control-Server-URI AVP
        const integer c_sIP_Deregistration_Reason_AVP_Code := 383;                 //Ref: RFC4740 9.5.5.  SIP-Authentication-Info AVP
        const integer c_sIP_Item_Number_AVP_Code := 378;                         //Ref: RFC4740 9.5.2 SIP-Item-Number AVP
        const integer c_sIP_MandatoryCapability_AVP_Code := 373;                 //Ref: RFC4740 9.3.1.  SIP-Mandatory-Capability AVP
        const integer c_sIP_Method_AVP_Code := 393;                                 //Ref: RFC4740 9.14.  SIP-Method AVP
        const integer c_sIP_Number_Auth_Items_AVP_Code := 382;                     //Ref: RFC4740 9.6.  SIP-Number-Auth-Items AVP
        const integer c_sIP_OptionalCapability_AVP_Code := 374;                     //Ref: RFC4740 9.3.2.  SIP-Optional-Capability AVP
        const integer c_sIP_Reason_Code_AVP_Code := 384;                         //Ref: RFC4740 9.7.1.  SIP-Reason-Code AVP
        const integer c_sIP_Reason_Info_AVP_Code := 385;                          //Ref: RFC4740 9.7.2.  SIP-Reason-Info AVP
        const integer c_sIP_Server_Assignment_Type_AVP_Code := 375;                 //Ref: RFC4740 9.4.  SIP-Server-Assignment-Type AVP
        const integer c_sIP_Server_Capabilities_AVP_Code := 372;                 //Ref: RFC4740 9.3.  SIP-Server-Capabilities AVP
        const integer c_sIP_Server_URI_AVP_Code := 371;                             //Ref: RFC4740 9.2 SIP-Server-URI AVP
        const integer c_sIP_Supported_User_Data_Type_AVP_Code := 388;             //Ref: RFC4740 9.12.1.  SIP-User-Data-Type AVP
        const integer c_sIP_User_Authorization_Type_AVP_Code := 387;             //Ref: RFC4740 9.10.  SIP-User-Authorization-Type AVP
        const integer c_sIP_User_Data_Already_Available_AVP_Code := 392;         //Ref: RFC4740 9.13.  SIP-User-Data-Already-Available AVP
        const integer c_sIP_User_Data_AVP_Code := 389;                             //Ref: RFC4740 9.12.  SIP-User-Data AVP
        const integer c_sIP_User_Data_Contents_AVP_Code := 391;                     //Ref: RFC4740 9.12.2.  SIP-User-Data-Contents AVP
        const integer c_sIP_User_Data_Type_AVP_Code := 390;                         //Ref: RFC4740 9.12.1.  SIP-User-Data-Type AVP
        const integer c_sIP_Visited_Network_Id_AVP_Code := 386;                     //Ref: RFC4740 9.9.  SIP-Visited-Network-Id AVP
      }//end of group AVPCodeConstantsRFC4740
      group AVPCodeConstantsDigest{
        const integer c_digest_Algorithm_AVP_Code := 111;                         //Ref: RFC4590 3.9.  Digest-Algorithm Attribute
        const integer c_digest_Auth_Param_AVP_Code := 117;                         //Ref: RFC4590 3.15. Digest-Auth-Param Attribute
        const integer c_digest_CNonce_AVP_Code := 113;                             //Ref: RFC4590 3.11. Digest-CNonce Attribute
        const integer c_digest_Domain_AVP_Code := 119;                             //Ref: RFC4590 3.17. Digest-Domain Attribute
        const integer c_digest_Entity_Body_Hash_AVP_Code := 112;                 //Ref: RFC4590 3.10. Digest-Entity-Body-Hash Attribute
        const integer c_digest_HA1_AVP_Code := 121;                                 //Ref: RFC4590 3.19. Digest-HA1 Attribute
        const integer c_digest_Method_AVP_Code := 108;                             //Ref: RFC4590 3.6.  Digest-Method Attribute
        const integer c_digest_Nextnonce_AVP_Code := 107;                         //Ref: RFC4590
        const integer c_digest_Nonce_AVP_Code := 105;                             //Ref: RFC4590 3.3.  Digest-Nonce Attribute
        const integer c_digest_Nonce_Count_AVP_Code := 114;                         //Ref: RFC4590 3.12. Digest-Nonce-Count Attribute
        const integer c_digest_Opaque_AVP_Code := 116;                             //Ref: RFC4590 3.14. Digest-Opaque Attribute
        const integer c_digest_QoP_AVP_Code := 110;                                 //Ref: RFC4590 3.8.  Digest-Qop Attribute
        const integer c_digest_Realm_AVP_Code := 104;                             //Ref: RFC4590 3.2.  Digest-Realm Attribute
        const integer c_digest_Response_Auth_AVP_Code := 106;                     //Ref: RFC4590
        const integer c_digest_Response_AVP_Code := 103;                         //Ref: RFC4590
        const integer c_digest_Stale_AVP_Code := 120;                             //Ref: RFC4590 3.18. Digest-Stale Attribute
        const integer c_digest_URI_AVP_Code := 109;                                 //Ref: RFC4590 3.7.  Digest-URI Attribute
        const integer c_digest_Username_AVP_Code := 115;                         //Ref: RFC4590 3.13. Digest-Username Attribute
      }//end of group AVPCodeConstantsDigest
      group AVPCodeConstantsSh{
        const integer c_current_Location_AVP_Code := 707;                         //Ref: 3GPP TS 29.329 6.3.8 Current-Location AVP
        const integer c_data_Reference_AVP_Code := 703;                             //Ref: 3GPP TS 29.329 6.3.4 Data-Reference AVP
        const integer c_dSAI_Tag_AVP_Code := 711;                                 //Ref: 3GPP TS 29.329 6.3.18 DSAI-Tag AVP
        const integer c_experimental_Result_AVP_Code := 297;                     //Ref: 3GPP TS 29.229 6.2 Result-Code AVP values                 //  FUN 766300-PCL-030 :  Experimental-Result AVP shall be used for Sh/Dh errors.
        const integer c_experimental_Result_Code_AVP_Code := 298;                 //Ref: 3GPP TS 29.229 6.2 Result-Code AVP values
        const integer c_expiry_Time_AVP_Code := 709;                             //Ref: 3GPP TS 29.329 6.3.16 Expiry-Time
        const integer c_identity_Set_AVP_Code := 708;                             //Ref: 3GPP TS 29.329 6.3.10 Identity-Set AVP
        const integer c_mSISDN_AVP_Code := 701;                                     //Ref: 3GPP TS 29.329 6.3.2 MSISDN AVP
        const integer c_public_Identity_AVP_Code := 601;                         //Ref: 3GPP TS 29.329 6.3.15 Public-Identity AVP
        const integer c_requested_Domain_AVP_Code := 706;                         //Ref: 3GPP TS 29.329 6.3.7 Requested-Domain AVP
        const integer c_send_Data_Indication_AVP_Code := 710;                     //Ref: 3GPP TS 29.329 6.3.17 Send-Data-Indication AVP
        const integer c_server_Name_AVP_Code := 602;                             //Ref: 3GPP TS 29.329 6.3.9 Server-Name AVP
        const integer c_service_Indication_AVP_Code := 704;                         //Ref: 3GPP TS 29.329 6.3.5 Service-Indication AVP
        const integer c_subs_Req_Type_AVP_Code := 705;                             //Ref: 3GPP TS 29.329 6.3.6 Subs-Req-Type AVP
        const integer c_supported_Features_AVP_Code := 628;                         //Ref: 3GPP TS 29.329 6.3.11 Supported-Features AVP
        const integer c_user_Data_AVP_Code := 606;                                 //Ref: 3GPP TS 29.229 6.3.7 User-Data AVP
        const integer c_user_Identity_AVP_Code := 700;                             //Ref: 3GPP TS 29.329 6.3.1 User-Identity AVP
        const integer c_wildcarded_IMPU_AVP_Code := 636;                         //Ref: 3GPP TS 29.329 6.3.20 Wildcarded-IMPU AVP , 3GPP TS 29.229
        const integer c_wildcarded_PSI_AVP_Code := 634;                             //Ref: 3GPP TS 29.329 6.3.19 Wildcarded-PSI AVP , 3GPP TS 29.229
      }//end of group AVPCodeConstantsSh
      group AVPCodeConstantsRFC4005{
        const integer c_called_Station_Id_AVP_Code := 30;                         //Ref: RFC4005 4.5  Called_Station_Id AVP
        const integer c_framed_IP_Address_AVP_Code := 8;                         //Ref: RFC4005 6.11.1 Framed_IP_Address AVP
        const integer c_framed_IPv6_Prefix_AVP_Code := 97;                         //Ref: RFC4005 6.11.1 Framed_IPv6_Prefix AVP
      }//end of group AVPCodeConstantsRFC4005
      group AVPCodeConstantsRFC4006{
        /* ***** Rf and Ro  Ref: RFC4006   ***** */
        const integer c_rating_Group_AVP_Code := 433;                             //Ref: RFC4006 8.29. Rating-Group AVP
        const integer c_tariff_Time_Change_AVP_Code := 451;                         //Ref: RFC4006 8.20. Tariff-Time-Change AVP
        const integer c_cC_Correlation_Id_AVP_Code := 411;                         //Ref: RFC4006 8.1.  CC-Correlation-Id AVP
        const integer c_cC_Input_Octets_AVP_Code := 412;                         //Ref: RFC4006 8.24. CC-Input-Octets AVP
        const integer c_cC_Money_AVP_Code := 413;                                 //Ref: RFC4006 8.22. CC-Money AVP
        const integer c_cC_Output_Octets_AVP_Code := 414;                         //Ref: RFC4006 8.25. CC-Output-Octets AVP
        const integer c_cC_Request_Number_AVP_Code := 415;                         //Ref: RFC4006 8.2.  CC-Request-Number AVP
        const integer c_cC_Request_Type_AVP_Code := 416;                         //Ref: RFC4006 8.3.  CC-Request-Type AVP
        const integer c_cC_Service_Specific_Units_AVP_Code := 417;                 //Ref: RFC4006 8.26. CC-Service-Specific-Units AVP
        const integer c_cC_Session_Failover_AVP_Code := 418;                     //Ref: RFC4006 8.4.  CC-Session-Failover AVP
        const integer c_cC_Sub_Session_Id_AVP_Code := 419;                         //Ref: RFC4006 8.5.  CC-Sub-Session-Id AVP
        const integer c_cC_Time_AVP_Code := 420;                                 //Ref: RFC4006 8.21. CC-Time AVP
        const integer c_cC_Total_Octets_AVP_Code := 421;                         //Ref: RFC4006 8.23. CC-Total-Octets AVP
        const integer c_cC_Unit_Type_AVP_Code := 454;                             //Ref: RFC4006 8.32. CC-Unit-Type AVP
        const integer c_check_Balance_Result_AVP_Code := 422;                     //Ref: RFC4006 8.6.  Check-Balance-Result AVP 12.8.  Check-Balance-Result AVP
        const integer c_cost_Information_AVP_Code := 423;                         //Ref: RFC4006 8.7.  Cost-Information AVP
        const integer c_cost_Unit_AVP_Code := 424;                                 //Ref: RFC4006 8.12. Cost-Unit AVP
        const integer c_credit_Control_Failure_Handling_AVP_Code := 427;         //Ref: RFC4006 8.14. Credit-Control-Failure-Handling AVP
        const integer c_currency_Code_AVP_Code := 425;                             //Ref: RFC4006 8.11. Currency-Code AVP
        const integer c_direct_Debiting_Failure_Handling_AVP_Code := 428;         //Ref: RFC4006 8.15. Direct-Debiting-Failure-Handling AVP
        const integer c_exponent_AVP_Code := 429;                                 //Ref: RFC4006 8.9.  Exponent AVP
        const integer c_filter_Id_AVP_Code := 11;                                 //Ref: RFC4005 6.7.  Filter-Id AVP
        const integer c_final_Unit_Action_AVP_Code := 449;                         //Ref: RFC4006 8.35. Final-Unit-Action AVP
        const integer c_final_Unit_Indication_AVP_Code := 430;                     //Ref: RFC4006 8.34. Final-Unit-Indication AVP
        const integer c_g_S_U_Pool_Identifier_AVP_Code := 453;                     //Ref: RFC4006 8.31. G-S-U-Pool-Identifier AVP
        const integer c_g_S_U_Pool_Reference_AVP_Code := 457;                     //Ref: RFC4006 8.30. G-S-U-Pool-Reference AVP
        const integer c_granted_Service_Unit_AVP_Code := 431;                     //Ref: RFC4006 8.17. Granted-Service-Unit AVP
        const integer c_multiple_Services_Credit_Control_AVP_Code := 456;         //Ref: RFC4006 8.16. Multiple-Services-Credit-Control AVP
        const integer c_multiple_Services_Indicator_AVP_Code := 455;             //Ref: RFC4006 8.40. Multiple-Services-Indicator AVP
        const integer c_redirect_Address_Type_AVP_Code := 433;                     //Ref: RFC4006 8.38. Redirect-Address-Type AVP
        const integer c_redirect_Server_Address_AVP_Code := 435;                 //Ref: RFC4006 8.39. Redirect-Server-Address AVP
        const integer c_redirect_Server_AVP_Code := 434;                         //Ref: RFC4006 8.37. Redirect-Server AVP
        const integer c_requested_Action_AVP_Code := 436;                         //Ref: RFC4006 8.41. Requested-Action AVP
        const integer c_requested_Service_Unit_AVP_Code := 437;                     //Ref: RFC4006 8.18. Requested-Service-Unit AVP
        const integer c_restriction_Filter_Rule_AVP_Code := 438;                 //Ref: RFC4006 8.36. Restriction-Filter-Rule AVP
        const integer c_service_Context_Id_AVP_Code := 461;                         //Ref: RFC4006 8.42. Service-Context-Id AVP
        const integer c_service_Identifier_AVP_Code := 439;                         //Ref: RFC4006 8.28. Service-Identifier AVP
        const integer c_service_Parameter_Info_AVP_Code := 440;                     //Ref: RFC4006 8.43. Service-Parameter-Info AVP
        const integer c_service_Parameter_Type_AVP_Code := 441;                     //Ref: RFC4006 8.44. Service-Parameter-Type AVP
        const integer c_service_Parameter_Value_AVP_Code := 442;                 //Ref: RFC4006 8.45. Service-Parameter-Value AVP
        const integer c_subscription_Id_AVP_Code := 443;                         //Ref: RFC4006 8.46. Subscription-Id AVP
        const integer c_subscription_Id_Data_AVP_Code := 444;                     //Ref: RFC4006
        const integer c_subscription_Id_Type_AVP_Code := 450;                     //Ref: RFC4006 8.47. Subscription-Id-Type AVP
        const integer c_tariff_Change_Usage_AVP_Code := 452;                     //Ref: RFC4006 8.27. Tariff-Change-Usage AVP
        const integer c_unit_Value_AVP_Code := 445;                                 //Ref: RFC4006 8.8.  Unit-Value AVP
        const integer c_used_Service_Unit_AVP_Code := 446;                         //Ref: RFC4006 8.19. Used-Service-Unit AVP
        const integer c_user_Equipment_Info_AVP_Code := 458;                     //Ref: RFC4006 8.49. User-Equipment-Info AVP
        const integer c_user_Equipment_Info_Type_AVP_Code := 459;                 //Ref: RFC4006 8.50. User-Equipment-Info-Type AVP
        const integer c_user_Equipment_Info_Value_AVP_Code := 460;                 //Ref: RFC4006 8.51. User-Equipment-Info-Value AVP
        const integer c_validity_Time_AVP_Code := 448;                             //Ref: RFC4006 8.33. Validity-Time AVP
        const integer c_value_Digits_AVP_Code := 447;                             //Ref: RFC4006 8.10. Value-Digits AVP
      }//end of group AVPCodeConstantsRFC4006
      group AVPCodeConstantsRxTS129_214{
        const integer c_acceptable_Service_Info_AVP_Code := 526;                  //Ref: ETSI TS 129 214 Acceptable_Service_Info_AVP
        const integer c_access_Network_Charging_Address_AVP_Code := 501;         //Ref: ETSI TS 129 214 Access_Network_Charging_Address AVP
        const integer c_access_Network_Charging_Identifier_AVP_Code := 502;      //Ref: ETSI TS 129 214 Access_Network_Charging_Identifier AVP
        const integer c_access_Network_Charging_Identifier_Value_AVP_Code := 503;//Ref: ETSI TS 129 214 Access_Network_Charging_Identifier_Value AVP
        const integer c_aF_Application_Identifier_AVP_Code := 504;                 //Ref: ETSI TS 129 214 AF_Application_Identifier AVP
        const integer c_aF_Charging_Identifier_AVP_Code := 505;                     //Ref: ETSI TS 129 214 AF_Charging_Identifier AVP
        const integer c_aF_Signalling_Protocol_AVP_Code := 529;                    //Ref: ETSI TS 129 214 AF_Signalling_Protocol AVP
        const integer c_application_Service_Provider_Identity_AVP_Code := 532;   //Ref: ETSI TS 129 214 Application_Service_Provider_Identity AVP
        const integer c_codec_Data_AVP_Code := 524;                                 //Ref: ETSI TS 129 214 Codec_data AVP
        const integer c_flow_Description_AVP_Code := 507;                         //Ref: ETSI TS 129 214 Flow_Description AVP
        const integer c_flow_Number_AVP_Code := 509;                             //Ref: ETSI TS 129 214 Flow_Number AVP
        const integer c_flow_Status_AVP_Code := 511;                             //Ref: ETSI TS 129 214 Flow_Status AVP
        const integer c_flow_Usage_AVP_Code := 512;                              //Ref: ETSI TS 129 214 Flow_Usage AVP
        const integer c_flows_AVP_Code := 510;                                      //Ref: ETSI TS 129 214 Flows_AVP
        const integer c_max_Requested_Bandwidth_DL_AVP_Code := 515;                 //Ref: ETSI TS 129 214 FMax_Requested_Bandwidth_DL AVP
        const integer c_max_Requested_Bandwidth_UL_AVP_Code := 516;                 //Ref: ETSI TS 129 214 FMax_Requested_Bandwidth_UL AVP
        const integer c_media_Component_Description_AVP_Code := 517;              //Ref: ETSI TS 129 214 Media_Component_Decription_AVP
        const integer c_media_Component_Number_AVP_Code := 518;                  //Ref: ETSI TS 129 214 Media_Component_Number_AVP
        const integer c_media_Sub_Component_AVP_Code := 519;                      //Ref: ETSI TS 129 214 Media_Sub_Component_AVP
        const integer c_media_Type_AVP_Code := 520;                              //Ref: ETSI TS 129 214 Media_Type AVP
        const integer c_mPS_Identifier_AVP_Code := 528;                            //Ref: ETSI TS 129 214 MPS_Identifier AVP
        const integer c_reservation_Priority_AVP_Code := 458;                    //Ref: ETSI TS 129 214 Reservation_Priority AVP
        const integer c_rR_Bandwidth_AVP_Code := 521;                             //Ref: ETSI TS 129 214 RR Bandwidth_AVP
        const integer c_rS_Bandwidth_AVP_Code := 522;                             //Ref: ETSI TS 129 214 RS Bandwidth_AVP
        const integer c_service_Info_Status_AVP_Code := 527;                     //Ref: ETSI TS 129 214 Service_Info AVP
        const integer c_service_URN_AVP_Code := 525;                             //Ref: ETSI TS 129 214 Service_URN AVP
        const integer c_sIP_Forking_Indication_AVP_Code := 523;                     //Ref: ETSI TS 129 214 SIP_Forking_Indication AVP
        const integer c_specific_Action_AVP_Code := 513;                          //Ref: ETSI TS 129 214 Specific_Action AVP
        const integer c_sponsor_Identity_AVP_Code := 531;                        //Ref: ETSI TS 129 214 Sponsor_Identity AVP
        const integer c_sponsored_Connectivity_Data_AVP_Code := 530;                //Ref: ETSI TS 129 214 Sponsored_Connectivity_Data AVP
        const integer c_abort_Cause_AVP_Code := 500;                             //Ref: ETSI TS 129 214 Abort Cause AVP
      }//end of group AVPCodeConstantsRxTS129_214
      group AVPCodeConstantsGx_SdTS129_212{
        const integer c_access_Network_Charging_Identifier_Gx_AVP_Code := 1022;     //Ref: ETSI TS 129 212 Access_Network_Charging_Identifier_Gx_AVP
        const integer c_allocation_Retention_Priority_AVP_Code := 1034;             //Ref: ETSI TS 129 212 Allocation_Retention_Priority_AVP
        const integer c_aN_GW_Address_AVP_Code := 1050;                             //Ref: ETSI TS 129 212 AN_GW_Address_AVP
        const integer c_aPN_Aggregate_Max_Bitrate_DL_AVP_Code := 1040;             //Ref: ETSI TS 129 212 APN_Aggregate_Max_Bitrate_DL_AVP
        const integer c_aPN_Aggregate_Max_Bitrate_UL_AVP_Code := 1041;             //Ref: ETSI TS 129 212 Aggregate_Max_Bitrate_UL_AVP
        const integer c_bearer_Control_Mode_AVP_Code := 1023;                     //Ref: ETSI TS 129 212 Bearer_Control_Mode_AVP
        const integer c_bearer_Identifier_AVP_Code := 1020;                         //Ref: ETSI TS 129 212 Bearer_Identifier_AVP
        const integer c_bearer_Operation_AVP_Code := 1021;                         //Ref: ETSI TS 129 212 Bearer_Operation_AVP
        const integer c_bearer_Usage_AVP_Code := 1000;                             //Ref: ETSI TS 129 212 Bearer_Usage_AVP
        const integer c_charging_Rule_Install_AVP_Code := 1001;                     //Ref: ETSI TS 129 212 Charging_Rule_Install_AVP
        const integer c_charging_Rule_Remove_AVP_Code := 1002;                     //Ref: ETSI TS 129 212 Charging_Rule_Remove_AVP
        const integer c_charging_Rule_Definition_AVP_Code := 1003;                 //Ref: ETSI TS 129 212 Charging_Rule_Definition_AVP
        const integer c_charging_Rule_Base_Name_AVP_Code := 1004;                 //Ref: ETSI TS 129 212 Charging_Rule_Base_Name_AVP
        const integer c_charging_Rule_Name_AVP_Code := 1005;                     //Ref: ETSI TS 129 212 Charging_Rule_Name_AVP
        const integer c_charging_Rule_Report_AVP_Code := 1018;                     //Ref: ETSI TS 129 212 Charging_Rule_Report_AVP
        const integer c_charging_Correlation_Indicator_AVP_Code := 1073;         //Ref: ETSI TS 129 212 Charging_Correlation_Indicator_AVP
        const integer c_coA_IP_Address_AVP_Code := 1035;                         //Ref: ETSI TS 129 212 CoA_IP_Address_AVP
        const integer c_coA_Information_AVP_Code := 1039;                         //Ref: ETSI TS 129 212 CoA_Information_AVP
        const integer c_cSG_Information_Reporting_AVP_Code := 1071;                 //Ref: ETSI TS 129 212 CSG_Information_Reporting_AVP
        const integer c_default_EPS_Bearer_QoS_AVP_Code := 1049;                 //Ref: ETSI TS 129 212 Default_EPS_Bearer_QoS_AVP
        const integer c_event_Report_Indication_AVP_Code := 1033;                 //Ref: ETSI TS 129 212 Event_Report_Indication_AVP
        const integer c_event_Trigger_AVP_Code := 1006;                             //Ref: ETSI TS 129 212 Event_Trigger_AVP
        const integer c_flow_Direction_AVP_Code := 1080;                         //Ref: ETSI TS 129 212 Flow_Direction_AVP
        const integer c_flow_Information_AVP_Code := 1058;                         //Ref: ETSI TS 129 212 Flow_Information_AVP
        const integer c_flow_Label_AVP_Code := 1057;                             //Ref: ETSI TS 129 212 Flow_Label_AVP
        const integer c_iP_CAN_Type_AVP_Code := 1027;                             //Ref: ETSI TS 129 212 IP_CAN_Type_AVP
        const integer c_guaranteed_Bitrate_DL_AVP_Code := 1025;                     //Ref: ETSI TS 129 212 Guaranteed_Bitrate_DL_AVP
        const integer c_guaranteed_Bitrate_UL_AVP_Code := 1026;                     //Ref: ETSI TS 129 212 Guaranteed_Bitrate_UL_AVP
        const integer c_maximum_Bandwidth_AVP_Code := 1082;                         //Ref: ETSI TS 129 212 Maximum_Bandwidth_AVP
        const integer c_max_Supported_Bandwidth_DL_AVP_Code := 1083;             //Ref: ETSI TS 129 212 Max_Supported_Bandwidth_DL_AVP
        const integer c_max_Supported_Bandwidth_UL_AVP_Code := 1084;             //Ref: ETSI TS 129 212 Max_Supported_Bandwidth_UL_AVP
        const integer c_metering_Method_AVP_Code := 1007;                         //Ref: ETSI TS 129 212 Metering_Method_AVP
        const integer c_monitoring_Key_AVP_Code := 1066;                         //Ref: ETSI TS 129 212 Monitoring_Key_AVP
        const integer c_Network_Request_Support_AVP_Code := 1024;                 //Ref: ETSI TS 129 212 Network_Request_Support_AVP
        const integer c_offline_AVP_Code := 1008;                                 //Ref: ETSI TS 129 212 Offline_AVP
        const integer c_online_AVP_Code := 1009;                                 //Ref: ETSI TS 129 212 Online_AVP
        const integer c_packet_Filter_Content_AVP_Code := 1059;                     //Ref: ETSI TS 129 212 Packet_Filter_Content_AVP
        const integer c_packet_Filter_Identifier_AVP_Code := 1060;                 //Ref: ETSI TS 129 212 Packet_Filter_Identifier_AVP
        const integer c_packet_Filter_Information_AVP_Code := 1061;                 //Ref: ETSI TS 129 212 Packet_Filter_Information_AVP
        const integer c_packet_Filter_Operation_AVP_Code := 1062;                 //Ref: ETSI TS 129 212 Packet_Filter_Operation_AVP
        const integer c_packet_Filter_Usage_AVP_Code := 1072;                     //Ref: ETSI TS 129 212 Packet_Filter_Usage_AVP
        const integer c_pDN_Connection_ID_AVP_Code := 1065;                         //Ref: ETSI TS 129 212 PDN_Connection_ID_AVP
        const integer c_precedence_AVP_Code := 1010;                             //Ref: ETSI TS 129 212 Precedence_AVP
        const integer c_pre_emption_Capability_AVP_Code := 1047;                 //Ref: ETSI TS 129 212 Pre_emption_Capability_AVP
        const integer c_pre_emption_Vulnerability_AVP_Code := 1048;                 //Ref: ETSI TS 129 212 Pre_emption_Vulnerability_AVP
        const integer c_priority_Level_AVP_Code := 1046;                         //Ref: ETSI TS 129 212 Priority_Level_AVP
        const integer c_reporting_Level_AVP_Code := 1011;                         //Ref: ETSI TS 129 212 Reporting_Level_AVP
        const integer c_routing_Filter_AVP_Code := 1078;                         //Ref: ETSI TS 129 212 Routing_Filter_AVP
        const integer c_routing_IP_Address_AVP_Code := 1079;                     //Ref: ETSI TS 129 212 Routing_IP_Address_AVP
        const integer c_routing_Rule_Definition_AVP_Code := 1076;                 //Ref: ETSI TS 129 212 Routing_Rule_Definition_AVP
        const integer c_routing_Rule_Identifier_AVP_Code := 1077;                 //Ref: ETSI TS 129 212 Routing_Rule_Identifier_AVP
        const integer c_routing_Rule_Install_AVP_Code := 1081;                     //Ref: ETSI TS 129 212 Routing_Rule_Install_AVP
        const integer c_routing_Rule_Remove_AVP_Code := 1075;                     //Ref: ETSI TS 129 212 Routing_Rule_Remove_AVP
        const integer c_pCC_Rule_Status_AVP_Code := 1019;                         //Ref: ETSI TS 129 212 PCC_Rule_Status_AVP
        const integer c_session_Release_Cause_AVP_Code := 1045;                     //Ref: ETSI TS 129 212 Session_Release_Cause_AVP
        const integer c_qoS_Class_Identifier_AVP_Code := 1028;                     //Ref: ETSI TS 129 212 QoS_Class_Identifier_AVP
        const integer c_qoS_Information_AVP_Code := 1016;                         //Ref: ETSI TS 129 212 QoS_Information_AVP
        const integer c_qoS_Negotiation_AVP_Code := 1029;                         //Ref: ETSI TS 129 212 QoS_Negotiation_AVP
        const integer c_qos_Upgrade_AVP_Code := 1030;                             //Ref: ETSI TS 129 212 Qos_Upgrade_AVP
        const integer c_resource_Allocation_Notification_AVP_Code := 1063;         //Ref: ETSI TS 129 212 Resource_Allocation_Notification_AVP
        const integer c_rule_Failure_Code_AVP_Code := 1031;                         //Ref: ETSI TS 129 212 Rule_Failure_Code_AVP
        const integer c_security_Parameter_Index_AVP_Code := 1056;                 //Ref: ETSI TS 129 212 Security_Parameter_Index_AVP
        const integer c_tFT_Filter_AVP_Code := 1012;                             //Ref: ETSI TS 129 212 TFT_Filter_AVP
        const integer c_tFT_Packet_Filter_Information_AVP_Code := 1013;             //Ref: ETSI TS 129 212 TFT_Packet_Filter_Information_AVP
        const integer c_toS_Traffic_Class_AVP_Code := 1014;                         //Ref: ETSI TS 129 212 ToS_Traffic_Class_AVP
        const integer c_tunnel_Header_Filter_AVP_Code := 1036;                     //Ref: ETSI TS 129 212 Tunnel_Header_Filter_AVP
        const integer c_tunnel_Header_Length_AVP_Code := 1037;                     //Ref: ETSI TS 129 212 Tunnel_Header_Length_AVP
        const integer c_tunnel_Information_AVP_Code := 1038;                     //Ref: ETSI TS 129 212 Tunnel_Information_AVP
        const integer c_rAT_Type_AVP_Code := 1032;                                 //Ref: ETSI TS 129 212 RAT_Type_AVP
        const integer c_revalidation_Time_AVP_Code := 1042;                         //Ref: ETSI TS 129 212 Revalidation_Time_AVP
        const integer c_rule_Activation_Time_AVP_Code := 1043;                     //Ref: ETSI TS 129 212 Rule_Activation_Time_AVP
        const integer c_usage_Monitoring_Information_AVP_Code := 1067;             //Ref: ETSI TS 129 212 Usage_Monitoring_Information_AVP
        const integer c_rule_DeActivation_Time_AVP_Code := 1044;                 //Ref: ETSI TS 129 212 Rule_DeActivation_Time_AVP
        const integer c_usage_Monitoring_Level_AVP_Code := 1068;                 //Ref: ETSI TS 129 212 Usage_Monitoring_Level_AVP
        const integer c_usage_Monitoring_Report_AVP_Code := 1069;                 //Ref: ETSI TS 129 212 Usage_Monitoring_Report_AVP
        const integer c_usage_Monitoring_Support_AVP_Code := 1070;                 //Ref: ETSI TS 129 212 Usage_Monitoring_Support_AVP
      }//end of group AVPCodeConstantsGx_SdTS129_214
      group AVPCodeConstantsTS129_061{
        const integer c_rAI_AVP_Code := 909;                                     //Ref: ETSI TS 129 061 RAI_AVP
        const integer c_threeGPP_SGSN_Address_AVP_Code := 6;                     //Ref: ETSI TS 129 061 ThreeGPP_SGSN_Address_AVP
        const integer c_threeGPP_SGSN_IPv6_Address_AVP_Code := 15;                 //Ref: ETSI TS 129 061 ThreeGPP_SGSN_IPv6_Address_AVP
        const integer c_threeGPP_User_Location_Info_AVP_Code := 22;                 //Ref: ETSI TS 129 061 ThreeGPP_User_Location_Info_AVP
        const integer c_threeGPP_MS_TimeZone_AVP_Code := 23;                     //Ref: ETSI TS 129 061 ThreeGPP_MS_TimeZone_AVP
        const integer c_threeGPP_RAT_Type_AVP_Code := 21;                         //Ref: ETSI TS 129 061 ThreeGPP_RAT_Type_AVP
        const integer c_threeGPP_SGSN_MCC_MNC_AVP_Code := 18;                     //Ref: ETSI TS 129 061 ThreeGPP_SGSN_MCC_MNC_AVP

      }//end of group AVPCodeConstantsTS129_061
      group AVPCodeConstantsTS129_272{
        const integer c_trace_Data_AVP_Code := 1485;                     //Ref: ETSI TS 129 272 Trace_Data_AVP
        const integer c_trace_Reference_AVP_Code := 1459;                 //Ref: ETSI TS 129 272 Trace_Reference_AVP
        const integer c_trace_Depth_AVP_Code := 1462;                     //Ref: ETSI TS 129 272 Trace_Depth_AVP
        const integer c_trace_NE_Type_List_AVP_Code := 1463;             //Ref: ETSI TS 129 272 Trace_NE_Type_List_AVP
        const integer c_trace_Event_List_AVP_Code := 1465;                 //Ref: ETSI TS 129 272 Trace_Event_List_AVP
        const integer c_trace_Collection_Entity_AVP_Code := 1452;         //Ref: ETSI TS 129 272 Trace_Data_AVP
        const integer c_trace_Interface_List_AVP_Code := 1464;             //Ref: ETSI TS 129 272 Trace_Interface_List_AVP
        const integer c_oMC_Id_AVP_Code := 1466;                         //Ref: ETSI TS 129 272 OMC_Id_AVP
        const integer c_mDT_Configuration_AVP_Code := 1622;                 //Ref: ETSI TS 129 272 MDT_Configuration_AVP
        const integer c_Job_Type_AVP_Code := 1623;                         //Ref: ETSI TS 129 272 Job_Type_AVP
        const integer c_area_Scope_AVP_Code := 1624;                     //Ref: ETSI TS 129 272 Area_Scope_AVP
        const integer c_list_Of_Measurements_AVP_Code := 1625;             //Ref: ETSI TS 129 272 List_Of_Measurements_AVP
        const integer c_reporting_Trigger_AVP_Code := 1626;                 //Ref: ETSI TS 129 272 Reporting_Trigger_AVP
        const integer c_report_Interval_AVP_Code := 1627;                 //Ref: ETSI TS 129 272 Report_Interval_AVP
        const integer c_report_Amount_AVP_Code := 1628;                     //Ref: ETSI TS 129 272 Report_Amount_AVP
        const integer c_event_Treshold_RSRP_AVP_Code := 1629;             //Ref: ETSI TS 129 272 Event_Treshold_RSRP_AVP
        const integer c_event_Treshold_RSRQ_AVP_Code := 1630;             //Ref: ETSI TS 129 272 Event_Treshold_RSRQ_AVP
        const integer c_logging_Interval_AVP_Code := 1631;                 //Ref: ETSI TS 129 272 Logging_Interval_AVP
        const integer c_logging_Duration_AVP_Code := 1632;                 //Ref: ETSI TS 129 272 Logging_Duration_AVP
        const integer c_cell_Global_Identity_AVP_Code := 1604;             //Ref: ETSI TS 129 272 Cell_Global_Identity_AVP
        const integer c_e_UTRAN_Cell_Global_Identity_AVP_Code := 1602;     //Ref: ETSI TS 129 272 E_UTRAN_Cell_Global_Identity_AVP
        const integer c_routing_Area_Identity_AVP_Code := 1605;             //Ref: ETSI TS 129 272 Routing_Area_Identity_AVP
        const integer c_location_Area_Identity_AVP_Code := 1606;         //Ref: ETSI TS 129 272 Location_Area_Identity_AVP
        const integer c_tracking_Area_Identity_AVP_Code := 1603;         //Ref: ETSI TS 129 272 Tracking_Area_Identity_AVP

      }//end of group AVPCodeConstantsTS129_272
      group AVPCodeConstantsTS129_299{
        const integer c_charging_Information_AVP_Code := 61;                             //Ref: ETSI TS 129 299 Charging_Information_AVP
        const integer c_primary_Event_Charging_Function_Name_AVP_Code := 619;             //Ref: ETSI TS 129 299 Primary_Event_Charging_Function_Name_AVP
        const integer c_secondary_Event_Charging_Function_Name_AVP_Code := 620;         //Ref: ETSI TS 129 299 Secondary_Event_Charging_Function_Name_AVP
        const integer c_primary_Charging_Collection_Function_Name_AVP_Code := 621;     //Ref: ETSI TS 129 299 Primary_Charging_Collection_Function_Name_AVP
        const integer c_secondary_Charging_Collection_Function_Name_AVP_Code := 622;     //Ref: ETSI TS 129 299 Secondary_Charging_Collection_Function_Name_AVP

      }//end of group AVPCodeConstantsTS129_299
      group AVPCodeConstantsTS132_299{

        const integer c_user_CSG_Information_AVP_Code := 2319;     //Ref: ETSI TS 132 299 User_CSG_Information_AVP
        const integer c_cSG_Id_AVP_Code := 1437;                     //Ref: ETSI TS 132 299 CSG_Id_AVP
        const integer c_cSG_Access_Mode_AVP_Code := 2317;             //Ref: ETSI TS 132 299 CSG_Access_Mode_AVP
        const integer c_cSG_Membership_Indication_AVP_Code := 2318;//Ref: ETSI TS 132 299 CSG_Membership_Indication_AVP

      }//end of group AVPCodeConstantsTS132_299
      group AVPCodeConstantsX_S0057_1{

        const integer c_threeGPP2_BSID_AVP_Code := 5535;             //Ref: X.S0057-1 ThreeGPP2_BSID_AVP

      }//end of group AVPCodeConstantsX_S0057_1
      group AVPCodeConstantsTS283_034{

        const integer c_logical_Access_ID_AVP_Code := 302;         //Ref: TS283_034 ThreeGPP2_BSID_AVP
        const integer c_physical_Access_ID_AVP_Code := 313;         //Ref: TS283_034 Physical_Access_ID_AVP

      }//end of group AVPCodeConstantsTS283_034

    } //end group AVPCodeConstants
  }

  group NumberTypes {
    // below constants and types are not defined in library libCommon
    const integer     c_uInt64Max := 4611686018427387903;
    const integer     c_int64Min := -2305843009213693952;
    const integer     c_int64Max := 2305843009213693951;

    type integer    Int64  (c_int31Min .. c_int31Max) with {
      //  variant "length=64"
      variant "FIELDLENGTH(64)" 

    };
    type integer     UInt64 (0 .. c_uInt64Max) with {
      // variant "length=64;unsigned"

      variant "COMP(nosign)";
      variant "FIELDLENGTH(64)"

    };

    type float FLOAT32
    with {
      variant "FIELDLENGTH(32)" 
    }
    //not supported so far but not used as well
    type float FLOAT64;

    type record length (4) of UInt8  IPv4Addr;

    type record length (8) of UInt16 IPv6Addr;

    type /*universal*/ charstring UTF8String
    with {
      // variant "charset=UTF-8;use=com.testingtech.ttcn.tci.codec.CodecHelper;encode=CodecHelper.encodeUtf8stringWithPadding();decode=CodecHelper.decodeUtf8stringWithPadding()"
      variant "" 
    }

  }// end group NumberTypes

}// end group BasicTypes

group HeaderAndBodyTypes
{
  group HeaderTypes{
    /* This group contains the type definitions of the messages. */


    // Diameter Header Record.
    type record DiameterHeader {
      UInt8                 version,
      UInt24              msglen,   //message length
      Command_Flags          cmdflags, //command flags
      Command_Code         cmdcode,  //command code
      UInt32              applid,   //application id
      UInt32                hopid,    //hop_by_hop_id previous optional
      UInt32               endid     //end_to_end_id previous optional
    }

  }//end group HeaderTypes

  group AVPTypes{
    group AVP_Base_Types{
      //AVP Data Union(Integer,String,Record of and Grouped).

      type record GROUPED{
        AVP_Header      aVP_Header,
        set of AVP_Type aVP_Type
      };

      type union AVP_Data {
        /* Ref: RFC3588 p.4.1 Basic Avp Data Formats */
        octetstring oCTETSTRING,
        charstring     cHARSTRING,
        Int32       iNTEGER32,
        Int64       iNTEGER64,
        UInt32      uNSIGNED32,
        UInt64      uNSIGNED64,
        FLOAT32     fLOAT32,
        FLOAT64     fLOAT64,
        GROUPED     gROUPED
      }

      /* Ref: FRC3588 p.4.3 Derived Avp Data Formats */
      //changed addressFamily added !
      type record Address{
        Oct2 addressFamily,
        IpAddress ipAddress
      } with { variant "" }
      /* with {
      variant "use=com.testingtech.ttcn.tci.codec.CodecHelper"
      variant (addressFamily) "intTag='addressFamily'"
      variant (ipAddress) "encode=CodecHelper.encodeIpAddressWithPadding();decode=CodecHelper.decodeIpAddressWithPadding()"
      }*/
      type union IpAddress {
        IPv4Addr ipv4,
        IPv6Addr ipv6
      }
      with {
        // variant (ipv4) "fieldPresent=getIntTag('addressFamily')==1"
        // variant (ipv6) "fieldPresent=getIntTag('addressFamily')==2"
        variant "CROSSTAG (	ipv4, addressFamily = '0001'O; 
        ipv6, addressFamily = '0002'O)";

      }
      //RFC3588 chapter 4.3:
      // The Address format is derived from the OctetString AVP Base
      // Format.  It is a discriminated union, representing, for example a
      // 32-bit (IPv4) [IPV4] or 128-bit (IPv6) [IPV6] address, most
      // significant octet first.  The first two octets of the Address
      // AVP represents the AddressType, which contains an Address Family
      // defined in [IANAADFAM].  The AddressType is used to discriminate
      // the content and format of the remaining octets.
      // -> check if IPv4(1) or IPv6(2) (http://www.iana.org/assignments/address-family-numbers/address-family-numbers.xml)

      //type UInt64 Time; //changed
      type UInt32 Time;

      /* Diameter_Identity is FQDN - Fully Qualified Domain Name.
      * host
      *  |  2nd level domain
      *  |      |     top level domain
      * www.something.com
      *  host
      *  |  2nd level domain
      *  |      |      3rd level domain
      *  |      |          |      top level domain
      * www.somtehing1.something2.com
      * host
      */
      type charstring Diameter_Identity
      /*  with {
      variant "use=com.testingtech.ttcn.tci.codec.CodecHelper;encode=CodecHelper.encodeCharstringWithPadding();decode=CodecHelper.decodeCharstringWithPadding()"
      //                    variant "length=getIntTag('aVP_len')"
      }*/
      type record GenericParam{
        /* pid :  ";transport=" or ";protocol="
        * paramValue :
        *     - for pid ";transport=" paramValue can be "tcp" / "udp" / "sctp"
        *  - for pid ";protocol=" paramValue can be "diameter" / "radius" / "tacacs+"
        *  */
        charstring    pid optional,
        charstring    paramValue optional
      }

      type set of GenericParam SemicolonParam_List;
      //       type record DiameterURI{
      /*     The DiameterURI MUST follow the Uniform Resource Identifiers (URI)
      *     syntax [URI] rules specified below:
      *     No transport security used : "aaa://" FQDN [ port ] [ transport ] [ protocol ]
      *     Transport security used    : "aaas://" FQDN [ port ] [ transport ] [ protocol ]
      *          - port = ":" 1*DIGIT       (If absent, the default Diameter port (3868) is assumed.)
      *       - transport = ";transport=" transport-protocol
      *           transport-protocol = ( "tcp" / "sctp" / "udp" )
      *       - protocol = ";protocol=" aaa-protocol (If absent, the default AAA protocol is diameter.)
      *             aaa-protocol       = ( "diameter" / "radius" / "tacacs+" )
      *    Examples:
      *         aaa://host.example.com;transport=tcp
      *         aaa://host.example.com;protocol=diameter
      *        aaa://host.example.com:6666;protocol=diameter
      *         aaa://host.example.com:6666;transport=tcp;protocol=diameter
      *         aaa://host.example.com:1813;transport=udp;protocol=radius
      */
      //                    charstring        scheme,  // "aaa://"
      //                    UserInfo        userInfo,
      //                    HostPort        hostPort optional,
      //                    SemicolonParam_List    urlParameters optional

      //charstring scheme, // "aaa://"
      //charstring diameterId_FQDN,
      //UInt16 portField optional,
      //SemicolonParam_List    uriParameters optional
      /*                charstring scheme ("aaa", "aaas")  length (3..4),
      charstring diameterId_FQDN,
      integer portField optional,
      charstring transport ("tcp", "sctp", "udp") length (3..4) optional,
      charstring protocol ("diameter", "radius", "tacacs+") length (6..8) optional
      }
      */

      type charstring DiameterURI;





      /*        type record IP_AddressMask{
      UTF8String addr,
      UTF8String mask optional,
      UTF8String ports optional
      }

      with {
      variant "use=com.testingtech.ttcn.tci.codec.CodecHelper;encode=CodecHelper.encodeIP_AddressMask();decode=CodecHelper.decodeIP_AddressMask()"

      }*/

      //   type record IPFilterRule_Type{
      //RFC3588
      /*                

      IPFilterRule filters MUST follow the format:

      action dir proto from src to dst [options]


      Action actions      permit - Allow packets that match the rule.
      deny   - Drop packets that match the rule.

      Dir dir          "in" is from the terminal, "out" is to the
      terminal.

      Proto proto        An IP protocol specified by number.  The "ip"
      keyword means any protocol will match.
      Aaddr_mask
      src and dst  <address/mask> [ports]
      */
      /*              UTF8String    action_,
      UTF8String    direction,
      UTF8String    proto,
      IP_AddressMask src, //including optional ports
      IP_AddressMask dst, //including optional ports
      UTF8String options optional
      }
      //TODO Parser and Codec needed here  (first version do not include this)
      with {
      variant "use=com.testingtech.ttcn.tci.codec.CodecHelper;encode=CodecHelper.encodeIPFilterRule_Type();decode=CodecHelper.decodeIPFilterRule_Type()"

      }*/

      type charstring IP_AddressMask ;
      
      type charstring IPFilterRule_Type; 



      type UInt32 AVP_Code (1..c_uInt32Max)
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      //type Bit8 AVP_Flags;
      type record AVP_Flags{
        Bit1    v_bit,
        Bit1    m_bit,
        Bit1    p_bit,
        Bit5    reserved_bits
      }
      /*    with {
      variant (v_bit) "intTag='v_bit'"
      }
      */
      type UInt24 AVP_Length;
      type integer AVP_Vendor_ID
      with {
        // variant "length=32;unsigned"
        variant "COMP(nosign)";
        variant "FIELDLENGTH(32)"

      }

      type record AVP_Header{
        AVP_Code           aVP_Code,
        AVP_Flags          aVP_flags,
        AVP_Length         aVP_len,
        AVP_Vendor_ID      aVP_vid     optional
      }
      with {
        //The AVP Length field is three octets, and indicates the number of
        //      octets in this AVP including the AVP Code, AVP Length, AVP Flags,
        //      Vendor-ID field (if present) and the AVP data.
        //variant "use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_len) "intTag='aVP_len',value-4-1-3;intTag='aVP_len_tot';condition=CodecHelper.storeLen(dec)" //wert - 4=AVP Code - 1=AVP Flags - 3=AVP Length
        //variant (aVP_vid) "fieldPresent=getIntTag('v_bit')==1;intTag='aVP_len',getIntTag('aVP_len')-4"
        //oder variant (aVP_vid) "fieldPresent=bits(32, 1, 1);intTag='aVP_len',getIntTag('aVP_len')-4"
        //und hier ueberpruefen wir, ob der wert 1 ist, wenn ja, dann ist das optional feld aVP_vid da, dann subtrahieren wir 4 byte von der laenge
        //so hat aVP_len den wert der laenge von aVP_Data, 0 oder mehr

        variant (aVP_vid)  "PRESENCE(aVP_flags.v_bit = '1'B)" ;

      }

      type record AVP_Type {
        AVP_Header         aVP_Header,
        AVP_Data           aVP_Data    optional
      }
      with {
        //variant "use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //as no differentiation can be done on the received AVP data type, always decode as octetstring
        //                    variant (aVP_Data) "fieldPresent=getIntTag('aVP_len')>0;decode=CodecHelper.decodeAVP_Data();condition=CodecHelper.leaveScope()"
        //variant (aVP_Data) "fieldPresent=CodecHelper.isAvailable();decode=CodecHelper.decodeAVP_Data();condition=CodecHelper.leaveScope()"

        variant "PADDING(dword32)"
        variant (aVP_Header) "LENGTHTO(aVP_Header, aVP_Data)"
        variant (aVP_Header) "LENGTHINDEX(aVP_len)"
      }
    }//end group AVP_Base_Types

    group AVP_RFC3588_Types{

      type enumerated Result_Code_Type{
        DIAMETER_DUMMY_E (0),

        DIAMETER_MULTI_ROUND_AUTH_E (1001),

        DIAMETER_SUCCESS_E (2001),
        DIAMETER_LIMITED_SUCCESS_E (2002),

        DIAMETER_COMMAND_UNSUPPORTED_E (3001),
        DIAMETER_UNABLE_TO_DELIVER_E (3002),
        DIAMETER_REALM_NOT_SERVED_E (3003),
        DIAMETER_TOO_BUSY_E (3004),
        DIAMETER_LOOP_DETECTED_E (3005),
        DIAMETER_REDIRECT_INDICATION_E (3006),
        DIAMETER_APPLICATION_UNSUPPORTED_E (3007),
        DIAMETER_INVALID_HDR_BITS_E (3008),
        DIAMETER_INVALID_AVP_BITS_E (3009),
        DIAMETER_UNKNOWN_PEER_E (3010),

        DIAMETER_AUTHENTICATION_REJECTED_E (4001),
        DIAMETER_OUT_OF_SPACE_E (4002),
        DIAMETER_ELECTION_LOST_E (4003),

        DIAMETER_AVP_UNSUPPORTED_E (5001),
        DIAMETER_UNKNOWN_SESSION_ID_E (5002),
        DIAMETER_AUTHORIZATION_REJECTED_E (5003),
        DIAMETER_INVALID_AVP_VALUE_E (5004),
        DIAMETER_MISSING_AVP_E (5005),
        DIAMETER_RESOURCES_EXCEEDED_E (5006),
        DIAMETER_CONTRADICTING_AVPS_E (5007),
        DIAMETER_AVP_NOT_ALLOWED_E (5008),
        DIAMETER_AVP_OCCURS_TOO_MANY_TIMES_E (5009),
        DIAMETER_NO_COMMON_APPLICATION_E (5010),
        DIAMETER_UNSUPPORTED_VERSION_E (5011),
        DIAMETER_UNABLE_TO_COMPLY_E (5012),
        DIAMETER_INVALID_BIT_IN_HEADER_E (5013),
        DIAMETER_INVALID_AVP_LENGTH_E (5014),
        DIAMETER_INVALID_MESSAGE_LENGTH_E (5015),
        DIAMETER_INVALID_AVP_BIT_COMBO_E (5016),
        DIAMETER_NO_COMMON_SECURITY_E (5017)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Re_Auth_Req_Type{
        //Ref: RFC3588 8.12.  Re-Auth-Request-Type AVP
        AUTHORIZE_ONLY_E (0),
        AUTHORIZE_AUTHENTICATE_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Redirect_Host_Usage_Type{
        DONT_CACHE_E (0),
        ALL_SESSION_E (1),
        ALL_REALM_E (2),
        REALM_AND_APPLICATION_E (3),
        ALL_APPLICATION_E (4),
        ALL_HOST_E (5),
        ALL_USER_E  (6)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Acc_Record_Type{
        EVENT_RECORD_E (1),
        START_RECORD_E  (2),
        INTERIM_RECORD_E (3),
        STOP_RECORD_E    (4)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Acc_Realtime_Req_Type{
        DELIVER_AND_GRANT_E (1),
        GRANT_AND_STORE_E (2),
        GRANT_AND_LOSE_E (3)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Termination_Cause_Type{
        DIAMETER_LOGOUT_E (1),
        DIAMETER_SERVICE_NOT_PROVIDED_E (2),
        DIAMETER_BAD_ANSWER_E (3),
        DIAMETER_ADMINISTRATIVE_E (4),
        DIAMETER_LINK_BROKEN_E (5),
        DIAMETER_AUTH_EXPIRED_E (6),
        DIAMETER_USER_MOVED_E (7),
        DIAMETER_SESSION_TIMEOUT_E (8)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Disconnect_Cause_Type{
        REBOOTING_E (0),
        BUSY_E (1),
        DO_NOT_WANT_TO_TALK_TO_YOU_E (2)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Auth_Session_State_Type{
        STATE_MAINTAINED_E (0),
        NO_STATE_MAINTAINED_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type  DiameterURI SIP_AOR_Type;// RFC 4740 sec. 9.8
      type enumerated SIP_User_Auth_Ty_Type{
        //Ref: RFC4740, section 9.10
        REGISTRATION_E (0),
        DEREGISTRATION_E (1),
        REGISTRATION_AND_CAPABILITIES_E (2)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated SIP_Srv_Assgmt_Type{
        NO_ASSIGNMENT_E (0),
        REGISTRATION_E (1),
        RE_REGISTRATION_E (2),
        UNREGISTERED_USER_E (3),
        TIMEOUT_DEREGISTRATION_E (4),
        USER_DEREGISTRATION_E (5),
        TIMEOUT_DEREGISTRATION_STORE_SERVER_NAME_E (6),
        USER_DEREGISTRATION_STORE_SERVER_NAME_E (7),
        ADMINISTRATIVE_DEREGISTRATION_E (8),
        AUTHENTICATION_FAILURE_E (9),
        AUTHENTICATION_TIMEOUT_E (10),
        DEREGISTRATION_TOO_MUCH_DATA_E (11)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated SIP_Usr_Dat_Al_Av_Type{
        USER_DATA_NOT_AVAILABLE_E (0),
        USER_DATA_ALREADY_AVAILABLE_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated SIP_Auth_Schm_Type{
        DIGEST_E (0)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated SIP_Reason_Code_Type{
        PERMANENT_TERMINATION_E (0),
        NEW_SIP_SERVER_ASSIGNED_E (1),
        SIP_SERVER_CHANGE_E (2),
        REMOVE_SIP_SERVER_E (3)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      /*  Types on Sh interface  */
      type enumerated Data_Reference_Type{
        REPOSITORY_DATA_E (0),
        IMS_PUBLIC_IDENTITY_E (10),
        IMS_USER_STATE_E (11),
        S_CSCF_NAME_E (12),
        INITIAL_FILTER_CRITERIA_E (13),
        LOCATION_INFORMATION_E (14),
        USER_STATE_E (15),
        CHARGING_INFORMATION_E (16),
        MSISDN_E (17),
        PSI_ACTIVATION_E (18),
        DSAI_E (19),
        SERVICE_TRACE_LEVEL_INFO_E (21)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Subs_Req_Ty_Type{
        SUBSCRIBE_E (0),
        UNSUBSCRIBE_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Request_Domain_Type{
        CS_DOMAIN_E (0),
        PS_DOMAIN_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Current_Location_Type{
        DO_NOT_NEED_INITIATE_ACTIVATE_LOCATION_RETRIEVAL_E (0),
        INITIATE_ACTIVATE_LOCATION_RETRIEVAL_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Identity_Set_Type{
        ALL_IDENTITIES_E (0),
        REGISTERED_IDENTITIES_E (1),
        IMPLICIT_IDENTITIES_E (2),
        ALIAS_IDENTITIES_E (3)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Send_Data_Indication_Type{
        USER_DATA_NOT_REQUESTED_E (0),
        USER_DATA_REQUESTED_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Experimental_Result_Type{
        DIAMETER_FIRST_REGISTRATION_E (2001),
        DIAMETER_SUBSEQUENT_REGISTRATION_E (2002),
        DIAMETER_UNREGISTERED_SERVICE_E (2003),
        DIAMETER_SUCCESS_SERVER_NAME_NOT_STORED_E (2004),
        DIAMETER_ERROR_USER_UNKNOWN_E (5001),
        DIAMETER_ERROR_IDENTITIES_DONT_MATCH_E (5002),
        DIAMETER_ERROR_IDENTITY_NOT_REGISTERED_E (5003),
        DIAMETER_ERROR_ROAMING_NOT_ALLOWED_E (5004),
        DIAMETER_ERROR_IDENTITY_ALREADY_REGISTERED_E (5005),
        DIAMETER_ERROR_AUTH_SCHEME_NOT_SUPPORTED_E (5006),
        DIAMETER_ERROR_IN_ASSIGNMENT_TYPE_E (5007),
        DIAMETER_ERROR_TOO_MUCH_DATA_E (5008),
        DIAMETER_ERROR_NOT_SUPPORTED_USER_DATA_E (5009),
        // Ref: ETSI TS 129 214 5.5
        INVALID_SERVICE_INFORMATION_E (5061),
        FILTER_RESTRICTIONS_E (5062),
        REQUESTED_SERVICE_NOT_AUTHORIZED_E (5063),
        DUPLICATED_AF_SESSION_E (5064),
        IP_CAN_SESSION_NOT_AVAILABLE_E (5065),
        UNAUTHORIZED_NON_EMERGENCY_SESSION_E (5066),
        UNAUTHORIZED_SPONSORED_DATA_CONNECTIVITY_E (5067),
        DIAMETER_ERROR_INITIAL_PARAMETERS_E (5140),
        DIAMETER_ERROR_TRIGGER_EVENT_E (5141),
        DIAMETER_PCC_RULE_EVENT_E (5142),
        DIAMETER_ERROR_BEARER_NOT_AUTHORIZED_E (5143),
        DIAMETER_ERROR_TRAFFIC_MAPPING_INFO_REJECTED_E (5144),
        DIAMETER_ERROR_CONFLICTING_REQUEST_E (5147),
        unknown
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
        //variant "use=com.testingtech.ttcn.tci.codec.CodecHelper;length=32;decode=CodecHelper.decodeExperimental_Result_Type()"
      }

      type enumerated CC_Request_Ty_Type{
        // Ref: RFC4006 8.3.  CC-Request-Type AVP
        INITIAL_REQUEST_E (1),
        UPDATE_REQUEST_E (2),
        TERMINATION_REQUEST_E (3),
        EVENT_REQUEST_E  (4)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Subscription_Id_Ty_Type{
        // Ref: RFC4006 8.47.  Subscription-Id-Type AVP
        END_USER_E164_E (0),
        END_USER_IMSI_E (1),
        END_USER_SIP_URI_E (2),
        END_USER_NAI_E  (3),
        END_USER_PRIVATE_E (4)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Requested_Action_Type{
        // Ref: RFC4006 8.41.  Requested-Action AVP
        DIRECT_DEBITING_E (0),
        REFUND_ACCOUNT_E (1),
        CHECK_BALANCE_E (2),
        PRICE_ENQUIRY_E (3)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Tariff_Change_Usage_Type{
        // Ref: RFC4006 8.27.  Tariff-Change-Usage AVP
        UNIT_BEFORE_TARIFF_CHANGE_E (0),
        UNIT_AFTER_TARIFF_CHANGE_E (1),
        UNIT_INDETERMINATE_E (2)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Multiple_Serv_Indi_Type{
        // Ref: RFC4006 8.40.  Multiple-Services-Indicator AVP
        MULTIPLE_SERVICES_NOT_SUPPORTED_E (0),
        MULTIPLE_SERVICES_SUPPORTED_E     (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated CC_Unit_Ty_Type {
        // Ref: RFC4006 8.31.  G-S-U-Pool-Identifier AVP
        TIME_E (0),
        MONEY_E (1),
        TOTAL_OCTETS_E (2),
        INPUT_OCTETS_E (3),
        OUTPUT_OCTETS_E (4),
        SERVICE_SPECIFIC_UNITS_E (5)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Final_Unit_Action_Type{
        // Ref: RFC4006 8.35.  Final-Unit-Action AVP
        TERMINATE_E (0),
        REDIRECT_E (1),
        RESTRICT_ACCESS_E (2)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Redirect_Address_Ty_Type{
        // Ref: RFC4006 8.38.  Redirect-Address-Type AVP
        IPV4_ADDRESS_E (0),
        IPV6_ADDRESS_E (1),
        URL_E (2),
        SIP_URI_E (3)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated User_Equipment_Info_Ty_Type    {
        // Ref: RFC4006 8.50.  User-Equipment-Info-Type AVP
        IMEISV_E (0),
        MAC_E (1),
        EUI64_E (2),
        MODIFIED_EUI64_E (3)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated CC_Session_Failover_Type{
        // Ref: RFC4006 8.4.  CC-Session-Failover AVP
        FAILOVER_NOT_SUPPORTED_E (0),
        FAILOVER_SUPPORTED_E  (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Check_Balance_Result_Type{
        // Ref: RFC4006    8.6.  Check-Balance-Result AVP
        ENOUGH_CREDIT_E (0),
        NO_CREDIT_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Credit_Cont_Fail_Hand_Type{
        // Ref: RFC4006 8.14.  Credit-Control-Failure-Handling AVP
        TERMINATE_E (0),
        CONTINUE_E  (1),
        RETRY_AND_TERMINATE_E (2)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Direct_Debi_Fail_Hand_Type{
        // Ref: RFC4006 8.15.  Direct-Debiting-Failure-Handling AVP
        TERMINATE_OR_BUFFER_E (0),
        CONTINUE_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
    }//end group RFC3588 types

    group AVP_Rx_Types{

      type enumerated Abort_Cause_Type{
        // Ref: ETSI TS 129 214 5.3.1
        BEARER_RELEASED_E (0),
        INSUFFICIENT_SERVER_RESOURCES_E (1),
        INSUFFICIENT_BEARER_RESOURCES_E (2),
        PS_TO_CS_HANDOVER_E (3),
        SPONSORED_DATA_CONNECTIVITY_DISALLOWED_E (4)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Flow_Status_Type{
        // Ref: ETSI TS 129 214 5.3.11
        ENABLED_UPLINK_E (0),
        ENABLED_DOWNLINK_E (1),
        ENABLED_E (2),
        DISABLED_E (3),
        REMOVED_E (4)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Flow_Usage_Type{
        // Ref: ETSI TS 129 214 5.3.12
        NO_INFORMATION_E (0),
        RTCP_E (1),
        AF_SIGNALLING_E (2)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Specific_Action_Type{
        // Ref: ETSI TS 129 214 5.3.13
        VOID_0_E (0),
        CHARGING_CORRELATION_EXCHANGE_E (1),
        INDICATION_OF_LOSS_OF_BEARER_E (2),
        INDICATION_OF_RECOVERY_OF_BEARER_E (3),
        INDICATION_OF_RELEASE_OF_BEARER_E (4),
        VOID_5_E (5),
        IP_CAN_CHANGE_E (6),
        INDICATION_OF_OUT_OF_CREDIT_E (7),
        INDICATION_OF_SUCCESSFUL_RESOURCES_ALLOCATION_E (8),
        INDICATION_OF_FAILED_RESOURCES_ALLOCATION_E (9),
        INDICATION_OF_LIMITED_PCC_DEPLOYMENT_E (10),
        USAGE_REPORT_E (11)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Media_Type_Type{
        // Ref: ETSI TS 129 214 5.3.19
        AUDIO_E (0),
        VIDEO_E (1),
        DATA_E (2),
        APPLICATION_E (3),
        CONTROL_E (4),
        TEXT_E (5),
        MESSAGE_E (6),
        OTHER_E (7) // OTHER is defined as c_uInt32Max = 0xFFFFFFFF
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Service_Info_Type{
        // Ref: ETSI TS 129 214 5.3.25
        FINAL_SERVICE_INFORMATION_E (0),
        PRELIMINARY_SERVICE_INFORMATION_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated SIP_Forking_Indication_Type{
        // Ref: ETSI TS 129 214 5.3.22
        SINGLE_DIALOGUE_E (0),
        SEVERAL_DIALOGUES_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated AF_Signalling_Protocol_Type{
        // Ref: ETSI TS 129 214 5.3.26
        NO_INFORMATION_E (0),
        SIP_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Reservation_Priority_Type{
        // Ref: ETSI TS 183 017 7.3.9
        PRIORITY_ONE_E (1),
        PRIORITY_TWO_E (2),
        PRIORITY_THREE_E (3),
        PRIORITY_FOUR_E (4),
        PRIORITY_FIVE_E (5),
        PRIORITY_SIX_E (6),
        PRIORITY_SEVEN_E (7),
        PRIORITY_EIGHT_E (8),
        PRIORITY_NINE_E (9),
        PRIORITY_TEN_E(10),
        PRIORITY_ELEVEN_E (11),
        PRIORITY_TWELVE_E (12),
        PRIORITY_THIRTEEN_E (13),
        PRIORITY_FOURTEEN_E (14),
        PRIORITY_FIFTEEN_E (15)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

    }//end group AVP_Rx_Types
    group AVP_Gx_Types{

      type enumerated IP_CAN_Type{
        // Ref: ETSI TS 129 212 5.3.27
        ThreeGPP_GPRS_E (0),
        DOCSIS_E (1),
        XDSL_E (2),
        WIMAX_E (3),
        ThreeGPP2_E (4),
        ThreeGPP_EPS_E (5),
        NON_3GPP_EPS_E (6)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated RAT_Type{
        // Ref: ETSI TS 129 212 5.3.31
        WLAN_E (0),
        VIRTUAL_E (1),
        UTRAN_E (1000),
        GERAN_E (1001),
        GAN_E (1002),
        HSPA_EVOLUTION_E (1003),
        EUTRAN_E (1004),
        CDMA2000_IX_E (2000),
        HRPD_E(2001),
        UMB_E(2002),
        EHRPD_E(2003)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Bearer_Control_Mode{
        // Ref: ETSI TS 129 212 5.3.23
        UE_ONLY_E (0),
        RESERVED_E (1),
        UE_NW_E (2)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Bearer_Operation{
        // Ref: ETSI TS 129 212 5.3.21
        TERMINATION_E (0),
        ESTABLISHMENT_E (1),
        MODIFICATION_E (2)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Bearer_Usage{
        // Ref: ETSI TS 129 212 5.3.1
        GENERAL_E (0),
        IMS_SIGNALLING_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Charging_Correlation_Indicator{
        // Ref: ETSI TS 129 212 5.3.67
        CHARGING_IDENTIFIER_REQUIRED_E (0)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated CSG_Information_Reporting{
        // Ref: ETSI TS 129 212 5.3.64
        CHANGE_CSG_CELL_E (0),
        CHANGE_CSG_SUBSCRIBED_HYBRID_CELL_E (1),
        CHANGE_CSG_UNSUBSCRIBED_HYBRID_CELL_E (2)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Event_Trigger{
        // Ref: ETSI TS 129 212 5.3.7
        SGSN_CHANGE_E (0),
        QOS_CHANGE_E (1),
        RAT_CHANGE_E (2),
        TFT_CHANGE_E (3),
        PLMN_CHANGE_E (4),
        LOSS_OF_BEARER_E (5),
        RECOVERY_OF_BEARER_E (6),
        IP_CAN_CHANGE_E (7),
        QOS_CHANGE_EXCEEDING_AUTHORIZATION_E (11),
        RAI_CHANGE_E (12),
        USER_LOCATION_CHANGE_E (13),
        NO_EVENT_TRIGGERS_E (14),
        OUT_OF_CREDIT_E (15),
        REALLOCATION_OF_CREDIT_E (16),
        REVALIDATION_TIMEOUT_E (17),
        UE_IP_ADDRESS_ALLOCATE_E (18),
        UE_IP_ADDRESS_RELEASE_E (19),
        DEFAULT_EPS_BEARER_QOS_CHANGE_E (20),
        AN_GW_CHANGE_E (21),
        SUCCESSFUL_RESOURCE_ALLOCATION_E (22),
        RESOURCE_MODIFICATION_REQUEST_E (23),
        PGW_TRACE_CONTROL_E (24),
        UE_TIME_ZONE_CHANGE_E (25),
        TAI_CHANGE_E (26),
        ECGI_CHANGE_E (27),
        CHARGING_CORRELATION_EXCHANGE_E (28),
        APN_AMBR_MODIFICATION_FAILURE_E (29),
        USER_CSG_INFORMATION_CHANGE_E (30),
        USAGE_REPORT_E (33),
        DEFAULT_EPS_BEARER_QOS_MODIFICATION_FAILURE_E (34),
        USER_CSG_HYBRID_SUBSCRIBED_INFORMATION_CHANGE_E (35),
        USER_CSG_HYBRID_UNSUBSCRIBED_INFORMATION_CHANGE_E (36),
        ROUTING_RULE_CHANGE_E (37),
        MAX_MBR_APN_AMBR_CHANGE_E (38)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Flow_Direction{
        // Ref: ETSI TS 129 212 5.3.65
        UNSPECIFIED_E (0),
        DOWNLINK_E (1),
        UPLINK_E (2),
        BIDIRECTIONAL_E (3)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Metering_Method{
        // Ref: ETSI TS 129 212 5.3.8
        DURATION_E (0),
        VOLUME_E (1),
        DURATION_VOLUME_E (2)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Network_Request_Support{
        // Ref: ETSI TS 129 212 5.3.24
        NETWORK_REQUEST_NOT_SUPPORTED_E (0),
        NETWORK_REQUEST_SUPPORTED_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Offline{
        // Ref: ETSI TS 129 212 5.3.9
        DISABLE_OFFLINE_E (0),
        ENABLE_OFFLINE_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }
      type enumerated Online{
        // Ref: ETSI TS 129 212 5.3.10
        DISABLE_ONLINE_E (0),
        ENABLE_ONLINE_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Packet_Filter_Operation{
        // Ref: ETSI TS 129 212 5.3.57
        DELETION_E (0),
        ADDITION_E (1),
        MODIFICATION_E (2)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Packet_Filter_Usage{
        // Ref: ETSI TS 129 212 5.3.66
        SEND_TO_UE_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Pre_emption_Capability{
        // Ref: ETSI TS 129 212 5.3.46
        PRE_EMPTION_CAPABILITY_ENABLED_E (0),
        PRE_EMPTION_CAPABILITY_DISABLED_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Pre_emption_Vulnerability{
        // Ref: ETSI TS 129 212 5.3.47
        PRE_EMPTION_VULNERABILITY_ENABLED_E (0),
        PRE_EMPTION_VULNERABILITY_DISABLED_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Reporting_Level{
        // Ref: ETSI TS 129 212 5.3.12
        SERVICE_IDENTIFIER_LEVEL_E (0),
        RATING_GROUP_LEVEL_E (1),
        SPONSORED_CONNECTIVITY_LEVEL_E (2)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated PCC_Rule_Status{
        // Ref: ETSI TS 129 212 5.3.19
        ACTIVE_E (0),
        INACTIVE_E (1),
        TEMPORARILY_INACTIVE_E (2)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Session_Release_Cause{
        // Ref: ETSI TS 129 212 5.3.44
        UNSPECIFIED_REASON_E (0),
        UE_SUBSCRIPTION_REASON_E (1),
        INSUFFICIENT_SERVER_RESOURCES_E (2)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated QoS_Class_Identifier{
        // Ref: ETSI TS 129 212 5.3.17
        QCI_1_E (1),//examle service=conversational voice
        QCI_2_E (2),//examle service=conversational video
        QCI_3_E (3),//examle service=real time gaming
        QCI_4_E (4),//examle service=non-conversational video
        QCI_5_E (5),//examle service=IMS signalling
        QCI_6_E (6),//examle service=video(TCP based)
        QCI_7_E (7),//examle service=voice,video(life streaming)
        QCI_8_E (8),//examle service=video(buffered streaming)
        QCI_9_E (9)//examle service=video(buffered streaming)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated QoS_Negotiation{
        // Ref: ETSI TS 129 212 5.3.28
        NO_QoS_NEGOTIATION_E (0),
        QoS_NEGOTIATION_SUPPORTED_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated QoS_Upgrade{
        // Ref: ETSI TS 129 212 5.3.29
        QoS_UPGRADE_NOT_SUPPORTED_E (0),
        QoS_UPGRADE_SUPPORTED_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Resource_Allocation_Notification{
        // Ref: ETSI TS 129 212 5.3.50
        ENABLE_NOTIFICATION_E (0)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Rule_Failure_Code{
        // Ref: ETSI TS 129 212 5.3.38
        UNKNOWN_RULE_NAME_E (1),
        RATING_GROUP_ERROR_E (2),
        SERVICE_IDENTIFIER_ERROR_E (3),
        GW_PCEF_MALFUNCTION_E (4),
        RESOURCES_LIMITATION_E (5),
        MAX_NR_BEARERS_REACHED_E (6),
        UNKNOWN_BEARER_ID_E (7),
        MISSING_BEARER_ID_E (8),
        MISSING_FLOW_INFORMATION_E (9),
        RESOURCE_ALLOCATION_FAILURE_E (10),
        UNSUCCESSFUL_QOS_VALIDATION_E (11),
        INCORRECT_FLOW_INFORMATION_E (12),
        PS_TO_CS_HANDOVER_E (13),
        NO_BEARER_BOUND_E (15)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Usage_Monitoring_Level{
        // Ref: ETSI TS 129 212 5.3.61
        SESSION_LEVEL_E (0),
        PCC_RULE_LEVEL_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Usage_Monitoring_Report{
        // Ref: ETSI TS 129 212 5.3.62
        USAGE_MONITORING_REPORT_REQUIRED_E (0)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Usage_Monitoring_Support{
        // Ref: ETSI TS 129 212 5.3.63
        USAGE_MONITORING_DISABLED_E (0)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

    }//end group AVP_Gx_Types

    group AVP_GxFrom132_299_Types{

      type enumerated CSG_Access_Mode{
        // Ref: ETSI TS 132 299 7.2.46A
        CLOSED_MODE_E (0),
        HYBRID_MODE_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated CSG_Membership_Indication{
        // Ref: ETSI TS 132 299 7.2.46B
        NOT_CSG_MEMBER_E (0),
        CSG_MEMBER_E (1)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

    }//end group AVP_GxFrom132_299_Types

    group AVP_GxFrom132_422_Types{

      type enumerated Job_Type{
        // Ref: ETSI TS 132 422 5.10.1
        IMMEDIATE_MDT_ONLY_E (0),
        LOGGED_MDT_ONLY_E (1),
        TRACE_ONLY_E (2),
        IMMEDIATE_MDT_AND_TRACE_E (3)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Report_Interval{
        // Ref: ETSI TS 132 422 5.10.5
        REPORT_INTERVAL_250MS_E (0),
        REPORT_INTERVAL_500MS_E (1),
        REPORT_INTERVAL_1000MS_E (2),
        REPORT_INTERVAL_2000MS_E (3),
        REPORT_INTERVAL_3000MS_E (4),
        REPORT_INTERVAL_4000MS_E (5),
        REPORT_INTERVAL_6000MS_E (6),
        REPORT_INTERVAL_8000MS_E (7),
        REPORT_INTERVAL_12000MS_E (8),
        REPORT_INTERVAL_16000MS_E (9),
        REPORT_INTERVAL_20000MS_E (10),
        REPORT_INTERVAL_24000MS_E (11),
        REPORT_INTERVAL_28000MS_E (12),
        REPORT_INTERVAL_32000MS_E (13),
        REPORT_INTERVAL_64000MS_E (14),
        REPORT_INTERVAL_120MS_E (15),
        REPORT_INTERVAL_240MS_E (16),
        REPORT_INTERVAL_480MS_E (17),
        REPORT_INTERVAL_640MS_E (18),
        REPORT_INTERVAL_1024MS_E (19),
        REPORT_INTERVAL_2048MS_E (20),
        REPORT_INTERVAL_5120MS_E (21),
        REPORT_INTERVAL_10240MS_E (22),
        REPORT_INTERVAL_60000MS_E (23),
        REPORT_INTERVAL_360000MS_E (24),
        REPORT_INTERVAL_720000MS_E (25),
        REPORT_INTERVAL_1800000MS_E (26),
        REPORT_INTERVAL_3600000MS_E (27)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Report_Amount{
        // Ref: ETSI TS 132 422 5.10.6
        AMOUNT_1_E (0),
        AMOUNT_2_E (1),
        AMOUNT_4_E (2),
        AMOUNT_8_E (3),
        AMOUNT_16_E (4),
        AMOUNT_32_E (5),
        AMOUNT_64_E (6),
        AMOUNT_INFINITY_E (7)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Logging_Interval{
        // Ref: ETSI TS 132 422 5.10.8
        LOGGING_INTERVAL_1_28_E (0),
        LOGGING_INTERVAL_2_56_E (1),
        LOGGING_INTERVAL_3_12_E (2),
        LOGGING_INTERVAL_10_24_E (3),
        LOGGING_INTERVAL_20_49_E (4),
        LOGGING_INTERVAL_30_72_E (5),
        LOGGING_INTERVAL_40_96_E (6),
        LOGGING_INTERVAL_61_44_E (7)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Logging_Duration{
        // Ref: ETSI TS 132 422 5.10.9
        LOGGING_DURATION_600SEC_E (0),
        LOGGING_DURATION_1200SEC_E (1),
        LOGGING_DURATION_2400SEC_E (2),
        LOGGING_DURATION_3600SEC_E (3),
        LOGGING_DURATION_5400SEC_E (4),
        LOGGING_DURATION_7200SEC_E (5)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

      type enumerated Trace_Depth{
        // Ref: ETSI TS 132 422 5.3
        MINIMUM_E (0),
        MEDIUM_E (1),
        MAXIMUM_E (2),
        MINIMUM_WITHOUT_VENDOR_SPECIFIC_EXTENSION_E (3),
        MEDIUM_WITHOUT_VENDOR_SPECIFIC_EXTENSION_E (4),
        MAXIMUM_WITHOUT_VENDOR_SPECIFIC_EXTENSION_E (5)
      }
      with {
        variant "FIELDLENGTH(32)"
        variant "BYTEORDER(last)"
        variant "COMP(2scompl)"
      }

    }//end group AVP_GxFrom132_422_Types

  }//end group AVP_Types
  group AVPs{
    /*    AVPNs   */
    group RFC3588_AVPs{
      type record Origin_Host_AVP{
        //Ref: RFC3588 6.3.  Origin-Host AVP
        AVP_Header            aVP_Header,//<AVP header: 264 ....>
        Diameter_Identity      aVP_Data
      }
      with {
        //variant "present=bytes(4, 264);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"

        variant  "PRESENCE(aVP_Header.aVP_Code = 264)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Origin_Realm_AVP{
        //Ref: RFC3588 6.4.  Origin-Realm AVP
        AVP_Header            aVP_Header,//<AVP header: 296 ....>
        Diameter_Identity     aVP_Data
      }
      with {


        //variant "present=bytes(4, 296);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 296)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Host_IP_Address_AVP{
        //Ref: RFC3588 5.3.5.  Host-IP-Address AVP
        AVP_Header            aVP_Header,//<AVP header: 257 ....>
        Address                aVP_Data
      }
      with {

        //variant "present=bytes(4, 257);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 257)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Vendor_Id_AVP{
        //Ref: RFC3588 5.3.3.  Vendor-Id AVP
        AVP_Header             aVP_Header,//<AVP header: 266 ....>
        UInt32                aVP_Data
      }
      with {

        //variant "present=bytes(4, 266)&&CodecHelper.isAvailable();use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 266)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Product_Name_AVP{
        //Ref: RFC3588 5.3.7.  Product-Name AVP
        AVP_Header             aVP_Header,//<AVP header: 269 ....>
        UTF8String            aVP_Data
      }
      with {
        //variant "present=bytes(4, 269);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 269)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Origin_State_Id_AVP{
        //Ref: RFC3588 8.16.  Origin-State-Id AVP
        AVP_Header             aVP_Header,//<AVP header: 278 ....>
        UInt32                 aVP_Data
      }
      with {
        //variant "present=bytes(4, 278);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 278)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Supported_Vendor_Id_AVP{
        //Ref; 5.3.6.  Supported-Vendor-Id AVP
        AVP_Header            aVP_Header,//<AVP header: 265 ....>
        Int32                aVP_Data
      }
      with {
        //variant "present=bytes(4, 265);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 265)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Auth_Application_Id_AVP{
        //Ref: RFC3588 6.8.  Auth-Application-Id AVP
        AVP_Header             aVP_Header,//<AVP header: 258 ....>
        UInt32                 aVP_Data
      }
      with {
        //variant "present=bytes(4, 258)&&CodecHelper.isAvailable();use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 258)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Inband_Security_Id_AVP{
        //Ref: RFC3588 6.10.  Inband-Security-Id AVP
        AVP_Header             aVP_Header,//<AVP header: 299 ....>
        UInt32                 aVP_Data
      }
      with {
        //variant "present=bytes(4, 299);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 299)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Acct_Application_Id_AVP{
        //Ref: RFC3588 6.9.  Acct-Application-Id AVP
        AVP_Header             aVP_Header,//<AVP header: 259 ....>
        UInt32                 aVP_Data
      }
      with {
        //variant "present=bytes(4, 259)&&CodecHelper.isAvailable();use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 259)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Vendor_Specific_Appl_Id_AVP{
        //Ref: RFC3588 6.11.  Vendor-Specific-Application-Id AVP
        AVP_Header             aVP_Header,//<Vendor-Specific-Application-Id> ::= < AVP Header: 260 >
        set of Vendor_Id_AVP vendor_Id optional,
        set of Auth_Application_Id_AVP     auth_Application_Id optional,
        set of Acct_Application_Id_AVP    acct_Application_Id optional
      }
      with {
        //variant "present=bytes(4, 260);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (vendor_Id) "fieldPresent=bytes(4, 266)&&CodecHelper.isAvailable()"
        //variant (auth_Application_Id) "fieldPresent=bytes(4, 258)&&CodecHelper.isAvailable()"
        //variant (acct_Application_Id) "fieldPresent=bytes(4, 259)&&CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 260)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header, vendor_Id,  auth_Application_Id,  acct_Application_Id)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Firmware_Revision_AVP{
        //Ref: RFC3588 5.3.4.  Firmware-Revision AVP
        AVP_Header            aVP_Header,//<AVP header: 267 ....>
        UInt32                 aVP_Data
      }
      with {
        //variant "present=bytes(4, 267);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 267)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Result_Code_AVP{
        //Ref: RFC3588 7.1.  Result-Code AVP
        AVP_Header             aVP_Header,//<AVP header: 268 ....>
        //UInt32
        Result_Code_Type                 aVP_Data
      }
      with {
        //variant "present=bytes(4, 268);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 268)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }
      type record Error_Message_AVP{
        //Ref: RFC3588 7.3.  Error-Message AVP
        AVP_Header             aVP_Header,//<AVP header: 281 ....>
        UTF8String            aVP_Data
      }
      with {
        //variant "present=bytes(4, 281);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 281)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }
      type record Failed_AVP{
        //Ref: RFC3588 7.5.  Failed-AVP AVP
        AVP_Header             aVP_Header,//<AVP header: 279 ....>
        set of AVP_Type             aVP
      }
      with {
        //variant "present=bytes(4, 279);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 279)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }
      type record Session_Id_AVP{
        //Ref: RFC3588 8.8.  Session-Id AVP
        AVP_Header             aVP_Header,//<AVP header: 263 ....>
        UTF8String             aVP_Data
      }
      with {
        //variant "present=bytes(4, 263);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 263)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Destination_Realm_AVP{
        //Ref: RFC3588 6.6.  Destination-Realm AVP
        AVP_Header             aVP_Header,//<AVP header: 283 ....>
        Diameter_Identity     aVP_Data
      }
      with {
        //variant "present=bytes(4, 283);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 283)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Destination_Host_AVP{
        //Ref: RFC3588 6.5.  Destination-Host AVP
        AVP_Header             aVP_Header,//<AVP header: 293 ....>
        Diameter_Identity     aVP_Data
      }
      with {
        //variant "present=bytes(4, 293);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 293)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Re_Auth_Request_Type_AVP{
        //Ref: RFC3588 8.12.  Re-Auth-Request-Type AVP
        AVP_Header             aVP_Header,//<AVP header: 285 ....>
        Re_Auth_Req_Type     aVP_Data
      }
      with {
        //variant "present=bytes(4, 285);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 285)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record User_Name_AVP{
        //Ref: RFC3588 8.14.  User-Name AVP
        AVP_Header             aVP_Header,//<AVP header: 1 ....>
        UTF8String             aVP_Data
      }
      with {
        //variant "present=bytes(4, 1);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Proxy_Host_AVP{
        //Ref: RFC3588 6.7.3.  Proxy-Host AVP
        AVP_Header             aVP_Header,//<AVP header: 280 ....>
        Diameter_Identity     aVP_Data
      }
      with {
        //variant "present=bytes(4, 280);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 280)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Proxy_State_AVP{
        //Ref: RFC3588 6.7.4.  Proxy-State AVP
        AVP_Header             aVP_Header,//<AVP header: 33 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 33);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 33)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }
      type record Proxy_Info_AVP{
        //Ref: RFC3588 6.7.2.  Proxy-Info AVP
        AVP_Header             aVP_Header,//<AVP header: 284 ....>
        Proxy_Host_AVP        proxy_Host,//requi.
        Proxy_State_AVP        proxy_State,//requi.
        set of AVP_Type     aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 284);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 284)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header, proxy_Host, proxy_State, aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Route_Record_AVP{
        //Ref: RFC3588 6.7.1.  Route-Record AVP
        AVP_Header             aVP_Header,//<AVP header: 282 ....>
        Diameter_Identity     aVP_Data
      }
      with {
        //variant "present=bytes(4, 282);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 282)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Error_Reporting_Host_AVP{
        //Ref: RFC3588 7.4.  Error-Reporting-Host AVP
        AVP_Header             aVP_Header,//<AVP header: 294 ....>
        Diameter_Identity     aVP_Data
      }
      with {
        //variant "present=bytes(4, 294);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 294)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Redirect_Host_AVP{
        /* Ref: RFC3588 6.12.  Redirect-Host AVP
        NOTE: In Ref aVP_Data type is not defined, I presume it should be Diameter_Identity as the other xxx_Host_AVPs */
        AVP_Header             aVP_Header,//<AVP header: 292 ....>
        Diameter_Identity                aVP_Data
      }
      with {
        //variant "present=bytes(4, 292);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 292)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Redirect_Host_Usage_AVP{
        //Ref: RFC3588 6.13.  Redirect-Host-Usage AVP
        AVP_Header                     aVP_Header,//<AVP header: 261 ....>
        Redirect_Host_Usage_Type    aVP_Data
      }
      with {
        //variant "present=bytes(4, 261);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 261)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      //                type record Redirect_Host_Cache_Time_AVP{
      //                // NOTE Ref: RFC3588  Redirect_Host_Cache_Time_AVP is NOT defined.
      //                // I presume it should be Time type. rmag
      //                    AVP_Header             aVP_Header,//<AVP header:  ....>
      //                    Time                aVP_Data
      //                };
      type record Accounting_Record_Type_AVP{
        //Ref: RFC3588 9.8.1.  Accounting-Record-Type AVP
        AVP_Header             aVP_Header,//<AVP header: 480 ....>
        Acc_Record_Type      aVP_Data
      }
      with {
        //variant "present=bytes(4, 480);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 480)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Accounting_Record_Number_AVP{
        //Ref: RFC3588 9.8.3.  Accounting-Record-Number AVP
        AVP_Header             aVP_Header,//<AVP header: 485 ....>
        UInt32                aVP_Data
      }
      with {
        //variant "present=bytes(4, 485);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 485)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Accounting_Sub_Session_Id_AVP{
        //Ref: RFC3588 9.8.6.  Accounting-Sub-Session-Id AVP
        AVP_Header             aVP_Header,//<AVP header: 287 ....>
        UInt64                aVP_Data
      }
      with {
        //variant "present=bytes(4, 287);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 287)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Acct_Session_Id_AVP{
        //Ref: RFC3588 9.8.4.  Acct-Session-Id AVP
        AVP_Header             aVP_Header,//<AVP header: 44 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 44);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 44)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }
      type record Acct_Multi_Session_Id_AVP{
        //Ref: RFC3588 9.8.5.  Acct-Multi-Session-Id AVP
        AVP_Header             aVP_Header,//<AVP header: 50 ....>
        UTF8String             aVP_Data
      }
      with {
        //variant "present=bytes(4, 50);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 50)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Acct_Interim_Interval_AVP{
        //Ref: RFC3588 9.8.2.  Acct-Interim-Interval
        AVP_Header             aVP_Header,//<AVP header: 85 ....>
        UInt32                aVP_Data
      }
      with {
        //variant "present=bytes(4, 85);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 85)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Accounting_Realtime_Required_AVP{
        //Ref: RFC3588 9.8.7.  Accounting-Realtime-Required AVP
        AVP_Header                 aVP_Header,//<AVP header: 483 ....>
        Acc_Realtime_Req_Type     aVP_Data
      }
      with {
        //variant "present=bytes(4, 283);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 283)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Event_Timestamp_AVP{
        //Ref: RFC3588 8.21.  Event-Timestamp AVP
        AVP_Header             aVP_Header,//<AVP header: 55 ....>
        Time                aVP_Data
      }
      with {
        //variant "present=bytes(4, 55);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 55)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Termination_Cause_AVP{
        //Ref: RFC3588 8.15.  Termination-Cause AVP
        AVP_Header                 aVP_Header,//<AVP header: 295 ....>
        Termination_Cause_Type    aVP_Data
      }
      with {
        //variant "present=bytes(4, 295);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 295)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Class_AVP{
        //Ref: RFC3588 8.20.  Class AVP
        AVP_Header             aVP_Header,//<AVP header: 25 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 25);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        // variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 25)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }
      type record Disconnect_Cause_AVP{
        //Ref: RFC3588 5.4.3.  Disconnect-Cause AVP
        AVP_Header                 aVP_Header,//<AVP header: 273 ....>
        Disconnect_Cause_Type     aVP_Data
      }
      with {
        //variant "present=bytes(4, 273);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 273)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

    }//enf of group RFC3855_AVPs
    group RFC4740_AVPs{
      /* ******** Cx *******/
      type record Auth_Session_State_AVP{
        //    Ref: RFC3588  8.11.  Auth-Session-State AVP
        AVP_Header                 aVP_Header,//<AVP header: 277 ....>
        Auth_Session_State_Type aVP_Data
      }
      with {
        //variant "present=bytes(4, 277);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 277)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record SIP_AOR_AVP{
        //    Ref: RFC4740 9.8.  SIP-AOR AVP
        AVP_Header             aVP_Header,//<AVP header: 122 ....>
        SIP_AOR_Type        aVP_Data
      }
      with {
        //variant "present=bytes(4, 122);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //                    //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 122)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

        //variant (aVP_Data) "encode=CodecHelper.encodeDiameterURI();decode=CodecHelper.decodeDiameterURI()"
      }
      type record SIP_Visited_Network_Id_AVP{
        //    Ref: RFC4740 9.9.  SIP-Visited-Network-Id AVP
        AVP_Header             aVP_Header,//<AVP header: 386 ....>
        UTF8String            aVP_Data
      }
      with {
        //variant "present=bytes(4, 386);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 386)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record SIP_User_Authorization_Type_AVP{
        //    Ref: RFC4740 9.10.  SIP-User-Authorization-Type AVP
        AVP_Header                 aVP_Header,//<AVP header: 387 ....>
        SIP_User_Auth_Ty_Type    aVP_Data
      }
      with {
        //variant "present=bytes(4, 387);use=com.testingtech.ttcn.tci.codec.CodecHelper;"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 387)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record SIP_Server_URI_AVP{
        //    Ref: RFC4740 9.2 SIP-Server-URI AVP
        AVP_Header             aVP_Header,//<AVP header: 371 ....>
        UTF8String            aVP_Data
      }
      with {
        //variant "present=bytes(4, 371);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 371)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record SIP_MandatoryCapability_AVP{
        //Ref: RFC4740 9.3.1.  SIP-Mandatory-Capability AVP
        AVP_Header             aVP_Header,//<AVP header: 373 ....>
        UInt32                aVP_Data
      }
      with {
        //variant "present=bytes(4, 373);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 373)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record SIP_OptionalCapability_AVP{
        //Ref: RFC4740 9.3.2.  SIP-Optional-Capability AVP
        AVP_Header             aVP_Header,//<AVP header: 374 ....>
        UInt32                aVP_Data
      }
      with {
        //variant "present=bytes(4, 374);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 374)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record SIP_Server_Capabilities_AVP{
        //Ref: RFC4740 9.3.  SIP-Server-Capabilities AVP
        AVP_Header             aVP_Header,//<AVP header: 372 ....>
        set of SIP_MandatoryCapability_AVP sIP_MandatoryCapability optional,
        set of SIP_OptionalCapability_AVP sIP_OptionalCapability optional,
        set of SIP_Server_URI_AVP  sIPServerURI optional,
        set of AVP_Type             aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 372);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (sIP_MandatoryCapability) "fieldPresent=bytes(4, 373)&&CodecHelper.isAvailable()"
        //variant (sIP_OptionalCapability) "fieldPresent=bytes(4, 374)&&CodecHelper.isAvailable()"
        //variant (sIPServerURI) "fieldPresent=bytes(4, 371)&&CodecHelper.isAvailable()"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 372)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header, sIP_MandatoryCapability, sIP_OptionalCapability, sIPServerURI,  aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }
      type record Authorization_Lifetime_AVP{
        //Ref: RFC35888.9.  Authorization-Lifetime AVP
        AVP_Header             aVP_Header,//<AVP header: 291 ....>
        UInt32                aVP_Data
      }
      with {
        //variant "present=bytes(4, 291);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 291)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Auth_Grace_Period_AVP{
        //Ref: RFC35888.10.  Auth-Grace-Period AVP
        AVP_Header             aVP_Header,//<AVP header: 276 ....>
        UInt32                aVP_Data
      }
      with {
        //variant "present=bytes(4, 276);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 276)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Redirect_Max_Cache_Time_AVP    {
        //Ref: RFC3588  6.14.  Redirect-Max-Cache-Time AVP
        AVP_Header             aVP_Header,//<AVP header: 262 ....>
        UInt32                aVP_Data
      }
      with {
        //variant "present=bytes(4, 262);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 262)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record SIP_Server_Assignment_Type_AVP{
        //Ref: RFC4740 9.4.  SIP-Server-Assignment-Type AVP
        AVP_Header             aVP_Header,//<AVP header: 375 ....>
        SIP_Srv_Assgmt_Type aVP_Data
      }
      with {
        //variant "present=bytes(4, 375);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 375)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record SIP_User_Data_Already_Available_AVP{
        //Ref: RFC4740 9.13.  SIP-User-Data-Already-Available AVP
        AVP_Header                 aVP_Header,//<AVP header: 392 ....>
        SIP_Usr_Dat_Al_Av_Type     aVP_Data
      }
      with {
        //variant "present=bytes(4, 392);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 392)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record SIP_Supported_User_Data_Type_AVP{
        //Ref: RFC4740 9.12.1.  SIP-User-Data-Type AVP
        AVP_Header             aVP_Header,//<AVP header: 388 ....>
        UTF8String            aVP_Data
      }
      with {
        //variant "present=bytes(4, 388);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 388)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record SIP_User_Data_Type_AVP{
        // Ref: RFC4740 9.12.1.  SIP-User-Data-Type AVP
        AVP_Header             aVP_Header,//<AVP header: 390 ....>
        UTF8String            aVP_Data
      }
      with {
        //variant "present=bytes(4, 390);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 390)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record SIP_User_Data_Contents_AVP{
        // Ref: RFC4740 9.12.2.  SIP-User-Data-Contents AVP
        AVP_Header             aVP_Header,//<AVP header: 391 ....>
        octetstring         aVP_Data
      }
      with {
        //variant "present=bytes(4, 391);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 391)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }
      type record SIP_User_Data_AVP{
        //Ref: RFC4740 9.12.  SIP-User-Data AVP
        AVP_Header                     aVP_Header,// < AVP Header: 389 >
        SIP_User_Data_Type_AVP         sIP_User_Data_Type,//req.
        SIP_User_Data_Contents_AVP     sIP_User_Data_Contents,//req.
        set of AVP_Type             aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 389);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 389)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header, sIP_User_Data_Type, sIP_User_Data_Contents,  aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record SIP_Accounting_Information_AVP{
        //Ref: RFC4740 9.1.  SIP-Accounting-Information AVP
        AVP_Header                                     aVP_Header,//<AVP header: 368 ....>
        set of SIP_Accounting_Server_URI_AVP         sIP_Accounting_Server_URI optional,
        set of SIP_Credit_Control_Server_URI_AVP     sIP_Credit_Control_Server_URI optional,
        set of AVP_Type                             aVP_Type optional
      }

      with {
        //variant "present=bytes(4, 368);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (sIP_Accounting_Server_URI) "fieldPresent=bytes(4, 369)&&CodecHelper.isAvailable()"
        //variant (sIP_Credit_Control_Server_URI) "fieldPresent=bytes(4, 370)&&CodecHelper.isAvailable()"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 368)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header, sIP_Accounting_Server_URI, sIP_Credit_Control_Server_URI,  aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }
      type record SIP_Accounting_Server_URI_AVP{
        //Ref: RFC4740 9.1.1.  SIP-Accounting-Server-URI AVP
        AVP_Header             aVP_Header,//<AVP header: 369 ....>
        DiameterURI         aVP_Data
      }
      with {
        //variant "present=bytes(4, 369);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //                    encode (aVP_Data) "SipNist"
        //                    variant (aVP_Data) "externalEncode;externalDecode;condition=CodecHelper.leaveScope()"
        //variant (aVP_Data) "encode=CodecHelper.encodeDiameterURI();decode=CodecHelper.decodeDiameterURI()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 369)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record SIP_Credit_Control_Server_URI_AVP{
        //Ref: RFC4740 9.1.2.  SIP-Credit-Control-Server-URI AVP
        AVP_Header             aVP_Header,//<AVP header: 370 ....>
        DiameterURI         aVP_Data
      }
      with {
        //variant "present=bytes(4, 370);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //                    encode (aVP_Data) "SipNist"
        //                    variant (aVP_Data) "externalEncode;externalDecode;condition=CodecHelper.leaveScope()"
        //variant (aVP_Data) "encode=CodecHelper.encodeDiameterURI();decode=CodecHelper.decodeDiameterURI()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 370)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record SIP_Method_AVP{
        //Ref: RFC4740 9.14.  SIP-Method AVP
        AVP_Header             aVP_Header,//<AVP header: 393 ....>
        UTF8String            aVP_Data
      }
      with {
        //variant "present=bytes(4, 393);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 393)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record SIP_Number_Auth_Items_AVP{
        //Ref: RFC4740 9.6.  SIP-Number-Auth-Items AVP
        AVP_Header             aVP_Header,//<AVP header: 382 ....>
        UInt32                aVP_Data
      }
      with {
        //variant "present=bytes(4, 382);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 382)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record SIP_Auth_Data_Item_AVP{
        //Ref: RFC4740 9.5.  SIP-Auth-Data-Item AVP
        AVP_Header                         aVP_Header,//SIP-Auth-Data-Item ::= < AVP Header: 376 >
        SIP_Authentication_Scheme_AVP      sIP_Authentication_Scheme,//requ.
        SIP_Item_Number_AVP             sIP_Item_Number optional,
        SIP_Authenticate_AVP             sIP_Authenticate optional,
        SIP_Authorization_AVP             sIP_Authorization optional,
        SIP_Authentication_Info_AVP        sIP_Authentication_Info optional,
        set of AVP_Type                 aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 376);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 376)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header, sIP_Authentication_Scheme, sIP_Item_Number,sIP_Authenticate, sIP_Authorization,  sIP_Authentication_Info, aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record SIP_Authentication_Scheme_AVP{
        //Ref: RFC4740 9.5.1.  SIP-Authentication-Scheme AVP
        AVP_Header                     aVP_Header,//<AVP header: 377 ....>
        SIP_Auth_Schm_Type            aVP_Data
      }
      with {
        //variant "present=bytes(4, 377);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 377)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record SIP_Item_Number_AVP{
        //Ref: RFC4740 9.5.2 SIP-Item-Number AVP
        AVP_Header                     aVP_Header,//<AVP header: 378 ....>
        UInt32                        aVP_Data
      }
      with {
        //variant "present=bytes(4, 378);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 378)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record SIP_Authenticate_AVP{
        //Ref: RFC4740 9.5.3.  SIP-Authenticate AVP
        AVP_Header                     aVP_Header,//SIP-Authenticate ::= < AVP Header: 379 >
        Digest_Realm_AVP             digest_Realm,//requ.
        Digest_Nonce_AVP             digest_Nonce,//requ.
        Digest_Domain_AVP            digest_Domain  optional,
        Digest_Opaque_AVP             digest_Opaque optional,
        Digest_Stale_AVP             digest_Stale optional,
        Digest_Algorithm_AVP         digest_Algorithm optional,
        Digest_QoP_AVP                 digest_QoP optional,
        Digest_HA1_AVP                 digest_HA1 optional,
        set of Digest_Auth_Param_AVP     digest_Auth_Param  optional,
        set of AVP_Type                 aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 379);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (digest_Auth_Param) "fieldPresent=bytes(1, 117)&&CodecHelper.isAvailable()"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 379)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,digest_Realm,digest_Nonce,digest_Domain  ,digest_Opaque ,digest_Stale ,digest_Algorithm ,digest_QoP ,digest_HA1 ,digest_Auth_Param ,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record SIP_Authorization_AVP{
        //    Ref: RFC4740 9.5.4.  SIP-Authorization AVP
        AVP_Header                     aVP_Header,//SIP-Authorization ::= < AVP Header: 380 >
        Digest_Username_AVP         digest_Username,//requi.
        Digest_Realm_AVP             digest_Realm,
        Digest_Nonce_AVP             digest_Nonce,
        Digest_URI_AVP                 digest_URI,
        Digest_Response_AVP         digest_Response,//requi.
        Digest_Algorithm_AVP         digest_Algorithm optional,
        Digest_CNonce_AVP              digest_CNonce optional,
        Digest_Opaque_AVP             digest_Opaque optional,
        Digest_QoP_AVP              digest_QoP optional,
        Digest_Nonce_Count_AVP         digest_Nonce_Count optional,
        Digest_Method_AVP             digest_Method optional,
        Digest_Entity_Body_Hash_AVP     digest_Entity_Body_Hash optional,
        set of Digest_Auth_Param_AVP     digest_Auth_Param  optional,
        set of AVP_Type                 aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 380);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (digest_Auth_Param) "fieldPresent=bytes(1, 117)&&CodecHelper.isAvailable()"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 380)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  digest_Username,digest_Realm,digest_Nonce,digest_URI,digest_Response,digest_Algorithm ,digest_CNonce,digest_Opaque ,digest_QoP ,digest_Nonce_Count ,digest_Method ,digest_Entity_Body_Hash,digest_Auth_Param,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record SIP_Authentication_Info_AVP{
        //    Ref: RFC4740 9.5.5.  SIP-Authentication-Info AVP
        AVP_Header                     aVP_Header,//SIP-Authentication-Info ::= < AVP Header: 381 >
        Digest_Nextnonce_AVP         digest_Nextnonce optional,
        Digest_QoP_AVP                 digest_QoP optional,
        Digest_Response_Auth_AVP     digest_Response_Auth optional,
        Digest_CNonce_AVP             digest_CNonce optional,
        Digest_Nonce_Count_AVP         digest_Nonce_Count optional,
        set of AVP_Type             aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 381);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 381)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  digest_Nextnonce ,digest_QoP ,digest_Response_Auth ,digest_CNonce ,digest_Nonce_Count,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record SIP_Reason_Info_AVP{
        //Ref: RFC4740 9.7.2.  SIP-Reason-Info AVP
        AVP_Header                     aVP_Header,//<AVP header: 385 ....>
        UTF8String                    aVP_Data
      }
      with {
        //variant "present=bytes(4, 385);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 385)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record SIP_Deregistration_Reason_AVP{
        //    Ref: RFC4740 9.5.5.  SIP-Authentication-Info AVP
        AVP_Header                     aVP_Header,//SIP-Deregistration-Reason ::= < AVP Header: 383 >
        SIP_Reason_Code_AVP         sIP_Reason_Code_AVP,//requi.
        SIP_Reason_Info_AVP         sIP_Reason_Info_AVP optional,
        set of AVP_Type             aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 383);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 383)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,sIP_Reason_Code_AVP, sIP_Reason_Info_AVP,  aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record SIP_Reason_Code_AVP{
        // Ref: RFC4740 .7.1.  SIP-Reason-Code AVP
        AVP_Header                     aVP_Header,//<AVP header: 384 ....>
        SIP_Reason_Code_Type        aVP_Data
      }
      with {
        //variant "present=bytes(4, 384);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 384)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
    }//end of group RFC4740_AVPs

    /* ******** Digest AVPs ********* */
    group Digest_AVPs{
      type UInt8 Digest_Ty_Type;

      type record Digest_Realm_AVP{
        //Ref:RFC4590 3.2.  Digest-Realm Attribute
        Digest_Ty_Type     Type,//104
        UInt8              Length,
        UTF8String        Text
      }
      with {
        //variant "present=bytes(1, 104)"
        //variant (Length) "intTag;g;='aVP_len', value-2"
        variant  "PRESENCE(Type = 104)" ;
        variant (Length) "LENGTHTO(Type,Length, Text)";

      }
      type record Digest_Nonce_AVP{
        //Ref:RFC4590 3.3.  Digest-Nonce Attribute
        Digest_Ty_Type     Type,//105
        UInt8              Length,
        UTF8String        Text
      }
      with {
        //variant "present=bytes(1, 105)"
        //variant (Length) "intTag;='aVP_len', value-2"
        variant  "PRESENCE(Type = 105)" ;
        variant (Length) "LENGTHTO(Type,Length, Text)";

      }

      type record Digest_Domain_AVP{
        //Ref:RFC4590 3.17.  Digest-Domain Attribute
        Digest_Ty_Type     Type,//119
        UInt8              Length,
        UTF8String        Text
      }
      with {
        //variant "present=bytes(1, 119)"
        //variant (Length) "intTag;g;='aVP_len', value-2"
        variant  "PRESENCE(Type = 119)" ;
        variant (Length) "LENGTHTO(Type,Length, Text)";
      }
      type record Digest_Opaque_AVP{
        //Ref:RFC4590 3.14.  Digest-Opaque Attribute
        Digest_Ty_Type     Type,//116
        UInt8              Length,
        UTF8String        Text
      }
      with {
        //variant "present=bytes(1, 116)"
        //variant (Length) "intTag;g;='aVP_len', value-2"
        variant  "PRESENCE(Type = 116)" ;
        variant (Length) "LENGTHTO(Type,Length, Text)";
      }
      type record Digest_Stale_AVP{
        //Ref:RFC4590 3.18.  Digest-Stale Attribute
        Digest_Ty_Type     Type,//120
        UInt8              Length,
        UTF8String        Text
      }
      with {
        //variant "present=bytes(1, 120)"
        //variant (Length) "intTag;g;='aVP_len', value-2"
        variant  "PRESENCE(Type = 120)" ;
        variant (Length) "LENGTHTO(Type,Length, Text)";
      }
      type record Digest_Algorithm_AVP{
        //Ref:RFC4590 3.9.  Digest-Algorithm Attribute
        Digest_Ty_Type     Type,//111
        UInt8              Length,
        UTF8String        Text
      }
      with {
        //variant "present=bytes(1, 111)"
        //variant (Length) "intTag;g;='aVP_len', value-2"
        variant  "PRESENCE(Type = 11)" ;
        variant (Length) "LENGTHTO(Type,Length, Text)";
      }
      type record Digest_QoP_AVP{
        //Ref:RFC4590 3.8.  Digest-Qop Attribute
        Digest_Ty_Type     Type, //110
        UInt8              Length,
        UTF8String        Text
      }
      with {
        //variant "present=bytes(1, 110)"
        //variant (Length) "intTag;g;='aVP_len', value-2"
        variant  "PRESENCE(Type = 110)" ;
        variant (Length) "LENGTHTO(Type,Length, Text)";
      }
      type record Digest_HA1_AVP{
        //Ref:RFC4590 3.19.  Digest-HA1 Attribute
        Digest_Ty_Type     Type,//121
        UInt8              Length,
        UTF8String        Text
      }
      with {
        //variant "present=bytes(1, 121)"
        //variant (Length) "intTag;g;='aVP_len', value-2"
        variant  "PRESENCE(Type = 121)" ;
        variant (Length) "LENGTHTO(Type,Length, Text)";
      }
      type record Digest_Auth_Param_AVP{
        //Ref:RFC4590 3.15.  Digest-Auth-Param Attribute
        Digest_Ty_Type     Type,//117
        UInt8              Length,
        UTF8String        Text
      }
      with {
        //variant "present=bytes(1, 117);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (Length) "intTag;g;='aVP_len', value-2"
        //variant (Text) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(Type = 117)" ;
        variant (Length) "LENGTHTO(Type,Length, Text)";
      }
      type record Digest_Username_AVP{
        //Ref:RFC4590 3.13.  Digest-Username Attribute
        Digest_Ty_Type     Type, //115
        UInt8              Length,
        UTF8String        Text
      }
      with {
        //variant "present=bytes(1, 115)"
        //variant (Length) "intTag;='aVP_len', value-2"
        variant  "PRESENCE(Type = 115)" ;
        variant (Length) "LENGTHTO(Type,Length, Text)";
      }
      type record Digest_URI_AVP{
        //Ref:RFC4590 3.7.  Digest-URI Attribute
        Digest_Ty_Type     Type, //109
        UInt8              Length,
        UTF8String        Text
      }
      with {
        //variant "present=bytes(1, 109)"
        //variant (Length) "intTag;='aVP_len', value-2"
        variant  "PRESENCE(Type = 109)" ;
        variant (Length) "LENGTHTO(Type,Length, Text)";
      }
      type record Digest_Response_AVP{
        //Ref:RFC4590
        Digest_Ty_Type     Type,//103
        UInt8              Length,
        UTF8String        Text
      }
      with {
        //variant "present=bytes(1, 103)"
        //variant (Length) "intTag;='aVP_len', value-2"
        variant  "PRESENCE(Type = 103)" ;
        variant (Length) "LENGTHTO(Type,Length, Text)";
      }
      type record Digest_CNonce_AVP{
        //Ref:RFC4590 3.11.  Digest-CNonce Attribute
        Digest_Ty_Type     Type, //113
        UInt8              Length,
        UTF8String        Text
      }
      with {
        //variant "present=bytes(1, 113)"
        //variant (Length) "intTag;='aVP_len', value-2"
        variant  "PRESENCE(Type = 113)" ;
        variant (Length) "LENGTHTO(Type,Length, Text)";
      }
      type record Digest_Nonce_Count_AVP{
        //Ref:RFC4590 3.12.  Digest-Nonce-Count Attribute
        Digest_Ty_Type     Type,//114
        UInt8              Length,
        UTF8String        Text
      }
      with {
        //variant "present=bytes(1, 114)"
        //variant (Length) "intTag;='aVP_len', value-2"
        variant  "PRESENCE(Type = 114)" ;
        variant (Length) "LENGTHTO(Type,Length, Text)";
      }
      type record Digest_Method_AVP{
        //Ref:RFC4590 3.6.  Digest-Method Attribute
        Digest_Ty_Type     Type, //108
        UInt8              Length,
        UTF8String        Text
      }
      with {
        //variant "present=bytes(1, 108)"
        //variant (Length) "intTag;='aVP_len', value-2"
        variant  "PRESENCE(Type = 108)" ;
        variant (Length) "LENGTHTO(Type,Length, Text)";
      }
      type record Digest_Entity_Body_Hash_AVP{
        //Ref:RFC4590 3.10.  Digest-Entity-Body-Hash Attribute
        Digest_Ty_Type     Type,//112
        UInt8              Length,
        UTF8String        Text
      }
      with {
        //variant "present=bytes(1, 112)"
        //variant (Length) "intTag;='aVP_len', value-2"
        variant  "PRESENCE(Type = 112)" ;
        variant (Length) "LENGTHTO(Type,Length, Text)";
      }
      type record Digest_Nextnonce_AVP{
        //Ref:RFC4590
        Digest_Ty_Type     Type,//107
        UInt8              Length,
        UTF8String        Text
      }
      with {
        //variant "present=bytes(1, 107)"
        //variant (Length) "intTag;='aVP_len', value-2"
        variant  "PRESENCE(Type = 107)" ;
        variant (Length) "LENGTHTO(Type,Length, Text)";
      }
      type record Digest_Response_Auth_AVP{
        //Ref:RFC4590
        Digest_Ty_Type     Type,//106
        UInt8              Length,
        UTF8String        Text
      }
      with {
        //variant "present=bytes(1, 106)"
        //variant (Length) "intTag;='aVP_len', value-2"
        variant  "PRESENCE(Type = 106)" ;
        variant (Length) "LENGTHTO(Type,Length, Text)";
      }
      /* ************ end of Digest AVPs************ */
    }//end of Digest AVPs
    /* ***** Sh  Ref: 3GPP TS 29.329  Table 6.3.1: Diameter Multimedia Application AVPs  *****
    User_Identity                    (700),
    MSISDN                             (701),
    Data_Reference                     (703),
    Service_Indication                 (704),
    Subs_Req_Type                     (705),
    Requested-Domain                 (706),
    Current-Location                 (707),
    Identity-Set                    (708),
    Expiry-Time                     (709),
    Send-Data-Indication             (710),
    Server-Name                     (602),
    Supported-Features                 (628),
    Feature-List-ID                 (629),
    Feature-List                     (630),
    Supported-Applications             (631),
    Public-Identity                 (601),
    DSAI-Tag                         (711),
    Wildcarded-PSI                     (634),
    Wildcarded-IMPU                 (636)     */
    group Sh_AVPs{
      type record Public_Identity_AVP{
        //    Ref: 3GPP TS 29.329    6.3.15 Public-Identity AVP
        //  3GPP TS 29.229 6.3.2 Public-Identity AVP
        AVP_Header                     aVP_Header,//<AVP header: 601 ....>
        UTF8String                    aVP_Data
      }
      with {
        //variant "present=bytes(4, 601);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 601)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record User_Identity_AVP{
        //    Ref: 3GPP TS 29.329    6.3.1 User-Identity AVP
        AVP_Header                     aVP_Header,//<AVP header: 700 10415>
        Public_Identity_AVP         public_Identity_AVP optional,
        MSISDN_AVP                     mSISDN_AVP optional,
        set of AVP_Type             aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 700);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 700)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header, public_Identity_AVP, mSISDN_AVP , aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record MSISDN_AVP{
        //    Ref: 3GPP TS 29.329    6.3.2 MSISDN AVP
        AVP_Header                     aVP_Header,//<AVP header: 701 ....>
        octetstring                    aVP_Data
      }
      with {
        //variant "present=bytes(4, 700);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 700)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Data_Reference_AVP{
        //    Ref: 3GPP TS 29.3296.3.4 Data-Reference AVP
        AVP_Header                     aVP_Header,//<AVP header: 703 ....>
        Data_Reference_Type         aVP_Data
      }
      with {
        //variant "present=bytes(4, 703);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 703)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Service_Indication_AVP{
        //    Ref: 3GPP TS 29.329    6.3.5 Service-Indication AVP
        AVP_Header                     aVP_Header,//<AVP header: 704 ....>
        octetstring                    aVP_Data
      }
      with {
        //variant "present=bytes(4, 704);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 704)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }


      type record Subs_Req_Type_AVP{
        //    Ref: 3GPP TS 29.329    6.3.6 Subs-Req-Type AVP
        AVP_Header                     aVP_Header,//<AVP header: 705 ....>
        Subs_Req_Ty_Type              aVP_Data
      }
      with {
        //variant "present=bytes(4, 705);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 705)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Requested_Domain_AVP{
        //    Ref: 3GPP TS 29.329    6.3.7 Requested-Domain AVP
        AVP_Header                     aVP_Header,//<AVP header: 706 ....>
        Request_Domain_Type            aVP_Data
      }
      with {
        //variant "present=bytes(4, 706);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 706)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Current_Location_AVP{
        //    Ref: 3GPP TS 29.329    6.3.8 Current-Location AVP
        AVP_Header                     aVP_Header,//<AVP header: 707 ....>
        Current_Location_Type          aVP_Data
      }
      with {
        //variant "present=bytes(4, 707);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 707)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Identity_Set_AVP{
        //    Ref: 3GPP TS 29.329    6.3.10 Identity-Set AVP
        AVP_Header                     aVP_Header,//<AVP header: 708 ....>
        Identity_Set_Type              aVP_Data
      }
      with {
        //variant "present=bytes(4, 708);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 708)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Expiry_Time_AVP{
        //    Ref: 3GPP TS 29.329    6.3.16 Expiry-Time
        AVP_Header                     aVP_Header,//<AVP header: 709 ....>
        Time                          aVP_Data
      }
      with {
        //variant "present=bytes(4, 709);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 709)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Send_Data_Indication_AVP{
        //    Ref: 3GPP TS 29.329    6.3.17 Send-Data-Indication AVP
        AVP_Header                     aVP_Header,//<AVP header: 710 ....>
        Send_Data_Indication_Type      aVP_Data
      }
      with {
        //variant "present=bytes(4, 710);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 710)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Server_Name_AVP{
        //    Ref: 3GPP TS 29.329    6.3.9 Server-Name AVP
        AVP_Header                     aVP_Header,//<AVP header: 602 ....>
        UTF8String                      aVP_Data
      }
      with {
        //variant "present=bytes(4, 602);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 602)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Supported_Features_AVP{
        //    Ref: 3GPP TS 29.329    6.3.11 Supported-Features AVP (See 3GPP TS 29.229, clause 6.3.29)
        AVP_Header                     aVP_Header,//<AVP header: 628 ....>
        Vendor_Id_AVP                vendor_Id,
        Feature_List_ID_AVP         feature_list_Id optional,
        Feature_List_AVP             feature_list,
        set of AVP_Type                aVP_Data optional    //other parameters.
      }
      with {
        //variant "present=bytes(4, 628);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 628)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Feature_List_ID_AVP{
        //    Ref: 3GPP TS 29.229, clause 6.3.30
        AVP_Header                     aVP_Header,//<AVP header: 629 ....>
        UInt32                          aVP_Data
      }
      with {
        //variant "present=bytes(4, 629);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 629)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Feature_List_AVP{
        //    Ref: 3GPP TS 29.229, clause 6.3.31
        AVP_Header                     aVP_Header,//<AVP header: 630 ....>
        UInt32                          aVP_Data
      }
      with {
        //variant "present=bytes(4, 630);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 630)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Wildcarded_PSI_AVP{
        //    Ref: 3GPP TS 29.329    6.3.19 Wildcarded-PSI AVP , 3GPP TS 29.229
        AVP_Header                     aVP_Header,//<AVP header: 634 ....>
        UTF8String                      aVP_Data
      }
      with {
        //variant "present=bytes(4, 634);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 634)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Wildcarded_IMPU_AVP{
        //    Ref: 3GPP TS 29.329    6.3.20 Wildcarded-IMPU AVP , 3GPP TS 29.229
        AVP_Header                     aVP_Header,//<AVP header: 636 ....>
        UTF8String                      aVP_Data
      }
      with {
        //variant "present=bytes(4, 636);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 636)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record DSAI_Tag_AVP{
        //    Ref: 3GPP TS 29.329    6.3.18 DSAI-Tag AVP
        AVP_Header                     aVP_Header,//<AVP header: 711 ....>
        octetstring                      aVP_Data
      }
      with {
        //variant "present=bytes(4, 711);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 711)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Experimental_Result_Code_AVP{
        //    Ref: 3GPP TS 29.229    6.2 Result-Code AVP values
        AVP_Header                     aVP_Header,//<AVP header: 298 ....>
        Experimental_Result_Type    aVP_Data
      }
      with {
        //variant "present=bytes(4, 298);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 298)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Experimental_Result_AVP{
        //    Ref: 3GPP TS 29.229    6.2 Result-Code AVP values
        //  FUN 766300-PCL-030 :  Experimental-Result AVP shall be used for Sh/Dh errors.
        //  This is a grouped AVP which contains the 3GPP Vendor ID in the Vendor-Id AVP, and the error code in
        //  the Experimental-Result-Code AVP.
        AVP_Header                         aVP_Header,//<AVP header: 297 ....>
        Vendor_Id_AVP                    vendor_Id,
        Experimental_Result_Code_AVP    experimental_Result_Code
      }
      with {
        //variant "present=bytes(4, 297);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (experimental_Result_Code) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 297)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header, vendor_Id, experimental_Result_Code)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record User_Data_AVP{
        //    Ref: 3GPP TS 29.229    6.3.7 User-Data AVP
        //    Ref:
        AVP_Header                     aVP_Header,//<AVP header: 606 ....>
        octetstring                    aVP_Data
      }
      with {
        //variant "present=bytes(4, 606);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 606)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }
    }

    group RFC4005_AVPs{
      group NAS_Session_AVPs{

        type record Called_Station_Id_AVP{
          //  Ref: RFC4005 4.5  Called_Station_Id AVP
          AVP_Header                     aVP_Header,//<AVP header: 30 ....>
          UTF8String                  aVP_Data
        }
        with {
          //variant "present=bytes(4, 30);use=com.testingtech.ttcn.tci.codec.CodecHelper"
          //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
          variant  "PRESENCE(aVP_Header.aVP_Code = 30)" ;
          variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
          variant (aVP_Header) "LENGTHINDEX(aVP_len)";
          variant  "PADDING(dword32)"; 

        }
      }//end group NAS_Session_AVPs

      group IP_Access_Authorization_AVPs {

        type record Framed_IP_Address_AVP{
          //  Ref: RFC4005 6.11.1 Framed_IP_Address AVP
          AVP_Header                     aVP_Header,//<AVP header: 8 ....>
          octetstring                 aVP_Data
        }
        with {
          //variant "present=bytes(4, 8);use=com.testingtech.ttcn.tci.codec.CodecHelper"
          //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
          variant  "PRESENCE(aVP_Header.aVP_Code = 8)" ;
          variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
          variant (aVP_Header) "LENGTHINDEX(aVP_len)";
          variant  "PADDING(dword32)"; 


        }

        type record Framed_IPv6_Prefix_AVP{
          //  Ref: RFC4005 6.11.1 Framed_IPv6_Prefix AVP
          AVP_Header                     aVP_Header,//<AVP header: 97 ....>
          octetstring                 aVP_Data
        }
        with {
          //variant "present=bytes(4, 97);use=com.testingtech.ttcn.tci.codec.CodecHelper"
          // variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
          variant  "PRESENCE(aVP_Header.aVP_Code = 97)" ;
          variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
          variant (aVP_Header) "LENGTHINDEX(aVP_len)";
          variant  "PADDING(dword32)"; 

        }

      }//end group IP_Access_Authorization_AVPs

    }//end group RFC4005_AVPs

    /* ***** Rf and Ro  Ref: RFC4006   ***** */
    group RFC4006_AVPs{
      type record Service_Context_Id_AVP{
        //    Ref: RFC4006 8.42.  Service-Context-Id AVP
        AVP_Header                     aVP_Header,//<AVP header: 461 ....>
        UTF8String                  aVP_Data
      }
      with {
        //variant "present=bytes(4, 461);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 461)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record CC_Request_Type_AVP{
        //    Ref: RFC4006 8.3.  CC-Request-Type AVP
        AVP_Header                     aVP_Header,//<AVP header: 416 ....>
        CC_Request_Ty_Type          aVP_Data
      }
      with {
        //variant "present=bytes(4, 416);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 416)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record CC_Request_Number_AVP{
        //    Ref: RFC4006 8.2.  CC-Request-Number AVP
        AVP_Header                     aVP_Header,//<AVP header: 415 ....>
        UInt32                      aVP_Data
      }
      with {
        //variant "present=bytes(4, 415);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 415)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record CC_Sub_Session_Id_AVP{
        //    Ref: RFC4006 8.5.  CC-Sub-Session-Id AVP
        AVP_Header                     aVP_Header,//<AVP header: 419 ....>
        UInt64                      aVP_Data
      }
      with {
        //variant "present=bytes(4, 419);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 419)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Subscription_Id_Type_AVP{
        //    Ref: RFC4006 8.47.  Subscription-Id-Type AVP
        AVP_Header                     aVP_Header,//<AVP header: 450 ....>
        Subscription_Id_Ty_Type     aVP_Data
      }
      with {
        //variant "present=bytes(4, 450);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 450)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Subscription_Id_Data_AVP{
        //    Ref: RFC4006
        AVP_Header                     aVP_Header,//<AVP header: 444 ....>
        UTF8String                  aVP_Data
      }
      with {
        //variant "present=bytes(4, 444);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 444)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Subscription_Id_AVP{
        //    Ref: RFC4006 8.46.  Subscription-Id AVP
        AVP_Header                     aVP_Header,//< AVP Header: 443 >
        Subscription_Id_Type_AVP     subscription_Id_Type,
        Subscription_Id_Data_AVP     subscription_Id_Data
      }
      with {
        //variant "present=bytes(4, 443);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (subscription_Id_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 443)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  subscription_Id_Type,subscription_Id_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Service_Identifier_AVP{
        //    Ref: RFC4006 8.28.  Service-Identifier AVP
        AVP_Header                     aVP_Header,//< AVP Header: 439 >
        UInt32                      aVP_Data
      }
      with {
        //variant "present=bytes(4, 439);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 439)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record CC_Time_AVP{
        //    Ref: RFC4006 8.21.  CC-Time AVP
        AVP_Header                     aVP_Header,//< AVP Header: 420 >
        UInt32                      aVP_Data
      }
      with {
        //variant "present=bytes(4, 420);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 420)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Value_Digits_AVP{
        //    Ref: RFC4006 8.10.  Value-Digits AVP
        AVP_Header                     aVP_Header,//< AVP Header: 447 >
        Int64                          aVP_Data
      }
      with {
        //variant "present=bytes(4, 447);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 447)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Exponent_AVP{
        //    Ref: RFC4006 8.9.  Exponent AVP
        AVP_Header                     aVP_Header,//< AVP Header: 429 >
        Int32                       aVP_Data
      }
      with {
        //variant "present=bytes(4, 429);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 429)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Unit_Value_AVP{
        //    Ref: RFC4006 8.8.  Unit-Value AVP
        AVP_Header                     aVP_Header,//< AVP Header: 445 >
        Value_Digits_AVP             value_Digits,
        Exponent_AVP                 exponent optional
      }
      with {
        //variant "present=bytes(4, 445);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (exponent) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 445)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  value_Digits,exponent)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }
      type record Currency_Code_AVP{
        //    Ref: RFC4006 8.11.  Currency-Code AVP
        AVP_Header                     aVP_Header,//< AVP Header: 425 >
        UInt32                        aVP_Data
      }
      with {
        //variant "present=bytes(4, 425);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 425)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type set CC_Money_AVP{
        //    Ref: RFC4006 8.22.  CC-Money AVP
        AVP_Header                     aVP_Header,//< AVP Header: 413 >
        Unit_Value_AVP                 unit_Value,
        Currency_Code_AVP             currency_Code optional
      }
      with {
        //variant "present=bytes(4, 413);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        // variant (currency_Code) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 413)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  unit_Value,currency_Code)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record CC_Total_Octets_AVP{
        //    Ref: RFC4006 8.23.  CC-Total-Octets AVP
        AVP_Header                     aVP_Header,//< AVP Header: 421 >
        UInt64                      aVP_Data
      }
      with {
        //variant "present=bytes(4, 421);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 421)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record CC_Input_Octets_AVP{
        //    Ref: RFC4006 8.24.  CC-Input-Octets AVP
        AVP_Header                     aVP_Header,//< AVP Header: 412 >
        UInt64                      aVP_Data
      }
      with {
        //variant "present=bytes(4, 412);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 412)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record CC_Output_Octets_AVP{
        //    Ref: RFC4006 8.25.  CC-Output-Octets AVP
        AVP_Header                     aVP_Header,//< AVP Header: 414 >
        UInt64                      aVP_Data
      }
      with {
        //variant "present=bytes(4, 414);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 414)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record CC_Service_Specific_Units_AVP{
        //    Ref: RFC4006 8.26.  CC-Service-Specific-Units AVP
        AVP_Header                     aVP_Header,//< AVP Header: 417 >
        UInt64                      aVP_Data
      }
      with {
        //variant "present=bytes(4, 417);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 417)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type set Requested_Service_Unit_AVP{
        //    Ref: RFC4006 8.18.  Requested-Service-Unit AVP
        AVP_Header                         aVP_Header,//< AVP Header: 437 >
        CC_Time_AVP                     cC_Time optional,
        CC_Money_AVP                     cC_Money optional,
        CC_Total_Octets_AVP             cC_Total_Octets optional,
        CC_Input_Octets_AVP             cC_Input_Octets optional,
        CC_Output_Octets_AVP             cC_Output_Octets optional,
        CC_Service_Specific_Units_AVP     cC_Service_Specific_Units optional,
        set of AVP_Type                 aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 437);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (cC_Money) "fieldPresent=bytes(4, 413);decode=CodecHelper.decodeCC_Money_AVP()"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 437)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header, cC_Time ,cC_Money ,cC_Total_Octets,cC_Input_Octets,cC_Output_Octets,cC_Service_Specific_Units,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }
      type record Requested_Action_AVP{
        //    Ref: RFC4006 8.41.  Requested-Action AVP
        AVP_Header                     aVP_Header,//< AVP Header: 436 >
        Requested_Action_Type       aVP_Data
      }
      with {
        //variant "present=bytes(4, 436);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 436)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Tariff_Change_Usage_AVP{
        //    Ref: RFC4006 8.27.  Tariff-Change-Usage AVP
        AVP_Header                     aVP_Header,//< AVP Header: 452 >
        Tariff_Change_Usage_Type    aVP_Data
      }
      with {
        //variant "present=bytes(4, 452);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 452)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type set Used_Service_Unit_AVP{
        //    Ref: RFC4006 8.19.  Used-Service-Unit AVP
        AVP_Header                     aVP_Header,//< AVP Header: 446 >
        Tariff_Change_Usage_AVP     tariff_Change_Usage optional,
        CC_Time_AVP                 cC_Time optional,
        CC_Money_AVP                 cC_Money optional,
        CC_Total_Octets_AVP         cC_Total_Octets optional,
        CC_Input_Octets_AVP         cC_Input_Octets optional,
        CC_Output_Octets_AVP         cC_Output_Octets optional,
        CC_Service_Specific_Units_AVP     cC_Service_Specific_Units optional,
        set of AVP_Type                 aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 446);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (cC_Money) "fieldPresent=bytes(4, 413);decode=CodecHelper.decodeCC_Money_AVP()"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 446)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  tariff_Change_Usage,cC_Time,cC_Money,cC_Total_Octets,cC_Input_Octets,cC_Output_Octets,cC_Service_Specific_Units,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Multiple_Services_Indicator_AVP{
        //    Ref: RFC4006 8.40.  Multiple-Services-Indicator AVP
        AVP_Header                     aVP_Header,//< AVP Header: 455 >
        Multiple_Serv_Indi_Type     aVP_Data
      }
      with {
        //variant "present=bytes(4, 455);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 455)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record  Tariff_Time_Change_AVP{
        //    Ref: RFC4006 8.20.  Tariff-Time-Change AVP
        AVP_Header                     aVP_Header,//< AVP Header: 451 >
        Time                         aVP_Data
      }
      with {
        //variant "present=bytes(4, 451);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 451)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type set Granted_Service_Unit_AVP{
        //    Ref: RFC4006 8.17.  Granted-Service-Unit AVP
        AVP_Header                     aVP_Header,//< AVP Header: 431 >
        Tariff_Time_Change_AVP         tariff_Time_Change optional,
        CC_Time_AVP                 cC_Time optional,
        CC_Money_AVP                 cC_Money optional,
        CC_Total_Octets_AVP         cC_Total_Octets optional,
        CC_Input_Octets_AVP         cC_Input_Octets optional,
        CC_Output_Octets_AVP         cC_Output_Octets optional,
        CC_Service_Specific_Units_AVP     cC_Service_Specific_Units optional,
        set of AVP_Type                 aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 431);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (cC_Money) "fieldPresent=bytes(4, 413);decode=CodecHelper.decodeCC_Money_AVP()"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 431)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header, tariff_Time_Change,cC_Time,cC_Money, cC_Total_Octets,cC_Input_Octets,cC_Output_Octets,cC_Service_Specific_Units,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record  Rating_Group_AVP{
        //    Ref: RFC4006 8.29.  Rating-Group AVP
        AVP_Header                     aVP_Header,//< AVP Header: 433 >
        UInt32                      aVP_Data
      }
      with {
        //variant "present=bytes(4, 433);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 433)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record G_S_U_Pool_Identifier_AVP{
        //    Ref: RFC4006 8.31.  G-S-U-Pool-Identifier AVP
        AVP_Header                         aVP_Header,//< AVP Header: 453 >
        UInt32                          aVP_Data
      }
      with {
        //variant "present=bytes(4, 453);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 453)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record CC_Unit_Type_AVP{
        //    Ref: RFC4006 8.32.  CC-Unit-Type AVP
        AVP_Header                     aVP_Header,//< AVP Header: 454 >
        CC_Unit_Ty_Type             aVP_Data
      }
      with {
        //variant "present=bytes(4, 454);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 454)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type set G_S_U_Pool_Reference_AVP{
        //    Ref: RFC4006 8.30.  G-S-U-Pool-Reference AVP
        AVP_Header                     aVP_Header,//< AVP Header: 457 >
        G_S_U_Pool_Identifier_AVP    g_S_U_Pool_Identifier,
        CC_Unit_Type_AVP            cC_Unit_Type,
        Unit_Value_AVP                unit_Value
      }
      with {
        //variant "present=bytes(4, 457);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        // variant (unit_Value) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 457)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,   g_S_U_Pool_Identifier,cC_Unit_Type,unit_Value)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }
      type record Validity_Time_AVP{
        //    Ref: RFC4006 8.33.  Validity-Time AVP
        AVP_Header                     aVP_Header,//< AVP Header: 448 >
        UInt32                        aVP_Data
      }
      with {
        //variant "present=bytes(4, 448);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 448)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Final_Unit_Action_AVP{
        //    Ref: RFC4006 8.35.  Final-Unit-Action AVP
        AVP_Header                     aVP_Header,//< AVP Header: 449 >
        Final_Unit_Action_Type        aVP_Data
      }
      with {
        //variant "present=bytes(4, 449);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 449)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Restriction_Filter_Rule_AVP{
        //    Ref: RFC4006 8.36.  Restriction-Filter-Rule AVP
        AVP_Header                     aVP_Header,//< AVP Header: 438 >
        IPFilterRule_Type            aVP_Data
      }
      with {
        //variant "present=bytes(4, 438);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 438)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Filter_Id_AVP{
        //    Ref: RFC4005 6.7.  Filter-Id AVP
        AVP_Header                     aVP_Header,//< AVP Header: 11 >
        UTF8String                  aVP_Data
      }
      with {
        //variant "present=bytes(4, 11);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 11)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Redirect_Address_Type_AVP{
        //    Ref: RFC4006 8.38.  Redirect-Address-Type AVP
        AVP_Header                     aVP_Header,//< AVP Header: 433 >
        Redirect_Address_Ty_Type    aVP_Data
      }
      with {
        //variant "present=bytes(4, 433);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 433)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Redirect_Server_Address_AVP{
        //    Ref: RFC4006 8.39.  Redirect-Server-Address AVP
        AVP_Header                     aVP_Header,//< AVP Header: 435 >
        UTF8String                    aVP_Data
      }
      with {
        //variant "present=bytes(4, 435);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 435)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Redirect_Server_AVP{
        //    Ref: RFC4006 8.37.  Redirect-Server AVP
        AVP_Header                     aVP_Header,//< AVP Header: 434 >
        Redirect_Address_Type_AVP     redirect_Address_Type,
        Redirect_Server_Address_AVP redirect_Server_Address
      }
      with {
        //variant "present=bytes(4, 434);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //    //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 434)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  redirect_Address_Type,redirect_Server_Address)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type set Final_Unit_Indication_AVP{
        //    Ref: RFC4006 8.34.  Final-Unit-Indication AVP
        AVP_Header                     aVP_Header,//< AVP Header: 430 >
        Final_Unit_Action_AVP         final_Unit_Action,
        set of Restriction_Filter_Rule_AVP restriction_Filter_Rule optional,
        set of Filter_Id_AVP         filter_Id optional,
        Redirect_Server_AVP         redirect_Server optional
      }
      with {
        //variant "present=bytes(4, 430);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (restriction_Filter_Rule) "fieldPresent=bytes(4, 438)&&CodecHelper.isAvailable()"
        //variant (filter_Id) "fieldPresent=bytes(4, 11)&&CodecHelper.isAvailable()"
        //variant (redirect_Server) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 430)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  final_Unit_Action,restriction_Filter_Rule,filter_Id,redirect_Server)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type set Multiple_Services_Credit_Control_AVP{
        //    Ref: RFC4006 8.16.  Multiple-Services-Credit-Control AVP
        AVP_Header                     aVP_Header,//< AVP Header: 456 >
        Granted_Service_Unit_AVP     granted_Service_Unit optional,
        Requested_Service_Unit_AVP     requested_Service_Unit optional,
        set of Used_Service_Unit_AVP used_Service_Unit optional,
        Tariff_Change_Usage_AVP     tariff_Change_Usage optional,
        set of Service_Identifier_AVP service_Identifier optional,
        Rating_Group_AVP             rating_Group optional,
        set of G_S_U_Pool_Reference_AVP g_S_U_Pool_Reference optional,
        Validity_Time_AVP             validity_Time optional,
        Result_Code_AVP             result_Codeoptional optional,
        Final_Unit_Indication_AVP     final_Unit_Indication optional,
        set of AVP_Type             aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 456);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (used_Service_Unit) "fieldPresent=bytes(4, 446)&&CodecHelper.isAvailable()"
        //variant (service_Identifier) "fieldPresent=bytes(4, 439)&&CodecHelper.isAvailable()"
        //variant (g_S_U_Pool_Reference) "fieldPresent=bytes(4, 457)&&CodecHelper.isAvailable()"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 456)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  granted_Service_Unit,requested_Service_Unit,used_Service_Unit,tariff_Change_Usage ,service_Identifier,rating_Group,g_S_U_Pool_Reference,validity_Time ,result_Codeoptional ,final_Unit_Indication ,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }
      type record Service_Parameter_Type_AVP{
        //    Ref: RFC4006 8.44.  Service-Parameter-Type AVP
        AVP_Header                     aVP_Header,//< AVP Header: 441 >
        UInt32                        aVP_Data
      }
      with {
        //variant "present=bytes(4, 441);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 441)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Service_Parameter_Value_AVP{
        //    Ref: RFC4006 8.45.  Service-Parameter-Value AVP
        AVP_Header                     aVP_Header,//< AVP Header: 442 >
        octetstring                    aVP_Data
      }
      with {
        //variant "present=bytes(4, 442);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 442)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type set Service_Parameter_Info_AVP{
        //    Ref: RFC4006 8.43.  Service-Parameter-Info AVP
        AVP_Header                     aVP_Header,//< AVP Header: 440 >
        Service_Parameter_Type_AVP    service_Parameter_Type,
        Service_Parameter_Value_AVP service_Parameter_Value
      }
      with {
        //variant "present=bytes(4, 440);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //    //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 440)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  service_Parameter_Type,service_Parameter_Value)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record CC_Correlation_Id_AVP{
        //    Ref: RFC4006 8.1.  CC-Correlation-Id AVP
        AVP_Header                     aVP_Header,//< AVP Header: 411 >
        octetstring                    aVP_Data
      }
      with {
        //variant "present=bytes(4, 411);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 411)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record User_Equipment_Info_Type_AVP{
        //    Ref: RFC4006 8.50.  User-Equipment-Info-Type AVP
        AVP_Header                     aVP_Header,//< AVP Header: 459 >
        User_Equipment_Info_Ty_Type    aVP_Data
      }
      with {
        //variant "present=bytes(4, 459);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 459)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record User_Equipment_Info_Value_AVP{
        //    Ref: RFC4006 8.51.  User-Equipment-Info-Value AVP
        AVP_Header                     aVP_Header,//< AVP Header: 460 >
        octetstring                    aVP_Data
      }
      with {
        //variant "present=bytes(4, 460);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 460)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type set User_Equipment_Info_AVP{
        //    Ref: RFC4006 8.49.  User-Equipment-Info AVP
        AVP_Header                         aVP_Header,//< AVP Header: 458 >
        User_Equipment_Info_Type_AVP     user_Equipment_Info_Type,
        User_Equipment_Info_Value_AVP     user_Equipment_Info_Value
      }
      with {
        //variant "present=bytes(4, 458);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (user_Equipment_Info_Value) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 458)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  user_Equipment_Info_Type,user_Equipment_Info_Value)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }
      type record CC_Session_Failover_AVP{
        //    Ref: RFC4006 8.4.  CC-Session-Failover AVP
        AVP_Header                     aVP_Header,//< AVP Header: 418 >
        CC_Session_Failover_Type    aVP_Data
      }
      with {
        //variant "present=bytes(4, 418);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 418)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Cost_Unit_AVP{
        //    Ref: RFC4006 8.12.  Cost-Unit AVP
        AVP_Header                     aVP_Header,//< AVP Header: 424 >
        UTF8String                    aVP_Data
      }
      with {
        //variant "present=bytes(4, 424);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 424)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type set Cost_Information_AVP{
        //    Ref: RFC4006 8.7.  Cost-Information AVP
        AVP_Header                     aVP_Header,//< AVP Header: 423 >
        Unit_Value_AVP                 unit_Value,
        Currency_Code_AVP             currency_Code,
        Cost_Unit_AVP                 cost_Unit optional
      }
      with {
        //variant "present=bytes(4, 423);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (cost_Unit) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 423)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  unit_Value,currency_Code,cost_Unit)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }
      type record Check_Balance_Result_AVP{
        //    Ref: RFC4006 8.6.  Check-Balance-Result AVP 12.8.  Check-Balance-Result AVP
        AVP_Header                         aVP_Header,//< AVP Header: 422 >
        Check_Balance_Result_Type         aVP_Data
      }
      with {
        //variant "present=bytes(4, 422);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 422)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Credit_Control_Failure_Handling_AVP{
        //    Ref: RFC4006 8.14.  Credit-Control-Failure-Handling AVP
        AVP_Header                     aVP_Header,//< AVP Header: 427 >
        Credit_Cont_Fail_Hand_Type     aVP_Data
      }
      with {
        //variant "present=bytes(4, 427);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 427)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Direct_Debiting_Failure_Handling_AVP{
        //    Ref: RFC4006 8.15.  Direct-Debiting-Failure-Handling AVP
        AVP_Header                     aVP_Header,//< AVP Header: 428 >
        Direct_Debi_Fail_Hand_Type    aVP_Data
      }
      with {
        //variant "present=bytes(4, 428);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 428)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
    }//end of group RFC4006_AVPa
    group TS129_212Rx_AVPS{

      type record Abort_Cause_AVP{
        //Ref: ETSI TS 129 214 Abort Cause AVP
        AVP_Header            aVP_Header,//<AVP header: 500 ....>
        Abort_Cause_Type    aVP_Data
      }
      with {
        //variant "present=bytes(4, 500);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 500)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Access_Network_Charging_Address_AVP{
        //Ref: ETSI TS 129 214 Access_Network_Charging_Address AVP
        AVP_Header            aVP_Header,//<AVP header: 501 ....>
        Address             aVP_Data
      }
      with {
        //variant "present=bytes(4, 501);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 501)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Access_Network_Charging_Identifier_AVP{
        //Ref: ETSI TS 129 214 Access_Network_Charging_Identifier AVP
        AVP_Header                                        aVP_Header, //<AVP header: 502 ....>
        Access_Network_Charging_Identifier_Value_AVP     acc_Net_Charging_Id_Val,
        set of Flows_AVP                                flows
      }
      with {
        //variant "present=bytes(4, 502);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (flows) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 502)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  acc_Net_Charging_Id_Val,flows)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Access_Network_Charging_Identifier_Value_AVP{
        //Ref: ETSI TS 129 214  Access_Network_Charging_Identifier_Value AVP
        AVP_Header            aVP_Header,//<AVP header: 503 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 503);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 503)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }

      type record Acceptable_Service_Info_AVP{
        //Ref: ETSI TS 129 214 Acceptable_Service_Info_AVP
        AVP_Header            aVP_Header,//<AVP header: 526 ....>
        set of Media_Component_Description_AVP            media_component_description optional,
        Max_Requested_Bandwidth_UL_AVP                    max_Requested_Bw_Ul optional,
        Max_Requested_Bandwidth_DL_AVP                    max_Requested_Bw_Dl optional,
        set of AVP_Type     aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 411);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (media_component_description) "fieldPresent=bytes(4, 511)&&CodecHelper.isAvailable()"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 526)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  media_component_description,max_Requested_Bw_Ul,max_Requested_Bw_Dl,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }

      type record AF_Application_Identifier_AVP{
        //Ref: ETSI TS 129 214 AF_Application_Identifier AVP
        AVP_Header            aVP_Header,//<AVP header: 504 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 504);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 504)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }

      type record AF_Charging_Identifier_AVP{
        //Ref: ETSI TS 129 214 AF_Charging_Identifier AVP
        AVP_Header            aVP_Header,//<AVP header: 505 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 505);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        // variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 505)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }

      type record Application_Service_Provider_Identity_AVP{
        //Ref: ETSI TS 129 214 Application_Service_Provider_Identity AVP
        AVP_Header            aVP_Header,//<AVP header: 532 ....>
        UTF8String            aVP_Data
      }
      with {
        //variant "present=bytes(4, 532);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 532)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Codec_Data_AVP{
        //Ref: ETSI TS 129 214 Codec_data AVP
        AVP_Header            aVP_Header,//<AVP header: 524 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 524);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 524)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }

      type record Flow_Description_AVP{
        //Ref: ETSI TS 129 214 Flow_Description AVP
        AVP_Header            aVP_Header,//<AVP header: 507 ....>
        IPFilterRule_Type      aVP_Data
      }
      with {
        //variant "present=bytes(4, 507);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 507)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Flow_Number_AVP{
        //Ref: ETSI TS 129 214 Flow_Number AVP
        AVP_Header            aVP_Header,//<AVP header: 509 ....>
        UInt32              aVP_Data
      }
      with {
        //variant "present=bytes(4, 509);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 509)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Flows_AVP{
        //Ref: ETSI TS 129 214 Flows_AVP
        AVP_Header            aVP_Header,//<AVP header: 510 ....>
        Media_Component_Number_AVP    media_component_number,
        set of Flow_Number_AVP    flow_Number optional,
        Final_Unit_Action_AVP    final_unit_action optional
      }
      with {
        //variant "present=bytes(4, 510);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        // variant (flow_Number) "fieldPresent=bytes(4, 509)&&CodecHelper.isAvailable()"
        //variant (final_unit_action) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 510)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  media_component_number,flow_Number,final_unit_action)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }

      type record Flow_Status_AVP{
        //Ref: ETSI TS 129 214 Flow_Status AVP
        AVP_Header            aVP_Header,//<AVP header: 511 ...>
        Flow_Status_Type    aVP_Data
      }
      with {
        //variant "present=bytes(4, 511);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 511)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Flow_Usage_AVP{
        //Ref: ETSI TS 129 214 Flow_Usage AVP
        AVP_Header            aVP_Header,//<AVP header: 512 ....>
        Flow_Usage_Type    aVP_Data
      }
      with {
        //variant "present=bytes(4, 512);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 512)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Service_URN_AVP{
        //Ref: ETSI TS 129 214 Service_URN AVP
        AVP_Header            aVP_Header,//<AVP header: 525 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 525);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        // variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 525)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }

      type record Specific_Action_AVP{
        //Ref: ETSI TS 129 214 Specific_Action AVP
        AVP_Header            aVP_Header,//<AVP header: 513 ....>
        Specific_Action_Type    aVP_Data
      }
      with {
        //variant "present=bytes(4, 513);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 513)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type set of Specific_Action_AVP Setof_Specific_Action_AVP
      with {
        //variant "present=bytes(4, 513)"
        variant  "";
      }

      type record Max_Requested_Bandwidth_DL_AVP{
        //Ref: ETSI TS 129 214 FMax_Requested_Bandwidth_DL AVP
        AVP_Header            aVP_Header,//<AVP header: 515 ....>
        UInt32              aVP_Data
      }
      with {
        //variant "present=bytes(4, 515);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 515)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }


      type record Max_Requested_Bandwidth_UL_AVP{
        //Ref: ETSI TS 129 214 FMax_Requested_Bandwidth_UL AVP
        AVP_Header            aVP_Header,//<AVP header: 516 ....>
        UInt32              aVP_Data
      }
      with {
        //variant "present=bytes(4, 516);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 516)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Media_Component_Description_AVP{
        //Ref: ETSI TS 129 214 Media_Component_Decription_AVP
        AVP_Header            aVP_Header,//<AVP header: 517 ....>
        Media_Component_Number_AVP     media_Component_Nr,
        set of Media_Sub_Component_AVP media_Sub_component optional,
        AF_Application_Identifier_AVP    af_Application_Id optional,
        Media_Type_AVP                    media_type optional,
        Max_Requested_Bandwidth_UL_AVP    max_Requested_Bw_Ul optional,
        Max_Requested_Bandwidth_DL_AVP    max_Requested_Bw_Dl optional,
        Flow_Status_AVP                flow_Status optional,
        Reservation_Priority_AVP        reservation_Priority optional,
        RS_Bandwidth_AVP                rs_Bw optional,
        RR_Bandwidth_AVP                rr_Bw optional,
        set of Codec_Data_AVP            codec_data optional
      }
      with {
        //variant "present=bytes(4, 517);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        // variant (media_Sub_component) "fieldPresent=bytes(4, 519)&&CodecHelper.isAvailable()"
        // variant (codec_data) "fieldPresent=bytes(4, 524)&&CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 517)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,media_Component_Nr,media_Sub_component,af_Application_Id,media_type,max_Requested_Bw_Ul ,max_Requested_Bw_Dl,flow_Status,reservation_Priority ,rs_Bw ,rr_Bw ,codec_data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Media_Component_Number_AVP{
        //Ref: ETSI TS 129 214 Media_Component_Number_AVP
        AVP_Header            aVP_Header,//<AVP header: 518 ....>
        UInt32             aVP_Data
      }
      with {
        //variant "present=bytes(4, 518);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 518)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Media_Sub_Component_AVP{
        //Ref: ETSI TS 129 214 Media_Sub_Component_AVP
        AVP_Header                                        aVP_Header,//<AVP header: 519 ....>
        Flow_Number_AVP                                flow_Number,
        record length (0..2) of Flow_Description_AVP     flow_Description optional,
        Flow_Status_AVP                                flow_Status optional,
        Flow_Usage_AVP                                    flow_Usage optional,
        Max_Requested_Bandwidth_UL_AVP                    max_Requested_Bw_Ul optional,
        Max_Requested_Bandwidth_DL_AVP                    max_Requested_Bw_Dl optional,
        AF_Signalling_Protocol_AVP                        af_Signalling_Protocol optional,
        set of AVP_Type                                   aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 519);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (flow_Description) "fieldPresent=bytes(4, 507)&&CodecHelper.isAvailable()"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 519)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  flow_Number,flow_Description,flow_Status,flow_Usage,max_Requested_Bw_Ul,max_Requested_Bw_Dl,af_Signalling_Protocol,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Media_Type_AVP{
        //Ref: ETSI TS 129 214 Media_Type AVP
        AVP_Header            aVP_Header,//<AVP header: 520 ....>
        Media_Type_Type    aVP_Data
      }
      with {
        //variant "present=bytes(4, 520);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 520)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record MPS_Identifier_AVP{
        //Ref: ETSI TS 129 214 MPS_Identifier AVP
        AVP_Header            aVP_Header,//<AVP header: 528 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 528);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        // variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 528)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }

      type record RR_Bandwidth_AVP{
        //Ref: ETSI TS 129 214 RR Bandwidth_AVP
        AVP_Header            aVP_Header,//<AVP header: 521 ....>
        UInt32               aVP_Data
      }
      with {
        //variant "present=bytes(4, 521);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 521)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record RS_Bandwidth_AVP{
        //Ref: ETSI TS 129 214 RS Bandwidth_AVP
        AVP_Header            aVP_Header,//<AVP header: 522 ....>
        UInt32               aVP_Data
      }
      with {
        //variant "present=bytes(4, 522);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 522)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Service_Info_Status_AVP{
        //Ref: ETSI TS 129 214 Service_Info AVP
        AVP_Header            aVP_Header,//<AVP header: 527 ....>
        Service_Info_Type    aVP_Data
      }
      with {
        //variant "present=bytes(4, 527);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 527)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record SIP_Forking_Indication_AVP{
        //Ref: ETSI TS 129 214 SIP_Forking_Indication AVP
        AVP_Header            aVP_Header,//<AVP header: 523 ....>
        SIP_Forking_Indication_Type    aVP_Data
      }
      with {
        //variant "present=bytes(4, 523);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 523)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Sponsor_Identity_AVP{
        //Ref: ETSI TS 129 214 Sponsor_Identity AVP
        AVP_Header            aVP_Header,//<AVP header: 531 ....>
        UTF8String         aVP_Data
      }
      with {
        //variant "present=bytes(4, 531);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 531)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Sponsored_Connectivity_Data_AVP{
        //Ref: ETSI TS 129 214 Sponsored_Connectivity_Data AVP
        AVP_Header                                    aVP_Header, //<AVP header: 530 ....>
        Sponsor_Identity_AVP                        sponsor_Identity optional,
        Application_Service_Provider_Identity_AVP     application_service_provider_Id optional,
        Granted_Service_Unit_AVP                    granted_Service_Unit optional,
        Used_Service_Unit_AVP                        used_service_unit optional,
        set of AVP_Type                               aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 530);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 530)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  sponsor_Identity ,application_service_provider_Id,granted_Service_Unit,used_service_unit ,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }

      type record AF_Signalling_Protocol_AVP{
        //Ref: ETSI TS 129 214 AF_Signalling_Protocol AVP
        AVP_Header            aVP_Header,//<AVP header: 529 ....>
        AF_Signalling_Protocol_Type    aVP_Data
      }
      with {
        //variant "present=bytes(4, 529);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 529)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Reservation_Priority_AVP{
        //Ref: ETSI TS 183 017 Reservation_Priority AVP
        AVP_Header            aVP_Header,//<AVP header: 458 ....>
        Reservation_Priority_Type aVP_Data
      }
      with {
        //variant "present=bytes(4, 458);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 458)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

    }//end of group TS129_214Rx_AVPs

    group TS129_212Gx_AVPs{

      type record IP_CAN_Type_AVP{
        //Ref: ETSI TS 129 212 IP CAN Type AVP
        AVP_Header            aVP_Header,//<AVP header: 1027 ....>
        IP_CAN_Type            aVP_Data
      }
      with {
        //variant "present=bytes(4, 1027);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1027)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record RAT_Type_AVP{
        //Ref: ETSI TS 129 212 RAT Type AVP
        AVP_Header            aVP_Header,//<AVP header: 1032 ....>
        RAT_Type            aVP_Data
      }
      with {
        //variant "present=bytes(4, 1032);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1032)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Bearer_Control_Mode_AVP{
        //Ref: ETSI TS 129 212 Bearer_Control_Mode_AVP
        AVP_Header            aVP_Header,//<AVP header: 1023 ....>
        Bearer_Control_Mode    aVP_Data
      }
      with {
        //variant "present=bytes(4, 1023);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1023)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Bearer_Operation_AVP{
        //Ref: ETSI TS 129 212 Bearer_Operation_AVP
        AVP_Header            aVP_Header,//<AVP header: 1021 ....>
        Bearer_Operation    aVP_Data
      }
      with {
        //variant "present=bytes(4, 1021);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1021)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Bearer_Usage_AVP{
        //Ref: ETSI TS 129 212 Bearer_Usage_AVP
        AVP_Header            aVP_Header,//<AVP header: 1000 ....>
        Bearer_Usage        aVP_Data
      }
      with {
        //variant "present=bytes(4, 1000);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1000)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Charging_Correlation_Indicator_AVP{
        //Ref: ETSI TS 129 212 Charging_Correlation_Indicator_AVP
        AVP_Header                        aVP_Header,//<AVP header: 1073 ....>
        Charging_Correlation_Indicator    aVP_Data
      }
      with {
        //variant "present=bytes(4, 1073);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1073)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record CSG_Information_Reporting_AVP{
        //Ref: ETSI TS 129 212 CSG_Information_Reporting_AVP
        AVP_Header                        aVP_Header,//<AVP header: 1071 ....>
        CSG_Information_Reporting        aVP_Data
      }
      with {
        //variant "present=bytes(4, 1071);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1071)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Event_Trigger_AVP{
        //Ref: ETSI TS 129 212 Event_Trigger_AVP
        AVP_Header            aVP_Header,//<AVP header: 1006 ....>
        Event_Trigger        aVP_Data
      }
      with {
        //variant "present=bytes(4, 1006);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1006)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Flow_Direction_AVP{
        //Ref: ETSI TS 129 212 Flow_Direction_AVP
        AVP_Header            aVP_Header,//<AVP header: 1080 ....>
        Flow_Direction        aVP_Data
      }
      with {
        //variant "present=bytes(4, 1080);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1080)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Metering_Method_AVP{
        //Ref: ETSI TS 129 212 Metering_Method_AVP
        AVP_Header            aVP_Header,//<AVP header: 1007 ....>
        Metering_Method        aVP_Data
      }
      with {
        //variant "present=bytes(4, 1007);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1007)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Network_Request_Support_AVP{
        //Ref: ETSI TS 129 212 Network_Request_Support_AVP
        AVP_Header                aVP_Header,//<AVP header: 1024 ....>
        Network_Request_Support    aVP_Data
      }
      with {
        //variant "present=bytes(4, 1024);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1024)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Offline_AVP{
        //Ref: ETSI TS 129 212 Offlinet_AVP
        AVP_Header                aVP_Header,//<AVP header: 1008 ....>
        Offline                    aVP_Data
      }
      with {
        //variant "present=bytes(4, 1008);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1008)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Online_AVP{
        //Ref: ETSI TS 129 212 Online_AVP
        AVP_Header                aVP_Header,//<AVP header: 1009 ....>
        Online                    aVP_Data
      }
      with {
        //variant "present=bytes(4, 1009);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1009)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Packet_Filter_Operation_AVP{
        //Ref: ETSI TS 129 212 Packet_Filter_Operation_AVP
        AVP_Header                aVP_Header,//<AVP header: 1062 ....>
        Packet_Filter_Operation    aVP_Data
      }
      with {
        //variant "present=bytes(4, 1062);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1062)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Packet_Filter_Usage_AVP{
        //Ref: ETSI TS 129 212 Packet_Filter_Usage_AVP
        AVP_Header                aVP_Header,//<AVP header: 1072 ....>
        Packet_Filter_Usage        aVP_Data
      }
      with {
        //variant "present=bytes(4, 1072);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1072)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Pre_emption_Capability_AVP{
        //Ref: ETSI TS 129 212 Pre_emption_Capability_AVP
        AVP_Header                aVP_Header,//<AVP header: 1047 ....>
        Pre_emption_Capability    aVP_Data
      }
      with {
        //variant "present=bytes(4, 1047);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1047)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Pre_emption_Vulnerability_AVP{
        //Ref: ETSI TS 129 212 Pre_emption_Vulnerabilitye_AVP
        AVP_Header                    aVP_Header,//<AVP header: 1048 ....>
        Pre_emption_Vulnerability    aVP_Data
      }
      with {
        //variant "present=bytes(4, 1048);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1048)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Reporting_Level_AVP{
        //Ref: ETSI TS 129 212 Reporting_Levele_AVP
        AVP_Header            aVP_Header,//<AVP header: 1011 ....>
        Reporting_Level        aVP_Data
      }
      with {
        //variant "present=bytes(4, 1011);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1011)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record PCC_Rule_Status_AVP{
        //Ref: ETSI TS 129 212 PCC_Rule_Status_AVP
        AVP_Header            aVP_Header,//<AVP header: 1019 ....>
        PCC_Rule_Status        aVP_Data
      }
      with {
        //variant "present=bytes(4, 1019);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1019)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Session_Release_Cause_AVP{
        //Ref: ETSI TS 129 212 Session_Release_Cause_AVP
        AVP_Header                aVP_Header,//<AVP header: 1045 ....>
        Session_Release_Cause    aVP_Data
      }
      with {
        //variant "present=bytes(4, 1045);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1045)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record QoS_Class_Identifier_AVP{
        //Ref: ETSI TS 129 212 QoS_Class_Identifier_AVP
        AVP_Header                aVP_Header,//<AVP header: 1028 ....>
        QoS_Class_Identifier    aVP_Data
      }
      with {
        //variant "present=bytes(4, 1028);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1028)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record QoS_Negotiation_AVP{
        //Ref: ETSI TS 129 212 QoS_Negotiation_AVP
        AVP_Header            aVP_Header,//<AVP header: 1029 ....>
        QoS_Negotiation        aVP_Data
      }
      with {
        //variant "present=bytes(4, 1029);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1029)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record QoS_Upgrade_AVP{
        //Ref: ETSI TS 129 212 QoS_Upgrade_AVP
        AVP_Header            aVP_Header,//<AVP header: 1030 ....>
        QoS_Upgrade            aVP_Data
      }
      with {
        //variant "present=bytes(4, 1030);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1030)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Resource_Allocation_Notification_AVP{
        //Ref: ETSI TS 129 212 Resource_Allocation_Notification_AVP
        AVP_Header                            aVP_Header,//<AVP header: 1063 ....>
        Resource_Allocation_Notification    aVP_Data
      }
      with {
        //variant "present=bytes(4, 1063);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1063)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Rule_Failure_Code_AVP{
        //Ref: ETSI TS 129 212 Rule_Failure_Code_AVP
        AVP_Header            aVP_Header,//<AVP header: 1031 ....>
        Rule_Failure_Code    aVP_Data
      }
      with {
        //variant "present=bytes(4, 1031);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1031)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Usage_Monitoring_Level_AVP{
        //Ref: ETSI TS 129 212 Usage_Monitoring_Level_AVP
        AVP_Header                aVP_Header,//<AVP header: 1068 ....>
        Usage_Monitoring_Level    aVP_Data
      }
      with {
        //variant "present=bytes(4, 1068);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1068)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Usage_Monitoring_Report_AVP{
        //Ref: ETSI TS 129 212 Usage_Monitoring_Report_AVP
        AVP_Header                aVP_Header,//<AVP header: 1069 ....>
        Usage_Monitoring_Report    aVP_Data
      }
      with {
        //variant "present=bytes(4, 1069);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1069)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Usage_Monitoring_Support_AVP{
        //Ref: ETSI TS 129 212 Usage_Monitoring_Support_AVP
        AVP_Header                    aVP_Header,//<AVP header: 1070 ....>
        Usage_Monitoring_Support    aVP_Data
      }
      with {
        //variant "present=bytes(4, 1070);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1070)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Bearer_Identifier_AVP{
        //Ref: ETSI TS 129 212 Bearer_Identifier_AVP
        AVP_Header            aVP_Header,//<AVP header: 1020 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 1020);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        // variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1020)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }

      type record Charging_Rule_Name_AVP{
        //Ref: ETSI TS 129 212 Charging_Rule_Name_AVP
        AVP_Header            aVP_Header,//<AVP header: 1005 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 1005);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1005)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }

      type record Flow_Label_AVP{
        //Ref: ETSI TS 129 212 Flow_Label_AVP
        AVP_Header            aVP_Header,//<AVP header: 1057 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 1057);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        // variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1057)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }

      type record Monitoring_Key_AVP{
        //Ref: ETSI TS 129 212 Monitoring_Key_AVP
        AVP_Header            aVP_Header,//<AVP header: 1066 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 1066);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1066)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }

      type record Packet_Filter_Identifier_AVP{
        //Ref: ETSI TS 129 212 Packet_Filter_Identifier_AVP
        AVP_Header            aVP_Header,//<AVP header: 1060 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 1060);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1060)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }
      type record PDN_Connection_ID_AVP{
        //Ref: ETSI TS 129 212 PDN_Connection_ID_AVP
        AVP_Header            aVP_Header,//<AVP header: 1065 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 1065);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1065)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }

      type record Routing_Rule_Identifier_AVP{
        //Ref: ETSI TS 129 212 Routing_Rule_Identifier_AVP
        AVP_Header            aVP_Header,//<AVP header: 1077 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 1077);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1077)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }

      type record Security_Parameter_Index_AVP{
        //Ref: ETSI TS 129 212 Security_Parameter_Index_AVP
        AVP_Header            aVP_Header,//<AVP header: 1056 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 1056);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        // variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1056)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record ToS_Traffic_Class_AVP{
        //Ref: ETSI TS 129 212 ToS_Traffic_Class_AVP
        AVP_Header            aVP_Header,//<AVP header: 1014 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 1014);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1014)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }

      type record APN_Aggregate_Max_Bitrate_DL_AVP{
        //Ref: ETSI TS 129 212 APN_Aggregate_Max_Bitrate_DL_AVP
        AVP_Header            aVP_Header,//<AVP header: 1040 ....>
        UInt32                aVP_Data
      }
      with {
        //variant "present=bytes(4, 1040);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1040)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record APN_Aggregate_Max_Bitrate_UL_AVP{
        //Ref: ETSI TS 129 212 APN_Aggregate_Max_Bitrate_UL_AVP
        AVP_Header            aVP_Header,//<AVP header: 1041 ....>
        UInt32                aVP_Data
      }
      with {
        //variant "present=bytes(4, 1041);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1041)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Guaranteed_Bitrate_DL_AVP{
        //Ref: ETSI TS 129 212 Guaranteed_Bitrate_DL_AVP
        AVP_Header            aVP_Header,//<AVP header: 1025 ....>
        UInt32                aVP_Data
      }
      with {
        //variant "present=bytes(4, 1025);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1025)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Guaranteed_Bitrate_UL_AVP{
        //Ref: ETSI TS 129 212 Guaranteed_Bitrate_UL_AVP
        AVP_Header            aVP_Header,//<AVP header: 1026 ....>
        UInt32                aVP_Data
      }
      with {
        //variant "present=bytes(4, 1026);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1026)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Max_Supported_Bandwidth_DL_AVP{
        //Ref: ETSI TS 129 212 Max_Supported_Bandwidth_DL_AVP
        AVP_Header            aVP_Header,//<AVP header: 1083 ....>
        UInt32                aVP_Data
      }
      with {
        //variant "present=bytes(4, 1083);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1083)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Max_Supported_Bandwidth_UL_AVP{
        //Ref: ETSI TS 129 212 Max_Supported_Bandwidth_UL_AVP
        AVP_Header            aVP_Header,//<AVP header: 1084 ....>
        UInt32                aVP_Data
      }
      with {
        //variant "present=bytes(4, 1084);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1084)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Precedence_AVP{
        //Ref: ETSI TS 129 212 Precedence_AVP
        AVP_Header            aVP_Header,//<AVP header: 1010 ....>
        UInt32                aVP_Data
      }
      with {
        //variant "present=bytes(4, 1010);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1010)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Priority_Level_AVP{
        //Ref: ETSI TS 129 212 Priority_Level_AVP
        AVP_Header            aVP_Header,//<AVP header: 1046 ....>
        UInt32                aVP_Data
      }
      with {
        //variant "present=bytes(4, 1046);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1046)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Tunnel_Header_Length_AVP{
        //Ref: ETSI TS 129 212 Tunnel_Header_Length_AVP
        AVP_Header            aVP_Header,//<AVP header: 1037 ....>
        UInt32                aVP_Data
      }
      with {
        //variant "present=bytes(4, 1037);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1037)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Charging_Rule_Base_Name_AVP {
        //Ref: ETSI TS 129 212 Charging_Rule_Base_Name_AVP  AVP
        AVP_Header            aVP_Header,//<AVP header: 1004 ....>
        UTF8String             aVP_Data
      }
      with {
        //variant "present=bytes(4, 1004);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1004)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record AN_GW_Address_AVP{
        //Ref: ETSI TS 129 212 AN_GW_Address_AVP
        AVP_Header            aVP_Header,//<AVP header: 1050 ....>
        Address             aVP_Data
      }
      with {
        //variant "present=bytes(4, 1050);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1050)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record CoA_IP_Address_AVP{
        //Ref: ETSI TS 129 212 CoA_IP_Address_AVP
        AVP_Header            aVP_Header,//<AVP header: 1035 ....>
        Address             aVP_Data
      }
      with {
        //variant "present=bytes(4, 1035);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1035)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Routing_IP_Address_AVP{
        //Ref: ETSI TS 129 212 Routing_IP_Address_AVP
        AVP_Header            aVP_Header,//<AVP header: 1079 ....>
        Address             aVP_Data
      }
      with {
        //variant "present=bytes(4, 1079);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1079)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Packet_Filter_Content_AVP{
        //Ref: ETSI TS 129 212 Packet_Filter_Content_AVP
        AVP_Header            aVP_Header,//<AVP header: 1059 ....>
        IPFilterRule_Type      aVP_Data
      }
      with {
        //variant "present=bytes(4, 1059);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1059)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record TFT_Filter_AVP{
        //Ref: ETSI TS 129 212 TFT_Filter_AVP
        AVP_Header            aVP_Header,//<AVP header: 1012 ....>
        IPFilterRule_Type      aVP_Data
      }
      with {
        //variant "present=bytes(4, 1012);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1012)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Tunnel_Header_Filter_AVP{
        //Ref: ETSI TS 129 212 Tunnel_Header_Filter_AVP
        AVP_Header            aVP_Header,//<AVP header: 1036 ....>
        IPFilterRule_Type      aVP_Data
      }
      with {
        //variant "present=bytes(4, 1036);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1036)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Revalidation_Time_AVP{
        //Ref: ETSI TS 129 212 Revalidation_Time_AVP
        AVP_Header             aVP_Header,//<AVP header: 1042 ....>
        Time                aVP_Data
      }
      with {
        //variant "present=bytes(4, 1042);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1042)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Rule_Activation_Time_AVP{
        //Ref: ETSI TS 129 212 Rule_Activation_Time_AVP
        AVP_Header             aVP_Header,//<AVP header: 1043 ....>
        Time                aVP_Data
      }
      with {
        //variant "present=bytes(4, 1043);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1043)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Rule_DeActivation_Time_AVP{
        //Ref: ETSI TS 129 212 Rule_DeActivation_Time_AVP
        AVP_Header             aVP_Header,//<AVP header: 1044 ....>
        Time                aVP_Data
      }
      with {
        //variant "present=bytes(4, 1044);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1044)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Access_Network_Charging_Identifier_Gx_AVP{
        //Ref: ETSI TS 129 212 Access_Network_Charging_Identifier_Gx_AVP
        AVP_Header                                        aVP_Header, //<AVP header: 1022 ....>
        Access_Network_Charging_Identifier_Value_AVP     acc_Net_Charging_Id_Val,
        set of Charging_Rule_Base_Name_AVP                 charging_Rule_Base_Name optional,
        set of Charging_Rule_Name_AVP                     charging_Rule_Name optional
      }
      with {
        //variant "present=bytes(4, 1022);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        // variant (charging_Rule_Base_Name) "fieldPresent=bytes(4, 1004)&&CodecHelper.isAvailable()"
        // variant (charging_Rule_Name) "fieldPresent=bytes(4, 1005)&&CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1022)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  acc_Net_Charging_Id_Val,charging_Rule_Base_Name,charging_Rule_Name)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }

      type record Allocation_Retention_Priority_AVP{
        //Ref: ETSI TS 129 212 Allocation_Retention_Priority_AVP
        AVP_Header                        aVP_Header, //<AVP header: 1034 ....>
        Priority_Level_AVP                 priority_Level,
        Pre_emption_Capability_AVP         pre_emption_Capability optional,
        Pre_emption_Vulnerability_AVP    pre_emption_Vulnerability optional
      }
      with {
        //variant "present=bytes(4, 1034);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        // variant (pre_emption_Vulnerability) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1034)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  priority_Level,pre_emption_Capability,pre_emption_Vulnerability)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }

      type record Charging_Rule_Install_AVP{
        //Ref: ETSI TS 129 212 Charging_Rule_Install_AVP
        AVP_Header                                aVP_Header, //<AVP header: 1001 ....>
        set of Charging_Rule_Definition_AVP        charging_Rule_Definition optional,
        set of Charging_Rule_Name_AVP            charging_Rule_Name optional,
        set of Charging_Rule_Base_Name_AVP        charging_Rule_Base_Name optional,
        Bearer_Identifier_AVP                    bearer_Identifier optional,
        Rule_Activation_Time_AVP                rule_Activation_Time optional,
        Rule_DeActivation_Time_AVP                rule_DeActivation_Time optional,
        Resource_Allocation_Notification_AVP    resource_Allocation_Notification optional,
        Charging_Correlation_Indicator_AVP        charging_Correlation_Indicator optional,
        set of AVP_Type                         aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 1001);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //    variant (charging_Rule_Definition) "fieldPresent=bytes(4, 1003)&&CodecHelper.isAvailable()"
        //  variant (charging_Rule_Name) "fieldPresent=bytes(4, 1005)&&CodecHelper.isAvailable()"
        //  variant (charging_Rule_Base_Name) "fieldPresent=bytes(4, 1004)&&CodecHelper.isAvailable()"
        //  variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1001)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,   charging_Rule_Definition,charging_Rule_Name,charging_Rule_Base_Name,bearer_Identifier ,rule_Activation_Time,rule_DeActivation_Time,resource_Allocation_Notification ,charging_Correlation_Indicator ,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }

      type record Charging_Rule_Remove_AVP{
        //Ref: ETSI TS 129 212 Charging_Rule_Install_AVP
        AVP_Header                            aVP_Header, //<AVP header: 1002 ....>
        set of Charging_Rule_Name_AVP        charging_Rule_Name optional,
        set of Charging_Rule_Base_Name_AVP    charging_Rule_Base_Name optional,
        set of AVP_Type                     aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 1002);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        // variant (charging_Rule_Name) "fieldPresent=bytes(4, 1005)&&CodecHelper.isAvailable()"
        // variant (charging_Rule_Base_Name) "fieldPresent=bytes(4, 1004)&&CodecHelper.isAvailable()"
        // variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1002)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  charging_Rule_Name,charging_Rule_Base_Name,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 


      }

      type record Charging_Rule_Definition_AVP{
        //Ref: ETSI TS 129 212 Charging_Rule_Definition_AVP
        AVP_Header                                    aVP_Header, //<AVP header: 1003 ....>
        Charging_Rule_Name_AVP                        charging_Rule_Name,
        Service_Identifier_AVP                        service_Identifier optional,
        Rating_Group_AVP                            rating_Group optional,
        set of Flow_Information_AVP                    flow_Information optional,
        Flow_Status_AVP                                flow_Status optional,
        QoS_Information_AVP                            qoS_Information optional,
        Reporting_Level_AVP                            reporting_Level optional,
        Online_AVP                                    online optional,
        Offline_AVP                                    offline optional,
        Metering_Method_AVP                            metering_Method optional,
        Precedence_AVP                                precedence optional,
        AF_Charging_Identifier_AVP                    aF_Charging_Identifier optional,
        set of Flows_AVP                            flows optional,
        Monitoring_Key_AVP                            monitoring_Key optional,
        AF_Signalling_Protocol_AVP                    aF_Signalling_Protocol optional,
        Sponsor_Identity_AVP                        sponsor_Identity optional,
        Application_Service_Provider_Identity_AVP    application_Service_Provider_Identity optional,
        set of AVP_Type                             aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 1003);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (flow_Information) "fieldPresent=bytes(4, 1058)&&CodecHelper.isAvailable()"
        //variant (flows) "fieldPresent=bytes(4, 510)&&CodecHelper.isAvailable()"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1003)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,   charging_Rule_Name,service_Identifier,rating_Group,flow_Information,flow_Status,qoS_Information,reporting_Level,online,offline,metering_Method,precedence,aF_Charging_Identifier,flows,monitoring_Key,aF_Signalling_Protocol ,sponsor_Identity ,application_Service_Provider_Identity ,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Charging_Rule_Report_AVP{
        //Ref: ETSI TS 129 212 Charging_Rule_Report_AVP
        AVP_Header                                aVP_Header, //<AVP header: 1018 ....>
        set of Charging_Rule_Name_AVP            charging_Rule_Name optional,
        set of Charging_Rule_Base_Name_AVP        charging_Rule_Base_Name optional,
        Bearer_Identifier_AVP                    bearer_Identifier optional,
        PCC_Rule_Status_AVP                        pCC_Rule_Status optional,
        Rule_Failure_Code_AVP                    rule_Failure_Code optional,
        Final_Unit_Indication_AVP                final_Unit_Indication optional,
        set of AVP_Type                         aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 1018);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (charging_Rule_Name) "fieldPresent=bytes(4, 1005)&&CodecHelper.isAvailable()"
        //variant (charging_Rule_Base_Name) "fieldPresent=bytes(4, 1004)&&CodecHelper.isAvailable()"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1018)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  charging_Rule_Name,charging_Rule_Base_Name,bearer_Identifier,pCC_Rule_Status,rule_Failure_Code,final_Unit_Indication,aVP_Type )";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Flow_Information_AVP{
        //Ref: ETSI TS 129 212 Flow_Information_AVP
        AVP_Header                                aVP_Header, //<AVP header: 1058 ....>
        Flow_Description_AVP                    flow_Description optional,
        Packet_Filter_Identifier_AVP            packet_Filter_Identifier optional,
        Packet_Filter_Usage_AVP                    packet_Filter_Usage optional,
        ToS_Traffic_Class_AVP                    toS_Traffic_Class optional,
        Security_Parameter_Index_AVP            security_Parameter_Index optional,
        Flow_Label_AVP                            flow_Label optional,
        Flow_Direction_AVP                        flow_Direction optional,
        set of AVP_Type                         aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 1058);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1058)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  flow_Description,packet_Filter_Identifier,packet_Filter_Usage,toS_Traffic_Class,security_Parameter_Index,flow_Label,flow_Direction,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record QoS_Information_AVP{
        //Ref: ETSI TS 129 212 QoS_Information_AVP
        AVP_Header                                aVP_Header, //<AVP header: 1016 ....>
        QoS_Class_Identifier_AVP                qoS_Class_Identifier optional,
        Max_Requested_Bandwidth_UL_AVP            max_Requested_Bandwidth_UL optional,
        Max_Requested_Bandwidth_DL_AVP            max_Requested_Bandwidth_DL optional,
        Guaranteed_Bitrate_UL_AVP                guaranteed_Bitrate_UL optional,
        Guaranteed_Bitrate_DL_AVP                guaranteed_Bitrate_DL optional,
        Bearer_Identifier_AVP                    bearer_Identifier optional,
        Allocation_Retention_Priority_AVP        allocation_Retention_Priority optional,
        APN_Aggregate_Max_Bitrate_UL_AVP        aPN_Aggregate_Max_Bitrate_UL optional,
        APN_Aggregate_Max_Bitrate_DL_AVP        aPN_Aggregate_Max_Bitrate_DL optional,
        set of AVP_Type                         aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 1016);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1016)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  qoS_Class_Identifier,max_Requested_Bandwidth_UL,max_Requested_Bandwidth_DL,guaranteed_Bitrate_UL,guaranteed_Bitrate_DL,bearer_Identifier,allocation_Retention_Priority ,aPN_Aggregate_Max_Bitrate_UL ,aPN_Aggregate_Max_Bitrate_DL ,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record CoA_Information_AVP{
        //Ref: ETSI TS 129 212 CoA_Information_AVP
        AVP_Header                aVP_Header, //<AVP header: 1039 ....>
        Tunnel_Information_AVP    tunnel_Information,
        CoA_IP_Address_AVP        coA_IP_Address,
        set of AVP_Type         aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 1039);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1039)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  tunnel_Information,coA_IP_Address,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Default_EPS_Bearer_QoS_AVP{
        //Ref: ETSI TS 129 212 Default_EPS_Bearer_QoS_AVP
        AVP_Header                            aVP_Header, //<AVP header: 1049 ....>
        QoS_Class_Identifier_AVP            qoS_Class_Identifier optional,
        Allocation_Retention_Priority_AVP    allocation_Retention_Priority optional,
        set of AVP_Type                     aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 1049);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1049)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  qoS_Class_Identifier,allocation_Retention_Priority,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Event_Report_Indication_AVP{
        //Ref: ETSI TS 129 212 Event_Report_Indication_AVP
        AVP_Header                            aVP_Header, //<AVP header: 1033 ....>
        set of Event_Trigger_AVP            event_Trigger optional,
        User_CSG_Information_AVP            user_CSG_Information optional,
        RAT_Type_AVP                        rAT_Type optional,
        QoS_Information_AVP                    qoS_Information optional,
        RAI_AVP                                rAI optional,
        ThreeGPP_User_Location_Info_AVP        threeGPP_User_Location_Info optional,
        Trace_Data_AVP                        trace_Data optional,
        Trace_Reference_AVP                    trace_Reference optional,
        ThreeGPP2_BSID_AVP                    threeGPP2_BSID optional,
        ThreeGPP_MS_TimeZone_AVP            threeGPP_MS_TimeZone optional,
        ThreeGPP_SGSN_Address_AVP            threeGPP_SGSN_Address optional,
        ThreeGPP_SGSN_IPv6_Address_AVP        threeGPP_SGSN_IPv6_Address optional,
        Routing_IP_Address_AVP                routing_IP_Address optional,
        set of AVP_Type                     aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 1033);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (event_Trigger) "fieldPresent=bytes(4, 1006)&&CodecHelper.isAvailable()"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1033)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  event_Trigger,user_CSG_Information,rAT_Type,qoS_Information,rAI,threeGPP_User_Location_Info,trace_Data,trace_Reference,threeGPP2_BSID,threeGPP_MS_TimeZone ,threeGPP_SGSN_Address ,threeGPP_SGSN_IPv6_Address, routing_IP_Address,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Maximum_Bandwidth_AVP{
        //Ref: ETSI TS 129 212 Maximum_Bandwidth_AVP
        AVP_Header                        aVP_Header, //<AVP header: 1082 ....>
        Max_Supported_Bandwidth_UL_AVP    max_Supported_Bandwidth_UL optional,
        Max_Supported_Bandwidth_DL_AVP    max_Supported_Bandwidth_DL optional,
        set of AVP_Type                 aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 1082);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1082)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  max_Supported_Bandwidth_UL,max_Supported_Bandwidth_DL,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Packet_Filter_Information_AVP{
        //Ref: ETSI TS 129 212 Packet_Filter_Information_AVP
        AVP_Header                        aVP_Header, //<AVP header: 1061 ....>
        Packet_Filter_Identifier_AVP    packet_Filter_Identifier optional,
        Precedence_AVP                    precedence optional,
        Packet_Filter_Content_AVP        packet_Filter_Content optional,
        ToS_Traffic_Class_AVP            toS_Traffic_Class optional,
        Security_Parameter_Index_AVP    security_Parameter_Index optional,
        Flow_Label_AVP                    flow_Label optional,
        Flow_Direction_AVP                flow_Direction optional,
        set of AVP_Type                 aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 1061);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1061)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header, packet_Filter_Identifier,precedence,packet_Filter_Content,toS_Traffic_Class,security_Parameter_Index,flow_Label,flow_Direction,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Routing_Filter_AVP{
        //Ref: ETSI TS 129 212 Routing_Filter_AVP
        AVP_Header                        aVP_Header, //<AVP header: 1078 ....>
        Flow_Description_AVP            flow_Description,
        Flow_Direction_AVP                flow_Direction,
        ToS_Traffic_Class_AVP            toS_Traffic_Class optional,
        Security_Parameter_Index_AVP    security_Parameter_Index optional,
        Flow_Label_AVP                    flow_Label optional,
        set of AVP_Type                 aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 1078);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1078)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  flow_Description,flow_Direction,toS_Traffic_Class,security_Parameter_Index,flow_Label ,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Routing_Rule_Definition_AVP{
        //Ref: ETSI TS 129 212 Routing_Rule_Definition_AVP
        AVP_Header                    aVP_Header, //<AVP header: 1076 ....>
        Routing_Rule_Identifier_AVP    routing_Rule_Identifier,
        set of Routing_Filter_AVP    routing_Filter optional,
        Precedence_AVP                precedence optional,
        Routing_IP_Address_AVP        routing_IP_Address optional,
        set of AVP_Type             aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 1076);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (routing_Filter) "fieldPresent=bytes(4, 1078)&&CodecHelper.isAvailable()"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1076)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  routing_Rule_Identifier,routing_Filter,precedence,routing_IP_Address,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Routing_Rule_Install_AVP{
        //Ref: ETSI TS 129 212 Routing_Rule_Install_AVP
        AVP_Header                            aVP_Header, //<AVP header: 1081 ....>
        set of Routing_Rule_Definition_AVP    routing_Rule_Definition optional,
        set of AVP_Type                     aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 1081);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (routing_Rule_Definition) "fieldPresent=bytes(4, 1076)&&CodecHelper.isAvailable()"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1081)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  routing_Rule_Definition,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Routing_Rule_Remove_AVP{
        //Ref: ETSI TS 129 212 Routing_Rule_Remove_AVP
        AVP_Header                            aVP_Header, //<AVP header: 1075 ....>
        set of Routing_Rule_Identifier_AVP    routing_Rule_Identifier optional,
        set of AVP_Type                     aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 1075);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (routing_Rule_Identifier) "fieldPresent=bytes(4, 1077)&&CodecHelper.isAvailable()"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1075)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  routing_Rule_Identifier,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record TFT_Packet_Filter_Information_AVP{
        //Ref: ETSI TS 129 212 TFT_Packet_Filter_Information_AVP
        AVP_Header                        aVP_Header, //<AVP header: 1013 ....>
        Precedence_AVP                    precedence optional,
        TFT_Filter_AVP                    tFT_Filter optional,
        ToS_Traffic_Class_AVP            toS_Traffic_Class optional,
        Security_Parameter_Index_AVP    security_Parameter_Index optional,
        Flow_Label_AVP                    flow_Label optional,
        Flow_Direction_AVP                flow_Direction optional,
        set of AVP_Type                 aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 1013);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1013)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  precedence,tFT_Filter,toS_Traffic_Class,security_Parameter_Index,flow_Label,flow_Direction,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Tunnel_Information_AVP{
        //Ref: ETSI TS 129 212 Tunnel_Information_AVP
        AVP_Header                                            aVP_Header, //<AVP header: 1038 ....>
        Tunnel_Header_Length_AVP                            tunnel_Header_Length optional,
        record length (0..2) of Tunnel_Header_Filter_AVP    tunnel_Header_Filter optional,
        set of AVP_Type                                     aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 1038);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (tunnel_Header_Filter) "fieldPresent=bytes(4, 1036)&&CodecHelper.isAvailable()"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1038)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  tunnel_Header_Length,tunnel_Header_Filter,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Usage_Monitoring_Information_AVP{
        //Ref: ETSI TS 129 212 Usage_Monitoring_Information_AVP
        AVP_Header                        aVP_Header, //<AVP header: 1067 ....>
        Monitoring_Key_AVP                monitoring_Key optional,
        Granted_Service_Unit_AVP        granted_Service_Unit optional,
        Used_Service_Unit_AVP            used_Service_Unit optional,
        Usage_Monitoring_Level_AVP        usage_Monitoring_Level optional,
        Usage_Monitoring_Report_AVP        usage_Monitoring_Report optional,
        Usage_Monitoring_Support_AVP    usage_Monitoring_Support optional,
        set of AVP_Type                 aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 1067);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1067)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  monitoring_Key ,granted_Service_Unit,used_Service_Unit,usage_Monitoring_Level,usage_Monitoring_Report,usage_Monitoring_Support,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

    }//end of group TS129_212Gx_AVPs
    group TS129_061_AVPs{

      type record RAI_AVP{
        //Ref: ETSI TS 129 061 RAI_AVP
        AVP_Header            aVP_Header, //<AVP header: 909 ....>
        UTF8String             aVP_Data
      }
      with {
        //variant "present=bytes(4, 909);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 909)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record ThreeGPP_SGSN_Address_AVP{
        //Ref: ETSI TS 129 061 3GPP_SGSN_Address
        AVP_Header            aVP_Header, //<AVP header: 6 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 6);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 6)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record ThreeGPP_SGSN_IPv6_Address_AVP{
        //Ref: ETSI TS 129 061 3GPP_SGSN_Address
        AVP_Header            aVP_Header, //<AVP header: 15 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 15);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 15)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record ThreeGPP_User_Location_Info_AVP{
        //Ref: ETSI TS 129 061 ThreeGPP_User_Location_Info_AVP
        AVP_Header            aVP_Header, //<AVP header: 22 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 22);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 22)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record ThreeGPP_MS_TimeZone_AVP{
        //Ref: ETSI TS 129 061 ThreeGPP_MS_TimeZone_AVP
        AVP_Header            aVP_Header, //<AVP header: 23 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 23);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 23)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record ThreeGPP_RAT_Type_AVP{
        //Ref: ETSI TS 129 061 ThreeGPP_RAT_Type_AVP
        AVP_Header            aVP_Header, //<AVP header: 21 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 21);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 21)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record ThreeGPP_SGSN_MCC_MNC_AVP{
        //Ref: ETSI TS 129 061 ThreeGPP_SGSN_MCC_MNC_AVP
        AVP_Header            aVP_Header, //<AVP header: 18 ....>
        UTF8String            aVP_Data
      }
      with {
        //variant "present=bytes(4, 18);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 18)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

    }//end of group TS129_061_AVPs

    group TS129_272_AVPs{

      type record Trace_Data_AVP{
        //Ref: ETSI TS 129 272 Trace_Data_AVP
        AVP_Header                        aVP_Header, //<AVP header: 1485 ....>
        Trace_Reference_AVP                trace_Reference,
        Trace_Depth_AVP                    trace_Depth,
        Trace_NE_Type_List_AVP            trace_NE_Type_List,
        Trace_Event_List_AVP            trace_Event_List,
        Trace_Collection_Entity_AVP        trace_Collection_Entityt,
        Trace_Interface_List_AVP        trace_Interface_List optional,
        OMC_Id_AVP                        oMC_Id optional,
        MDT_Configuration_AVP            mDT_Configuration optional,
        set of AVP_Type                 aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 1485);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1485)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  trace_Reference,trace_Depth,trace_NE_Type_List,trace_Event_List,trace_Collection_Entityt,trace_Interface_List,oMC_Id,mDT_Configuration,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Trace_Reference_AVP{
        //Ref: ETSI TS129 272 Trace_Reference_AVP
        AVP_Header            aVP_Header, //<AVP header: 1459 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 1459);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1459)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Trace_Depth_AVP{
        //Ref: ETSI TS129 272 Trace_Depth_AVP
        AVP_Header            aVP_Header, //<AVP header: 1462 ....>
        Trace_Depth            aVP_Data
      }
      with {
        //variant "present=bytes(4, 1462);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1462)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }


      type record Trace_NE_Type_List_AVP{
        //Ref: ETSI TS129 272 Trace_NE_Type_List_AVP
        AVP_Header            aVP_Header, //<AVP header: 1463 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 1463);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1463)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Trace_Event_List_AVP{
        //Ref: ETSI TS129 272 Trace_Event_List_AVP
        AVP_Header            aVP_Header, //<AVP header: 1465 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 1465);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1465)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Trace_Collection_Entity_AVP{
        //Ref: ETSI TS129 272 Trace_Collection_Entity_AVP
        AVP_Header            aVP_Header, //<AVP header: 1452 ....>
        Address                aVP_Data
      }
      with {
        //variant "present=bytes(4, 1452);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1452)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Trace_Interface_List_AVP{
        //Ref: ETSI TS129 272 Trace_Interface_List_AVP
        AVP_Header            aVP_Header, //<AVP header: 1464 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 1464);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1464)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record OMC_Id_AVP{
        //Ref: ETSI TS129 272 OMC_Id_AVP
        AVP_Header            aVP_Header, //<AVP header: 1466 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 1466);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1466)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record MDT_Configuration_AVP{
        //Ref: ETSI TS129 272 MDT_Configuration_AVP
        AVP_Header                    aVP_Header, //<AVP header: 1622 ....>
        Job_Type_AVP                job_Type,
        Area_Scope_AVP                area_Scope optional,
        List_Of_Measurements_AVP    list_Of_Measurements optional,
        Reporting_Trigger_AVP        reporting_Trigger optional,
        Report_Interval_AVP            report_Interval optional,
        Report_Amount_AVP            report_Amount optional,
        Event_Treshold_RSRP_AVP        event_Treshold_RSRP optional,
        Event_Treshold_RSRQ_AVP        event_Treshold_RSRQ optional,
        Logging_Interval_AVP        logging_Interval optional,
        Logging_Duration_AVP        logging_Duration optional,
        set of AVP_Type             aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 1622);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1622)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  job_Type,area_Scope,list_Of_Measurements,reporting_Trigger,report_Interval,report_Amount ,event_Treshold_RSRP,event_Treshold_RSRQ,logging_Interval ,logging_Duration ,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Job_Type_AVP{
        //Ref: ETSI TS129 272 Job_Type_AVP
        AVP_Header        aVP_Header, //<AVP header: 1623 ....>
        Job_Type        aVP_Data
      }
      with {
        //variant "present=bytes(4, 1623);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1623)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Area_Scope_AVP{
        //Ref: ETSI TS129 272 Area_Scope_AVP
        AVP_Header            aVP_Header, //<AVP header: 1624 ....>
        set of Cell_Global_Identity_AVP            cell_Global_Identity optional,
        set of E_UTRAN_Cell_Global_Identity_AVP    e_UTRAN_Cell_Global_Identity_AVP optional,
        set of Routing_Area_Identity_AVP        routing_Area_Identity optional,
        set of Location_Area_Identity_AVP        location_Area_Identity optional,
        set of Tracking_Area_Identity_AVP        tracking_Area_Identity optional,
        set of AVP_Type                         aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 1624);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (cell_Global_Identity) "fieldPresent=bytes(4, 1604)&&CodecHelper.isAvailable()"
        //variant (e_UTRAN_Cell_Global_Identity_AVP) "fieldPresent=bytes(4, 1602)&&CodecHelper.isAvailable()"
        //variant (routing_Area_Identity) "fieldPresent=bytes(4, 1605)&&CodecHelper.isAvailable()"
        //variant (location_Area_Identity) "fieldPresent=bytes(4, 1606)&&CodecHelper.isAvailable()"
        //variant (tracking_Area_Identity) "fieldPresent=bytes(4, 1603)&&CodecHelper.isAvailable()"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1624)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  cell_Global_Identity,e_UTRAN_Cell_Global_Identity_AVP,routing_Area_Identity,location_Area_Identity,tracking_Area_Identity,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record List_Of_Measurements_AVP{
        //Ref: ETSI TS129 272 List_Of_Measurements_AVP
        AVP_Header            aVP_Header, //<AVP header: 1625 ....>
        UInt32                aVP_Data
      }
      with {
        //variant "present=bytes(4, 1625);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1625)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Reporting_Trigger_AVP{
        //Ref: ETSI TS129 272 Reporting_Trigger_AVP
        AVP_Header            aVP_Header, //<AVP header: 1626 ....>
        UInt32                aVP_Data
      }
      with {
        //variant "present=bytes(4, 1626);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1626)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
      type record Report_Interval_AVP{
        //Ref: ETSI TS129 272 Report_Interval_AVP
        AVP_Header            aVP_Header, //<AVP header: 1627 ....>
        Report_Interval        aVP_Data
      }
      with {
        //variant "present=bytes(4, 1627);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1627)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Report_Amount_AVP{
        //Ref: ETSI TS129 272 Report_Amount_AVP
        AVP_Header            aVP_Header, //<AVP header: 1628 ....>
        Report_Amount        aVP_Data
      }
      with {
        //variant "present=bytes(4, 1628);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1628)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Event_Treshold_RSRP_AVP{
        //Ref: ETSI TS129 272 Event_Treshold_RSRP_AVP
        AVP_Header            aVP_Header, //<AVP header: 1629 ....>
        UInt32                aVP_Data
      }
      with {
        //variant "present=bytes(4, 1629);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1629)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Event_Treshold_RSRQ_AVP{
        //Ref: ETSI TS129 272 Event_Treshold_RSRQ_AVP
        AVP_Header            aVP_Header, //<AVP header: 1630 ....>
        UInt32                aVP_Data
      }
      with {
        //variant "present=bytes(4, 1630);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1630)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Logging_Interval_AVP{
        //Ref: ETSI TS129 272 Logging_Interval_AVP
        AVP_Header            aVP_Header, //<AVP header: 1631 ....>
        Logging_Interval    aVP_Data
      }
      with {
        //variant "present=bytes(4, 1631);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1631)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Logging_Duration_AVP{
        //Ref: ETSI TS129 272 Logging_Duration_AVP
        AVP_Header            aVP_Header, //<AVP header: 1632 ....>
        Logging_Duration    aVP_Data
      }
      with {
        //variant "present=bytes(4, 1632);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1632)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Cell_Global_Identity_AVP{
        //Ref: ETSI TS129 272 Cell_Global_Identity_AVP
        AVP_Header            aVP_Header, //<AVP header: 1604 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 1604);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1604)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record E_UTRAN_Cell_Global_Identity_AVP{
        //Ref: ETSI TS129 272 E_UTRAN_Cell_Global_Identity_AVP
        AVP_Header            aVP_Header, //<AVP header: 1602 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 1602);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1602)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Routing_Area_Identity_AVP{
        //Ref: ETSI TS129 272 Routing_Area_Identity_AVP
        AVP_Header            aVP_Header, //<AVP header: 1605 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 1605);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1605)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Location_Area_Identity_AVP{
        //Ref: ETSI TS129 272 Location_Area_Identity_AVP
        AVP_Header            aVP_Header, //<AVP header: 1606 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 1606);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1606)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record Tracking_Area_Identity_AVP{
        //Ref: ETSI TS129 272 Tracking_Area_Identity_AVP
        AVP_Header            aVP_Header, //<AVP header: 1603 ....>
        octetstring            aVP_Data
      }
      with {
        //variant "present=bytes(4, 1603);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1603)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

    }//end of group TS129_272_AVPs

    group TS129_299_AVPs{

      type record Charging_Information_AVP{
        //Ref: ETSI TS 129 299 Charging_Information_AVP
        AVP_Header                                        aVP_Header, //<AVP header: 618 ....>
        Primary_Event_Charging_Function_Name_AVP        primary_Event_Charging_Function_Name optional,
        Secondary_Event_Charging_Function_Name_AVP        secondary_Event_Charging_Function_Name optional,
        Primary_Charging_Collection_Function_Name_AVP    primary_Charging_Collection_Function_Name optional,
        Secondary_Charging_Collection_Function_Name_AVP    secondary_Charging_Collection_Function_Name optional,
        set of AVP_Type                                 aVP_Type optional
      }
      with {
        //variant "present=bytes(4, 618);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Type) "fieldPresent=CodecHelper.isAvailable();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 618)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  primary_Event_Charging_Function_Name,secondary_Event_Charging_Function_Name,primary_Charging_Collection_Function_Name,secondary_Charging_Collection_Function_Name ,aVP_Type)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }
      type record Primary_Event_Charging_Function_Name_AVP{
        //Ref: ETSI TS 129 299 Primary_Event_Charging_Function_Name_AVP
        AVP_Header    aVP_Header, //<AVP header: 619 ....>
        DiameterURI    aVP_Data
      }
      with {
        //variant "present=bytes(4, 619);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //                    encode (aVP_Data) "SipNist"
        //                    variant (aVP_Data) "externalEncode;externalDecode;condition=CodecHelper.leaveScope()"
        //variant (aVP_Data) "encode=CodecHelper.encodeDiameterURI();decode=CodecHelper.decodeDiameterURI()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 619)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Secondary_Event_Charging_Function_Name_AVP{
        //Ref: ETSI TS 129 299 Secondary_Event_Charging_Function_Name_AVP
        AVP_Header    aVP_Header, //<AVP header: 620 ....>
        DiameterURI    aVP_Data
      }
      with {
        //variant "present=bytes(4, 620);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //                    encode (aVP_Data) "SipNist"
        //                    variant (aVP_Data) "externalEncode;externalDecode;condition=CodecHelper.leaveScope()"
        //variant (aVP_Data) "encode=CodecHelper.encodeDiameterURI();decode=CodecHelper.decodeDiameterURI()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 620)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Primary_Charging_Collection_Function_Name_AVP{
        //Ref: ETSI TS 129 299 Primary_Charging_Collection_Function_Name_AVP
        AVP_Header                        aVP_Header, //<AVP header: 621 ....>
        DiameterURI aVP_Data
      }
      with {
        //variant "present=bytes(4, 621);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //                    encode (aVP_Data) "SipNist"
        //                    variant (aVP_Data) "externalEncode;externalDecode;condition=CodecHelper.leaveScope()"
        //variant (aVP_Data) "encode=CodecHelper.encodeDiameterURI();decode=CodecHelper.decodeDiameterURI()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 621)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Secondary_Charging_Collection_Function_Name_AVP{
        //Ref: ETSI TS 129 299 Secondary_Charging_Collection_Function_Name_AVP
        AVP_Header    aVP_Header, //<AVP header: 622 ....>
        DiameterURI aVP_Data
      }
      with {
        //variant "present=bytes(4, 622);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //                    encode (aVP_Data) "SipNist"
        //                    variant (aVP_Data) "externalEncode;externalDecode;condition=CodecHelper.leaveScope()"
        //variant (aVP_Data) "encode=CodecHelper.encodeDiameterURI();decode=CodecHelper.decodeDiameterURI()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 622)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

    }//end of group TS129_299_AVPs

    group TS132_299_AVPs{

      type record User_CSG_Information_AVP{
        //Ref: ETSI TS 132 299 User_CSG_Information_AVP
        AVP_Header                        aVP_Header, //<AVP header: 2319 ....>
        CSG_Id_AVP                        cSG_Id,
        CSG_Access_Mode_AVP                cSG_Access_Mode,
        CSG_Membership_Indication_AVP   cSG_Membership_Indication_AVP optional // CSG_Membership_Indication_AVP optional FIXME
      }
      with {
        //variant "present=bytes(4, 2319);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (cSG_Membership_Indication_AVP) "condition=CodecHelper.leaveScope()" //FIXME
        variant  "PRESENCE(aVP_Header.aVP_Code = 2319)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  cSG_Id,cSG_Access_Mode,cSG_Membership_Indication_AVP)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 
      }

      type record CSG_Id_AVP{
        //Ref: ETSI TS 132 299 & TS129 272 CSG_Id_AVP
        AVP_Header            aVP_Header, //<AVP header: 1437 ....>
        UInt32                aVP_Data
      }
      with {
        //variant "present=bytes(4, 1437);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 1437)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record CSG_Access_Mode_AVP{
        //Ref: ETSI TS 132 299 CSG_Access_Mode_AVP
        AVP_Header        aVP_Header, //<AVP header: 2317 ....>
        CSG_Access_Mode    aVP_Data
      }
      with {
        //variant "present=bytes(4, 2317);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 2317)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record CSG_Membership_Indication_AVP{
        //Ref: ETSI TS 132 299 CSG_Membership_Indication_AVP
        AVP_Header                    aVP_Header, //<AVP header: 2318 ....>
        CSG_Membership_Indication    aVP_Data
      }
      with {
        //variant "present=bytes(4, 2318);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 2318)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

    }//end of group TS132_299_AVPs

    group X_S0057_1_AVPs{
      type record ThreeGPP2_BSID_AVP{
        //Ref: Draft X.S0057-1 ThreeGPP2_BSID_AVP
        AVP_Header            aVP_Header, //<AVP header: 5535 ....>
        UTF8String             aVP_Data
      }
      with {
        //variant "present=bytes(4, 621);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 521)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
    }//end of group X_S0057_1_AVPs

    group TS283_034_AVPs{
      type record Logical_Access_ID_AVP{
        //Ref: Draft TS283_034 Logical_Access_ID_AVP
        AVP_Header            aVP_Header, //<AVP header: 302 ....>
        octetstring             aVP_Data
      }
      with {
        //variant "present=bytes(4, 302);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "encode=CodecHelper.encodeOctetstringWithPadding();decode=CodecHelper.decodeOctetstringWithPadding();condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 302)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }

      type record Physical_Access_ID_AVP{
        //Ref: Draft TS283_034 Physical_Access_ID_AVP
        AVP_Header            aVP_Header, //<AVP header: 313 ....>
        UTF8String             aVP_Data
      }
      with {
        //variant "present=bytes(4, 313);use=com.testingtech.ttcn.tci.codec.CodecHelper"
        //variant (aVP_Data) "condition=CodecHelper.leaveScope()"
        variant  "PRESENCE(aVP_Header.aVP_Code = 313)" ;
        variant (aVP_Header) "LENGTHTO(aVP_Header,  aVP_Data)";
        variant (aVP_Header) "LENGTHINDEX(aVP_len)";
        variant  "PADDING(dword32)"; 

      }
    }//end of group TS283_034_AVPs

  }//end group AVPs

  group MessageTypes{

    /* Ref: RFC3588 p.3 */
    type record Command_Flags{
      Bit1 r_bit,   //Request
      Bit1 p_bit,   //Proxiable
      Bit1 e_bit,   //Error
      Bit1 t_bit,   //Potentialy re-transmited message
      Bit4 reserved_bits
    }
    with {
      //  variant (r_bit) "intTag='r_bit'"
      variant "";
    }

    /* Ref: RFC3588 p.3.1 */
    type enumerated Command_Code{
      CER_CEA_E(257),  // Capabilities-Exchange-Request     CER  (257)
      //CEA_E,  // Capabilities-Exchange-Answer     CEA  (257)
      RAR_RAA_E (258),   // Re-Auth-Request                 RAR  (258)
      //RAA_E,   // Re-Auth-Answer                     RAA  (258)

      ACR_ACA_E(271),  // Accounting-Request                ACR(271)
      //ACA_E,  // Accounting-Answer                ACA (271)

      ASR_ASA_E (274), // Abort-Session-Request            ASR (274)
      //ASA_E , // Abort-Sesion-Answer                ASA (274)
      STR_STA_E(275) ,  // Session-Termination-Request        STR (275)
      //STA_E ,  // Session-Termination-Answer        STA (275)

      DWR_DWA_E(280),  // Device-Watchdog-Request            DWR (280)
      //DWA_E,  // Device-Watchdog-Answer            DWA (280)
      DPR_DPA_E(282),  // Disconnect-Peer-Requst            DPR (282)
      //DPA_E,  // Disconnect-Peer-Answer            DPA (282)

      // Codes on Cx 
      UAR_UAA_E(283),       // User-Authorization-Request    UAR    (283)
      //UAA_E,        // User-Authorizdatio-Response  UAA (283)
      SAR_SAA_E(284),       // Server-Assignment-Request    SAR    (284)
      //SAA_E,       // Server-Assignment-Answer        SAA    (284)
      LIR_LIA_E(285),       // Location-Info-Request        LIR    (285)
      //LIA_E,       // Location-Info-Answer            LIA    (285)
      MAR_MAA_E(286),       // Multimedia-Auth-Request        MAR    (286)
      //MAA_E,       // Multimedia-Auth-Answer        MAA    (286)
      RTR_RTA_E(287),      // Registration-Termination-Request    RTR    (287)
      //RTA_E,      // Registration-Termination-Answer    RTA    (287)
      PPR_PPA_E(288),      // Push-Profile-Request            PPR    (288)
      //PPA_E,      // Push-Profile-Answer            PPA    (288)

      // Codes on Sh/Dh interface  
      UDR_UDA_E(306),    //    UDR User-Data-Request AS->HSS     306
      //UDA_E,    //    UDA User-Data-Answer HSS->AS    306
      PUR_PUA_E(307),     //    PUR Profile-Update-Request AS->HSS    307
      //PUA_E,    //    PUA Profile-Update-Answer HSS->AS    307
      SNR_SNA_E(308),    //    SNR Subscribe-Notifications-Request AS->HSS    308
      //SNA_E,    //    SNA Subscribe-Notifications-Answer HSS->AS    308
      PNR_PNA_E(309),    //    PNR Profile-Notification-Request HSS->AS    309
      //PNA_E,        //    PNA Profile-Notification-Answer AS->HSS        309

      // Codes on Rx interface  
      AAR_AAA_E(265),    //    AAR Auth-Accounting-Request      265
      //AAA_E,    //    AAA Auth-Accounting-Request     265

      // Codes on Gx interface - RFC4006 and TS 129 212  
      CCR_CCA_E(272)    //    CCR Credit-Control-Request      272
      //CCA_E    //    CCA Credit-Control-Request         272


      /*

      CER_E,  // Capabilities-Exchange-Request     CER  (257)
      CEA_E,  // Capabilities-Exchange-Answer     CEA  (257)
      RAR_E,   // Re-Auth-Request                 RAR  (258)
      RAA_E,   // Re-Auth-Answer                     RAA  (258)

      ACR_E,  // Accounting-Request                ACR(271)
      ACA_E,  // Accounting-Answer                ACA (271)

      ASR_E , // Abort-Session-Request            ASR (274)
      ASA_E , // Abort-Sesion-Answer                ASA (274)
      STR_E ,  // Session-Termination-Request        STR (275)
      STA_E ,  // Session-Termination-Answer        STA (275)

      DWR_E,  // Device-Watchdog-Request            DWR (280)
      DWA_E,  // Device-Watchdog-Answer            DWA (280)
      DPR_E,  // Disconnect-Peer-Requst            DPR (282)
      DPA_E,  // Disconnect-Peer-Answer            DPA (282)

      // Codes on Cx 
      UAR_E,       // User-Authorization-Request    UAR    (283)
      UAA_E,        // User-Authorizdatio-Response  UAA (283)
      SAR_E,       // Server-Assignment-Request    SAR    (284)
      SAA_E,       // Server-Assignment-Answer        SAA    (284)
      LIR_E,       // Location-Info-Request        LIR    (285)
      LIA_E,       // Location-Info-Answer            LIA    (285)
      MAR_E,       // Multimedia-Auth-Request        MAR    (286)
      MAA_E,       // Multimedia-Auth-Answer        MAA    (286)
      RTR_E,      // Registration-Termination-Request    RTR    (287)
      RTA_E,      // Registration-Termination-Answer    RTA    (287)
      PPR_E,      // Push-Profile-Request            PPR    (288)
      PPA_E,      // Push-Profile-Answer            PPA    (288)

      // Codes on Sh/Dh interface  
      UDR_E,    //    UDR User-Data-Request AS->HSS     306
      UDA_E,    //    UDA User-Data-Answer HSS->AS    306
      PUR_E,     //    PUR Profile-Update-Request AS->HSS    307
      PUA_E,    //    PUA Profile-Update-Answer HSS->AS    307
      SNR_E,    //    SNR Subscribe-Notifications-Request AS->HSS    308
      SNA_E,    //    SNA Subscribe-Notifications-Answer HSS->AS    308
      PNR_E,    //    PNR Profile-Notification-Request HSS->AS    309
      PNA_E,        //    PNA Profile-Notification-Answer AS->HSS        309

      // Codes on Rx interface  
      AAR_E,    //    AAR Auth-Accounting-Request      265
      AAA_E,    //    AAA Auth-Accounting-Request     265

      // Codes on Gx interface - RFC4006 and TS 129 212  
      CCR_E,    //    CCR Credit-Control-Request      272
      CCA_E    //    CCA Credit-Control-Request         272
      */








    }
    with {
      //variant "length=24;use=com.testingtech.ttcn.tci.codec.CodecHelper;encode=CodecHelper.encodeCommandCode();decode=CodecHelper.decodeCommandCode()"

      variant "FIELDLENGTH(24)"
      variant "BYTEORDER(last)" 
    }
    //RFC3588, chapter 3. Diameter Header: The Command-Code field is three octets





    type union DIAMETER_MSG {
      CER_MSG    cER_MSG,   
      CEA_MSG    cEA_MSG,   
      RAR_MSG    rAR_MSG,   
      RAA_MSG rAA_MSG,   
      ACR_MSG    aCR_MSG,   
      ACA_MSG    aCA_MSG,   
      ASR_MSG    aSR_MSG,   
      ASA_MSG    aSA_MSG,   
      STR_MSG sTR_MSG,   
      STA_MSG    sTA_MSG,   
      DWR_MSG    dWR_MSG,   
      DWA_MSG    dWA_MSG,   
      DPR_MSG    dPR_MSG,   
      DPA_MSG    dPA_MSG,   
      //RFC4740
      UAR_MSG    uAR_MSG,   
      UAA_MSG    uAA_MSG,   
      SAR_MSG    sAR_MSG,   
      SAA_MSG    sAA_MSG,   
      LIR_MSG    lIR_MSG,   
      LIA_MSG    lIA_MSG,   
      MAR_MSG    mAR_MSG,   
      MAA_MSG    mAA_MSG,   
      RTR_MSG    rTR_MSG,   
      RTA_MSG    rTA_MSG,   
      PPR_MSG    pPR_MSG,   
      PPA_MSG    pPA_MSG,   
      //Sh interface
      UDR_MSG    uDR_MSG,   
      UDA_MSG    uDA_MSG,   
      PUR_MSG    pUR_MSG,   
      PUA_MSG    pUA_MSG,   
      SNR_MSG    sNR_MSG,   
      SNA_MSG    sNA_MSG,   
      PNR_MSG    pNR_MSG,   
      PNA_MSG    pNA_MSG,   
      //RFC4006 and TS 129 212
      CCR_MSG    cCR_MSG,   
      CCA_MSG    cCA_MSG,   
      //Rx interface
      AAR_MSG    aAR_MSG,   
      AAA_MSG    aAA_MSG,   
      UNKNOWN_MSG    uNKNOWN_MSG
    }  with { variant "TAG (
      cER_MSG,  header.cmdcode =        CER_CEA_E;
      cEA_MSG,  header.cmdcode =        CER_CEA_E;
      rAR_MSG,  header.cmdcode =        RAR_RAA_E; 
      rAA_MSG,  header.cmdcode =        RAR_RAA_E; 
      aCR_MSG,  header.cmdcode =        ACR_ACA_E; 
      aCA_MSG,  header.cmdcode =        ACR_ACA_E; 
      aSR_MSG,  header.cmdcode =        ASR_ASA_E; 
      aSA_MSG,  header.cmdcode =        ASR_ASA_E; 
      sTR_MSG,  header.cmdcode =        STR_STA_E; 
      sTA_MSG,  header.cmdcode =        STR_STA_E; 
      dWR_MSG,  header.cmdcode =        DWR_DWA_E; 
      dWA_MSG,  header.cmdcode =        DWR_DWA_E; 
      dPR_MSG,  header.cmdcode =        DPR_DPA_E; 
      dPA_MSG,  header.cmdcode =        DPR_DPA_E; 
      uAR_MSG,  header.cmdcode =        UAR_UAA_E; 
      uAA_MSG,  header.cmdcode =        UAR_UAA_E; 
      sAR_MSG,  header.cmdcode =        SAR_SAA_E; 
      sAA_MSG,  header.cmdcode =        SAR_SAA_E; 
      lIR_MSG,  header.cmdcode =        LIR_LIA_E; 
      lIA_MSG,  header.cmdcode =        LIR_LIA_E; 
      mAR_MSG,  header.cmdcode =        MAR_MAA_E; 
      mAA_MSG,  header.cmdcode =        MAR_MAA_E; 
      rTR_MSG,  header.cmdcode =        RTR_RTA_E; 
      rTA_MSG,  header.cmdcode =        RTR_RTA_E; 
      pPR_MSG,  header.cmdcode =        PPR_PPA_E; 
      pPA_MSG,  header.cmdcode =        PPR_PPA_E; 
      uDR_MSG,  header.cmdcode =        UDR_UDA_E; 
      uDA_MSG,  header.cmdcode =        UDR_UDA_E; 
      pUR_MSG,  header.cmdcode =        PUR_PUA_E; 
      pUA_MSG,  header.cmdcode =        PUR_PUA_E; 
      sNR_MSG,  header.cmdcode =        SNR_SNA_E; 
      sNA_MSG,  header.cmdcode =        SNR_SNA_E; 
      pNR_MSG,  header.cmdcode =        PNR_PNA_E; 
      pNA_MSG,  header.cmdcode =        PNR_PNA_E; 
      cCR_MSG,  header.cmdcode =        CCR_CCA_E; 
      cCA_MSG,  header.cmdcode =        CCR_CCA_E; 
      aAR_MSG,  header.cmdcode =        AAR_AAA_E; 
      aAA_MSG,  header.cmdcode =        AAR_AAA_E; 
      uNKNOWN_MSG,  OTHERWISE       ; 


      )"}

    /* ***** Diameter Message types ***** */
    group RFC3588{

      type record UNKNOWN_MSG {
        DiameterHeader         header,
        set of AVP_Type    aVP_Type optional //changed

      }
      with {
        /*variant "present=!bytes(4, 257, 258)"
        variant "present=!bytes(4, 271, 275)"
        variant "present=!bytes(4, 280)"
        variant "present=!bytes(4, 282, 288)"
        variant "present=!bytes(4, 306, 309)"
        variant (aVP_Type) "fieldPresent=!isEOF" */

        variant (header) "LENGTHTO(header,aVP_Type )";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record  CER_MSG{
        //Ref: RFC3588 5.3.1.  Capabilities-Exchange-Request
        DiameterHeader                         header,//<CER> ::= < Diameter Header: 257, REQ >
        Origin_Host_AVP                     origin_Host,//required
        Origin_Realm_AVP                     origin_Realm,
        set length (1..infinity) of Host_IP_Address_AVP host_IP_Address,
        Vendor_Id_AVP                         vendor_Id,
        Product_Name_AVP                     product_Name,//required
        set of Origin_State_Id_AVP            origin_State_Id optional,
        set of Supported_Vendor_Id_AVP        supported_Vendor_Id optional,
        set of Auth_Application_Id_AVP        auth_Application_Id optional,
        set of Inband_Security_Id_AVP        inband_Security_Id optional,
        set of Acct_Application_Id_AVP        acct_Application_Id optional,
        set of Vendor_Specific_Appl_Id_AVP    vendor_Specific_Application_Id optional,
        Firmware_Revision_AVP                firmware_Revision optional,
        set of AVP_Type                     aVP_Type optional
      }
      with {
        /* variant (host_IP_Address) "fieldPresent=bytes(4, 257)" //presence check for inline defined lists
        variant (origin_State_Id) "fieldPresent=bytes(4, 278)" //presence check for inline defined optional lists
        variant (supported_Vendor_Id) "fieldPresent=bytes(4, 265)" //presence check for inline defined optional lists
        variant (auth_Application_Id) "fieldPresent=bytes(4, 258)" //presence check for inline defined optional lists
        variant (inband_Security_Id) "fieldPresent=bytes(4, 299)" //presence check for inline defined optional lists
        variant (acct_Application_Id) "fieldPresent=bytes(4, 259)" //presence check for inline defined optional lists
        variant (vendor_Specific_Application_Id) "fieldPresent=bytes(4, 260)" //presence check for inline defined optional lists
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '1'B)" ;
        variant (header) "LENGTHTO(header,origin_Host,origin_Realm,host_IP_Address,vendor_Id,product_Name,origin_State_Id ,supported_Vendor_Id ,auth_Application_Id ,inband_Security_Id ,acct_Application_Id ,vendor_Specific_Application_Id ,firmware_Revision ,aVP_Type
        )";
        variant (header) "LENGTHINDEX(msglen)"; 

      }  

      type record  CEA_MSG{
        //Ref: RFC3588 5.3.2.  Capabilities-Exchange-Answer
        DiameterHeader                         header,//<CEA> ::= < Diameter Header: 257 >
        Result_Code_AVP                        result_Code,//required
        Origin_Host_AVP                     origin_Host,
        Origin_Realm_AVP                     origin_Realm,
        set length (1..infinity) of Host_IP_Address_AVP             host_IP_Address,
        Vendor_Id_AVP                         vendor_Id,
        Product_Name_AVP                     product_Name,//required
        Origin_State_Id_AVP                    origin_State_Id optional,
        Error_Message_AVP                    error_Message optional,
        set of Failed_AVP                    failed optional,
        set of Supported_Vendor_Id_AVP        supported_Vendor_Id optional,
        set of Auth_Application_Id_AVP        auth_Application_Id optional,
        set of Inband_Security_Id_AVP        inband_Security_Id optional,
        set of Acct_Application_Id_AVP        acct_Application_Id optional,
        set of Vendor_Specific_Appl_Id_AVP     vendor_Specific_Application_Id optional,
        Firmware_Revision_AVP                firmware_Revision optional,
        set of AVP_Type                     aVP_Type optional
      }  with {

        /*variant "present=bits(32,1,0) && bytes(5,3, 257)" //The Capabilities-Exchange-Request (CEA), indicated by the Command-Code set to 257 and the Command Flags' 'R' bit clear
        variant (host_IP_Address) "fieldPresent=bytes(4, 257)" //presence check for inline defined lists
        variant (failed) "fieldPresent=bytes(4, 278)"
        variant (supported_Vendor_Id) "fieldPresent=bytes(4, 279)"
        variant (auth_Application_Id) "fieldPresent=bytes(4, 265)"
        variant (inband_Security_Id) "fieldPresent=bytes(4, 299)"
        variant (acct_Application_Id) "fieldPresent=bytes(4, 259)"
        variant (vendor_Specific_Application_Id) "fieldPresent=bytes(4, 260)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '0'B)" ;
        variant (header) "LENGTHTO(header,result_Code,origin_Host,origin_Realm,host_IP_Address,vendor_Id,product_Name,origin_State_Id ,error_Message ,               failed ,supported_Vendor_Id ,auth_Application_Id ,inband_Security_Id ,acct_Application_Id ,vendor_Specific_Application_Id ,firmware_Revision ,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      } 

      type record RAR_MSG{
        //Ref: RFC3588 8.3.1.  Re-Auth-Request
        DiameterHeader                         header,//<RAR>  ::= < Diameter Header: 258, REQ, PXY >
        Session_Id_AVP                         session_Id,//fixed pos.                //RFC3588 & TS 129 214 & TS 129 212
        Origin_Host_AVP                     origin_Host,//required                //RFC3588 & TS 129 214 & TS 129 212
        Origin_Realm_AVP                     origin_Realm,                        //RFC3588 & TS 129 214 & TS 129 212
        Destination_Realm_AVP                destination_Realm,                    //RFC3588 & TS 129 214 & TS 129 212
        Destination_Host_AVP                destination_Host,                    //RFC3588 & TS 129 214 & TS 129 212
        Auth_Application_Id_AVP                auth_Application_Id,                //RFC3588 & TS 129 214 & TS 129 212
        Specific_Action_AVP                    specific_action optional,            // TS 129 214 required
        Re_Auth_Request_Type_AVP             re_Auth_Request_Type optional,         //RFC3588req & TS 129 214NOT present & TS 129 212req
        User_Name_AVP                         user_Name optional,                    //RFC3588
        set of Access_Network_Charging_Identifier_AVP acc_nc_ident optional,     // TS 129 214
        Access_Network_Charging_Address_AVP     acc_nc_addr optional,             // TS 129 214
        set of Flows_AVP                    flows optional,                        // TS 129 214
        set of Subscription_Id_AVP            subscription_Id optional,            // TS 129 214
        Abort_Cause_AVP                        abort_Cause optional,                // TS 129 214
        IP_CAN_Type_AVP                        ip_Can optional,                    // TS 129 214
        RAT_Type_AVP                        rat_Type optional,                    // TS 129 214
        Sponsored_Connectivity_Data_AVP        sponsored_Connectivity_Data optional,// TS 129 214
        Origin_State_Id_AVP                    origin_State_Id optional,            //RFC3588 & TS 129 214 & TS 129 212
        set of Class_AVP                     class optional,                        // TS 129 214
        Session_Release_Cause_AVP            session_Release_Cause optional,        // TS 129 212
        set of Event_Trigger_AVP            event_Trigger optional,                // TS 129 212
        Event_Report_Indication_AVP            event_Report_Indication optional,    // TS 129 212
        set of Charging_Rule_Remove_AVP        charging_Rule_Remove optional,        // TS 129 212
        set of Charging_Rule_Install_AVP    charging_Rule_Install optional,        // TS 129 212
        Default_EPS_Bearer_QoS_AVP            default_EPS_Bearer_QoS optional,    // TS 129 212
        set of QoS_Information_AVP            qoS_Information optional,            // TS 129 212
        Revalidation_Time_AVP                revalidation_Time optional,            // TS 129 212
        set of Usage_Monitoring_Information_AVP    usage_Monitoring_Information optional,    // TS 129 212
        set of Proxy_Info_AVP                 proxy_Info optional,                //RFC3588 & TS 129 214 & TS 129 212
        set of Route_Record_AVP             route_Record optional,                //RFC3588 & TS 129 214 & TS 129 212
        set of AVP_Type                        aVP_Type optional                        //RFC3588 & TS 129 214 & TS 129 212
      } with {
        /*variant "present=bits(32,1,1) && bytes(5,3, 258)" //The RAR, indicated by the Command-Code set to 258 and the Command Flags' 'R' bit set
        variant (acc_nc_ident) "fieldPresent=bytes(4, 502)"
        variant (flows) "fieldPresent=bytes(4, 510)"
        variant (subscription_Id) "fieldPresent=bytes(4, 443)"
        variant (class) "fieldPresent=bytes(4, 25)"
        variant (event_Trigger) "fieldPresent=bytes(4, 1006)"
        variant (charging_Rule_Remove) "fieldPresent=bytes(4, 1002)"
        variant (charging_Rule_Install) "fieldPresent=bytes(4, 1001)"
        variant (qoS_Information) "fieldPresent=bytes(4, 1016)"
        variant (usage_Monitoring_Information) "fieldPresent=bytes(4, 1067)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '1'B)" ;
        variant (header) "LENGTHTO(header,session_Id,origin_Host,origin_Realm,destination_Realm,destination_Host,auth_Application_Id,specific_action ,re_Auth_Request_Type , user_Name ,acc_nc_ident ,acc_nc_addr ,flows ,subscription_Id ,abort_Cause ,ip_Can ,rat_Type ,sponsored_Connectivity_Data ,origin_State_Id ,          class ,session_Release_Cause ,event_Trigger ,event_Report_Indication ,charging_Rule_Remove ,charging_Rule_Install ,default_EPS_Bearer_QoS ,qoS_Information ,            revalidation_Time ,usage_Monitoring_Information ,proxy_Info ,route_Record ,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }  

      type record RAA_MSG{
        //Ref: RFC3588 8.3.2.  Re-Auth-Answer
        DiameterHeader                         header,//<RAA>  ::= < Diameter Header: 258, PXY >
        Session_Id_AVP                         session_Id,//fixed pos.                //RFC3588 & TS 129 214 & TS 129 212
        Result_Code_AVP                        result_Code optional,                //RFC3588req & TS 129 214opt & TS 129 212opt
        Origin_Host_AVP                     origin_Host,                        //RFC3588 & TS 129 214 & TS 129 212
        Origin_Realm_AVP                     origin_Realm,//required                //RFC3588 & TS 129 214 & TS 129 212
        Experimental_Result_AVP             experimental_result optional,         //TS 129 214 & TS 129 212
        User_Name_AVP                         user_Name optional,                    //RFC3588
        set of Media_Component_Description_AVP media_Component_Description optional,//TS 129 214
        Service_URN_AVP                        service_URN optional,                //TS 129 214
        Origin_State_Id_AVP                    origin_State_Id optional,            //RFC3588 & TS 129 214 & TS 129 212
        set of Class_AVP                     class optional,                        //TS 129 214
        IP_CAN_Type_AVP                        iP_CAN_Type optional,                //TS 129 212
        RAT_Type_AVP                        rAT_Type optional,                    //TS 129 212
        record length (0..2) of AN_GW_Address_AVP    aN_GW_Address optional,        //TS 129 212
        ThreeGPP_SGSN_MCC_MNC_AVP            threeGPP_SGSN_MCC_MNC optional,        //TS 129 212
        ThreeGPP_SGSN_Address_AVP            threeGPP_SGSN_Address optional,        //TS 129 212
        ThreeGPP_SGSN_IPv6_Address_AVP        threeGPP_SGSN_IPv6_Address optional,//TS 129 212
        RAI_AVP                                rAI optional,                        //TS 129 212
        ThreeGPP_User_Location_Info_AVP        threeGPP_User_Location_Info optional,//TS 129 212
        ThreeGPP_MS_TimeZone_AVP            threeGPP_MS_TimeZone optional,        //TS 129 212
        set of Charging_Rule_Report_AVP        charging_Rule_Report optional,        //TS 129 212
        Error_Message_AVP                    error_Message optional,                //RFC3588 & TS 129 214 & TS 129 212
        Error_Reporting_Host_AVP            error_Reporting_Host optional,        //RFC3588 & TS 129 214 & TS 129 212
        set of Failed_AVP                    failed optional,                //RFC3588 & TS 129 214 & TS 129 212
        set of Redirect_Host_AVP            redirect_Host optional,                //RFC3588 & TS 129 214
        Redirect_Host_Usage_AVP                redirect_Host_Usage optional,        //RFC3588 & TS 129 214
        Redirect_Max_Cache_Time_AVP            redirect_Max_Cache_Time optional,    //RFC3588 & TS 129 214
        set of Proxy_Info_AVP                proxy_Info optional,                //RFC3588 & TS 129 214 & TS 129 212
        set of AVP_Type                        aVP_Type optional                        //RFC3588 & TS 129 214 & TS 129 212
      }
      with {
        /*variant "present=bits(32,1,0) && bytes(5,3, 258)"
        variant (media_Component_Description) "fieldPresent=bytes(4, 517)"
        variant (class) "fieldPresent=bytes(4, 25)"
        variant (aN_GW_Address) "fieldPresent=bytes(4, 1050)"
        variant (charging_Rule_Report) "fieldPresent=bytes(4, 1018)"
        variant (failed) "fieldPresent=bytes(4, 279)"
        variant (redirect_Host) "fieldPresent=bytes(4, 292)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '0'B)" ;
        variant (header) "LENGTHTO(header,session_Id,result_Code ,origin_Host,origin_Realm,experimental_result ,user_Name ,media_Component_Description ,service_URN ,origin_State_Id ,class ,iP_CAN_Type ,rAT_Type , aN_GW_Address ,threeGPP_SGSN_MCC_MNC ,threeGPP_SGSN_Address ,threeGPP_SGSN_IPv6_Address ,rAI ,threeGPP_User_Location_Info ,threeGPP_MS_TimeZone , charging_Rule_Report ,error_Message ,error_Reporting_Host ,failed ,redirect_Host ,redirect_Host_Usage ,redirect_Max_Cache_Time ,proxy_Info ,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }  

      type record ACR_MSG{
        //Ref: RFC3588 9.7.1.  Accounting-Request
        DiameterHeader                         header,//<ACR> ::= < Diameter Header: 271, REQ, PXY >
        Session_Id_AVP                         session_Id,//fixed pos.
        Origin_Host_AVP                     origin_Host,//required
        Origin_Realm_AVP                     origin_Realm,
        Destination_Realm_AVP                destination_Realm,
        Accounting_Record_Type_AVP             accounting_Record_Type,
        Accounting_Record_Number_AVP        accounting_Record_Number,//required
        Acct_Application_Id_AVP                acct_Application_Id optional,//optional
        Vendor_Specific_Appl_Id_AVP         vendor_Specific_Application_Id optional,
        User_Name_AVP                         user_Name optional,
        set of Supported_Features_AVP         supported_Features optional,    //specified in RFC4006
        Accounting_Sub_Session_Id_AVP         accounting_Sub_Session_Id optional,
        Acct_Session_Id_AVP                 acct_Session_Id optional,
        Acct_Multi_Session_Id_AVP             acct_Multi_Session_Id optional,
        Acct_Interim_Interval_AVP             acct_Interim_Interval optional,
        Accounting_Realtime_Required_AVP     accounting_Realtime_Required optional,
        Origin_State_Id_AVP                 origin_State_Id optional,
        Event_Timestamp_AVP                 event_Timestamp optional,
        set of Proxy_Info_AVP                 proxy_Info optional,
        set of Route_Record_AVP              route_Record optional,
        set of AVP_Type                        aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,1) && bytes(5,3, 271)"
        variant (supported_Features) "fieldPresent=bytes(4, 628)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '1'B)" ;
        variant (header) "LENGTHTO(header,session_Id,origin_Host,origin_Realm,destination_Realm,accounting_Record_Type,accounting_Record_Number,acct_Application_Id ,vendor_Specific_Application_Id ,user_Name ,supported_Features ,accounting_Sub_Session_Id ,acct_Session_Id ,acct_Multi_Session_Id ,acct_Interim_Interval ,accounting_Realtime_Required ,origin_State_Id ,event_Timestamp ,proxy_Info ,route_Record ,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }


      type record ACA_MSG{
        //Ref: RFC3588    9.7.2.  Accounting-Answer
        DiameterHeader                         header ,//<ACA> ::= < Diameter Header: 271, PXY >
        Session_Id_AVP                         session_Id,//fixed pos.
        Result_Code_AVP                        result_Code,//required
        Origin_Host_AVP                     origin_Host,
        Origin_Realm_AVP                     origin_Realm,
        Accounting_Record_Type_AVP             accounting_Record_Type,
        Accounting_Record_Number_AVP        accounting_Record_Number,//required
        Acct_Application_Id_AVP                acct_Application_Id optional,//optional
        Vendor_Specific_Appl_Id_AVP         vendor_Specific_Application_Id optional,
        User_Name_AVP                         user_Name optional,
        Accounting_Sub_Session_Id_AVP         accounting_Sub_Session_Id optional,
        Acct_Session_Id_AVP                 acct_Session_Id optional,
        Acct_Multi_Session_Id_AVP             acct_Multi_Session_Id optional,
        Error_Reporting_Host_AVP            error_Reporting_Host optional,
        Acct_Interim_Interval_AVP             acct_Interim_Interval optional,
        Accounting_Realtime_Required_AVP     accounting_Realtime_Required optional,
        Origin_State_Id_AVP                 origin_State_Id optional,
        Event_Timestamp_AVP                 event_Timestamp optional,
        set of Proxy_Info_AVP                 proxy_Info optional,
        set of AVP_Type                        aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,0) && bytes(5,3, 271)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '0'B)" ;
        variant (header) "LENGTHTO(header,session_Id,result_Code,origin_Host,origin_Realm,accounting_Record_Type,accounting_Record_Number,acct_Application_Id,vendor_Specific_Application_Id,user_Name,accounting_Sub_Session_Id,acct_Session_Id,acct_Multi_Session_Id,error_Reporting_Host,acct_Interim_Interval,accounting_Realtime_Required,origin_State_Id,event_Timestamp,proxy_Info,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record ASR_MSG{
        //Ref: RFC3588 8.5.1.  Abort-Session-Request
        DiameterHeader                         header ,//<ASR>  ::= < Diameter Header: 274, REQ, PXY >
        Session_Id_AVP                         session_Id,//fixed pos.
        Origin_Host_AVP                     origin_Host,//required
        Origin_Realm_AVP                     origin_Realm,
        Destination_Realm_AVP                destination_Realm,
        Destination_Host_AVP                destination_Host,
        Auth_Application_Id_AVP                auth_Application_Id,
        Abort_Cause_AVP                        abort_cause optional,//present in ETSI TS 129 214 p.5.6.7
        User_Name_AVP                         user_Name optional,
        Origin_State_Id_AVP                 origin_State_Id optional,
        set of Proxy_Info_AVP                 proxy_Info optional,
        set of Route_Record_AVP              route_Record optional,
        set of AVP_Type                        aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,1) && bytes(5,3, 274)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '1'B)" ;
        variant (header) "LENGTHTO(header,session_Id,origin_Host,origin_Realm,destination_Realm,destination_Host,auth_Application_Id,abort_cause,user_Name,origin_State_Id,proxy_Info,route_Record,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record  ASA_MSG{
        //Ref: RFC3588 8.5.2.  Abort-Session-Answer
        DiameterHeader                         header,//<ASA>  ::= < Diameter Header: 274, PXY >
        Session_Id_AVP                         session_Id,//fixed pos.
        Result_Code_AVP                        result_Code,//required
        Origin_Host_AVP                     origin_Host,//required
        Origin_Realm_AVP                     origin_Realm,
        User_Name_AVP                         user_Name optional,
        Origin_State_Id_AVP                 origin_State_Id optional,
        Error_Message_AVP                    error_Message optional,
        Error_Reporting_Host_AVP            error_Reporting_Host optional,
        set of Failed_AVP                    failed optional,
        set of Redirect_Host_AVP            redirect_Host optional,
        Redirect_Host_Usage_AVP                redirect_Host_Usage optional,
        Redirect_Max_Cache_Time_AVP        redirect_Max_Cache_Time optional,
        set of Proxy_Info_AVP                 proxy_Info optional,
        set of AVP_Type                        aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,0) && bytes(5,3, 274)"
        variant (failed) "fieldPresent=bytes(4, 279)"
        variant (redirect_Host) "fieldPresent=bytes(4, 292)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '0'B)" ;
        variant (header) "LENGTHTO(header,session_Id,result_Code,origin_Host,origin_Realm,user_Name,origin_State_Id,error_Message,error_Reporting_Host,failed,redirect_Host,redirect_Host_Usage,redirect_Max_Cache_Time,proxy_Info,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record  STR_MSG{
        //Ref: RFC3588 8.4.1.  Session-Termination-Request
        DiameterHeader                         header,//<STR> ::= < Diameter Header: 275, REQ, PXY >
        Session_Id_AVP                         session_Id,//fixed pos.
        Origin_Host_AVP                     origin_Host,//required
        Origin_Realm_AVP                     origin_Realm,
        Destination_Realm_AVP                destination_Realm,
        Auth_Application_Id_AVP                auth_Application_Id,
        Termination_Cause_AVP                 termination_Cause,//requ.
        User_Name_AVP                         user_Name optional,
        Destination_Host_AVP                destination_Host optional,
        set of Class_AVP                     class optional,
        Origin_State_Id_AVP                 origin_State_Id optional,
        set of Proxy_Info_AVP                 proxy_Info optional,
        set of Route_Record_AVP              route_Record optional,
        set of AVP_Type                        aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,1) && bytes(5,3, 275)"
        variant (class) "fieldPresent=bytes(4, 25)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '1'B)" ;
        variant (header) "LENGTHTO(header,session_Id,origin_Host,origin_Realm,destination_Realm,auth_Application_Id,termination_Cause,user_Name,destination_Host,class,origin_State_Id,proxy_Info,route_Record,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record  STA_MSG{
        //Ref: RFC3588 8.4.2.  Session-Termination-Answer
        DiameterHeader                         header,//<STA>  ::= < Diameter Header: 275, PXY >
        Session_Id_AVP                         session_Id,//fixed pos.
        Result_Code_AVP                        result_Code optional,//required
        Origin_Host_AVP                     origin_Host,//required
        Origin_Realm_AVP                     origin_Realm,
        User_Name_AVP                         user_Name optional,
        set of Class_AVP                     class optional,
        Error_Message_AVP                    error_Message optional,
        Error_Reporting_Host_AVP            error_Reporting_Host optional,
        set of Failed_AVP                    failed optional,
        Sponsored_Connectivity_Data_AVP     sponsored_Connectivity_Data optional,//present in ETSI TS 129 214 p.5.6.6
        Origin_State_Id_AVP                 origin_State_Id optional,
        set of Redirect_Host_AVP            redirect_Host optional,
        Redirect_Host_Usage_AVP                redirect_Host_Usage optional,
        Redirect_Max_Cache_Time_AVP            redirect_Max_Cache_Time optional,
        set of Proxy_Info_AVP                 proxy_Info optional,
        set of AVP_Type                        aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,0) && bytes(5,3, 275)"
        variant (class) "fieldPresent=bytes(4, 25)"
        variant (failed) "fieldPresent=bytes(4, 279)"
        variant (redirect_Host) "fieldPresent=bytes(4, 292)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '0'B)" ;
        variant (header) "LENGTHTO(header,session_Id,result_Code,origin_Host,origin_Realm,user_Name,class,error_Message,error_Reporting_Host,failed, sponsored_Connectivity_Data,origin_State_Id,redirect_Host,redirect_Host_Usage,redirect_Max_Cache_Time,proxy_Info,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      /**/
      type record  DWR_MSG{
        //Ref: RFC3588 5.5.1.  Device-Watchdog-Request
        DiameterHeader                         header,//<DWR>  ::= < Diameter Header: 280, REQ >
        Origin_Host_AVP                     origin_Host,//required
        Origin_Realm_AVP                     origin_Realm,
        Origin_State_Id_AVP                 origin_State_Id optional,
        set of AVP_Type                     aVP_Type optional //to await or send some unexpected AVPs
      }
      with {
        /*variant "present=bits(32,1,1) && bytes(5,3, 280)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '1'B)" ;
        variant (header) "LENGTHTO(header,origin_Host,origin_Realm,origin_State_Id,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record  DWA_MSG{
        //Ref: RFC3588 5.5.2.  Device-Watchdog-Answer
        DiameterHeader                         header,//<DWA>  ::= < Diameter Header: 280 >
        Result_Code_AVP                        result_Code,//required
        Origin_Host_AVP                     origin_Host,
        Origin_Realm_AVP                     origin_Realm,//required
        Error_Message_AVP                    error_Message optional,
        set of Failed_AVP                    failed optional,
        Origin_State_Id_AVP                 origin_State_Id optional,
        set of AVP_Type                     aVP_Type optional //to await or send some unexpected AVPs
      }
      with {
        /*variant "present=bits(32,1,0) && bytes(5,3, 280)"
        variant (failed) "fieldPresent=bytes(4, 279)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '0'B)" ;
        variant (header) "LENGTHTO(header,result_Code,origin_Host, origin_Realm,error_Message , failed ,origin_State_Id ,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record  DPR_MSG{
        //    Ref: RFC3588 5.4.1.  Disconnect-Peer-Request
        DiameterHeader                         header,//<DPR>  ::= < Diameter Header: 282, REQ >
        Origin_Host_AVP                     origin_Host,//required
        Origin_Realm_AVP                     origin_Realm,
        Disconnect_Cause_AVP                disconnect_Cause,//requ.
        set of AVP_Type                     aVP_Type optional //to await or send some unexpected AVPs
      }
      with {
        /*variant "present=bits(32,1,1) && bytes(5,3, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '1'B)" ;
        variant (header) "LENGTHTO(header,origin_Host,origin_Realm,disconnect_Cause,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record DPA_MSG{
        //Ref: RFC3588 5.4.2.  Disconnect-Peer-Answer
        DiameterHeader                         header,//<DPA>  ::= < Diameter Header: 282 >
        Result_Code_AVP                        result_Code,//required
        Origin_Host_AVP                     origin_Host,
        Origin_Realm_AVP                     origin_Realm,//required
        Error_Message_AVP                    error_Message optional,
        set of Failed_AVP                    failed optional,
        set of AVP_Type                     aVP_Type optional //to await or send some unexpected AVPs
      }
      with {
        /*variant "present=bits(32,1,0) && bytes(5,3, 282)"
        variant (failed) "fieldPresent=bytes(4, 279)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '0'B)" ;
        variant (header) "LENGTHTO(header,result_Code,origin_Host,origin_Realm,error_Message,failed ,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

    }//end of group RFC3588
    group RFC4740{

      /* Codes on Cx */
      type record    UAR_MSG{
        //Ref: RFC4740 8.1.  User-Authorization-Request Command
        DiameterHeader                         header,//<UAR> ::= < Diameter Header: 283, PXY >
        Session_Id_AVP                         session_Id,//fixed pos.
        Auth_Application_Id_AVP             auth_Application_Id,
        Auth_Session_State_AVP                 auth_Session_State,
        Origin_Host_AVP                     origin_Host,//required
        Origin_Realm_AVP                     origin_Realm,
        Destination_Realm_AVP                destination_Realm,
        SIP_AOR_AVP                            sIP_AOR,
        Destination_Host_AVP                destination_Host optional,
        User_Name_AVP                         user_Name optional,
        SIP_Visited_Network_Id_AVP            sIP_Visited_Network_Id,
        SIP_User_Authorization_Type_AVP        sIP_User_Authorization_Type,
        set of Proxy_Info_AVP                 proxy_Info optional,
        set of Route_Record_AVP              route_Record optional,
        set of AVP_Type                        aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,1) && bytes(5,3, 283)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '1'B)" ;
        variant (header) "LENGTHTO(header,session_Id,auth_Application_Id,auth_Session_State,origin_Host,origin_Realm,destination_Realm,sIP_AOR,destination_Host,user_Name,sIP_Visited_Network_Id,sIP_User_Authorization_Type,proxy_Info,route_Record,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record UAA_MSG{
        //Ref: RFC4740 8.2.  User-Authorization-Answer Command
        DiameterHeader                     header,//<UAA> ::= < Diameter Header: 283, PXY >
        Session_Id_AVP                     session_Id,//fixed pos.
        Auth_Application_Id_AVP         auth_Application_Id,//required
        Auth_Session_State_AVP             auth_Session_State,
        Result_Code_AVP                    result_Code,
        Origin_Host_AVP                 origin_Host,
        Origin_Realm_AVP                 origin_Realm,//required
        SIP_Server_URI_AVP                 sIP_Server_URI optional,
        SIP_Server_Capabilities_AVP        sIP_Server_Capabilities optional,
        Authorization_Lifetime_AVP        authorization_Lifetime optional,
        Auth_Grace_Period_AVP            auth_Grace_Period optional,
        Redirect_Host_AVP                redirect_Host optional,
        Redirect_Host_Usage_AVP            redirect_Host_Usage optional,
        Redirect_Max_Cache_Time_AVP        redirect_Max_Cache_Time optional,
        set of Proxy_Info_AVP             proxy_Info optional,
        set of Route_Record_AVP          route_Record optional,
        set of AVP_Type                    aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,0) && bytes(5,3, 283)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '0'B)" ;
        variant (header) "LENGTHTO(header,session_Id,auth_Application_Id,auth_Session_State,result_Code,origin_Host,origin_Realm,sIP_Server_URI,sIP_Server_Capabilities,authorization_Lifetime,auth_Grace_Period,redirect_Host,redirect_Host_Usage,redirect_Max_Cache_Time,proxy_Info,route_Record,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record SAR_MSG{
        //Ref: RFC4740 8.3.  Server-Assignment-Request (SAR) Command
        DiameterHeader                     header,//<SAR> ::= < Diameter Header: 284, PXY >
        Session_Id_AVP                     session_Id,//fixed pos.
        Auth_Application_Id_AVP         auth_Application_Id,//required
        Auth_Session_State_AVP             auth_Session_State,
        Origin_Host_AVP                 origin_Host,
        Origin_Realm_AVP                 origin_Realm,
        Destination_Realm_AVP            destination_Realm,
        SIP_Server_Assignment_Type_AVP     sIP_Server_Assignment_Type,
        SIP_User_Data_Already_Available_AVP sIP_User_Data_Already_Available,//required
        Destination_Host_AVP            destination_Host optional,
        User_Name_AVP                     user_Name optional,
        SIP_Server_URI_AVP                 sIP_Server_URI optional,
        set of SIP_Supported_User_Data_Type_AVP sIP_Supported_User_Data_Type optional,
        set of SIP_AOR_AVP                sIP_AOR optional,
        set of Proxy_Info_AVP             proxy_Info optional,
        set of Route_Record_AVP          route_Record optional,
        set of AVP_Type                    aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,1) && bytes(5,3, 284)"
        variant (sIP_Supported_User_Data_Type) "fieldPresent=bytes(4, 375)"
        variant (sIP_AOR) "fieldPresent=bytes(4, 122)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '1'B)" ;
        variant (header) "LENGTHTO(header,session_Id,auth_Application_Id,auth_Session_State,origin_Host,origin_Realm,destination_Realm,sIP_Server_Assignment_Type,sIP_User_Data_Already_Available,destination_Host,user_Name,sIP_Server_URI,sIP_Supported_User_Data_Type,sIP_AOR,proxy_Info,route_Record,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record SAA_MSG{
        // Ref: RFC4740 8.4.  Server-Assignment-Answer (SAA) Command
        DiameterHeader                     header ,//<SAA> ::= < Diameter Header: 284, PXY >
        Session_Id_AVP                     session_Id,//fixed pos.
        Auth_Application_Id_AVP         auth_Application_Id,//required
        Result_Code_AVP                    result_Code,
        Auth_Session_State_AVP             auth_Session_State,
        Origin_Host_AVP                 origin_Host,
        Origin_Realm_AVP                 origin_Realm,
        set of SIP_User_Data_AVP        sIP_User_Data,
        SIP_Accounting_Information_AVP    sIP_Accounting_Information,
        set of SIP_Supported_User_Data_Type_AVP sIP_Supported_User_Data_Type optional,
        User_Name_AVP                    user_Name optional,
        Auth_Grace_Period_AVP             auth_Grace_Period optional,
        Authorization_Lifetime_AVP         authorization_Lifetime optional,
        Redirect_Host_AVP                 redirect_Host optional,
        Redirect_Host_Usage_AVP            redirect_Host_Usage optional,
        Redirect_Max_Cache_Time_AVP        redirect_Max_Cache_Time optional,
        set of Proxy_Info_AVP            proxy_Info optional,
        set of Route_Record_AVP          route_Record optional,
        set of AVP_Type                    aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,0) && bytes(5,3, 284)"
        variant (sIP_User_Data) "fieldPresent=bytes(4, 389)" //presence check for inline defined lists
        variant (sIP_Supported_User_Data_Type) "fieldPresent=bytes(4, 388)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '0'B)" ;
        variant (header) "LENGTHTO(header,session_Id,auth_Application_Id,result_Code,auth_Session_State,origin_Host,origin_Realm,sIP_User_Data,sIP_Accounting_Information,sIP_Supported_User_Data_Type,user_Name,auth_Grace_Period,authorization_Lifetime,redirect_Host,redirect_Host_Usage,redirect_Max_Cache_Time,proxy_Info,route_Record,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record LIR_MSG{
        //Ref: RFC4740 8.5.  Location-Info-Request (LIR) Command
        DiameterHeader                     header ,//<LIA> ::= < Diameter Header: 285, PXY >
        Session_Id_AVP                     session_Id,//fixed pos.
        Auth_Application_Id_AVP         auth_Application_Id,//required
        Auth_Session_State_AVP             auth_Session_State,
        Origin_Host_AVP                 origin_Host,
        Origin_Realm_AVP                 origin_Realm,
        Destination_Realm_AVP            destination_Realm,
        SIP_AOR_AVP                        sIP_AOR, //requ.
        Destination_Host_AVP            destination_Host optional,
        set of Proxy_Info_AVP            proxy_Info optional,
        set of Route_Record_AVP          route_Record optional,
        set of AVP_Type                    aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,1) && bytes(5,3, 285)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '1'B)" ;
        variant (header) "LENGTHTO(header,session_Id,auth_Application_Id,auth_Session_State,origin_Host,origin_Realm,destination_Realm,sIP_AOR,destination_Host,proxy_Info,route_Record,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }
      type record LIA_MSG{
        //Ref: RFC4740 8.6.  Location-Info-Answer (LIA) Command
        DiameterHeader                     header ,//<LIA> ::= < Diameter Header: 285, PXY >
        Session_Id_AVP                     session_Id,//fixed pos.
        Auth_Application_Id_AVP         auth_Application_Id,//required
        Result_Code_AVP                    result_Code,
        Auth_Session_State_AVP             auth_Session_State,
        Origin_Host_AVP                 origin_Host,
        Origin_Realm_AVP                 origin_Realm,//required
        SIP_Server_URI_AVP                 sIP_Server_URI optional,
        SIP_Server_Capabilities_AVP        sIP_Server_Capabilities optional,
        Auth_Grace_Period_AVP             auth_Grace_Period optional,
        Authorization_Lifetime_AVP         authorization_Lifetime optional,
        Redirect_Host_AVP                 redirect_Host optional,
        Redirect_Host_Usage_AVP            redirect_Host_Usage optional,
        Redirect_Max_Cache_Time_AVP        redirect_Max_Cache_Time optional,
        set of Proxy_Info_AVP            proxy_Info optional,
        set of Route_Record_AVP          route_Record optional,
        set of AVP_Type                    aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,0) && bytes(5,3, 285)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '0'B)" ;
        variant (header) "LENGTHTO(header,session_Id,auth_Application_Id,result_Code,auth_Session_State,origin_Host,origin_Realm,sIP_Server_URI,sIP_Server_Capabilities,auth_Grace_Period,authorization_Lifetime,redirect_Host,redirect_Host_Usage,redirect_Max_Cache_Time,proxy_Info,route_Record,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record MAR_MSG{
        //Ref: RFC4740 8.7.  Multimedia-Auth-Request (MAR) Command
        DiameterHeader                     header ,//<MAR> ::= < Diameter Header: 286, REQ, PXY >
        Session_Id_AVP                     session_Id,//fixed pos.
        Auth_Application_Id_AVP         auth_Application_Id,//required
        Auth_Session_State_AVP             auth_Session_State,
        Origin_Host_AVP                 origin_Host,
        Origin_Realm_AVP                 origin_Realm,
        Destination_Realm_AVP            destination_Realm,
        SIP_AOR_AVP                        sIP_AOR,
        SIP_Method_AVP                     sIP_Method,//requ.
        Destination_Host_AVP            destination_Host optional,
        User_Name_AVP                    user_Name optional,
        SIP_Server_URI_AVP                 sIP_Server_URI optional,
        SIP_Number_Auth_Items_AVP        sIP_Number_Auth_Items optional,
        SIP_Auth_Data_Item_AVP            sIP_Auth_Data_Item optional,
        set of Proxy_Info_AVP            proxy_Info optional,
        set of Route_Record_AVP          route_Record optional,
        set of AVP_Type                    aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,1) && bytes(5,3, 286)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '1'B)" ;
        variant (header) "LENGTHTO(header,session_Id,auth_Application_Id,auth_Session_State,origin_Host,origin_Realm,destination_Realm,sIP_AOR,sIP_Method,destination_Host,user_Name,sIP_Server_URI,sIP_Number_Auth_Items,sIP_Auth_Data_Item,proxy_Info,route_Record,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }


      type record MAA_MSG{
        //Ref: RFC4740 8.8.  Multimedia-Auth-Answer (MAA) Command
        DiameterHeader                     header ,//<MAA> ::= < Diameter Header: 286, PXY >
        Session_Id_AVP                     session_Id,//fixed pos.
        Auth_Application_Id_AVP         auth_Application_Id,//required
        Result_Code_AVP                    result_Code,
        Auth_Session_State_AVP             auth_Session_State,
        Origin_Host_AVP                 origin_Host,
        Origin_Realm_AVP                 origin_Realm,//requi.
        User_Name_AVP                    user_Name optional,
        SIP_AOR_AVP                        sIP_AOR optional,
        SIP_Number_Auth_Items_AVP        sIP_Number_Auth_Items optional,
        set of SIP_Auth_Data_Item_AVP    sIP_Auth_Data_Item optional,
        Auth_Grace_Period_AVP             auth_Grace_Period optional,
        Authorization_Lifetime_AVP         authorization_Lifetime optional,
        Redirect_Host_AVP                 redirect_Host optional,
        Redirect_Host_Usage_AVP            redirect_Host_Usage optional,
        Redirect_Max_Cache_Time_AVP        redirect_Max_Cache_Time optional,
        set of Proxy_Info_AVP            proxy_Info optional,
        set of Route_Record_AVP          route_Record optional,
        set of AVP_Type                    aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,0) && bytes(5,3, 286)"
        variant (sIP_Auth_Data_Item) "fieldPresent=bytes(4, 376)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '0'B)" ;
        variant (header) "LENGTHTO(header,session_Id,auth_Application_Id,result_Code,auth_Session_State,origin_Host,origin_Realm,user_Name,sIP_AOR,sIP_Number_Auth_Items,sIP_Auth_Data_Item,auth_Grace_Period,authorization_Lifetime,redirect_Host,redirect_Host_Usage,redirect_Max_Cache_Time,proxy_Info,route_Record,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record RTR_MSG{
        //Ref: RFC4740 8.9.  Registration-Termination-Request (RTR) Command
        DiameterHeader                     header ,//<RTR> ::= < Diameter Header: 287, REQ, PXY >
        Session_Id_AVP                     session_Id,//fixed pos.
        Auth_Application_Id_AVP         auth_Application_Id,//required
        Auth_Session_State_AVP             auth_Session_State,
        Origin_Host_AVP                 origin_Host,
        Origin_Realm_AVP                 origin_Realm,
        Destination_Host_AVP            destination_Host,
        SIP_Deregistration_Reason_AVP     sIP_Deregistration_Reason,//requi.
        Destination_Realm_AVP            destination_Realm,
        User_Name_AVP                    user_Name optional,
        set of SIP_AOR_AVP                sIP_AOR optional,
        set of Proxy_Info_AVP            proxy_Info optional,
        set of Route_Record_AVP          route_Record optional,
        set of AVP_Type                    aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,1) && bytes(5,3, 287)"
        variant (sIP_AOR) "fieldPresent=bytes(4, 122)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '1'B)" ;
        variant (header) "LENGTHTO(header,session_Id,auth_Application_Id,auth_Session_State,origin_Host,origin_Realm,destination_Host,sIP_Deregistration_Reason,destination_Realm,user_Name,sIP_AOR,proxy_Info,route_Record,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record RTA_MSG{
        //Ref: RFC4740 8.10.  Registration-Termination-Answer (RTA) Command
        DiameterHeader                     header ,//<RTA> ::= < Diameter Header: 287, PXY >
        Session_Id_AVP                     session_Id,//fixed pos.
        Auth_Application_Id_AVP         auth_Application_Id,//required
        Result_Code_AVP                    result_Code,
        Auth_Session_State_AVP             auth_Session_State,
        Origin_Host_AVP                 origin_Host,
        Origin_Realm_AVP                 origin_Realm,//requi.
        Authorization_Lifetime_AVP         authorization_Lifetime optional,
        Auth_Grace_Period_AVP             auth_Grace_Period optional,
        Redirect_Host_AVP                 redirect_Host optional,
        Redirect_Host_Usage_AVP            redirect_Host_Usage optional,
        Redirect_Max_Cache_Time_AVP        redirect_Max_Cache_Time optional,
        set of Proxy_Info_AVP            proxy_Info optional,
        set of Route_Record_AVP          route_Record optional,
        set of AVP_Type                    aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,0) && bytes(5,3, 287)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '0'B)" ;
        variant (header) "LENGTHTO(header,session_Id,auth_Application_Id,result_Code,auth_Session_State,origin_Host,origin_Realm,authorization_Lifetime,auth_Grace_Period,redirect_Host,redirect_Host_Usage,redirect_Max_Cache_Time,proxy_Info,route_Record,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record PPR_MSG{
        //Ref: RFC4740 8.11.  Push-Profile-Request (PPR) Command
        DiameterHeader                     header ,//<PPR> ::= < Diameter Header: 288, REQ, PXY >
        Session_Id_AVP                     session_Id,//fixed pos.
        Auth_Application_Id_AVP         auth_Application_Id,//required
        Auth_Session_State_AVP             auth_Session_State,
        Origin_Host_AVP                 origin_Host,
        Origin_Realm_AVP                 origin_Realm,
        Destination_Realm_AVP            destination_Realm,
        User_Name_AVP                    user_Name ,//required
        set of SIP_User_Data_AVP        sIP_User_Data optional,
        SIP_Accounting_Information_AVP    sIP_Accounting_Information,
        Destination_Host_AVP            destination_Host optional,
        Authorization_Lifetime_AVP         authorization_Lifetime optional,
        Auth_Grace_Period_AVP             auth_Grace_Period optional,
        set of Proxy_Info_AVP            proxy_Info optional,
        set of Route_Record_AVP          route_Record optional,
        set of AVP_Type                    aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,1) && bytes(5,3, 288)"
        variant (sIP_User_Data) "fieldPresent=bytes(4, 289)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '1'B)" ;
        variant (header) "LENGTHTO(header,session_Id,auth_Application_Id,auth_Session_State,origin_Host,origin_Realm,destination_Realm,user_Name,sIP_User_Data,sIP_Accounting_Information,destination_Host,authorization_Lifetime,auth_Grace_Period,proxy_Info,route_Record,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record PPA_MSG{
        //Ref: RFC4740 8.12.  Push-Profile-Answer (PPA) Command
        DiameterHeader                     header ,//<PPA> ::= < Diameter Header: 288, PXY >
        Session_Id_AVP                     session_Id,//fixed pos.
        Auth_Application_Id_AVP         auth_Application_Id,//required
        Result_Code_AVP                    result_Code,
        Auth_Session_State_AVP             auth_Session_State,
        Origin_Host_AVP                 origin_Host,
        Origin_Realm_AVP                 origin_Realm,//requi.
        Redirect_Host_AVP                 redirect_Host optional,
        Redirect_Host_Usage_AVP            redirect_Host_Usage optional,
        Redirect_Max_Cache_Time_AVP        redirect_Max_Cache_Time optional,
        set of Proxy_Info_AVP            proxy_Info optional,
        set of Route_Record_AVP          route_Record optional,
        set of AVP_Type                    aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,0) && bytes(5,3, 288)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '0'B)" ;
        variant (header) "LENGTHTO(header,session_Id,auth_Application_Id,result_Code,auth_Session_State,origin_Host,origin_Realm,redirect_Host,redirect_Host_Usage,redirect_Max_Cache_Time,proxy_Info,route_Record,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

    }//end og group RFC4740

    group Sh_Intf{
      /* Codes on Sh */
      type record UDR_MSG{
        //    Ref: 3GPP TS 29.329    6.1.1 User-Data-Request (UDR) Command
        DiameterHeader                     header ,//< User-Data-Request> ::= < Diameter Header: 306, REQ, PXY, 16777217 >
        Session_Id_AVP                     session_Id,//fixed pos.
        Vendor_Specific_Appl_Id_AVP     vendor_Specific_Application_Id optional,
        Auth_Session_State_AVP             auth_Session_State,//requi.
        Origin_Host_AVP                 origin_Host,//requi.
        Origin_Realm_AVP                 origin_Realm,//requi.
        Destination_Host_AVP            destination_Host optional,
        Destination_Realm_AVP            destination_Realm,//requi.
        set of Supported_Features_AVP     supported_Features optional,
        User_Identity_AVP                 user_Identity,//requi.
        Wildcarded_PSI_AVP                 wildcarded_PSI optional,
        Wildcarded_IMPU_AVP             wildcarded_IMPU optional,
        Server_Name_AVP                 server_Name optional,
        set of Service_Indication_AVP     service_Indication optional,
        set of Data_Reference_AVP         data_Reference,//requi.
        set of Identity_Set_AVP         identity_Set optional,
        Requested_Domain_AVP             requested_Domain optional,
        Current_Location_AVP             current_Location optional,
        set of DSAI_Tag_AVP                dSAI_Tag optional,
        set of Proxy_Info_AVP            proxy_Info optional,
        set of Route_Record_AVP          route_Record optional,
        set of AVP_Type                    aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,1) && bytes(5,3, 306)"
        variant (supported_Features) "fieldPresent=bytes(4, 628)"
        variant (service_Indication) "fieldPresent=bytes(4, 704)"
        variant (data_Reference) "fieldPresent=bytes(4, 703)"
        variant (identity_Set) "fieldPresent=bytes(4, 708)"
        variant (dSAI_Tag) "fieldPresent=bytes(4, 711)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '1'B)" ;
        variant (header) "LENGTHTO(header,session_Id,vendor_Specific_Application_Id,auth_Session_State,origin_Host,origin_Realm,destination_Host,destination_Realm,supported_Features,user_Identity,wildcarded_PSI,wildcarded_IMPU,server_Name,service_Indication,data_Reference,identity_Set,requested_Domain,current_Location,dSAI_Tag,proxy_Info,route_Record,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record UDA_MSG{
        //    Ref: 3GPP TS 29.329    6.1.2 User-Data-Answer (UDA) Command
        DiameterHeader                     header ,//< Diameter Header: 306, PXY, 16777217 >
        Session_Id_AVP                     session_Id,//fixed pos.
        Vendor_Specific_Appl_Id_AVP     vendor_Specific_Application_Id,
        Result_Code_AVP                    result_Code,
        Experimental_Result_AVP            experimental_Result optional,
        Auth_Session_State_AVP             auth_Session_State,//requi.
        Origin_Host_AVP                 origin_Host,//requi.
        Origin_Realm_AVP                 origin_Realm,//requi.
        set of Supported_Features_AVP     supported_Features optional,
        Wildcarded_PSI_AVP                 wildcarded_PSI optional,
        Wildcarded_IMPU_AVP             wildcarded_IMPU optional,
        User_Data_AVP                     user_Data optional,
        set of Failed_AVP                failed optional,
        set of Proxy_Info_AVP            proxy_Info optional,
        set of Route_Record_AVP          route_Record optional,
        set of AVP_Type                    aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,0) && bytes(5,3, 306)"
        variant (supported_Features) "fieldPresent=bytes(4, 628)"
        variant (failed) "fieldPresent=bytes(4, 279)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '0'B)" ;
        variant (header) "LENGTHTO(header,session_Id,vendor_Specific_Application_Id,result_Code,experimental_Result,auth_Session_State,origin_Host,origin_Realm,supported_Features,wildcarded_PSI,wildcarded_IMPU,user_Data,failed,proxy_Info,route_Record,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record    PUR_MSG{
        //    Ref: 3GPP TS 29.329    6.1.3 Profile-Update-Request (PUR) Command
        DiameterHeader                     header ,//< Diameter Header: 307, REQ, PXY, 16777217 >
        Session_Id_AVP                     session_Id,//fixed pos.
        Vendor_Specific_Appl_Id_AVP     vendor_Specific_Application_Id,
        Auth_Session_State_AVP             auth_Session_State,//requi.
        Origin_Host_AVP                 origin_Host,//requi.
        Origin_Realm_AVP                 origin_Realm,//requi.
        Destination_Host_AVP            destination_Host optional,
        Destination_Realm_AVP            destination_Realm,//requi.
        set of Supported_Features_AVP     supported_Features optional,
        User_Identity_AVP                 user_Identity,//requi.
        Wildcarded_PSI_AVP                 wildcarded_PSI optional,
        Wildcarded_IMPU_AVP             wildcarded_IMPU optional,
        Data_Reference_AVP                 data_Reference,//requi.
        User_Data_AVP                     user_Data,//Requi.
        set of Proxy_Info_AVP            proxy_Info optional,
        set of Route_Record_AVP          route_Record optional,
        set of AVP_Type                    aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,1) && bytes(5,3, 307)"
        variant (supported_Features) "fieldPresent=bytes(4, 628)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '1'B)" ;
        variant (header) "LENGTHTO(header,session_Id,vendor_Specific_Application_Id,auth_Session_State,origin_Host,origin_Realm,destination_Host,destination_Realm,supported_Features,user_Identity,wildcarded_PSI,wildcarded_IMPU,data_Reference,user_Data,proxy_Info,route_Record,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record PUA_MSG{
        //    Ref: 3GPP TS 29.329    6.1.4 Profile-Update-Answer (PUA) Command
        DiameterHeader                     header ,//< Diameter Header: 307, PXY, 16777217 >
        Session_Id_AVP                     session_Id,//fixed pos.
        Vendor_Specific_Appl_Id_AVP     vendor_Specific_Application_Id,
        Result_Code_AVP                    result_Code optional,
        Experimental_Result_AVP            experimental_Result optional,
        Auth_Session_State_AVP             auth_Session_State,//requi.
        Origin_Host_AVP                 origin_Host,//requi.
        Origin_Realm_AVP                 origin_Realm,//requi.
        Wildcarded_PSI_AVP                 wildcarded_PSI optional,
        Wildcarded_IMPU_AVP             wildcarded_IMPU optional,
        set of Supported_Features_AVP     supported_Features optional,
        set of Failed_AVP                failed optional,
        set of Proxy_Info_AVP            proxy_Info optional,
        set of Route_Record_AVP          route_Record optional,
        set of AVP_Type                    aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,0) && bytes(5,3, 307)"
        variant (supported_Features) "fieldPresent=bytes(4, 628)"
        variant (failed) "fieldPresent=bytes(4, 279)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '0'B)" ;
        variant (header) "LENGTHTO(header,session_Id,vendor_Specific_Application_Id,result_Code,experimental_Result,auth_Session_State,origin_Host,origin_Realm,wildcarded_PSI,wildcarded_IMPU,supported_Features,failed,proxy_Info,route_Record,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record SNR_MSG{
        //    Ref: 3GPP TS 29.329    6.1.5 Subscribe-Notifications-Request (SNR) Command
        DiameterHeader                     header ,//< Diameter Header: 308, REQ, PXY, 16777217 >
        Session_Id_AVP                     session_Id,//fixed pos.
        Vendor_Specific_Appl_Id_AVP     vendor_Specific_Application_Id,
        Auth_Session_State_AVP             auth_Session_State,//requi.
        Origin_Host_AVP                 origin_Host,//requi.
        Origin_Realm_AVP                 origin_Realm,//requi.
        Destination_Host_AVP            destination_Host optional,
        Destination_Realm_AVP            destination_Realm,//requi.
        set of Supported_Features_AVP     supported_Features optional,
        User_Identity_AVP                 user_Identity,//requi.
        Wildcarded_PSI_AVP                 wildcarded_PSI optional,
        Wildcarded_IMPU_AVP             wildcarded_IMPU optional,
        set of Service_Indication_AVP     service_Indication optional,
        Send_Data_Indication_AVP         send_Data_Indication  optional,
        Server_Name_AVP                 server_Name optional,
        Subs_Req_Type_AVP                 subs_Req_Type,
        set of Data_Reference_AVP         data_Reference,
        set of Identity_Set_AVP         identity_Set optional,
        Expiry_Time_AVP                 expiry_Time optional,
        set of DSAI_Tag_AVP                dSAI_Tag optional,
        set of Proxy_Info_AVP            proxy_Info optional,
        set of Route_Record_AVP          route_Record optional,
        set of AVP_Type                    aVP_Type optional
      }
      with {
        /* variant "present=bits(32,1,1) && bytes(5,3, 308)"
        variant (supported_Features) "fieldPresent=bytes(4, 628)"
        variant (service_Indication) "fieldPresent=bytes(4, 704)"
        variant (data_Reference) "fieldPresent=bytes(4, 703)"
        variant (identity_Set) "fieldPresent=bytes(4, 708)"
        variant (dSAI_Tag) "fieldPresent=bytes(4, 711)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '1'B)" ;
        variant (header) "LENGTHTO(header,session_Id,vendor_Specific_Application_Id,auth_Session_State,origin_Host,origin_Realm,destination_Host,destination_Realm,supported_Features,user_Identity,wildcarded_PSI,wildcarded_IMPU,service_Indication,send_Data_Indication,server_Name,subs_Req_Type,data_Reference,identity_Set,expiry_Time,dSAI_Tag,proxy_Info,route_Record,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record SNA_MSG{
        //    Ref: 3GPP TS 29.329    6.1.6 Subscribe-Notifications-Answer (SNA) Command
        DiameterHeader                     header ,//< Diameter Header: 308, PXY, 16777217 >
        Session_Id_AVP                     session_Id,//fixed pos.
        Vendor_Specific_Appl_Id_AVP     vendor_Specific_Application_Id,
        Auth_Session_State_AVP             auth_Session_State,//requi.
        Result_Code_AVP                    result_Code optional,
        Experimental_Result_AVP            experimental_Result optional,
        Origin_Host_AVP                 origin_Host,//requi.
        Origin_Realm_AVP                 origin_Realm,//requi.
        Wildcarded_PSI_AVP                 wildcarded_PSI optional,
        Wildcarded_IMPU_AVP             wildcarded_IMPU optional,
        set of Supported_Features_AVP     supported_Features optional,
        User_Data_AVP                     user_Data optional,
        Expiry_Time_AVP                 expiry_Time optional,
        set of Failed_AVP                failed optional,
        set of Proxy_Info_AVP            proxy_Info optional,
        set of Route_Record_AVP          route_Record optional,
        set of AVP_Type                    aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,0) && bytes(5,3, 308)"
        variant (supported_Features) "fieldPresent=bytes(4, 628)"
        variant (failed) "fieldPresent=bytes(4, 279)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '0'B)" ;
        variant (header) "LENGTHTO(header,session_Id,vendor_Specific_Application_Id,auth_Session_State,result_Code,experimental_Result,origin_Host,origin_Realm,wildcarded_PSI,wildcarded_IMPU,supported_Features,user_Data,expiry_Time,failed,proxy_Info,route_Record,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record PNR_MSG{
        //    Ref: 3GPP TS 29.329    6.1.7 Push-Notification-Request (PNR) Command
        DiameterHeader                     header ,//< Diameter Header: 309, REQ, PXY, 16777217 >
        Session_Id_AVP                     session_Id,//fixed pos.
        Vendor_Specific_Appl_Id_AVP     vendor_Specific_Application_Id,
        Auth_Session_State_AVP             auth_Session_State,//requi.
        Origin_Host_AVP                 origin_Host,//requi.
        Origin_Realm_AVP                 origin_Realm,//requi.
        Destination_Host_AVP            destination_Host optional,
        Destination_Realm_AVP            destination_Realm,//requi.
        set of Supported_Features_AVP     supported_Features optional,
        User_Identity_AVP                 user_Identity,//requi.
        Wildcarded_PSI_AVP                 wildcarded_PSI optional,
        Wildcarded_IMPU_AVP             wildcarded_IMPU optional,
        User_Data_AVP                     user_Data,//Requi.
        set of Proxy_Info_AVP            proxy_Info optional,
        set of Route_Record_AVP          route_Record optional,
        set of AVP_Type                    aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,1) && bytes(5,3, 309)"
        variant (supported_Features) "fieldPresent=bytes(4, 628)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '1'B)" ;
        variant (header) "LENGTHTO(header,session_Id,vendor_Specific_Application_Id,auth_Session_State,origin_Host,origin_Realm,destination_Host,destination_Realm,supported_Features,user_Identity,wildcarded_PSI,wildcarded_IMPU,user_Data,proxy_Info,route_Record,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record PNA_MSG{
        //    Ref: 3GPP TS 29.329    6.1.8 Push-Notifications-Answer (PNA) Command
        DiameterHeader                     header ,//< Diameter Header: 309, PXY, 16777217 >
        Session_Id_AVP                     session_Id,//fixed pos.
        Vendor_Specific_Appl_Id_AVP     vendor_Specific_Application_Id,
        Result_Code_AVP                    result_Code optional,
        Experimental_Result_AVP            experimental_Result optional,
        Auth_Session_State_AVP             auth_Session_State,//requi.
        Origin_Host_AVP                 origin_Host,//requi.
        Origin_Realm_AVP                 origin_Realm,//requi.
        set of Supported_Features_AVP     supported_Features optional,
        set of Failed_AVP                failed optional,
        set of Proxy_Info_AVP            proxy_Info optional,
        set of Route_Record_AVP          route_Record optional,
        set of AVP_Type                    aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,0) && bytes(5,3, 309)"
        variant (supported_Features) "fieldPresent=bytes(4, 628)"
        variant (failed) "fieldPresent=bytes(4, 279)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '0'B)" ;
        variant (header) "LENGTHTO(header,session_Id,vendor_Specific_Application_Id,result_Code,experimental_Result,auth_Session_State,origin_Host,origin_Realm,supported_Features,failed,proxy_Info,route_Record,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

    }//end of group Sh_Intf

    group RFC4006{
      /* Codes on Ro and Rf interface */
      //ACR ACA message is defined in RFC3588 group


      type record    CCR_MSG{
        //    Ref:  RFC4006   3.1.  Credit-Control-Request (CCR) Command
        DiameterHeader                     header ,//< Diameter Header: 272, REQ, PXY>
        Session_Id_AVP                     session_Id,//fixed pos.             //RFC4006 & TS129 212
        Origin_Host_AVP                 origin_Host,//requi.                //RFC4006 & TS129 212
        Origin_Realm_AVP                 origin_Realm,//requi.                //RFC4006 & TS129 212
        Destination_Realm_AVP            destination_Realm,//requi.            //RFC4006 & TS129 212
        Auth_Application_Id_AVP         auth_Application_Id,                //RFC4006 & TS129 212
        Service_Context_Id_AVP             service_Context_Id optional,        //RFC4006
        CC_Request_Type_AVP             cC_Request_Type,                    //RFC4006 & TS129 212
        CC_Request_Number_AVP             cC_Request_Number,                    //RFC4006 & TS129 212
        Destination_Host_AVP             destination_Host optional,            //RFC4006 & TS129 212
        User_Name_AVP                     user_Name optional,                    //RFC4006
        CC_Sub_Session_Id_AVP             cC_Sub_Session_Id optional,            //RFC4006
        Acct_Multi_Session_Id_AVP         acct_Multi_Session_Id optional,        //RFC4006
        Origin_State_Id_AVP             origin_State_Id optional,            //RFC4006 & TS129 212
        Event_Timestamp_AVP             event_Timestamp optional,            //RFC4006
        set of Subscription_Id_AVP         subscription_Id optional,            //RFC4006 & TS129 212
        Service_Identifier_AVP             service_Identifier optional,        //RFC4006
        Termination_Cause_AVP             termination_Cause optional,            //RFC4006 & TS129 212
        Requested_Service_Unit_AVP         requested_Service_Unit optional,    //RFC4006
        Requested_Action_AVP             requested_Action optional,            //RFC4006
        set of Used_Service_Unit_AVP     used_Service_Unit optional,            //RFC4006
        Multiple_Services_Indicator_AVP multiple_Services_Indicator optional,                    //RFC4006
        set of Multiple_Services_Credit_Control_AVP multiple_Services_Credit_Control optional,    //RFC4006
        set of Service_Parameter_Info_AVP service_Parameter_Info optional,    //RFC4006
        CC_Correlation_Id_AVP             cC_Correlation_Id optional,            //RFC4006
        set of Supported_Features_AVP    supported_Features optional,                //TS129 212 only
        Network_Request_Support_AVP        network_Request_Support optional,            //TS129 212 only
        set of Packet_Filter_Information_AVP    packet_Filter_Information optional,    //TS129 212 only
        Packet_Filter_Operation_AVP        packet_Filter_Operation optional,            //TS129 212 only
        Bearer_Identifier_AVP            bearer_Identifier optional,                    //TS129 212 only
        Bearer_Operation_AVP            bearer_Operation optional,                    //TS129 212 only
        Framed_IP_Address_AVP            framed_IP_Address optional,                    //TS129 212 only
        Framed_IPv6_Prefix_AVP            framed_IPv6_Prefix optional,                //TS129 212 only
        IP_CAN_Type_AVP                    iP_CAN_Type optional,                        //TS129 212 only
        ThreeGPP_RAT_Type_AVP            threeGPP_RAT_Type optional,                    //TS129 212 only
        RAT_Type_AVP                    rAT_Type optional,                            //TS129 212 only
        QoS_Information_AVP                qoS_Information optional,                    //TS129 212 only
        QoS_Negotiation_AVP                qoS_Negotiation optional,                    //TS129 212 only
        QoS_Upgrade_AVP                    qoS_Upgrade optional,                        //TS129 212 only
        Default_EPS_Bearer_QoS_AVP        default_EPS_Bearer_QoS optional,            //TS129 212 only
        record length (0..2) of AN_GW_Address_AVP    aN_GW_Address optional,            //TS129 212 only
        ThreeGPP_SGSN_MCC_MNC_AVP        threeGPP_SGSN_MCC_MNC optional,                //TS129 212 only
        ThreeGPP_SGSN_Address_AVP        threeGPP_SGSN_Address optional,                //TS129 212 only
        ThreeGPP_SGSN_IPv6_Address_AVP    threeGPP_SGSN_IPv6_Address optional,        //TS129 212 only
        RAI_AVP                            rAI optional,                                //TS129 212 only
        ThreeGPP_User_Location_Info_AVP    threeGPP_User_Location_Info optional,        //TS129 212 only
        ThreeGPP_MS_TimeZone_AVP        threeGPP_MS_TimeZone optional,                //TS129 212 only
        Called_Station_Id_AVP            called_Station_Id optional,                    //TS129 212 only
        PDN_Connection_ID_AVP            pDN_Connection_ID optional,                    //TS129 212 only
        Bearer_Usage_AVP                bearer_Usage optional,                        //TS129 212 only
        Online_AVP                        online optional,                            //TS129 212 only
        Offline_AVP                        offline optional,                            //TS129 212 only
        set of TFT_Packet_Filter_Information_AVP    tFT_Packet_Filter_Information optional,        //TS129 212 only
        set of Charging_Rule_Report_AVP    charging_Rule_Report optional,                //TS129 212 only
        set of Event_Trigger_AVP        event_Trigger optional,                        //TS129 212 only
        Event_Report_Indication_AVP        event_Report_Indication optional,            //TS129 212 only
        Access_Network_Charging_Address_AVP    access_Network_Charging_Address optional,//TS129 212 only
        set of Access_Network_Charging_Identifier_Gx_AVP    access_Network_Charging_Identifier_Gx optional,        //TS129 212 only
        set of CoA_Information_AVP        coA_Information optional,                    //TS129 212 only
        set of Usage_Monitoring_Information_AVP    usage_Monitoring_Information optional,//TS129 212 only
        Routing_Rule_Install_AVP        routing_Rule_Install optional,                //TS129 212 only
        Routing_Rule_Remove_AVP            routing_Rule_Remove optional,                //TS129 212 only
        Maximum_Bandwidth_AVP            maximum_Bandwidth optional,                    //TS129 212 only
        Logical_Access_ID_AVP            logical_Access_ID optional,                    //TS129 212 only
        Physical_Access_ID_AVP            physical_Access_ID optional,                //TS129 212 only
        User_Equipment_Info_AVP         user_Equipment_Info optional,                //RFC4006 & TS129 212
        set of Proxy_Info_AVP            proxy_Info optional,                        //RFC4006 & TS129 212
        set of Route_Record_AVP          route_Record optional,                        //RFC4006 & TS129 212
        set of AVP_Type                    aVP_Type optional                            //RFC4006 & TS129 212
      }
      with {
        /*variant "present=bits(32,1,1) && bytes(5,3, 272)"
        variant (subscription_Id) "fieldPresent=bytes(4, 443)"
        variant (used_Service_Unit) "fieldPresent=bytes(4, 446)"
        variant (multiple_Services_Credit_Control) "fieldPresent=bytes(4, 456)"
        variant (service_Parameter_Info) "fieldPresent=bytes(4, 440)"
        variant (supported_Features) "fieldPresent=bytes(4, 628)"
        variant (packet_Filter_Information) "fieldPresent=bytes(4, 1061)"
        variant (aN_GW_Address) "fieldPresent=bytes(4, 1050)"
        variant (tFT_Packet_Filter_Information) "fieldPresent=bytes(4, 1013)"
        variant (charging_Rule_Report) "fieldPresent=bytes(4, 1018)"
        variant (event_Trigger) "fieldPresent=bytes(4, 1006)"
        variant (access_Network_Charging_Identifier_Gx) "fieldPresent=bytes(4, 1022)"
        variant (coA_Information) "fieldPresent=bytes(4, 1039)"
        variant (usage_Monitoring_Information) "fieldPresent=bytes(4, 1067)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '1'B)" ;
        variant (header) "LENGTHTO(header,session_Id,origin_Host,origin_Realm,destination_Realm,auth_Application_Id,service_Context_Id,cC_Request_Type,cC_Request_Number,destination_Host,user_Name,cC_Sub_Session_Id,acct_Multi_Session_Id,origin_State_Id,event_Timestamp,subscription_Id,service_Identifier,termination_Cause,requested_Service_Unit,requested_Action,used_Service_Unit,multiple_Services_Indicator,multiple_Services_Credit_Control,service_Parameter_Info,cC_Correlation_Id,supported_Features,network_Request_Support,packet_Filter_Information,packet_Filter_Operation,bearer_Identifier,bearer_Operation,framed_IP_Address,framed_IPv6_Prefix,iP_CAN_Type,threeGPP_RAT_Type,rAT_Type,qoS_Information,qoS_Negotiation,qoS_Upgrade,default_EPS_Bearer_QoS,aN_GW_Address,threeGPP_SGSN_MCC_MNC,threeGPP_SGSN_Address,threeGPP_SGSN_IPv6_Address,rAI,threeGPP_User_Location_Info,threeGPP_MS_TimeZone,called_Station_Id,pDN_Connection_ID,bearer_Usage,online,offline,tFT_Packet_Filter_Information,charging_Rule_Report,event_Trigger,event_Report_Indication,access_Network_Charging_Address,access_Network_Charging_Identifier_Gx,coA_Information,usage_Monitoring_Information,routing_Rule_Install,routing_Rule_Remove,maximum_Bandwidth,logical_Access_ID,physical_Access_ID,user_Equipment_Info,proxy_Info,route_Record,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record CCA_MSG{
        //    Ref: RFC4006 3.2.  Credit-Control-Answer (CCA) Command
        DiameterHeader                     header ,//< Diameter Header: 272, PXY>
        Session_Id_AVP                     session_Id,//fixed pos.            //RFC4006 & TS129 212
        Result_Code_AVP                    result_Code optional,            //RFC4006 & TS129 212-optional
        Origin_Host_AVP                 origin_Host,//requi.            //RFC4006 & TS129 212
        Origin_Realm_AVP                 origin_Realm,//requi.            //RFC4006 & TS129 212
        Auth_Application_Id_AVP         auth_Application_Id,            //RFC4006 & TS129 212
        CC_Request_Type_AVP             cC_Request_Type,                //RFC4006 & TS129 212
        CC_Request_Number_AVP             cC_Request_Number,                //RFC4006 & TS129 212
        User_Name_AVP                     user_Name optional,                //RFC4006
        CC_Session_Failover_AVP          cC_Session_Failover optional,    //RFC4006
        CC_Sub_Session_Id_AVP             cC_Sub_Session_Id optional,        //RFC4006
        Acct_Multi_Session_Id_AVP         acct_Multi_Session_Id optional,    //RFC4006
        Origin_State_Id_AVP             origin_State optional,            //RFC4006 & TS129 212
        Event_Timestamp_AVP             event_Timestamp optional,        //RFC4006
        Granted_Service_Unit_AVP         granted_Service_Unit optional,  //RFC4006
        set of Multiple_Services_Credit_Control_AVP  multiple_Services_Credit_Control optional,    //RFC4006
        Cost_Information_AVP              cost_Information optional,        //RFC4006
        Final_Unit_Indication_AVP         final_Unit_Indication optional,    //RFC4006
        Check_Balance_Result_AVP         check_Balance_Result optional,  //RFC4006
        Credit_Control_Failure_Handling_AVP  credit_Control_Failure_Handling optional,        //RFC4006
        Direct_Debiting_Failure_Handling_AVP  direct_Debiting_Failure_Handling optional,    //RFC4006
        Validity_Time_AVP                 validity_Time optional,            //RFC4006
        set of Redirect_Host_AVP          redirect_Host optional,            //RFC4006 & TS129 212
        Redirect_Host_Usage_AVP          redirect_Host_Usage optional,    //RFC4006 & TS129 212
        Redirect_Max_Cache_Time_AVP      redirect_Max_Cache_Time optional,//RFC4006 & TS129 212
        Experimental_Result_AVP            experimental_Result optional,    //TS129 212 only
        set of Supported_Features_AVP    supported_Features optional,    //TS129 212 only
        Bearer_Control_Mode_AVP            bearer_Control_Mode optional,    //TS129 212 only
        set of Event_Trigger_AVP        event_Trigger optional,            //TS129 212 only
        set of Charging_Rule_Remove_AVP    charging_Rule_Remove optional,    //TS129 212 only
        set of Charging_Rule_Install_AVP    charging_Rule_Install optional,    //TS129 212 only
        Charging_Information_AVP        charging_Information optional,    //TS129 212 only
        Online_AVP                        online optional,                //TS129 212 only
        Offline_AVP                        offline optional,                //TS129 212 only
        set of QoS_Information_AVP        qoS_Information optional,        //TS129 212 only
        Revalidation_Time_AVP            revalidation_Time optional,        //TS129 212 only
        Default_EPS_Bearer_QoS_AVP        default_EPS_Bearer_QoS optional,//TS129 212 only
        Bearer_Usage_AVP                bearer_Usage optional,            //TS129 212 only
        ThreeGPP_User_Location_Info_AVP    threeGPP_User_Location_Info optional,            //TS129 212 only
        set of Usage_Monitoring_Information_AVP    usage_Monitoring_Information optional,    //TS129 212 only
        set of CSG_Information_Reporting_AVP    cSG_Information_Reporting optional,        //TS129 212 only
        User_CSG_Information_AVP        user_CSG_Information optional,    //TS129 212 only
        Error_Message_AVP                error_Message optional,            //TS129 212 only
        Error_Reporting_Host_AVP        error_Reporting_Host optional,    //TS129 212 only
        set of Proxy_Info_AVP            proxy_Info optional,            //RFC4006 & TS129 212
        set of Route_Record_AVP          route_Record optional,            //RFC4006 & TS129 212
        set of Failed_AVP                 failed optional,            //RFC4006 & TS129 212
        set of AVP_Type                    aVP_Type optional                //RFC4006 & TS129 212
      }
      with {
        /*variant "present=bits(32,1,0) && bytes(5,3, 272)"
        variant (multiple_Services_Credit_Control) "fieldPresent=bytes(4, 456)"
        variant (redirect_Host) "fieldPresent=bytes(4, 292)"
        variant (supported_Features) "fieldPresent=bytes(4, 628)"
        variant (event_Trigger) "fieldPresent=bytes(4, 1006)"
        variant (charging_Rule_Remove) "fieldPresent=bytes(4, 1002)"
        variant (charging_Rule_Install) "fieldPresent=bytes(4, 1001)"
        variant (qoS_Information) "fieldPresent=bytes(4, 1016)"
        variant (usage_Monitoring_Information) "fieldPresent=bytes(4, 1067)"
        variant (cSG_Information_Reporting) "fieldPresent=bytes(4, 1071)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (failed) "fieldPresent=bytes(4, 279)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '0'B)" ;
        variant (header) "LENGTHTO(header,session_Id,   result_Code ,   origin_Host, origin_Realm,auth_Application_Id,cC_Request_Type,  cC_Request_Number,  user_Name , cC_Session_Failover ,  cC_Sub_Session_Id ,  acct_Multi_Session_Id ,origin_State ,event_Timestamp , granted_Service_Unit , multiple_Services_Credit_Control ,  cost_Information ,  final_Unit_Indication , check_Balance_Result , credit_Control_Failure_Handling ,   direct_Debiting_Failure_Handling ,  validity_Time ,  redirect_Host , redirect_Host_Usage , redirect_Max_Cache_Time ,   experimental_Result , supported_Features ,   bearer_Control_Mode ,event_Trigger ,   charging_Rule_Remove ,   charging_Rule_Install ,charging_Information ,  online ,   offline ,  qoS_Information , revalidation_Time ,  default_EPS_Bearer_QoS ,bearer_Usage ,   threeGPP_User_Location_Info ,   usage_Monitoring_Information ,   cSG_Information_Reporting ,user_CSG_Information , error_Message ,error_Reporting_Host , proxy_Info , route_Record ,  failed ,   aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

    }//end of group RFC4006

    group Rx_Intf{

      type record AAR_MSG{
        //Ref: ETSI TS 129 214 5.6.1  -Request
        DiameterHeader                         header ,//<ASR>  ::= < Diameter Header: 265, REQ, PXY >
        Session_Id_AVP                         session_Id,//fixed pos.
        Origin_Host_AVP                     origin_Host,//required
        Origin_Realm_AVP                     origin_Realm,
        Destination_Realm_AVP                destination_Realm,
        Destination_Host_AVP                destination_Host optional,
        Auth_Application_Id_AVP                auth_Application_Id,
        AF_Application_Identifier_AVP       af_Application_Id optional,//present in ETSI TS 129 214 p.5.6.7
        set of Media_Component_Description_AVP media_Component_Description optional,
        Service_Info_Status_AVP                service_Info_Status optional,
        AF_Charging_Identifier_AVP            af_Charging_Identifier optional,
        SIP_Forking_Indication_AVP            sip_Forking_Indication optional,
        set of Specific_Action_AVP            specific_Action optional,
        set of Subscription_Id_AVP            subscription_Id optional,
        set of Supported_Features_AVP        supported_Features optional,
        Reservation_Priority_AVP            reservation_Priority optional,
        Framed_IP_Address_AVP                framed_IP_Address optional,
        Framed_IPv6_Prefix_AVP                framed_IPv6_Address optional,
        Called_Station_Id_AVP                called_Station_Id optional,
        Service_URN_AVP                        service_URN optional,
        Sponsored_Connectivity_Data_AVP        sponsored_Connectivity_Data optional,
        MPS_Identifier_AVP                    mps_Identifier optional,
        User_Name_AVP                         user_Name optional,
        Origin_State_Id_AVP                 origin_State_Id optional,
        set of Proxy_Info_AVP                 proxy_Info optional,
        set of Route_Record_AVP              route_Record optional,
        set of AVP_Type                        aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,1) && bytes(5,3, 265)"
        variant (media_Component_Description) "fieldPresent=bytes(4, 517)"
        variant (specific_Action) "fieldPresent=bytes(4, 513)"
        variant (subscription_Id) "fieldPresent=bytes(4, 443)"
        variant (supported_Features) "fieldPresent=bytes(4, 628)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (route_Record) "fieldPresent=bytes(4, 282)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '1'B)" ;
        variant (header) "LENGTHTO(header,session_Id, origin_Host,  origin_Realm,  destination_Realm, destination_Host ,auth_Application_Id, af_Application_Id ,   media_Component_Description ,service_Info_Status ,   af_Charging_Identifier ,   sip_Forking_Indication ,   specific_Action ,   subscription_Id ,  supported_Features , reservation_Priority ,  framed_IP_Address ,   framed_IPv6_Address ,  called_Station_Id ,service_URN ,sponsored_Connectivity_Data ,   mps_Identifier ,   user_Name , origin_State_Id ,   proxy_Info ,  route_Record ,aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

      type record  AAA_MSG{
        //Ref: ETSI TS 129 214 5.6.2  -> Answer
        DiameterHeader                         header,//<AAA>  ::= < Diameter Header: 265, PXY >
        Session_Id_AVP                         session_Id,//fixed pos.
        Result_Code_AVP                        result_Code optional,//required
        Origin_Host_AVP                     origin_Host,//required
        Origin_Realm_AVP                     origin_Realm,
        Auth_Application_Id_AVP             auth_Application_Id,
        Experimental_Result_AVP                experimental_result optional,
        set of Access_Network_Charging_Identifier_AVP access_network_charging_Identifier optional,
        Access_Network_Charging_Address_AVP access_network_charging_address optional,
        Acceptable_Service_Info_AVP            acceptable_service_info optional,
        IP_CAN_Type_AVP                        ip_Can_Type optional,
        RAT_Type_AVP                        rat_Type optional,
        set of Supported_Features_AVP        supported_Features optional,
        set of Class_AVP                    class optional,
        User_Name_AVP                         user_Name optional,
        Origin_State_Id_AVP                 origin_State_Id optional,
        Error_Message_AVP                    error_Message optional,
        Error_Reporting_Host_AVP            error_Reporting_Host optional,
        set of Failed_AVP                    failed optional,
        set of Redirect_Host_AVP            redirect_Host optional,
        Redirect_Host_Usage_AVP                redirect_Host_Usage optional,
        Redirect_Max_Cache_Time_AVP            redirect_Max_Cache_Time optional,
        set of Proxy_Info_AVP                 proxy_Info optional,
        set of AVP_Type                        aVP_Type optional
      }
      with {
        /*variant "present=bits(32,1,0) && bytes(5,3, 265)"
        variant (access_network_charging_Identifier) "fieldPresent=bytes(4, 502)"
        variant (supported_Features) "fieldPresent=bytes(4, 628)"
        variant (class) "fieldPresent=bytes(4, 25)"
        variant (failed) "fieldPresent=bytes(4, 279)"
        variant (redirect_Host) "fieldPresent=bytes(4, 292)"
        variant (proxy_Info) "fieldPresent=bytes(4, 284)"
        variant (aVP_Type) "fieldPresent=!isEOF" */
        variant  "PRESENCE( header.cmdflags.r_bit = '0'B)" ;
        variant (header) "LENGTHTO(header,session_Id,   result_Code ,origin_Host, origin_Realm,auth_Application_Id,   experimental_result ,   access_network_charging_Identifier ,access_network_charging_address ,   acceptable_service_info ,   ip_Can_Type ,rat_Type , supported_Features ,class ,  user_Name ,origin_State_Id , error_Message ,error_Reporting_Host , failed ,redirect_Host ,   redirect_Host_Usage ,   redirect_Max_Cache_Time ,  proxy_Info ,   aVP_Type)";
        variant (header) "LENGTHINDEX(msglen)";
      }

    }//end group Rx


  }//end group MessageTypes

  group Other{

    // Diameter Message Record(Header and Body(AVP's)).
    type record Lower_Layer_Primitive {
      Lower_Layer_Header      ll_header,
      DIAMETER_MSG            pdu optional
    }
    //Abstract Service Primitive ist, Layer (TE) to Layer (SA)

    type record Lower_Layer_Header{
      ASP_type        primitive,
      charstring        transport_used,
      charstring        ETS_address optional,
      integer            ETS_port     optional,
      charstring        SUT_address optional,
      integer            SUT_port     optional,
      integer            ETS_conn     optional
    }
    //Abstract Service Primitive ist, Layer (TE) to Layer (SA)

    // ASP type definition.
    type enumerated ASP_type {
      CONNECT_REQUEST_E(1),
      CONNECT_INDICATION_E(2),
      CONNECT_CONFIRM_E(3),
      DISCONNECT_REQUEST_E(4),
      DISCONNECT_INDICATION_E(5),
      DATA_REQUEST_E(6),
      DATA_INDICATION_E(7),
      LISTEN_REQUEST_E(8)
    }
    //Abstract Service Primitive ist, Layer (TE) to Layer (SA)

  }//end group Other

}//End group HeaderAndBodyTypes

}with { encode "RAW" } //end module LibDiameter_TypesAndValues
