/******************************************************************************
* Copyright (c) 2000-2021 Ericsson Telecom AB
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   Elemer Lelik - initial implementation
*   Endre Kulcsar
*   Eszter Susanszky
******************************************************************************/
//
//  File:               NTAF_static.ttcn
//  Description:        NTAF Conformance Test Suite 
//  Rev:                 
//  Prodnr:              
//  Updated:            2013-09-10
//  Contact:            http://ttcn.ericsson.se
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//  Module:  
//
//  Purpose:  Test of XML/XMPP/NTAF encoding-decoding
//     
//
//  Module Parameters:
//      -
//
//  Module depends on:
//    -
//
///////////////////////////////////////////////////////////////////////////////

/*
f_calculateMD5  missing -->  f_calculate_response  


*/



module NTAF_static {


modulepar {

  charstring  tsp_fqdn:="ttcn.com";//"esekilxxen1845.rnd.ericsson.se";//"ttcn.com";
  charstring  tsp_user:="toaster";
  charstring  tsp_password:="toaster";
  charstring  tsp_resource:="1";
  charstring  tsp_activationRef:="toasterRef";
  charstring  tsp_sessionId:="toasterSession";
  charstring  tsp_backdoor:="lifecycle";
  charstring  tsp_immediateResponse:="pending";
  boolean tsp_debug:=true;
  boolean tsp_create_root_coll_node:=true;
  boolean tsp_requestor:=true;
  boolean tsp_AuthEncDec_debug:=false;
  boolean tsp_tc_staticEncDec:=false;
}


import from NTAF_templates                                              all;

import from http_ntaforum_org_2011_harness 		all;
import from http_ntaforum_org_2011_registry 		all;
import from http_ntaforum_org_2011_activation 		all;

import from http_jabber_org_protocol_pubsub 		all;
import from http_jabber_org_protocol_pubsub_errors 	all;
import from http_jabber_org_protocol_pubsub_event 	all;
import from http_jabber_org_protocol_pubsub_owner 	all;
import from http_etherx_jabber_org_streams              all;
import from http_jabber_org_protocol_disco_items 	all; 
import from http_jabber_org_protocol_disco_info 	all;



import from jabber_server 				all;
import from jabber_client 				all;
import from jabber_x_data 				all;
import from jabber_iq_auth                       	all;


import from urn_ietf_params_xml_ns_xmpp_stanzas 	all;
import from urn_ietf_params_xml_ns_xmpp_bind           	all;
import from urn_ietf_params_xml_ns_xmpp_sasl            all;
import from urn_ietf_params_xml_ns_xmpp_tls             all;


//import from  TCCOpenSecurity_Functions 	                all;
import from  TCCEncoding_Functions 	                all; 

/*
external function enc_AuthChallenge(in AuthChallenge  pdu) return charstring;
external function dec_AuthChallenge(in charstring  pdu) return AuthChallenge; 

external function enc_AuthResponse(in AuthResponse  pdu) return charstring;
external function dec_AuthResponse(in charstring  pdu) return AuthResponse; 
*/
import from  NTAF_Auth       	                all; 


//jabber_client, jabber_server
//encoding in client--> server direction
//decoding in server --> client direction
external function enc_cIq(in jabber_client.Iq pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_cIq(in octetstring stream) return jabber_client.Iq
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:WARNING)"
} ;


external function enc_sIq(in jabber_server.Iq pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_sIq(in octetstring stream) return jabber_server.Iq
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:WARNING)"
} ;

external function enc_cMessage(in jabber_client.Message pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_cMessage(in octetstring stream) return jabber_client.Message
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:WARNING)"
} ;

external function enc_sMessage(in jabber_server.Message pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_sMessage(in octetstring stream) return jabber_server.Message
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:WARNING)"
} ;


external function enc_cPresence(in jabber_client.Presence pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_cPresence(in octetstring stream) return jabber_client.Presence
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:WARNING)"
} ;


external function enc_sPresence(in jabber_server.Presence pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_sPresence(in octetstring stream) return jabber_server.Presence
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:WARNING)"
} ;




//http_jabber_org_protocol_pubsub
external function enc_Pubsub(in http_jabber_org_protocol_pubsub.Pubsub pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Pubsub(in octetstring stream) return http_jabber_org_protocol_pubsub.Pubsub
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;


external function enc_Configure(in http_jabber_org_protocol_pubsub.Configure pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Configure(in octetstring stream) return http_jabber_org_protocol_pubsub.Configure
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;


external function enc_Create(in http_jabber_org_protocol_pubsub.Create pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Create(in octetstring stream) return http_jabber_org_protocol_pubsub.Create
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;

//http_jabber_org_protocol_pubsub_event
external function enc_Pubsub_Event(in http_jabber_org_protocol_pubsub_event.Event pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Pubsub_Event(in octetstring stream) return http_jabber_org_protocol_pubsub_event.Event
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;


//http_jabber_org_protocol_pubsub_owner

external function enc_Pubsub_owner(in http_jabber_org_protocol_pubsub_owner.Pubsub pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Pubsub_owner(in octetstring stream) return http_jabber_org_protocol_pubsub_owner.Pubsub
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:WARNING)"
} ;


//http_jabber_org_protocol_disco_info
external function enc_Query_info(in http_jabber_org_protocol_disco_info.Query pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Query_info(in octetstring stream) return http_jabber_org_protocol_disco_info.Query
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;


//http_jabber_org_protocol_disco_items
external function enc_Query_items(in http_jabber_org_protocol_disco_items.Query pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Query_items(in octetstring stream) return http_jabber_org_protocol_disco_items.Query
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;


//jabber_iq_auth
external function enc_Query(in jabber_iq_auth.Query pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Query(in octetstring stream) return jabber_iq_auth.Query
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;


//jabber_x_data


external function enc_X(in jabber_x_data.X pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_X(in octetstring stream) return jabber_x_data.X
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;

//urn_ietf_params_xml_ns_xmpp_bind
external function enc_Bind(in Bind pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Bind(in octetstring stream) return Bind
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;

//urn_ietf_params_xml_ns_xmpp_tls
external function enc_Starttls(in Starttls pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Starttls(in octetstring stream) return Starttls
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;

external function enc_Proceed(in Proceed pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Proceed(in octetstring stream) return Proceed
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;


external function enc_Failure(in urn_ietf_params_xml_ns_xmpp_tls.Failure pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Failure(in octetstring stream) return urn_ietf_params_xml_ns_xmpp_tls.Failure
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;

//urn_ietf_params_xml_ns_xmpp_sasl

external function enc_Mechanisms(in Mechanisms pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Mechanisms(in octetstring stream) return Mechanisms
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;


external function enc_Auth(in Auth pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Auth(in octetstring stream) return Auth
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;

external function enc_Success(in Success pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Success(in octetstring stream) return Success
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;


external function enc_saslChallenge(in Challenge pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_saslChallenge(in octetstring stream) return Challenge
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;

external function enc_saslResponse(in urn_ietf_params_xml_ns_xmpp_sasl.Response pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_saslResponse(in octetstring stream) return urn_ietf_params_xml_ns_xmpp_sasl.Response
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;

//http_etherx_jabber_org_streams

external function enc_Stream(in Stream pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Stream(in octetstring stream) return Stream
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;


//http_ntaforum_org_2011_registry
external function enc_Entry(in Entry pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Entry(in octetstring stream) return Entry
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;


//http_ntaforum_org_2011_activation
external function enc_Activate(in Activate pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Activate(in octetstring stream) return Activate
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;

external function enc_Deactivate(in Deactivate pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Deactivate(in octetstring stream) return Deactivate
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;

//http_ntaforum_org_2011_harness


external function enc_Open(in Open pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Open(in octetstring stream) return Open
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;

external function enc_Close(in Close pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Close(in octetstring stream) return Close
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;


external function enc_Response(in http_ntaforum_org_2011_harness.Response pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Response(in octetstring stream) return http_ntaforum_org_2011_harness.Response
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;

external function enc_Request(in Request pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Request(in octetstring stream) return Request
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;


external function enc_Event(in http_ntaforum_org_2011_harness.Event pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Event(in octetstring stream) return http_ntaforum_org_2011_harness.Event
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;


external function enc_Cancel(in Cancel pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Cancel(in octetstring stream) return Cancel
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;

external function enc_Progress(in Progress pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Progress(in octetstring stream) return Progress
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;



external function enc_Query_harness(in Query_harness pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Query_harness(in octetstring stream) return Query_harness
with { 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;



external function enc_Notify_action(in Notify_action pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Notify_action(in octetstring stream) return Notify_action
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;

external function enc_Notify_close(in Notify_close pdu) return octetstring
with { extension "prototype (convert) encode(XER:XER_EXTENDED)" };
external function dec_Notify_close(in octetstring stream) return Notify_close
with 
{ 
  extension "prototype (convert) decode(XER:XER_EXTENDED)" 
  extension "errorbehavior(ALL:ERROR)"
} ;
/*
//-----------------------------------------------------------------------------
//Types for challenge-response
//-----------------------------------------------------------------------------  
type record AuthChallenge 
{
  charstring realm optional, 
  charstring nonce, 
  charstring qop  optional,
  charstring charset optional,
  charstring algorithm



}
with {
  encode "TEXT"
  variant "SEPARATOR(',')"
  variant (realm) "BEGIN('realm=')"
  variant (nonce) "BEGIN('nonce=')"
  variant (qop) "BEGIN('qop=')"
  variant (charset) "BEGIN('charset=')"
  variant (algorithm) "BEGIN('algorithm=')"

};



type record AuthResponse 
{
  charstring charset,
  charstring username, 
  charstring realm optional, 
  charstring nonce, 
  charstring nc,
  charstring cnonce, 
  charstring serv_type optional,
  charstring host      optional,
  charstring digest_uri,
  charstring response,
  charstring qop  optional,
  charstring authzid   optional



}with {
  encode "TEXT"
  variant "SEPARATOR(',')"
  variant (username) "BEGIN('username=')"
  variant (realm) "BEGIN('realm=')"
  variant (nonce) "BEGIN('nonce=')"
  variant (cnonce) "BEGIN('cnonce=')"
  variant (nc) "BEGIN('nc=')"
  variant (qop) "BEGIN('qop=')"
  variant (serv_type) "BEGIN('serv_type=')"
  variant (host) "BEGIN('host=')" 
  variant (digest_uri) "BEGIN('digest-uri=')" 
  variant (response) "BEGIN('response=')" 
  variant (charset) "BEGIN('charset=')"
  variant (authzid) "BEGIN('authzid=')"
};


*/

/*
//-----------------------------------------------------------------------------
function f_calculate_response (in charstring p_username,in charstring p_realm, in charstring p_password,in charstring p_nonce,in charstring p_cnonce,
  in charstring p_authzid,in charstring p_digest_uri,in charstring p_nc,in charstring p_qop) return charstring
//-----------------------------------------------------------------------------
//http://wiki.xmpp.org/web/SASLandDIGEST-MD5
//http://www.ietf.org/rfc/rfc2831.txt

{//startfunction


  var charstring string_X, string_Y, string_A1, string_A2,string_HA1,string_HA2,string_KD,string_Z,v_str;


  string_X:=p_username&":"&p_realm&":"&p_password;
  string_Y:=f_calculateMD5(string_X);
  f_TCCSecurity_hex2char(string_Y, v_str)
  string_Y:=v_str; 
  if (p_authzid=="")
  {string_A1:=string_Y&":"&p_nonce&":"&p_cnonce}
  else   
  { string_A1:=string_Y&":"&p_nonce&":"&p_cnonce&":"&p_authzid;}
  string_A2:="AUTHENTICATE:"&p_digest_uri;
  string_HA1:=f_calculateMD5(string_A1);
  string_HA2:=f_calculateMD5(string_A2);
  string_KD:=string_HA1&":"&p_nonce&":"&p_nc&":"&p_cnonce&":"&p_qop&":"&string_HA2;
  string_Z:=f_calculateMD5(string_KD)



  return string_Z

}//endfunction

*/

//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------  


template jabber_client.Iq  t_Iq:=
{
  from_:="child@holiday.lit/car",
  id:="bnx2hd03",
  lang:="en",
  to_:="pubsub.holiday.lit",
  type_:=set_,
  elem:="<pubsub xmlns=\"http://jabber.org/protocol/pubsub\">
	<subscribe node=\"are-we-there-yet\" jid=\"child@holiday.lit\"/>
	</pubsub>" ,
  error_:=omit
}



template http_jabber_org_protocol_pubsub.Pubsub t_Pubsub1:=

{ choice := 
  { sequence :=
    { create_ := { node := "ntaf.tools"},
      configure := omit 
    } 
  } 
}



template http_jabber_org_protocol_pubsub.Pubsub t_Pubsub2:=

{ choice := 
  { sequence :=
    { create_ := { node := "ntaf.tools" },
      configure := { choice := 
        { x := 
          { type_ := submit , title := omit, instructions_list := { }, 
            field_list := { 
              { label_ := omit, type_ := text_single ,var_ := "pubsub#collection", desc := omit, required := omit,value_list := { "ntaf.tools" }, option_list := { } },
              { label_ := omit, type_ := text_single , var_ := "pubsub#children", desc := omit, required := omit,value_list := { "" }, option_list := { } }, 
              { label_ := omit, type_ := boolean_ ,var_ := "pubsub#deliver_payloads", desc := omit, required := omit,value_list := { "1" }, option_list := { } }, 
              { label_ := omit, type_ := boolean_ ,var_ := "pubsub#notify_retract", desc := omit, required := omit,value_list := { "1" }, option_list := { } }, 
              { label_ := omit, type_ := boolean_ ,var_ := "pubsub#persist_items", desc := omit,required := omit, value_list := { "1" }, option_list := { } }, 
              { label_ := omit, type_ := boolean_ ,var_ := "pubsub#max_items", desc := omit, required := omit, value_list := { "1" }, option_list := { } }, 
              { label_ := omit, type_ := list_single ,var_ := "pubsub#access_model", desc := omit,required := omit, value_list := { "open" }, option_list := { } }, 
              { label_ := omit, type_ := list_single ,var_ := "pubsub#publish_model", desc := omit,required := omit, value_list := { "publishers" }, 
                option_list := { } } }, 
            reported := omit, 
            item_list := { } } } 
      }

    } 
  } 
}

template http_jabber_org_protocol_pubsub.Pubsub t_Pubsub3:= 
{ choice := 
  { sequence := 
    { create_ := 
      { node := "ntaf.tools" }, 
      configure := { choice := 
        { x := { type_ := submit , title := omit, instructions_list := { }, 
            field_list := { 
              { label_ := omit, type_ := text_single , var_ := "pubsub#node_type", desc := omit, required := omit, value_list := { "collection" }, option_list := { } }, 
              { label_ := omit, type_ := text_single , var_ := "pubsub#collection", desc := omit, required := omit, value_list := { "" }, option_list := { } }, 
              { label_ := omit, type_ := text_single , var_ := "pubsub#children", desc := omit, required := omit, value_list := { "" }, option_list := { } }, 
              { label_ := omit, type_ := text_single , var_ := "pubsub#children_association_policy", desc := omit, required := omit, value_list := { "open" }, option_list := { } }, 
              { label_ := omit, type_ := text_single , var_ := "pubsub#subscription_type", desc := omit, required := omit, value_list := { "all" }, option_list := { } }, 
              { label_ := omit, type_ := text_single , var_ := "pubsub#subscription_depth", desc := omit, required := omit, value_list := { "all" }, option_list := { } }, 
              { label_ := omit, type_ := list_single , var_ := "pubsub#access_model", desc := omit, required := omit, value_list := { "open" }, option_list := { } }, 
              { label_ := omit, type_ := boolean_ , var_ := "pubsub#deliver_payloads", desc := omit, required := omit, value_list := { "1" }, option_list := { } }, 
              { label_ := omit, type_ := boolean_ , var_ := "pubsub#notify_retract", desc := omit, required := omit, value_list := { "1" }, option_list := { } }, 
              { label_ := omit, type_ := boolean_ , var_ := "pubsub#persist_items", desc := omit, required := omit, value_list := { "1" }, option_list := { } }, 
              { label_ := omit, type_ := list_single , var_ := "pubsub#publish_model", desc := omit, required := omit, value_list := { "open" }, option_list := { } } }, 
            reported := omit, 
            item_list := { } } }
      }
    } 
  }
}




template http_jabber_org_protocol_pubsub.Configure t_Configure:=

{ choice := 
  { x := 
    { type_ := submit , title := omit, instructions_list := { }, 
      field_list := { 
        { label_ := omit, type_ := text_single , 
          var_ := "pubsub#collection", desc := omit, required := omit, 
          value_list := { "ntaf.tools" }, option_list := { } },
        { label_ := omit, type_ := text_single , 
          var_ := "pubsub#children", desc := omit, required := omit, 
          value_list := { "" }, option_list := { } }, 
        { label_ := omit, type_ := boolean_ , 
          var_ := "pubsub#deliver_payloads", desc := omit, required := omit, 
          value_list := { "1" }, option_list := { } }, 
        { label_ := omit, type_ := boolean_ , 
          var_ := "pubsub#notify_retract", desc := omit, required := omit, 
          value_list := { "1" }, option_list := { } }, 
        { label_ := omit, type_ := boolean_ , 
          var_ := "pubsub#persist_items", desc := omit, 
          required := omit, value_list := { "1" }, option_list := { } }, 
        { label_ := omit, type_ := boolean_ , 
          var_ := "pubsub#max_items", desc := omit, required := omit, 
          value_list := { "1" }, option_list := { } }, 
        { label_ := omit, type_ := list_single , 
          var_ := "pubsub#access_model", desc := omit, 
          required := omit, value_list := { "open" }, option_list := { } }, 
        { label_ := omit, type_ := list_single , 
          var_ := "pubsub#publish_model", desc := omit, 
          required := omit, value_list := { "publishers" }, 
          option_list := { } } }, 
      reported := omit, 
      item_list := { } } } 
}




template jabber_client.Iq  t_Iq_Ex1:=
{
  from_:=omit,
  id:="yrx100-0",
  lang:="en",
  to_:="pubsub.mycorp.com",
  type_:=set_,
  elem:="<pubsub xmlns='http://jabber.org/protocol/pubsub'>
<create node='ntaf.tools'/>
<configure>
<x type='submit' xmlns='jabber:x:data'>
<field var='pubsub#node_type'>
<value>collection</value>
</field>
<field var='pubsub#collection'>
<value/>
</field>
<field var='pubsub#children'>
<value/>
</field>
<field var='pubsub#children_association_policy'>
<value>open</value>
</field>
<field var='pubsub#subscription_type'>
<value>all</value>
</field>
<field var='pubsub#subscription_depth'>
<value>all</value>
</field>
<field type='list-single' var='pubsub#access_model'>
<value>open</value>
</field>
<field type='boolean' var='pubsub#deliver_payloads'>
<value>1</value>
</field>
<field type='boolean' var='pubsub#notify_retract'>
<value>1</value>
</field>
<field type='boolean' var='pubsub#persist_items'>
<value>1</value>
</field>
<field type='list-single' var='pubsub#publish_model'>
<value>open</value>
</field>
</x>
</configure>
</pubsub>" ,
  error_:=omit
}

template jabber_client.Iq  t_Iq_Ex2:=
{
  from_:=omit,
  id:="yrx100-0",
  lang:="en",
  to_:="pubsub.mycorp.com",
  type_:=set_,
  elem:="<pubsub xmlns='http://jabber.org/protocol/pubsub'>
<create node='acme_ascent@mycorp.com/1'/>
<configure>
<x type='submit' xmlns='jabber:x:data'>
<field var='pubsub#collection'>
<value>ntaf.tools</value>
</field>
<field var='pubsub#children'>
<value/>
</field>
<field type='boolean' var='pubsub#deliver_payloads'>
<value>1</value>
</field>
<field type='boolean' var='pubsub#notify_retract'>
<value>1</value>
</field>
<field type='boolean' var='pubsub#persist_items'>
<value>1</value>
</field>
<field type='boolean' var='pubsub#max_items'>
<value>1</value>
</field>
<field type='list-single' var='pubsub#access_model'>
<value>open</value>
</field>
<field type='list-single' var='pubsub#publish_model'>
<value>publishers</value>
</field>
</x>
</configure>
</pubsub>" ,
  error_:=omit
}


template jabber_client.Iq  t_Iq_Ex2B:=
{
  from_:="acme_ascent@mycorp.com/21",
  id:="reg1",
  lang:="en",
  to_:="pubsub.mycorp.com",
  type_:=set_,
  elem:="<pubsub xmlns='http://jabber.org/protocol/pubsub'>
<publish node='acme_ascent@mycorp.com/1'>
<item id='acme_proxy@mycorp.com/2#sleeper1'>
<entry xmlns='http://ntaforum.org/registry'>
<toolType>http://Example.org/tools/acme/ascent/2.1</toolType>
<version>1.2.0.24215</version>
<published>2011-07-11T11:30:02-08:00</published>
<harness xmlns='http://ntaforum.org/2011/harness' name='http://Example.org/acme/ascent/2.1'> 
<supportedMode>invisible_and_automated</supportedMode>
<supportedMode>visible_and_interactive</supportedMode>
</harness>
<documentation xml:lang='en'>
<vendor>AcmeTestTools</vendor>
<name>Ascent</name>
<description>Atoolfordemonstratingupwardprogress</description>
</documentation>
<location>
<workspaceID>0d9374c4-aa1e-47f5-8b61-98bae0ad8ca1</workspaceID>
<ipv4>10.155.2.151</ipv4>
<hostname>jdoe43.mycorp.com</hostname>
<description>2ndfloor,bldg.3,SanJoseHQ</description>
</location>
</entry>
</item>
</publish>
</pubsub>" ,
  error_:=omit
}


template jabber_client.Iq  t_Iq_Ex3:=
{
  from_:=omit,
  id:="yrx100-0",
  lang:="en",
  to_:="pubsub.mycorp.com",
  type_:=set_,
  elem:="<pubsub xmlns='http://jabber.org/protocol/pubsub'>
<create node='acme_proxy@mycorp.com/2'/>
<configure>
<x type='submit' xmlns='jabber:x:data'>
<field var='pubsub#collection'>
<value>ntaf.tools</value>
</field>
<field var='pubsub#children'>
<value/>
</field>
<field type='boolean' var='pubsub#deliver_payloads'>
<value>1</value>
</field>
<field type='boolean' var='pubsub#notify_retract'>
<value>1</value>
</field>
<field type='boolean' var='pubsub#persist_items'>
<value>1</value>
</field>
<field type='list-single' var='pubsub#access_model'>
<value>open</value>
</field>
<field type='list-single' var='pubsub#publish_model'>
<value>publishers</value>
</field>
</x>
</configure>
</pubsub>" ,
  error_:=omit
}

template jabber_client.Iq  t_Iq_Ex3B:=
{
  from_:="acme_sleeper@mycorp.com/4",
  id:="reg2",
  lang:="en",
  to_:="pubsub.mycorp.com",
  type_:=set_,
  elem:="<pubsub xmlns='http://jabber.org/protocol/pubsub'>
<create node='acme_proxy@mycorp.com/2'/>
<configure>
<x type='submit' xmlns='jabber:x:data'>
<field var='pubsub#collection'>
<value>ntaf.tools</value>
</field>
<field var='pubsub#children'>
<value/>
</field>
<field type='boolean' var='pubsub#deliver_payloads'>
<value>1</value>
</field>
<field type='boolean' var='pubsub#notify_retract'>
<value>1</value>
</field>
<field type='boolean' var='pubsub#persist_items'>
<value>1</value>
</field>
<field type='list-single' var='pubsub#access_model'>
<value>open</value>
</field>
<field type='list-single' var='pubsub#publish_model'>
<value>publishers</value>
</field>
</x>
</configure>
</pubsub>" ,
  error_:=omit
}


template jabber_client.Message  t_Message:=
{
  from_ := "pubsub.mycorp.com", 
  id := "n1", 
  lang := omit, 
  to_ := "client1@mycorp.com", 
  type_ := normal,
  choice_list := { }, 
  elem_list := { "<event xmlns=\"http://jabber.org/protocol/pubsub#event\">
<items node=\"foo@mycorp.com/100\">
<item id=\"KJHFbnktBHtbkkuyg\">
<entry xmlns=\"http://ntaforum.org/registry\">
<toolType>http://Example.org/tools/other/bigboy/4.0</toolType>
<version>4.0.0.1</version>
<published>2011-07-13T08:24:09-05:00</published>
<documentation xml:lang=\"en\">
<vendor>OtherTools,Inc.</vendor>
<name>BigBoy</name>
<description>Anotherinterestingtool</description>
</documentation>
<location>
<workspaceID>0a2434c4-aa1e-47f5-8b61-98bae0ad8ca1</workspaceID>
<ipv4>10.155.2.101</ipv4>
<hostname>lab4.mycorp.com</hostname>
</location>
</entry>
</item>
</items>
</event>" }, 
  error_ := omit 
}







template  Activate  t_Activate := 
{
  requestId:=omit,
  toolId:="JHGBFftydvbFDT",
  result:=pending,
  message_:=omit,
  jid:=omit,
  activationRef:=omit,
  timestamp:=omit,
  harness_list:=
  {{
      name:="http://example.org/acme/ascent/2.1",
      supportedMode_list:={invisible_and_automated}
    }}
}



template jabber_client.Iq  t_Iq_Ex1_1:=
{
  from_:=omit,
  id:="d1",
  lang:="en",
  to_:="provider@domain/1",
  type_:=get,
  elem:="<query xmlns='http://jabber.org/protocol/disco#info'/>" ,
  error_:=omit
}

template http_jabber_org_protocol_disco_info.Query t_Query_Ex_1_1:=  { node := omit, sequence := omit }

template jabber_client.Iq  t_Iq_Ex1_1a:=
{
  from_:=omit,
  id:="d1",
  lang:="en",
  to_:="provider@domain/1",
  type_:=get,
  elem:=oct2char(enc_Query_info(valueof(t_Query_Ex_1_1))) ,
  error_:=omit
}


template http_jabber_org_protocol_disco_info.Query t_Query_Ex_1_2:=  
{ node := omit, 
  sequence := 
  {
    identity_list:={{category:="1", name:=omit, type_:="2"}}, 
    feature_list:=
    {
      {var_:="http://ntaforum.org/2011/harness"}, {var_:="http://example.org/scp"}
    },
    x:=omit
  } 
}


template jabber_client.Iq  t_Iq_Ex1_1b:=
{
  from_:=omit,
  id:="d1",
  lang:="en",
  to_:="provider@domain/1",
  type_:=get,
  elem:=oct2char(enc_Query_info(valueof(t_Query_Ex_1_2))) ,
  error_:=omit
}



template  Query_harness t_Query_harness:=
{
  harness:="http://example.org/scp",
  lang:="en",
  label_:="Sawmill Control Panel",
  tooltip:="A harness for controlling and monitoring sawmill operations",
  description:=omit,  
  helpURI:=omit,
  supercedes:=omit,
  author:="author",
  actionDecl_list:={
    {

      name:="getStatus",
      label_:="Get Status",
      tooltip:="Fetch information about current operating status",
      description :=omit,
      helpURI:=omit,
      parameter_list:={},
      xmlParameter_list:={},
      file_list:={},
      group_list:={},
      responseDecl:={
        item_list:={},
        xmlItem_list:={},
        fileItem_list:={},  
        group_list:={
          {
            name:="name1",
            label_:="label1",
            tooltip :=omit,
            description :=omit,
            helpURI :=omit,
            mandatory :=omit,
            allowedCount :=omit,
            itemKeyName :=omit,
            item_list:={

              {
                name:="isOperating",
                label_:="Operating",
                tooltip :="If true, sawmill is currently operating",
                description :=omit,
                helpURI :=omit,
                mandatory :=omit,
                default_ :=omit,
                datatype :=boolean_,
                units :=omit,
                masked :=omit,
                isMultiline :=omit,
                allowedValue_list:={},
                allowedCount :=omit
              }

            },
            group_list:={}
          }}
      }
    },


    {

      name:="setFlowRate",
      label_:="Set Flow Rate",
      tooltip:="Configure the flow rate of timber into the saw",
      description :=omit,
      helpURI:=omit,
      parameter_list:={

        {
          name:="rate",
          label_:="Rate",
          tooltip :="The rate to which the flow will be set",
          description :=omit,
          helpURI :=omit,
          mandatory :=omit,
          datatype :=decimal,
          units :=omit,
          default_ :=omit,
          masked :=omit,
          isMultiline :=omit,
          allowedValue_list:={},
          allowedLength :=omit,
          allowedCount :=omit,
          allowedPattern_list:={},
          allowedRange_list:={},
          enablementValue :=omit
        }

      },
      xmlParameter_list:={},
      file_list:={},
      group_list:={ },
      responseDecl:=omit
    }

  },
  eventDecl_list:={},
  subharness_list:={}
}



template  Query_harness t_Query_harness1:=
{
  harness:="http://example.org/scp",
  lang:="en",
  label_:="Sawmill Control Panel",
  tooltip:="A harness for controlling and monitoring sawmill operations",
  description:=omit,  
  helpURI:=omit,
  supercedes:=omit,
  author:="author",
  actionDecl_list:={
    {

      name:="getStatus",
      label_:="Get Status",
      tooltip:="Fetch information about current operating status",
      description :=omit,
      helpURI:=omit,
      parameter_list:={},
      xmlParameter_list:={},
      file_list:={},
      group_list:={},
      responseDecl:= {
        item_list:={},
        xmlItem_list:={},
        fileItem_list:={},  
        group_list:={
          {
            name:="name1",
            label_:="label1",
            tooltip :=omit,
            description :=omit,
            helpURI :=omit,
            mandatory :=omit,
            allowedCount :=omit,
            itemKeyName :=omit,
            item_list:={

              {
                name:="isOperating",
                label_:="Operating",
                tooltip :="If true, sawmill is currently operating",
                description :=omit,
                helpURI :=omit,
                mandatory :=omit,
                default_ :=omit,
                datatype :=boolean_,
                units :=omit,
                masked :=omit,
                isMultiline :=omit,
                allowedValue_list:={},
                allowedCount :=omit
              }

            },
            group_list:={}
          }
        }
      }
    },


    {

      name:="setFlowRate",
      label_:="Set Flow Rate",
      tooltip:="Configure the flow rate of timber into the saw",
      description :=omit,
      helpURI:=omit,
      parameter_list:={

        {
          name:="rate",
          label_:="Rate",
          tooltip :="The rate to which the flow will be set",
          description :=omit,
          helpURI :=omit,
          mandatory :=omit,
          datatype :=decimal,
          units :=omit,
          default_ :=omit,
          masked :=omit,
          isMultiline :=omit,
          allowedValue_list:={},
          allowedLength :=omit,
          allowedCount :=omit,
          allowedPattern_list:={},
          allowedRange_list:={},
          enablementValue :=omit
        }



      },
      xmlParameter_list:={},
      file_list:={},
      group_list:={ },
      responseDecl:=omit
    } 





  },
  eventDecl_list:={},
  subharness_list:={}
}




template jabber_client.Iq  t_Iq_Ex3_1:=
{
  from_:=omit,
  id:="d1",
  lang:="en",
  to_:="provider@domain/1",
  type_:=get,
  elem:=oct2char(enc_Query_harness(valueof(t_Query_harness))) ,//"<label>Get Status</label> ",//oct2char(enc_Query_info(valueof(t_Query_harness))) ,
  error_:=omit
}





template  Query_harness t_Query_harness_1:=
{
  harness:="http://example.org/scp",
  lang:="en",
  label_:="Sawmill Control Panel",
  tooltip:="A harness for controlling and monitoring sawmill operations",
  description:=omit,  
  helpURI:="http://ntaforum.org/2011/help",
  supercedes:="http://ntaforum.org/2011/supercedes",
  author:="author",
  actionDecl_list:={},
  eventDecl_list:={},
  subharness_list:={}
}



template jabber_client.Iq  t_Iq_Query_harness_1:=
{
  from_:=omit,
  id:="d1",
  lang:="en",
  to_:="provider@domain/1",
  type_:=get,
  elem:=oct2char(enc_Query_harness(valueof(t_Query_harness_1))) ,
  error_:=omit
}




template  Query_harness t_Query_harness_2:=
{
  harness:="http://example.org/scp",
  lang:="en",
  //base:="base",
  label_:="Sawmill Control Panel",
  tooltip:="A harness for controlling and monitoring sawmill operations",
  description:=omit,  
  helpURI:="http://ntaforum.org/2011/help",
  supercedes:="http://ntaforum.org/2011/supercedes",
  author:="author",
  actionDecl_list:={


    {

      name:="setFlowRate",
      label_:="Set Flow Rate",
      tooltip:="Configure the flow rate of timber into the saw",
      description :=omit,
      helpURI:=omit,
      parameter_list:={

        {
          name:="rate",
          label_:="Rate",
          tooltip :="The rate to which the flow will be set",
          description :=omit,
          helpURI :=omit,
          mandatory :=omit,
          datatype :=decimal,
          units :=omit,
          default_ :=omit,
          masked :=omit,
          isMultiline :=omit,
          allowedValue_list:={},
          allowedLength :=omit,
          allowedCount :=omit,
          allowedPattern_list:={},
          allowedRange_list:={},
          enablementValue :=omit
        }



      },
      xmlParameter_list:={},
      file_list:={},
      group_list:={ },
      responseDecl:=omit
    } 





  },

  eventDecl_list:={},
  subharness_list:={}
}



template jabber_client.Iq  t_Iq_Query_harness_2:=
{
  from_:=omit,
  id:="d1",
  lang:="en",
  to_:="provider@domain/1",
  type_:=get,
  elem:=oct2char(enc_Query_harness(valueof(t_Query_harness_2))) ,
  error_:=omit
}


template  Query_harness t_Query_harness_3:=
{
  harness:="http://example.org/scp",
  lang:="en",
  label_:="Sawmill Control Panel",
  tooltip:="A harness for controlling and monitoring sawmill operations",
  description:=omit,  
  helpURI:="http://ntaforum.org/2011/help",
  supercedes:="http://ntaforum.org/2011/supercedes",
  author:="author",
  actionDecl_list:={

    {

      name:="getStatus",
      label_:="Get Status",
      tooltip:="Fetch information about current operating status",
      description :=omit,
      helpURI:=omit,
      parameter_list:={},
      xmlParameter_list:={},
      file_list:={},
      group_list:={

      },
      responseDecl:={
        item_list:={},
        xmlItem_list:={},
        fileItem_list:={},  
        group_list:={
          {
            name:="name1",
            label_:="label1",
            tooltip :=omit,
            description :=omit,
            helpURI :=omit,
            mandatory :=omit,
            allowedCount :=omit,
            itemKeyName :=omit,
            item_list:={

              {
                name:="isOperating",
                label_:="Operating",
                tooltip :="If true, sawmill is currently operating",
                description :=omit,
                helpURI :=omit,
                mandatory :=omit,
                default_ :=omit,
                datatype :=boolean_,
                units :=omit,
                masked :=omit,
                isMultiline :=omit,
                allowedValue_list:={},
                allowedCount :=omit
              }

            },
            group_list:={}
          }
        }
      }
    } 




  },

  eventDecl_list:={},
  subharness_list:={}
}



template jabber_client.Iq  t_Iq_Query_harness_3:=
{
  from_:=omit,
  id:="d1",
  lang:="en",
  to_:="provider@domain/1",
  type_:=get,
  elem:=oct2char(enc_Query_harness(valueof(t_Query_harness_3))) ,
  error_:=omit
}





template  Query_harness t_Query_harness_4:=
{
  harness:="http://example.org/scp",
  lang:="en",
  label_:="Sawmill Control Panel",
  tooltip:="A harness for controlling and monitoring sawmill operations",
  description:=omit,  
  helpURI:="http://ntaforum.org/2011/help",
  supercedes:="http://ntaforum.org/2011/supercedes",
  author:="author",
  actionDecl_list:={},
  eventDecl_list:={{
      name:="raided",
      item_list:={


        {
          name:="arrestCount",
          label_:="# Arrested",
          tooltip :="The number of people arrested",
          description :=omit,
          helpURI :=omit,
          mandatory :=omit,
          default_ :=omit,
          datatype :=integer_,
          units :=omit,
          masked :=omit,
          isMultiline :=omit,
          allowedValue_list:={},
          allowedCount :=omit
        }


      },
      xmlItem_list:={},
      fileItem_list:={},
      group_list:={},
      description:="The party has been raided"
    }} ,
  subharness_list:={}
}



template jabber_client.Iq  t_Iq_Query_harness_4:=
{
  from_:=omit,
  id:="d1",
  lang:="en",
  to_:="provider@domain/1",
  type_:=get,
  elem:=oct2char(enc_Query_harness(valueof(t_Query_harness_4))) ,
  error_:=omit
}


template  Query_harness t_Query_harness_5:=
{
  harness:="http://example.org/h6",
  lang:="en",
  label_:="Mail Labeling",
  tooltip:="A harness for labeling of mail",
  description:=omit,  
  helpURI:=omit,
  supercedes:=omit,
  author:="author",
  actionDecl_list:={},
  eventDecl_list:={},
  subharness_list:={"http://example.org/harnesses/addressing"}
}



template jabber_client.Iq  t_Iq_Query_harness_5:=
{
  from_:=omit,
  id:="d1",
  lang:="en",
  to_:="provider@domain/1",
  type_:=get,
  elem:=oct2char(enc_Query_harness(valueof(t_Query_harness_5))) ,
  error_:=omit
}



template  Query_harness t_Query_harness_6:=
{
  harness:="http://example.org/harnesses/addressing",
  lang:="en",
  label_:="Postal Addressing",
  tooltip:="A set of actions and events related to mail addressing",
  description:=omit,  
  helpURI:=omit,
  supercedes:=omit,
  author:="author",
  actionDecl_list:={

    {

      name:="getAddress",
      label_:="Get Address",
      tooltip:="Fetch the current mailing address",
      description :=omit,
      helpURI:=omit,
      parameter_list:={},
      xmlParameter_list:={},
      file_list:={},
      group_list:={},
      responseDecl:={
        item_list:={},
        xmlItem_list:={},
        fileItem_list:={},  
        group_list:={
          {
            name:="streetAddress",
            label_:="Street",
            tooltip :="Street Address",
            description :=omit,
            helpURI :=omit,
            mandatory :=omit,
            allowedCount :={
              min:=1,
              max:=omit
            },
            itemKeyName :=omit,
            item_list:={

              {
                name:="city",
                label_:="City",
                tooltip :="City name",
                description :=omit,
                helpURI :=omit,
                mandatory :=omit,
                default_ :=omit,
                datatype :=omit,
                units :=omit,
                masked :=omit,
                isMultiline :=omit,
                allowedValue_list:={},
                allowedCount :=omit
              },{
                name:="state",
                label_:="State",
                tooltip :="State name",
                description :=omit,
                helpURI :=omit,
                mandatory :=omit,
                default_ :=omit,
                datatype :=omit,
                units :=omit,
                masked :=omit,
                isMultiline :=omit,
                allowedValue_list:={},
                allowedCount :=omit
              },{
                name:="postalCode",
                label_:="Postal Code",
                tooltip :="5 or 9 digit postal code",
                description :=omit,
                helpURI :=omit,
                mandatory :=omit,
                default_ :=omit,
                datatype :=omit,
                units :=omit,
                masked :=omit,
                isMultiline :=omit,
                allowedValue_list:={},
                allowedCount :=omit
              }


            },
            group_list:={}
          }
        }
      }


    },

    {

      name:="setAddress",
      label_:="Set Address",
      tooltip:="Update the current mailing address",
      description :=omit,
      helpURI:=omit,
      parameter_list:={},
      xmlParameter_list:={},
      file_list:={},
      group_list:={



      },
      responseDecl:={
        item_list:={},
        xmlItem_list:={},
        fileItem_list:={},  
        group_list:={

          {
            name:="streetAddress",
            label_:="Street",
            tooltip :="One or more lines of street address",
            description :=omit,
            helpURI :=omit,
            mandatory :=omit,
            allowedCount :={
              min:=1,
              max:=omit
            },
            itemKeyName :=omit,
            item_list:={

              {
                name:="city",
                label_:="City",
                tooltip :="City name",
                description :=omit,
                helpURI :=omit,
                mandatory :=omit,
                default_ :=omit,
                datatype :=omit,
                units :=omit,
                masked :=omit,
                isMultiline :=omit,
                allowedValue_list:={},
                allowedCount :=omit
              },{
                name:="state",
                label_:="State",
                tooltip :="State name",
                description :=omit,
                helpURI :=omit,
                mandatory :=omit,
                default_ :=omit,
                datatype :=omit,
                units :=omit,
                masked :=omit,
                isMultiline :=omit,
                allowedValue_list:={},
                allowedCount :=omit
              },{
                name:="postalCode",
                label_:="Postal Code",
                tooltip :="5 or 9 digit postal code",
                description :=omit,
                helpURI :=omit,
                mandatory :=omit,
                default_ :=omit,
                datatype :=omit,
                units :=omit,
                masked :=omit,
                isMultiline :=omit,
                allowedValue_list:={},
                allowedCount :=omit
              }


            },//enditemlist
            group_list:={}
          }
        }
      }
    }



  },//endactionDeclList

  eventDecl_list:={

    {
      name:="addressChanged",
      item_list:={},
      xmlItem_list:={},
      fileItem_list:={},
      group_list:={},
      description:="The current address has changed"
    }
  },
  subharness_list:={}
}



template jabber_client.Iq  t_Iq_Query_harness_6:=
{
  from_:="provider@domain/1",
  id:="q7",
  lang:="en",
  to_:="requester@domain/1",
  type_:=result,
  elem:=oct2char(enc_Query_harness(valueof(t_Query_harness_6))) ,
  error_:=omit
}


template  Query_harness t_Query_harness_7:=
{
  harness:="http://example.org/harnesses/addressing",
  lang:="en",
  label_:="Postal Addressing",
  tooltip:="A set of actions and events related to mail addressing",
  description:=omit,  
  helpURI:=omit,
  supercedes:=omit,
  author:="author",
  actionDecl_list:={

    {

      name:="getAddress",
      label_:="Get Address",
      tooltip:="Fetch the current mailing address",
      description :=omit,
      helpURI:=omit,
      parameter_list:={},
      xmlParameter_list:={},
      file_list:={},
      group_list:={





      },
      responseDecl:={
        item_list:={},
        xmlItem_list:={},
        fileItem_list:={},  
        group_list:={
          {
            name:="streetAddress",
            label_:="Street",
            tooltip :="Street Address",
            description :=omit,
            helpURI :=omit,
            mandatory :=omit,
            allowedCount :={
              min:=1,
              max:=omit
            },
            itemKeyName :=omit,
            item_list:={

              {
                name:="city",
                label_:="City",
                tooltip :="City name",
                description :=omit,
                helpURI :=omit,
                mandatory :=omit,
                default_ :=omit,
                datatype :=omit,
                units :=omit,
                masked :=omit,
                isMultiline :=omit,
                allowedValue_list:={},
                allowedCount :=omit
              },{
                name:="state",
                label_:="State",
                tooltip :="State name",
                description :=omit,
                helpURI :=omit,
                mandatory :=omit,
                default_ :=omit,
                datatype :=omit,
                units :=omit,
                masked :=omit,
                isMultiline :=omit,
                allowedValue_list:={},
                allowedCount :=omit
              },{
                name:="postalCode",
                label_:="Postal Code",
                tooltip :="5 or 9 digit postal code",
                description :=omit,
                helpURI :=omit,
                mandatory :=omit,
                default_ :=omit,
                datatype :=omit,
                units :=omit,
                masked :=omit,
                isMultiline :=omit,
                allowedValue_list:={},
                allowedCount :=omit
              }


            },
            group_list:={}
          }
        }
      }

    },//

    {

      name:="setAddress",
      label_:="Set Address",
      tooltip:="Update the current mailing address",
      description :=omit,
      helpURI:=omit,
      parameter_list:={


        {
          name:="streetAddress",
          label_:="Street",
          tooltip :="One or more lines of street address",
          description :=omit,
          helpURI :=omit,
          mandatory :=omit,
          datatype :=omit,
          units :=omit,
          default_ :=omit,
          masked :=omit,
          isMultiline :=omit,
          allowedValue_list:={},
          allowedLength :=omit,
          allowedCount :={
            min:=1,
            max:=omit
          },
          allowedPattern_list:={},
          allowedRange_list:={},
          enablementValue :=omit
        },
        {
          name:="city",
          label_:="City",
          tooltip :="City name",
          description :=omit,
          helpURI :=omit,
          mandatory :=omit,
          datatype :=omit,
          units :=omit,
          default_ :=omit,
          masked :=omit,
          isMultiline :=omit,
          allowedValue_list:={},
          allowedLength :=omit,
          allowedCount :=omit,
          allowedPattern_list:={},
          allowedRange_list:={},
          enablementValue :=omit
        },
        {
          name:="state",
          label_:="State",
          tooltip :="State name",
          description :=omit,
          helpURI :=omit,
          mandatory :=omit,
          datatype :=decimal,
          units :=omit,
          default_ :=omit,
          masked :=omit,
          isMultiline :=omit,
          allowedValue_list:={},
          allowedLength :=omit,
          allowedCount :=omit,
          allowedPattern_list:={},
          allowedRange_list:={},
          enablementValue :=omit
        },
        {
          name:="postalCode",
          label_:="Postal Code",
          tooltip :="5 or 9 digit postal code",
          description :=omit,
          helpURI :=omit,
          mandatory :=omit,
          datatype :=decimal,
          units :=omit,
          default_ :=omit,
          masked :=omit,
          isMultiline :=omit,
          allowedValue_list:={},
          allowedLength :=omit,
          allowedCount :=omit,
          // allowedPattern_list:={},
          allowedPattern_list:={"[0-9]{5}(\-[0-9]{4})?"},
          allowedRange_list:={},
          enablementValue :=omit
        }







      },
      xmlParameter_list:={},
      file_list:={},
      group_list:={},
      responseDecl:=omit
    }



  },//endactionDeclList


  eventDecl_list:={

    {
      name:="addressChanged",
      item_list:={},
      xmlItem_list:={},
      fileItem_list:={},
      group_list:={},
      description:="The current address has changed"
    }
  },
  subharness_list:={}
}



template jabber_client.Iq  t_Iq_Query_harness_7:=
{
  from_:="provider@domain/1",
  id:="q7",
  lang:="en",
  to_:="requester@domain/1",
  type_:=result,
  elem:=oct2char(enc_Query_harness(valueof(t_Query_harness_7))) ,
  error_:=omit
}




template Request t_Request:=

{
  session:="saw2",
  context:=omit,
  parameter_list:={},
  xmlParameter_list:={},
  file_list:={{
      name:="profile",
      filename:="primary.pro"
    },{
      name:="profile",
      filename:="secondary.prox"
    }
  },
  group_list:={},
  timestamp:=omit,
  action_:={
    harness:="http://example.org/scp",base:="resetDevice"

  }
}



template Request t_Request1:=

{
  session:="saw2",
  context:=omit,
  parameter_list:={},
  xmlParameter_list:={},
  file_list:={},
  group_list:={ 


    {
      name:="permissionRecord",
      parameter_list:={{name:="userid",base:="jschmoe"},{name:="privilege",base:="normal"}},
      group_list:={}
    },

    {
      name:="permissionRecord",
      parameter_list:={{name:="userid",base:="jdoe"},{name:="privilege",base:="admin"}},
      group_list:={}
    },
    {
      name:="permissionRecord",
      parameter_list:={{name:="userid",base:="bschwedchuk"},{name:="privilege",base:="normal"}},
      group_list:={}
    }



  }, //endgrouplist
  timestamp:=omit,
  action_:={ 	harness:="http://example.org/scp",base:="resetDevice" }
}



template Request t_Request2:=

{
  session:="saw2",
  context:={
    entity :=omit,
    harness :="'http://example.org/bobcontrol'",
    requestId :=omit,
    session :="bob1",
    details :={elem_list:={"<bob-context xmlns='http://example.org/bobcontext'> 
 <software>BobSoft</software> 
 <version>2.1.1.5</version> 
 </bob-context>"}},
    context :={
      entity :="bill@domain/1",
      harness :=omit,
      requestId :="rq1",
      session :=omit,
      details :={elem_list:={}},
      context :=omit
    }//endinnercontext
  },//endcontext
  parameter_list:={},
  xmlParameter_list:={},
  file_list:={},
  group_list:={   }, //endgrouplist
  timestamp:=omit,
  action_:={ 	harness:="http://example.org/scp",base:="resetDevice" }
}


template Request t_Request3:=

{
  session:="jerry1",
  context:={
    entity :=omit,
    harness :="'http://example.org/joedevice'",
    requestId :=omit,
    session :="joe1",
    details :={elem_list:={}},
    context :={
      entity :="bob@domain/1",
      harness :="'http://example.org/bobcontrol'",
      requestId :="rq2",
      session :="bob1",
      details :={elem_list:={"<bob-context xmlns='http://example.org/bobcontext'><software>BobSoft</software><version>2.1.1.5</version></bob-context>"}},
      context :={
        entity :="bill@domain/1",
        harness :=omit,
        requestId :="rq1",
        session :=omit,
        details :={elem_list:={}},
        context :=omit
      }
    }//endinnercontext
  },//endcontext
  parameter_list:={},
  xmlParameter_list:={},
  file_list:={},
  group_list:={}, //endgrouplist
  timestamp:=omit,
  action_:={ 	harness:="http://example.org/scp",base:="resetDevice" }
}



template  jabber_iq_auth.Query t_Query_auth(template charstring p_user,template charstring p_password, template charstring p_resource):=
{
  username:=p_user,
  choice:={password_list:={p_password}},
  resource:=p_resource
}

testcase  tc_staticEncodeDecode() runs on MTC_CT
{
  var charstring s1;
  var octetstring o1;


  var jabber_client.Iq  v_decodedPDUcIq;
  var jabber_server.Iq  v_decodedPDUsIq, v_decodedPDUsIq1;
  var octetstring v_encodedPDUIq;

  var jabber_client.Message  v_decodedPDUcMessage;
  var jabber_server.Message  v_decodedPDUsMessage;
  var octetstring v_encodedPDUMessage;

  var jabber_client.Presence  v_decodedPDUcPresence;
  var jabber_server.Presence  v_decodedPDUsPresence;
  var octetstring v_encodedPDUPresence;










  var Activate v_decodedPDUActivate;
  var octetstring v_encodedPDUActivate;

  var Deactivate v_decodedPDUDeactivate;
  var octetstring v_encodedPDUDeactivate;

  var Open v_decodedPDUOpen;
  var octetstring v_encodedPDUOpen;

  var Close v_decodedPDUClose;
  var octetstring v_encodedPDUClose;

  var Notify_close v_decodedPDUNotify_close;
  var octetstring v_encodedPDUNotify_close;

  var Notify_action v_decodedPDUNotify_action;
  var octetstring v_encodedPDUNotify_action;





  var Request v_decodedPDURequest;
  var octetstring v_encodedPDURequest;

  var http_ntaforum_org_2011_harness.Response v_decodedPDUResponse;
  var octetstring v_encodedPDUResponse;


  var http_jabber_org_protocol_disco_info.Query v_decodedPDUQuery_info;
  var octetstring v_encodedPDUQuery_info;

  var http_jabber_org_protocol_disco_items.Query v_decodedPDUQuery_items;
  var octetstring v_encodedPDUQuery_items;


  var jabber_iq_auth.Query v_decodedPDUQuery;
  var octetstring v_encodedPDUQuery;


  var Query_harness v_decodedPDUQuery_harness;
  var octetstring v_encodedPDUQuery_harness;




  var http_jabber_org_protocol_pubsub.Pubsub  v_decodedPDUPubsub;
  var octetstring v_encodedPDUPubsub;




  var http_jabber_org_protocol_pubsub.Configure  v_decodedPDUConfigure;
  var octetstring v_encodedPDUConfigure;



  var http_jabber_org_protocol_pubsub_owner.Pubsub  v_decodedPDUPubsub_owner;
  var octetstring v_encodedPDUPubsub_owner;



  v_encodedPDUQuery:=enc_Query(valueof(t_Query_auth("toaster","toaster","1")));
  v_decodedPDUQuery:=dec_Query(v_encodedPDUQuery);
  log("Encoded Auth query : ", v_encodedPDUQuery);
  log("Decoded Auth query  : ", v_decodedPDUQuery);





  v_encodedPDUIq := enc_cIq(valueof(t_Iq));
  v_decodedPDUcIq := dec_cIq(v_encodedPDUIq);

  s1:=oct2char(v_encodedPDUIq);
  log(s1);


  log("Encoded Info query : ", v_encodedPDUIq);
  log("Decoded Info query 0 : ", v_decodedPDUcIq);

  s1:="<tq0007:iq xmlns:tq0007='jabber:client' from='child@holiday.lit/car' id='bnx2hd03' to='pubsub.holiday.lit' type='set'>\n\t<pubsub xmlns=\"http://jabber.org/protocol/pubsub\">\n\t<subscribe node=\"are-we-there-yet\" jid=\"child@holiday.lit\"/>\n\t</pubsub>\n</tq0007:iq>\n\n"

  v_decodedPDUcIq := dec_cIq(char2oct(s1));

  log("Decoded Info query 1 : ", v_decodedPDUcIq);


  s1:="<iq from=\"child@holiday.lit/car\" id=\"bnx2hd03\" to=\"pubsub.holiday.lit\" type=\"set\">
 <pubsub xmlns=\"http://jabber.org/protocol/pubsub\">
    <subscribe node=\"are-we-there-yet\" jid=\"child@holiday.lit\"/>
</pubsub>
</iq>"


  v_decodedPDUcIq := dec_cIq(char2oct(s1));

  log("Decoded Info query 2 : ", v_decodedPDUcIq);







  //*********************************************************************************************************




  //Example1:Creatingtherootcollectionnode



  v_encodedPDUIq := enc_cIq(valueof(t_Iq_Ex1));
  v_decodedPDUcIq := dec_cIq(v_encodedPDUIq);


  log("Encoded Ex1 : ", v_encodedPDUIq);
  log("Decoded Ex1 : ", v_decodedPDUcIq);



  //----------------------------------------------------------------------

  v_encodedPDUPubsub := enc_Pubsub(valueof(t_Pubsub1));
  v_decodedPDUPubsub := dec_Pubsub(v_encodedPDUPubsub);


  log("Encoded Pubsub1 Ex1 : ", v_encodedPDUPubsub);
  log("Decoded Pubsub1 Ex1 : ", v_decodedPDUPubsub);



  v_encodedPDUPubsub := enc_Pubsub(valueof(t_Pubsub2));
  v_decodedPDUPubsub := dec_Pubsub(v_encodedPDUPubsub);


  log("Encoded Pubsub2 Ex1 : ", v_encodedPDUPubsub);
  log("Decoded Pubsub2 Ex1 : ", v_decodedPDUPubsub);





  s1:="<pubsub xmlns='http://jabber.org/protocol/pubsub'>
<create node='ntaf.tools'/>
<configure>
<x type='submit' xmlns='jabber:x:data'>
<field var='pubsub#node_type'>
<value>collection</value>
</field>
<field var='pubsub#collection'>
<value/>
</field>
<field var='pubsub#children'>
<value/>
</field>
<field var='pubsub#children_association_policy'>
<value>open</value>
</field>
<field var='pubsub#subscription_type'>
<value>all</value>
</field>
<field var='pubsub#subscription_depth'>
<value>all</value>
</field>
<field type='list-single' var='pubsub#access_model'>
<value>open</value>
</field>
<field type='boolean' var='pubsub#deliver_payloads'>
<value>1</value>
</field>
<field type='boolean' var='pubsub#notify_retract'>
<value>1</value>
</field>
<field type='boolean' var='pubsub#persist_items'>
<value>1</value>
</field>
<field type='list-single' var='pubsub#publish_model'>
<value>open</value>
</field>
</x>
</configure>
</pubsub>"


  v_decodedPDUPubsub := dec_Pubsub(char2oct(s1));

  log("Decoded Pubsub Example 1 : ", v_decodedPDUPubsub);



  //------------------------------------

  v_encodedPDUConfigure := enc_Configure(valueof(t_Configure));
  v_decodedPDUConfigure := dec_Configure(v_encodedPDUConfigure);


  log("Encoded Configure Ex1 : ", v_encodedPDUConfigure);
  log("Decoded Configure Ex1 : ", v_decodedPDUConfigure);




  s1:="<configure xmlns='http://jabber.org/protocol/pubsub'>
<x type='submit' xmlns='jabber:x:data'>
<field var='pubsub#collection'>
<value>ntaf.tools</value>
</field>
<field var='pubsub#children'>
<value/>
</field>
<field type='boolean' var='pubsub#deliver_payloads'>
<value>1</value>
</field>
<field type='boolean' var='pubsub#notify_retract'>
<value>1</value>
</field>
<field type='boolean' var='pubsub#persist_items'>
<value>1</value>
</field>
<field type='boolean' var='pubsub#max_items'>
<value>1</value>
</field>
<field type='list-single' var='pubsub#access_model'>
<value>open</value>
</field>
<field type='list-single' var='pubsub#publish_model'>
<value>publishers</value>
</field>
</x>
</configure>"

  v_decodedPDUConfigure := dec_Configure(char2oct(s1));

  log("Decoded Configure Example 1 : ", v_decodedPDUConfigure);


  s1:="<iq id='yrx100-0' to='pubsub.mycorp.com' type='set'>
<pubsub xmlns='http://jabber.org/protocol/pubsub'>
<create node='ntaf.tools'/>
<configure>
<x type='submit' xmlns='jabber:x:data'>
<field var='pubsub#node_type'>
<value>collection</value>
</field>
<field var='pubsub#collection'>
<value/>
</field>
<field var='pubsub#children'>
<value/>
</field>
<field var='pubsub#children_association_policy'>
<value>open</value>
</field>
<field var='pubsub#subscription_type'>
<value>all</value>
</field>
<field var='pubsub#subscription_depth'>
<value>all</value>
</field>
<field type='list-single' var='pubsub#access_model'>
<value>open</value>
</field>
<field type='boolean' var='pubsub#deliver_payloads'>
<value>1</value>
</field>
<field type='boolean' var='pubsub#notify_retract'>
<value>1</value>
</field>
<field type='boolean' var='pubsub#persist_items'>
<value>1</value>
</field>
<field type='list-single' var='pubsub#publish_model'>
<value>open</value>
</field>
</x>
</configure>
</pubsub>
</iq>"





  v_decodedPDUcIq := dec_cIq(char2oct(s1));

  log("Decoded Example 1 : ", v_decodedPDUcIq);



  v_decodedPDUPubsub := dec_Pubsub(char2oct(unichar2char(v_decodedPDUcIq.elem)));

  log("Decoded Pubsub elem Example 1 : ", v_decodedPDUPubsub);
  //*********************************************************************************************************

  //Example2.Registeringanormalalways-ontoolviapublish-subscribe (Creatingthenode)


  v_encodedPDUIq := enc_cIq(valueof(t_Iq_Ex2));
  v_decodedPDUcIq := dec_cIq(v_encodedPDUIq);


  log("Encoded Ex2 : ", v_encodedPDUIq);
  log("Decoded Ex2 : ", v_decodedPDUcIq);




  s1:="<iq id='yrx100-0' to='pubsub.mycorp.com' type='set'>
<pubsub xmlns='http://jabber.org/protocol/pubsub'>
<create node='acme_ascent@mycorp.com/1'/>
<configure>
<x type='submit' xmlns='jabber:x:data'>
<field var='pubsub#collection'>
<value>ntaf.tools</value>
</field>
<field var='pubsub#children'>
<value/>
</field>
<field type='boolean' var='pubsub#deliver_payloads'>
<value>1</value>
</field>
<field type='boolean' var='pubsub#notify_retract'>
<value>1</value>
</field>
<field type='boolean' var='pubsub#persist_items'>
<value>1</value>
</field>
<field type='boolean' var='pubsub#max_items'>
<value>1</value>
</field>
<field type='list-single' var='pubsub#access_model'>
<value>open</value>
</field>
<field type='list-single' var='pubsub#publish_model'>
<value>publishers</value>
</field>
</x>
</configure>
</pubsub>
</iq>"

  v_decodedPDUcIq := dec_cIq(char2oct(s1));

  log("Decoded Example 2-1 : ", v_decodedPDUcIq);

  v_decodedPDUPubsub := dec_Pubsub(char2oct(unichar2char(v_decodedPDUcIq.elem)));

  log("Decoded Pubsub elem Example 2-1 : ", v_decodedPDUPubsub);



  //(Publishingthetoolinformation)


  v_encodedPDUIq := enc_cIq(valueof(t_Iq_Ex2B));
  v_decodedPDUcIq := dec_cIq(v_encodedPDUIq);


  log("Encoded Ex2B : ", v_encodedPDUIq);
  log("Decoded Ex2B : ", v_decodedPDUcIq);

  s1:="<iq type=\"result\" id=\"get_node_config\" from=\"pubsub.ttcn.com\" to=\"titan1@ttcn.com/1\">
<pubsub xmlns=\"http://jabber.org/protocol/pubsub#owner\">
\n<configure node=\"ntaf.tools\">
<x xmlns=\"jabber:x:data\" type=\"form\">
    <!-- instructions>Please provide the configuration for node \"ntaf.tools\".</instructions -->
<title>Node configuration</title>

<field var=\"FORM_TYPE\" type=\"hidden\"><value>http://jabber.org/protocol/pubsub#node_config</value></field>
<field var=\"pubsub#title\" type=\"text-single\" label=\"Short name for the node\"><value></value></field>
<field var=\"pubsub#description\" type=\"text-single\" label=\"Description of the node\"><value></value></field>
<field var=\"pubsub#node_type\" type=\"text-single\" label=\"Whether the node is a leaf (default) or a collection\"><value>collection</value></field>
<field var=\"pubsub#collection\" type=\"text-single\" label=\"The collection with which a node is affiliated.\"/>
<field var=\"pubsub#subscribe\" type=\"boolean\" label=\"Allow subscriptions to node\"><value>1</value></field>
<field var=\"pubsub#subscription_required\" type=\"boolean\" label=\"New subscriptions require configuration\"><value>0</value></field>
<field var=\"pubsub#deliver_payloads\" type=\"boolean\" label=\"Deliver payloads with event notifications\"><value>1</value></field>
<field var=\"pubsub#notify_config\" type=\"boolean\" label=\"Notify subscribers when the node configuration changes\"><value>1</value></field>
<field var=\"pubsub#notify_delete\" type=\"boolean\" label=\"Notify subscribers when the node is deleted\"><value>1</value></field>
<field var=\"pubsub#notify_retract\" type=\"boolean\" label=\"Notify subscribers when items are removed from the node\"><value>1</value></field>
<field var=\"pubsub#presence_based_delivery\" type=\"boolean\" label=\"Only deliver notifications to available users\"><value>0</value></field>
<field var=\"pubsub#type\" type=\"text-single\" label=\"Type of payload data to be provided at this node\"><value></value></field>
<field var=\"pubsub#body_xslt\" type=\"text-single\" label=\"Message body XSLT\"><value></value></field>
<field var=\"pubsub#dataform_xslt\" type=\"text-single\" label=\"Payload XSLT\"><value></value></field>
<field var=\"pubsub#access_model\" type=\"list-single\" label=\"Specify who may subscribe and retrieve items\">
    <value>open</value>
<option><value>authorize</value></option>
<option><value>open</value></option>
<option><value>presence</value></option>
<option><value>roster</value></option>
<option><value>whitelist</value></option>
</field>
<field var=\"pubsub#publish_model\" type=\"list-single\" label=\"Publisher model\">
    <value>open</value>
<option><value>publishers</value></option>
<option><value>subscribers</value></option>
<option><value>open</value></option>

</field>
<field var=\"pubsub#roster_groups_allowed\" type=\"list-multi\" label=\"Roster groups allowed to subscribe\"/>
<field var=\"pubsub#contact\" type=\"jid-multi\" label=\"People to contact with questions\"/>
<field var=\"pubsub#language\" type=\"text-single\" label=\"Default language\"><value>English</value></field>
<field var=\"pubsub#owner\" type=\"jid-multi\" label=\"Node owners\"><value>titan1@ttcn.com</value></field>
<field var=\"pubsub#publisher\" type=\"jid-multi\" label=\"Node publishers\"/>
<field var=\"pubsub#itemreply\" type=\"list-single\" label=\"Select entity that should receive replies to items\"><value>owner</value></field>
<field var=\"pubsub#replyroom\" type=\"jid-multi\" label=\"Multi-user chat room to which replies should be sent\"/>
<field var=\"pubsub#replyto\" type=\"jid-multi\" label=\"Users to which replies should be sent\"/>
<field var=\"pubsub#leaf_node_association_policy\" type=\"list-single\" label=\"Who may associate leaf nodes with a collection\">
    <value>all</value>
<option label=\"Anyone may associate leaf nodes with the collection\"><value>all</value></option>
<option label=\"Only collection node owners may associate leaf nodes with the collection\"><value>owners</value></option>
<option label=\"Only those on a whitelist may associate leaf nodes with the collection\"><value>whitelist</value></option>

</field>
<field var=\"pubsub#children_association_policy\" type=\"list-single\" label=\"Who may associate leaf nodes with a collection\">
    <value>all</value>
<option label=\"Anyone may associate leaf nodes with the collection\"><value>all</value></option>
<option label=\"Only collection node owners may associate leaf nodes with the collection\"><value>owners</value></option>
<option label=\"Only those on a whitelist may associate leaf nodes with the collection\"><value>whitelist</value></option>

</field>
<field var=\"pubsub#leaf_node_association_whitelist\" type=\"jid-multi\" label=\"The list of JIDs that may associate leaf nodes with a collection\"/>
<field var=\"pubsub#children_association_whitelist\" type=\"jid-multi\" label=\"The list of JIDs that may associate leaf nodes with a collection\"/>
<field var=\"pubsub#leaf_nodes_max\" type=\"text-single\" label=\"The maximum number of child nodes that can be associated with a collection\"><value>-1</value></field>
<field var=\"pubsub#chilren_max\" type=\"text-single\" label=\"The maximum number of child nodes that can be associated with a collection\"><value>-1</value></field>
<field var=\"pubsub#children\" type=\"text-multi\" label=\"The child nodes (leaf or collection) associated with a collection\"><value></value></field>
</x></configure>\n
</pubsub>
</iq>"


  v_decodedPDUcIq := dec_cIq(char2oct(s1));

  log("Decoded Real Life Example : ", v_decodedPDUcIq);


  v_decodedPDUPubsub_owner := dec_Pubsub_owner(char2oct(unichar2char(v_decodedPDUcIq.elem)));

  log("Decoded Real Life Pubsub elem Example  : ", v_decodedPDUPubsub);
  //*********************************************************************************************************

  v_decodedPDUPubsub:= {
    choice := {
      choice_list := {
        {
          publish := {
            node := "acme_ascent@mycorp.com/1",
            item_list := {
              {
                id := "acme_proxy@mycorp.com/2#sleeper1",
                sequence := {elem:="<entry xmlns='http://ntaforum.org/2011/registry'>
	<tooltype>http://Example.org/tools/acme/ascent/2.1</tooltype>
	<version>1.2.0.24215</version>
	<harness xmlns='http://ntaforum.org/2011/harness' name='http://Example.org/acme/ascent/2.1'> 
		<supportedMode>invisible_and_automated</supportedMode>
		<supportedMode>visible_and_interactive</supportedMode>
	</harness>
	<documentation xml:lang='en'>
		<vendor>AcmeTestTools</vendor>
		<name>Ascent</name>
		<description>Atoolfordemonstratingupwardprogress</description>
      	<helpUri>http://someURI</helpUri>
	</documentation>
    <published>2011-07-11T11:30:02-08:00</published>
	<location>
		<workspaceID>0d9374c4-aa1e-47f5-8b61-98bae0ad8ca1</workspaceID>
		<ipv4>10.155.2.151</ipv4>
		<hostname>jdoe43.mycorp.com</hostname>
		<description>2ndfloor,bldg.3,SanJoseHQ</description>
	</location>
</entry>"}
              }
            }
          }
        }
      }
    }
  }

  log("Encoded Pubsub elem Example 2-2 : ", oct2char(enc_Pubsub(v_decodedPDUPubsub)));


  log("Re-decoded Pubsub elem Example 2-2 : ", dec_Pubsub(char2oct(oct2char(enc_Pubsub(v_decodedPDUPubsub)))));



  s1:="<iq type='set' from='acme_ascent@mycorp.com/21' to='pubsub.mycorp.com' id='reg1'>
<pubsub xmlns='http://jabber.org/protocol/pubsub'>
<publish node='acme_ascent@mycorp.com/1'>
<item id='acme_proxy@mycorp.com/2#sleeper1'>
<entry xmlns='http://ntaforum.org/2011/registry'>
	<tooltype>http://Example.org/tools/acme/ascent/2.1</tooltype>
	<version>1.2.0.24215</version>
	<harness xmlns='http://ntaforum.org/2011/harness' name='http://Example.org/acme/ascent/2.1'> 
		<supportedMode>invisible_and_automated</supportedMode>
		<supportedMode>visible_and_interactive</supportedMode>
	</harness>
	<documentation xml:lang='en'>
		<vendor>AcmeTestTools</vendor>
		<name>Ascent</name>
		<description>Atoolfordemonstratingupwardprogress</description>
      	<helpUri>http://someURI</helpUri>
	</documentation>
    <published>2011-07-11T11:30:02-08:00</published>
	<location>
		<workspaceID>0d9374c4-aa1e-47f5-8b61-98bae0ad8ca1</workspaceID>
		<ipv4>10.155.2.151</ipv4>
		<hostname>jdoe43.mycorp.com</hostname>
		<description>2ndfloor,bldg.3,SanJoseHQ</description>
	</location>
</entry>
</item>
</publish>
</pubsub>
</iq>"


  v_decodedPDUcIq := dec_cIq(char2oct(s1));

  log("Decoded Example 2-2 : ", v_decodedPDUcIq);




  v_decodedPDUPubsub := dec_Pubsub(char2oct(unichar2char(v_decodedPDUcIq.elem)));

  log("Decoded Pubsub elem Example 2-2 : ", v_decodedPDUPubsub);



  s1:="<tq0001:pubsub xmlns:tq0001='http://jabber.org/protocol/pubsub'>
\t<tq0001:publish node='acme_ascent@mycorp.com/1'>
\t\t<tq0001:item id='acme_proxy@mycorp.com/2#sleeper1'>
\t\t\t<entry xmlns='http://ntaforum.org/2011/registry'>
\t<tooltype>http://Example.org/tools/acme/ascent/2.1</tooltype>
\t<version>1.2.0.24215</version>
\t<harness xmlns='http://ntaforum.org/2011/harness' name='http://Example.org/acme/ascent/2.1'> 
\t\t<supportedMode>invisible_and_automated</supportedMode>
\t\t<supportedMode>visible_and_interactive</supportedMode>
\t</harness>
\t<documentation xml:lang='en'>
\t\t<vendor>AcmeTestTools</vendor>
\t\t<name>Ascent</name>
\t\t<description>Atoolfordemonstratingupwardprogress</description>
      \t<helpUri>http://someURI</helpUri>
\t</documentation>
    <published>2011-07-11T11:30:02-08:00</published>
\t<location>
\t\t<workspaceID>0d9374c4-aa1e-47f5-8b61-98bae0ad8ca1</workspaceID>
\t\t<ipv4>10.155.2.151</ipv4>
\t\t<hostname>jdoe43.mycorp.com</hostname>
\t\t<description>2ndfloor,bldg.3,SanJoseHQ</description>
\t</location>
</entry>
\t\t</tq0001:item>
\t</tq0001:publish>
</tq0001:pubsub>"



  v_decodedPDUPubsub := dec_Pubsub(char2oct(s1));

  log("Decoded Pubsub elem Example 2-2a : ", v_decodedPDUPubsub);


  //*********************************************************************************************************

  //Example3.Registeringaproxy,andthenatoolforwhichtheproxywilltakecareofqueriesandactivation
  //(Creatingthenode)


  v_encodedPDUIq := enc_cIq(valueof(t_Iq_Ex3));
  v_decodedPDUcIq := dec_cIq(v_encodedPDUIq);


  log("Encoded Ex3 : ", v_encodedPDUIq);
  log("Decoded Ex3 : ", v_decodedPDUcIq);






  s1:="<iq id='yrx100-0' to='pubsub.mycorp.com' type='set'>
<pubsub xmlns='http://jabber.org/protocol/pubsub'>
<create node='acme_proxy@mycorp.com/2'/>
<configure>
<x type='submit' xmlns='jabber:x:data'>
<field var='pubsub#collection'>
<value>ntaf.tools</value>
</field>
<field var='pubsub#children'>
<value/>
</field>
<field type='boolean' var='pubsub#deliver_payloads'>
<value>1</value>
</field>
<field type='boolean' var='pubsub#notify_retract'>
<value>1</value>
</field>
<field type='boolean' var='pubsub#persist_items'>
<value>1</value>
</field>
<field type='list-single' var='pubsub#access_model'>
<value>open</value>
</field>
<field type='list-single' var='pubsub#publish_model'>
<value>publishers</value>
</field>
</x>
</configure>
</pubsub>
</iq>"

  v_decodedPDUcIq := dec_cIq(char2oct(s1));

  log("Decoded Example 3-1 : ", v_decodedPDUcIq);

  v_decodedPDUPubsub := dec_Pubsub(char2oct(unichar2char(v_decodedPDUcIq.elem)));

  log("Decoded Pubsub elem Example 3-1 : ", v_decodedPDUPubsub);


  //(Publishingthetoolinformation)


  v_encodedPDUIq := enc_cIq(valueof(t_Iq_Ex3B));
  v_decodedPDUcIq := dec_cIq(v_encodedPDUIq);


  log("Encoded Ex3-2 : ", v_encodedPDUIq);
  log("Decoded Ex3-2 : ", v_decodedPDUcIq);





  //(Publishingthetoolinformation)
  s1:="<iq type='set' from='acme_sleeper@mycorp.com/4' to='pubsub.mycorp.com' id='reg2'>
<pubsub xmlns='http://jabber.org/protocol/pubsub'>
<publish node='acme_ascent@mycorp.com/1'>
<item id='acme_proxy@mycorp.com/2#sleeper1'>
<entry xmlns='http://ntaforum.org/2011/registry'>
	<tooltype>http://Example.org/tools/acme/sleeper/1.1</tooltype>
	<version>1.1.0.14153</version>
	<!-- mode>dormant</mode -->
	<!-- proxy>acme_proxy@mycorp.com/2</proxy-->
	<harness xmlns='http://ntaforum.org/2011/harness' name='http://Example.org/acme/sleeper/1.1'>
		<supportedMode>invisible_and_automated</supportedMode>
		<supportedMode>visible_and_interactive</supportedMode>
	</harness>
	<documentation xml:lang='en'>
		<vendor>AcmeTestTools</vendor>
		<name>Sleeper</name>
		<description>Atoolforwhilingawaythehours</description>
                <helpUri>http://someURI</helpUri>
	</documentation>
        <published>2011-07-11T11:32:41-08:00</published>
	<location>
		<workspaceID>0e2222c4-aa1e-47f5-8b61-98bae0ad8ca1</workspaceID>
		<ipv4>10.155.2.151</ipv4>
		<hostname>jdoe43.mycorp.com</hostname>
		<description>2ndfloor,bldg.3,SanJoseHQ</description>
	</location>
</entry>
</item>
</publish>
</pubsub>
</iq>"




  v_decodedPDUcIq := dec_cIq(char2oct(s1));

  log("Decoded Example 3-2 : ", v_decodedPDUcIq);

  v_decodedPDUPubsub := dec_Pubsub(char2oct(unichar2char(v_decodedPDUcIq.elem)));

  log("Decoded Pubsub elem Example 3-2 : ", v_decodedPDUPubsub);


  //*********************************************************************************************************

  //Example4.Fetchingalistofavailabletoolsfromacollectionnode
  s1:="<iq type='get' from='client1@mycorp.com/1' to='pubsub.mycorp.com' id='q1'>
<pubsub xmlns='http://jabber.org/protocol/pubsub'>
<items node='ntaf.tools'/>
</pubsub>
</iq>"


  v_decodedPDUcIq := dec_cIq(char2oct(s1));

  log("Decoded Example 4-1 : ", v_decodedPDUcIq);


  v_decodedPDUPubsub := dec_Pubsub(char2oct(unichar2char(v_decodedPDUcIq.elem)));

  log("Decoded Pubsub elem Example 4-1 : ", v_decodedPDUPubsub);




  s1:="<iq type='result' to='client1@mycorp.com/1' from='pubsub.mycorp.com' id='q1'>
<pubsub xmlns='http://jabber.org/protocol/pubsub'>
<items node='acme_ascent@mycorp.com/1'>
<item id='JHGBFftydvbFDT'>
<entry xmlns='http://ntaforum.org/2011/registry'>
	<tooltype>http://Example.org/tools/acme/ascent/2.1</tooltype>
	<version>1.2.0.24215</version>
	<harness xmlns='http://ntaforum.org/2011/harness' name='http://Example.org/acme/ascent/2.1'> 
		<supportedMode>invisible_and_automated</supportedMode>
		<supportedMode>visible_and_interactive</supportedMode>
	</harness>
	<documentation xml:lang='en'>
		<vendor>AcmeTestTools</vendor>
		<name>Ascent</name>
		<description>Atoolfordemonstratingupwardprogress</description>
                <helpUri>http://someURI</helpUri>
	</documentation>
      	<published>2011-07-11T11:30:02-08:00</published>
	<location>
		<workspaceID>0d9374c4-aa1e-47f5-8b61-98bae0ad8ca1</workspaceID>
		<ipv4>10.155.2.151</ipv4>
		<hostname>jdoe43.mycorp.com</hostname>
		<description>2ndfloor,bldg.3,SanJoseHQ</description>
	</location>
</entry>
</item>
</items>
<items node='acme_proxy@mycorp.com/2'>
<item id='acme_proxy@mycorp.com/2#sleeper1'>
<entry xmlns='http://ntaforum.org/2011/registry'>
<tooltype>http://Example.org/tools/acme/sleeper/1.1</tooltype>
<version>1.1.0.14153</version>
<!-- mode>dormant</mode -->
<!-- proxy>acme_proxy@mycorp.com/2</proxy -->
<harness xmlns='http://ntaforum.org/2011/harness' name='http://Example.org/acme/sleeper/1.1'>
<supportedMode>invisible_and_automated</supportedMode>
<supportedMode>visible_and_interactive</supportedMode>
</harness>
<documentation xml:lang='en'>
<vendor>AcmeTestTools</vendor>
<name>Sleeper</name>
<description>Atoolforwhilingawaythehours</description>
                <helpUri>http://someURI</helpUri>
</documentation>
<published>2011-07-11T11:32:41-08:00</published>
<location>
<workspaceID>0d9374c4-aa1e-47f5-8b61-98bae0ad8ca1</workspaceID>
<ipv4>10.155.2.153</ipv4>
<hostname>server1.mycorp.com</hostname>
</location>
</entry>
</item>
</items>
</pubsub>
</iq>"


  v_decodedPDUsIq := dec_sIq(char2oct(s1));
  log("Decoded Example 4-2 : ", v_decodedPDUsIq);
  v_decodedPDUPubsub := dec_Pubsub(char2oct(unichar2char(v_decodedPDUsIq.elem)));
  log("Decoded Pubsub elem Example 4-2 : ", v_decodedPDUPubsub);



  s1:="<iq type='result' to='client1@mycorp.com/1' from='pubsub.mycorp.com' id='q1'>
<pubsub xmlns='http://jabber.org/protocol/pubsub'>
<items node='acme_ascent@mycorp.com/1'>
<item id='JHGBFftydvbFDT'>
<entry xmlns='http://ntaforum.org/2011/registry'>
	<tooltype>http://Example.org/tools/acme/ascent/2.1</tooltype>
	<version>1.2.0.24215</version>
	<harness xmlns='http://ntaforum.org/2011/harness' name='http://Example.org/acme/ascent/2.1'> 
		<supportedMode>invisible_and_automated</supportedMode>
		<supportedMode>visible_and_interactive</supportedMode>
	</harness>
	<documentation xml:lang='en'>
		<vendor>AcmeTestTools</vendor>
		<name>Ascent</name>
		<description>Atoolfordemonstratingupwardprogress</description>
                <helpUri>http://someURI</helpUri>
	</documentation>
      	<published>2011-07-11T11:30:02-08:00</published>
	<location>
		<workspaceID>0d9374c4-aa1e-47f5-8b61-98bae0ad8ca1</workspaceID>
		<ipv4>10.155.2.151</ipv4>
		<hostname>jdoe43.mycorp.com</hostname>
		<description>2ndfloor,bldg.3,SanJoseHQ</description>
	</location>
</entry>
</item>
</items>
</pubsub>
</iq>"


  v_decodedPDUsIq := dec_sIq(char2oct(s1));
  log("Decoded Example 4-2a : ", v_decodedPDUsIq);
  v_decodedPDUPubsub := dec_Pubsub(char2oct(unichar2char(v_decodedPDUsIq.elem)));
  log("Decoded Pubsub elem Example 4-2a : ", v_decodedPDUPubsub);



  s1:="<iq type='result' to='client1@mycorp.com/1' from='pubsub.mycorp.com' id='q1' >
<ns:pubsub xmlns:ns='http://jabber.org/protocol/pubsub'>
<ns:items node='acme_proxy@mycorp.com/2'>
<ns:item id='acme_proxy@mycorp.com/2#sleeper1'>
<entry xmlns='http://ntaforum.org/2011/registry'>
<tooltype>http://Example.org/tools/acme/sleeper/1.1</tooltype>
<version>1.1.0.14153</version>
<!-- mode>dormant</mode -->
<!-- proxy>acme_proxy@mycorp.com/2</proxy -->
<harness xmlns='http://ntaforum.org/2011/harness' name='http://Example.org/acme/sleeper/1.1'>
<supportedMode>invisible_and_automated</supportedMode>
<supportedMode>visible_and_interactive</supportedMode>
</harness>
<documentation xml:lang='en'>
<vendor>AcmeTestTools</vendor>
<name>Sleeper</name>
<description>Atoolforwhilingawaythehours</description>
                <helpUri>http://someURI</helpUri>
</documentation>
<published>2011-07-11T11:32:41-08:00</published>
<location>
<workspaceID>0d9374c4-aa1e-47f5-8b61-98bae0ad8ca1</workspaceID>
<ipv4>10.155.2.153</ipv4>
<hostname>server1.mycorp.com</hostname>
</location>
</entry>
</ns:item>
</ns:items>
</ns:pubsub>
</iq>"


  v_decodedPDUsIq := dec_sIq(char2oct(s1));
  log("Decoded Example 4-2b : ", v_decodedPDUsIq);
  v_decodedPDUPubsub := dec_Pubsub(char2oct(unichar2char(v_decodedPDUsIq.elem)));
  log("Decoded Pubsub elem Example 4-2b : ", v_decodedPDUPubsub);


  v_decodedPDUPubsub:= {
    choice := {
      choice_list := {
        {
          items := {
            max_items := omit,
            node := "acme_proxy@mycorp.com/2",
            subid := omit,
            item_list := {

              {
                id:="acme_proxy@mycorp.com/2#sleeper1",
                sequence:={elem:="<entry xmlns='http://ntaforum.org/2011/registry'>
<tooltype>http://Example.org/tools/acme/sleeper/1.1</tooltype>
<version>1.1.0.14153</version>
<!-- mode>dormant</mode -->
<!-- proxy>acme_proxy@mycorp.com/2</proxy -->
<harness xmlns='http://ntaforum.org/2011/harness' name='http://Example.org/acme/sleeper/1.1'>
<supportedMode>invisible_and_automated</supportedMode>
<supportedMode>visible_and_interactive</supportedMode>
</harness>
<documentation xml:lang='en'>
<vendor>AcmeTestTools</vendor>
<name>Sleeper</name>
<description>Atoolforwhilingawaythehours</description>
                <helpUri>http://someURI</helpUri>
</documentation>
<published>2011-07-11T11:32:41-08:00</published>
<location>
<workspaceID>0d9374c4-aa1e-47f5-8b61-98bae0ad8ca1</workspaceID>
<ipv4>10.155.2.153</ipv4>
<hostname>server1.mycorp.com</hostname>
</location>
</entry>"}
              }


            }
          }
        }
      }
    }
  }


  log("Encoded Pubsub elem Example 4-2b : ", enc_Pubsub(v_decodedPDUPubsub));

  //*********************************************************************************************************

  //Example5.Fetchingalistofchildnodesfromacollectionnode
  s1:="<iq type='get' to='pubsub.mycorp.com' id='disco1' >
<query xmlns='http://jabber.org/protocol/disco#items' node='ntaf.tools' />
</iq>"

  v_decodedPDUcIq := dec_cIq(char2oct(s1));

  log("Decoded Example 5-1 : ", v_decodedPDUcIq);




  s1:="<iq type='result' from='pubsub.mycorp.com' id='disco1' to='client1@mycorp.com/1' >
<query xmlns='http://jabber.org/protocol/disco#items' node='ntaf.tools'>
<item node='acme_ascent@mycorp.com/1' name='' jid='pubsub.mycorp.com' />
<item node='acme_proxy@mycorp.com/2' name='' jid='pubsub.mycorp.com' />
</query>
</iq>"

  v_decodedPDUsIq := dec_sIq(char2oct(s1));

  log("Decoded Example 5-2 : ", v_decodedPDUsIq);



  //*********************************************************************************************************

  //Example6.Subscribingforchangestothepublish-subscribenodecontents,andlaterunsubscribing
  s1:="<iq type='set' from='client1@mycorp.com/1' to='pubsub.mycorp.com' id='sub1'>
<pubsub xmlns='http://jabber.org/protocol/pubsub'>
<subscribe node='ntaf.tools' jid='client1@mycorp.com/1'/>
</pubsub>
</iq>"

  v_decodedPDUcIq := dec_cIq(char2oct(s1));

  log("Decoded Example 6-1 : ", v_decodedPDUcIq);

  v_decodedPDUPubsub := dec_Pubsub(char2oct(unichar2char(v_decodedPDUcIq.elem)));

  log("Decoded Pubsub elem Example 6-1 : ", v_decodedPDUPubsub);


  //Newtoolregistrationaddedtopubsublisthere)


  v_encodedPDUMessage := enc_cMessage(valueof(t_Message));
  v_decodedPDUcMessage := dec_cMessage(v_encodedPDUMessage);


  log("Encoded Ex6-2 : ", v_encodedPDUMessage);
  log("Decoded Ex6-2: ", v_decodedPDUcMessage);







  s1:="<message from='pubsub.mycorp.com' to='client1@mycorp.com' id='n1'>
<event xmlns='http://jabber.org/protocol/pubsub#event'>
<items node='foo@mycorp.com/100'>
<item id='KJHFbnktBHtbkkuyg'>
<entry xmlns='http://ntaforum.org/registry'>
<toolType>http://Example.org/tools/other/bigboy/4.0</toolType>
<version>4.0.0.1</version>
<published>2011-07-13T08:24:09-05:00</published>
<documentation xml:lang='en'>
<vendor>OtherTools,Inc.</vendor>
<name>BigBoy</name>
<description>Anotherinterestingtool</description>
</documentation>
<location>
<workspaceID>0a2434c4-aa1e-47f5-8b61-98bae0ad8ca1</workspaceID>
<ipv4>10.155.2.101</ipv4>
<hostname>lab4.mycorp.com</hostname>
</location>
</entry>
</item>
</items>
</event>
</message>"

  v_decodedPDUsMessage := dec_sMessage(char2oct(s1));

  log("Decoded Example 6-2 : ", v_decodedPDUsMessage);



  //(ToolisclosingUnsubscribing)
  s1:="<iq type='set' from='client1@mycorp.com/1' to='pubsub.mycorp.com' id='sub1'>
<pubsub xmlns='http://jabber.org/protocol/pubsub'>
<unsubscribe node='ntaf.tools' jid='client1@mycorp.com/1'/>
</pubsub>
</iq>"
  v_decodedPDUcIq := dec_cIq(char2oct(s1));

  log("Decoded Example 6-3 : ", v_decodedPDUcIq);


  v_decodedPDUPubsub := dec_Pubsub(char2oct(unichar2char(v_decodedPDUcIq.elem)));

  log("Decoded Pubsub elem Example 6-3 : ", v_decodedPDUPubsub);

  //*********************************************************************************************************

  //Example8.Activatinganalways-ontool
  s1:="<iq type='set' to='acme_ascent@mycorp.com/1' from='client1@mycorp.com/1' id='a1'>
<activate xmlns='http://ntaforum.org/2011/activation' toolId='JHGBFftydvbFDT'> 
<harness xmlns='http://ntaforum.org/2011/harness' name='http://Example.org/acme/ascent/2.1'> 
<supportedMode>invisible_and_automated</supportedMode>
</harness>
</activate>
</iq>"

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 8-1 : ", v_decodedPDUcIq);


  v_decodedPDUActivate := dec_Activate(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Activate elem Example 8-1 : ", v_decodedPDUActivate);


  s1:="<iq type='result' from='acme_ascent@mycorp.com' to='client1@mycorp.com/1' id='a1'>
<activate xmlns='http://ntaforum.org/2011/activation' toolId='JHGBFftydvbFDT'>
<result>pass</result>
    <jid>acme_ascent@mycorp.com</jid>
<activationRef/>
</activate>
</iq>"

  v_decodedPDUsIq := dec_sIq(char2oct(s1));
  log("Decoded Example 8-2: ", v_decodedPDUsIq);

  v_decodedPDUActivate := dec_Activate(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Activate elem Example 8-2 : ", v_decodedPDUActivate);


  s1:="<iq type='set' to='acme_ascent@mycorp.com' from='client1@mycorp.com/1' id='o1'>
<open xmlns='http://ntaforum.org/2011/harness' harness='http://Example.org/acme/ascent/2.1' mode='visible_and_interactive'>
<activationRef/>
</open>
</iq>"

  v_decodedPDUcIq := dec_cIq(char2oct(s1));

  log("Decoded Example 8-3 : ", v_decodedPDUcIq);

  v_decodedPDUOpen := dec_Open(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Open elem Example 8-3 : ", v_decodedPDUOpen);

  //*********************************************************************************************************

  //Example9.Activatingadormanttool
  s1:="<iq type='set' to='acme_proxy@mycorp.com/2' from='client1@mycorp.com/1' id='a5'>
<activate xmlns='http://ntaforum.org/2011/activation' toolId='acme_sleeper@mycorp.com#sleeper1'/>
</iq>"

  v_decodedPDUcIq := dec_cIq(char2oct(s1));

  log("Decoded Example 9-1 : ", v_decodedPDUcIq);

  v_decodedPDUActivate := dec_Activate(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Activate elem Example 9-1 : ", v_decodedPDUActivate);



  s1:="<iq type='result' from='acme_proxy@mycorp.com/2' to='client1@mycorp.com/1' id='a5'>
    <activate xmlns='http://ntaforum.org/2011/activation' toolId='acme_proxy@mycorp.com#sleeper1' >
    <result>pending</result>
    </activate>
    </iq>"


  v_decodedPDUsIq := dec_sIq(char2oct(s1));

  log("Decoded Example 9-2 : ", v_decodedPDUsIq);

  v_decodedPDUActivate := dec_Activate(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Activate elem Example 9-2 : ", v_decodedPDUActivate);

  //(Activationoccurshere)

  s1:="<iq type='result' from='acme_proxy@mycorp.com/2' to='client1@mycorp.com/1' id='an21'>
<activate xmlns='http://ntaforum.org/2011/activation' toolId='acme_proxy@mycorp.com#sleeper1' requestId='a5' >
<result>pass</result>
<jid>acme_sleeper@mycorp.com/4</jid>
<activationRef>432345</activationRef>
</activate>
</iq>"

  v_decodedPDUsIq := dec_sIq(char2oct(s1));
  log("Decoded Example 9-3 : ", v_decodedPDUsIq);

  v_decodedPDUActivate := dec_Activate(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Activate elem Example 9-3 : ", v_decodedPDUActivate);


  s1:="<iq type='set' to='acme_sleeper@mycorp.com/4' from='client1@mycorp.com/1' id='o1'>
<open xmlns='http://ntaforum.org/2011/harness'  harness='http://Example.org/acme/sleeper/1.2' mode='visible_and_interactive'>
<activationRef>432345</activationRef>
</open>
</iq>"


  v_decodedPDUcIq := dec_cIq(char2oct(s1));

  log("Decoded Example 9-4 : ", v_decodedPDUcIq);
  v_decodedPDUOpen := dec_Open(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Open elem Example 9-4 : ", v_decodedPDUOpen);
  //*********************************************************************************************************

  //Example10.Deactivatingatool
  s1:="<iq type='set' to='acme_proxy@mycorp.com/2' from='client1@mycorp.com/1' id='deact1'>
<deactivate xmlns='http://ntaforum.org/2011/activation'>
<activationRef>432345</activationRef>
</deactivate>
</iq>"

  v_decodedPDUcIq := dec_cIq(char2oct(s1));

  log("Decoded Example 10-1 : ", v_decodedPDUcIq);
  v_decodedPDUDeactivate := dec_Deactivate(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Deactivate elem Example 10-1 : ", v_decodedPDUDeactivate);


  s1:="<iq type='result' to='client1@mycorp.com/1' from='acme_proxy@mycorp.com/2' id='deact1'>
<!-- deactivate xmlns='http://ntaforum.org/2011/activation'/ -->
    <deactivate xmlns='http://ntaforum.org/2011/activation'>
	<activationRef>432345</activationRef>
</deactivate>
</iq>"
  v_decodedPDUcIq := dec_cIq(char2oct(s1));

  log("Decoded Example 10-2 : ", v_decodedPDUcIq);
  v_decodedPDUDeactivate := dec_Deactivate(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Deactivate elem Example 10-2 : ", v_decodedPDUDeactivate);

  s1:="<iq type='set' to='acme_proxy@mycorp.com#sleeper1' from='client1@mycorp.com/1' id='deact2'>
<deactivate xmlns='http://ntaforum.org/2011/activation'>
<activationRef>432345</activationRef>
</deactivate>
</iq>"
  v_decodedPDUcIq := dec_cIq(char2oct(s1));

  log("Decoded Example 10-3 : ", v_decodedPDUcIq);
  v_decodedPDUDeactivate := dec_Deactivate(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Deactivate elem Example 10-3 : ", v_decodedPDUDeactivate);

  s1:="<iq type='result' to='client1@mycorp.com/1' from='acme_proxy@mycorp.com#sleeper1' id='deact2'>
<!-- deactivate xmlns='http://ntaforum.org/2011/activation'/ -->
    <deactivate xmlns='http://ntaforum.org/2011/activation'>
	<activationRef>432345</activationRef>
</deactivate>
</iq>"


  v_decodedPDUsIq := dec_sIq(char2oct(s1));
  log("Decoded Example 10-4 : ", v_decodedPDUsIq);
  v_decodedPDUDeactivate := dec_Deactivate(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Deactivate elem Example 10-4 : ", v_decodedPDUDeactivate);

  //*********************************************************************************************************


  //Example11.Removingaleafnode
  s1:="<iq type='set' to='pubsub.mycorp.com' id='delete1'>
<pubsub xmlns='http://jabber.org/protocol/pubsub#owner'>
<delete node='acme_ascent@mycorp.com/1'/>
</pubsub>
</iq>"

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 11: ", v_decodedPDUcIq);
  v_decodedPDUPubsub_owner := dec_Pubsub_owner(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Pubsub elem Example 11 : ", v_decodedPDUPubsub);

  //*********************************************************************************************************

  //Example12.Removingatoolitem
  s1:="<iq type='set' to='pubsub.mycorp.com' id='delete2'>
<pubsub xmlns='http://jabber.org/protocol/pubsub'>
<retract node='acme_proxy@mycorp.com/2'>
<item id='acme_proxy@mycorp.com/2#sleeper1'/>
</retract>
</pubsub>
</iq>"


  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 12 : ", v_decodedPDUcIq);
  v_decodedPDUPubsub := dec_Pubsub(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Pubsub elem Example 12 : ", v_decodedPDUPubsub);


  //--------------------------------------------------------------------------

  v_encodedPDUActivate := enc_Activate(valueof(t_Activate));
  v_decodedPDUActivate := dec_Activate(v_encodedPDUActivate);

  s1:=oct2char(v_encodedPDUActivate);
  log(s1);


  log("Encoded Activate request : ", v_encodedPDUActivate);
  log("Decoded Activate request : ", v_decodedPDUActivate);

  //*******************************************************************************************************************************************
  //
  //********************************************************************************************************************************************


  v_encodedPDUIq := enc_cIq(valueof(t_Iq_Ex1_1));
  v_decodedPDUcIq := dec_cIq(v_encodedPDUIq);


  log("Encoded Ex1_1 : ", v_encodedPDUIq);
  log("Decoded Ex1_1 : ", v_decodedPDUcIq);

  v_encodedPDUIq := enc_cIq(valueof(t_Iq_Ex1_1a));
  v_decodedPDUcIq := dec_cIq(v_encodedPDUIq);


  log("Encoded Ex1_1a : ", v_encodedPDUIq);
  log("Decoded Ex1_1a : ", v_decodedPDUcIq);



  v_encodedPDUIq := enc_cIq(valueof(t_Iq_Ex1_1b));
  v_decodedPDUcIq := dec_cIq(v_encodedPDUIq);


  log("Encoded Ex1_1b : ", v_encodedPDUIq);
  log("Decoded Ex1_1b : ", v_decodedPDUcIq);




  //Example 1. Disco request for features and corresponding response 
  s1:="<iq type='get' to='provider@domain/1' from='requester@domain/1' id='d1'> 
 <query xmlns='http://jabber.org/protocol/disco#info'/> 
</iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 1-1 : ", v_decodedPDUcIq);

  v_decodedPDUQuery_info := dec_Query_info(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query elem Example 1-1 : ", v_decodedPDUQuery_info);



  s1:="<iq type='result' from='provider@domain/1' to='requester@domain/1' id='d1'> 
 <query xmlns='http://jabber.org/protocol/disco#info'>
 <identity category=\"1\" type=\"text\"/>
 <feature var='http://ntaforum.org/2011/harness'/> 
 <feature var='http://example.org/scp'/> 
 </query> 
</iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 1-2 : ", v_decodedPDUcIq);



  v_decodedPDUQuery_info := dec_Query_info(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query elem Example 1-2 : ", v_decodedPDUQuery_info);


  //********************************************************************************************************************************************


  //Example 3. Requesting details about a certain harness and the corresponding response 


  v_encodedPDUIq := enc_cIq(valueof(t_Iq_Ex3_1));
  v_decodedPDUcIq := dec_cIq(v_encodedPDUIq);


  log("Encoded Ex1_1x : ", v_encodedPDUIq);
  log("Decoded Ex1_1x : ", v_decodedPDUcIq);


  s1:="<tq0006:iq xmlns:tq0006='jabber:client' id='d1' to='provider@domain/1' type='get'>
\t<h:query-harness xmlns:h='http://ntaforum.org/2011/harness' harness='http://example.org/scp' xml:lang='en'>
 <h:label>Label</h:label> 
 <h:author>author</h:author>
</h:query-harness>


</tq0006:iq>"

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 3-1a : ", v_decodedPDUcIq);



  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 3-1a : ", v_decodedPDUQuery_harness);




  s1:="<iq type='get' to='provider@domain/1' from='requester@domain/1' id='q1'> 
 <h:query-harness xmlns:h='http://ntaforum.org/2011/harness' harness='http://example.org/scp' xml:lang=\"en\"> 
     <h:label>Label</h:label> 
 <h:author>author</h:author>
</h:query-harness>
</iq>" 


  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 3-1 : ", v_decodedPDUcIq);



  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 3-1 : ", v_decodedPDUQuery_harness);

  //----------------------------------------------------------------------------------------------

  v_decodedPDUQuery_harness:=

  {
    harness := "http://example.org/scp",
    lang := "en",
    label_ := "Sawmill Control Panel",
    tooltip := "A harness for controlling and monitoring sawmill operations",
    description := omit,
    helpURI := omit,
    supercedes := omit,
    author := "blahblah",
    actionDecl_list := {
      {
        name := "getStatus",
        label_ := "Get Status",
        tooltip := "Fetch information about current operating status",
        description := omit,
        helpURI := omit,
        parameter_list := { },
        xmlParameter_list := { },
        file_list := { },
        group_list := { },
        responseDecl := {
          item_list := {
            {
              name := "isOperating",
              label_ := "Operating",
              tooltip := "If true, sawmill is currently operating",
              description := omit,
              helpURI := omit,
              mandatory := omit,
              default_ := omit,
              datatype := boolean_ ,
              units := omit,
              masked := omit,
              isMultiline := omit,
              allowedValue_list := { },
              allowedCount := omit
            }
          },
          xmlItem_list := { },
          fileItem_list := { },
          group_list := { }
        }
      },
      {
        name := "setFlowRate",
        label_ := "Set Flow Rate",
        tooltip := "Configure the flow rate of timber into the saw",
        description := omit,
        helpURI := omit,
        parameter_list := {
          {
            name := "rate",
            label_ := "Rate",
            tooltip := "The rate to which the flow will be set",
            description := omit,
            helpURI := omit,
            mandatory := omit,
            datatype := decimal ,
            units := "ft/sec",
            default_ := omit,
            masked := omit,
            isMultiline := omit,
            allowedValue_list := { },
            allowedLength := omit,
            allowedCount := omit,
            allowedPattern_list := { },
            allowedRange_list := { },
            enablementValue := omit
          }
        },
        xmlParameter_list := { },
        file_list := { },
        group_list := { },
        responseDecl := omit
      }
    },
    eventDecl_list := {
      {
        name := "shutdown",
        item_list := { },
        xmlItem_list := { },
        fileItem_list := { },
        group_list := { },
        description := "The sawmill line has shut down"
      }
    },
    subharness_list := { }
  }



  log("Encoded Example 3-2 : ", oct2char(enc_Query_harness(v_decodedPDUQuery_harness)));


  s1:="<ns0:iq xmlns:ns0='jabber:client' type='result' from='provider@domain/1' to='requester@domain/1' id='q1'> 
 <h:query-harness xmlns:h='http://ntaforum.org/2011/harness' harness='http://example.org/scp'  xml:lang='en'> 
 <h:label>Sawmill Control Panel</h:label> 
 <h:tooltip>A harness for controlling and monitoring sawmill operations</h:tooltip>
 <h:author>blahblah</h:author>
 <h:actionDecl name='getStatus'> 
  <h:label>Get Status</h:label> 
  <h:tooltip>Fetch information about current operating status</h:tooltip>
  <h:responseDecl>
    <h:item name='isOperating'>
      <h:label>Operating</h:label>  
      <h:tooltip>If true, sawmill is currently operating</h:tooltip> 
      <h:datatype>boolean</h:datatype> 
    </h:item> 
  </h:responseDecl> 
  </h:actionDecl> 
 <h:actionDecl name='setFlowRate'> 
 <h:label>Set Flow Rate</h:label> 
 <h:tooltip>Configure the flow rate of timber into the saw</h:tooltip> 
 <h:parameter name='rate'> 
 <h:label>Rate</h:label> 
 <h:tooltip>The rate to which the flow will be set</h:tooltip> 
 <h:datatype>decimal</h:datatype> 
 <h:units>ft/sec</h:units> 
 </h:parameter> 
 </h:actionDecl> 
 <h:eventDecl name='shutdown'> 
 <h:description>The sawmill line has shut down</h:description> 
 </h:eventDecl> 
 </h:query-harness> 
</ns0:iq>" 



  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 3-2 : ", v_decodedPDUcIq);



  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 3-2 : ", v_decodedPDUQuery_harness);







  s1:="<h:query-harness xmlns:h='http://ntaforum.org/2011/harness' harness='http://example.org/scp' xml:lang='en'>
<h:label>Sawmill Control Panel</h:label>
<h:tooltip>A harness for controlling and monitoring sawmill operations</h:tooltip>
<h:helpURI>http://ntaforum.org/2011/help</h:helpURI>
<h:supercedes>http://ntaforum.org/2011/supercedes</h:supercedes>
<h:author>author</h:author>
<h:actionDecl name='getStatus'>
<h:label>Get Status</h:label>
<h:tooltip>Fetch information about current operating status</h:tooltip>
<h:responseDecl> 
<h:item name='isOperating'>
<h:label>Operating</h:label>
<h:tooltip>If true, sawmill is currently operating</h:tooltip>
<h:datatype>boolean</h:datatype>
</h:item>
    
</h:responseDecl>
</h:actionDecl>
</h:query-harness>"

  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(s1));
  log("Decoded Query_harness elem Example 3-2x : ", v_decodedPDUQuery_harness);



  //********************************************************************************************************************************************




  //Example 4. Opening a new interactive session with a corresponding response 
  s1:="<iq type='set' to='provider@domain/1' from='requester@domain/1' id='o1'> 
 <open xmlns='http://ntaforum.org/2011/harness' 
 harness='http://example.org/scp' 
 mode='visible_and_interactive'> 
 <activationRef>435262</activationRef> 

 </open> 
</iq> "

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 4-1 : ", v_decodedPDUcIq);
  v_decodedPDUOpen := dec_Open(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Open elem  Example 4-1 : ", v_decodedPDUOpen);



  s1:="<iq type='result' from='provider@domain/1' to='requester@domain/1' id='o1'> 
 <response xmlns='http://ntaforum.org/2011/harness' session='saw1'> 
 <result>pass</result> 
 </response> 
</iq>" 




  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 4-2 : ", v_decodedPDUcIq);
  v_decodedPDUResponse := dec_Response(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Response elem  Example 4-2 : ", v_decodedPDUResponse);






  //Example 5. User activity notification sent to requester 
  s1:="<message from='provider@domain/1' to='requester@domain' id='a1'> 
 <notify-action xmlns='http://ntaforum.org/2011/harness' session='saw1'> 
 <started>2011-07-03T13:44:02-08:00</started> 
 <action harness='http://example.org/scp'>getStatus</action> 
 <responseItem name='isOperating'>true</responseItem> 
 <result>pass</result> 
 </notify-action> 
</message>" 


  v_decodedPDUcMessage := dec_cMessage(char2oct(s1));

  log("Decoded Example 5-1 : ", v_decodedPDUcMessage);


  //Example 6. Opening an automated session 
  s1:="<iq type='set' to='provider@domain/1' from='requester@domain/1' id='o2'> 
 <open xmlns='http://ntaforum.org/2011/harness' 
 harness='http://example.org/scp' 
 mode='invisible_and_automated'> 
 <activationRef>38472859</activationRef> 
 </open> 
</iq>"

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 6-1 : ", v_decodedPDUcIq);
  v_decodedPDUOpen := dec_Open(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Open elem  Example 6-1 : ", v_decodedPDUOpen);



  s1:="<iq type='result' from='provider@domain/1' to='requester@domain/1' id='o2'> 
 <response xmlns='http://ntaforum.org/2011/harness' session='saw2' > 
 <result>pass</result> 
 </response> 
</iq>"

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 6-2 : ", v_decodedPDUcIq);
  v_decodedPDUResponse := dec_Response(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Response elem  Example 6-2 : ", v_decodedPDUResponse);


  //Example 7. Issuing a request to perform an action via the harness and the corresponding response 
  s1:="<iq type='set' to='provider@domain/1' from='requester@domain/1' id='r1'> 
 <request xmlns='http://ntaforum.org/2011/harness' session='saw2'> 
 <action harness='http://example.org/scp'>getStatus</action> 
 </request> 
</iq>" 


  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 7-1 : ", v_decodedPDUcIq);
  v_decodedPDURequest := dec_Request(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Request elem  Example 7-1 : ", v_decodedPDURequest);


  s1:="<iq type='result' from='provider@domain/1' to='requester@domain/1' id='r1'> 
 <response xmlns='http://ntaforum.org/2011/harness' session='saw2'> 
 <result>pass</result> 
 <item name='isOperating'>false</item> 
 </response> 
</iq> "

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 7-2 : ", v_decodedPDUcIq);
  v_decodedPDUResponse := dec_Response(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Response elem  Example 7-2 : ", v_decodedPDUResponse);



  //Example 8. Presence Update 
  s1:="<presence> 
 <show>xa</show> 
 <status>No more sessions available</status> 
 <priority>55</priority> 
</presence>" 

  v_decodedPDUcPresence := dec_cPresence(char2oct(s1));

  log("Decoded Example 8-1 : ", v_decodedPDUcPresence);




  //Example 9. A request for a long-running action, the immediate response, and the later completion notification 
  s1:="<iq type='set' to='provider@domain/1' from='requester@domain/1' id='r2'> 
 <request xmlns='http://ntaforum.org/2011/harness' session='saw2'> 
    <parameter name='rate'>41.24</parameter>
    <action harness='http://example.org/scp'>setFlowRate</action>  
 </request> 
</iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 9-1 : ", v_decodedPDUcIq);
  v_decodedPDURequest := dec_Request(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Request elem  Example 9-1 : ", v_decodedPDURequest);


  s1:="<iq type='result' from='provider@domain/1' to='requester@domain/1' id='r2'> 
 <response xmlns='http://ntaforum.org/2011/harness' session='saw2'> 
 <result>pending</result> 
 </response> 
</iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 9-2 : ", v_decodedPDUcIq);
  v_decodedPDUResponse := dec_Response(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Response elem  Example 9-2 : ", v_decodedPDUResponse);


  s1:="<message from='provider@domain/1' to='requester@domain' id='r2'> 
 <response xmlns='http://ntaforum.org/2011/harness' session='saw2' requestId='r2'> 
 <result>pass</result> 
 </response> 
</message>" 

  v_decodedPDUcMessage := dec_cMessage(char2oct(s1));

  log("Decoded Example 9-3 : ", v_decodedPDUcMessage);



  //Example 10. An event notification 
  s1:="<message from='provider@domain/1' to='requester@domain' id='e1'> 
 <event xmlns='http://ntaforum.org/2011/harness' 
session='saw2' 
 harness='http://example.org/scp' 
name='shutdown'> 
 <timestamp>2011-07-03T14:01:24-08:00</timestamp> 
 </event> 
</message>" 


  v_decodedPDUcMessage := dec_cMessage(char2oct(s1));

  log("Decoded Example 10-1 : ", v_decodedPDUcMessage);



  //Example 11. A session close request and response 
  s1:="<iq type='set' to='provider@domain/1' from='requester@domain/1' id='c1'> 
 <close xmlns='http://ntaforum.org/2011/harness' session='saw2'/> 
</iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 11-1 : ", v_decodedPDUcIq);
  v_decodedPDUClose := dec_Close(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Close elem  Example 11-1 : ", v_decodedPDUClose);



  s1:="<iq type='result' from='provider@domain/1' to='requester@domain/1' id='r1'> 
 <response xmlns='http://ntaforum.org/2011/harness' session='saw2'> 
 <result>pass</result> 
 </response> 
</iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 11-2 : ", v_decodedPDUcIq);
  v_decodedPDUResponse := dec_Response(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Response elem  Example 11-2 : ", v_decodedPDUResponse);


  //Example 12. A long-running action cancelled by the requester 
  s1:="<iq type='set' to='provider@domain/1' from='requester@domain/1' id='r3'> 
 <request xmlns='http://ntaforum.org/2011/harness' session='saw2'> 
  <parameter name='rate'>25.0</parameter> 
  <action harness='http://example.org/scp'>setFlowRate</action> 

 </request> 
</iq>" 
  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 12-1 : ", v_decodedPDUcIq);
  v_decodedPDURequest := dec_Request(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Request elem  Example 12-1 : ", v_decodedPDURequest);


  s1:="<iq type='result' from='provider@domain/1' to='requester@domain/1' id='r3'> 
 <response xmlns='http://ntaforum.org/2011/harness' session='saw2'> 
 <result>pending</result> 
 </response> 
</iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 12-2 : ", v_decodedPDUcIq);
  v_decodedPDUResponse := dec_Response(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Response elem  Example 12-2 : ", v_decodedPDUResponse);


  s1:="<message to='provider@domain/1' from='requester@domain' id='cancel1'> 
 <cancel xmlns='http://ntaforum.org/2011/harness' session='saw2' requestId='r3'/> 
</message>" 

  v_decodedPDUcMessage := dec_cMessage(char2oct(s1));
  log("Decoded Example 12-3 : ", v_decodedPDUcMessage);


  s1:="<message from='provider@domain/1' to='requester@domain' id='r3'> 
 <response xmlns='http://ntaforum.org/2011/harness' session='saw2' requestId='r3'> 
 <result>abort</result> 
 </response> 
</message>"

  v_decodedPDUcMessage := dec_cMessage(char2oct(s1));
  log("Decoded Example 12-4 : ", v_decodedPDUcMessage);




  //Example 13. A long-running action with progress updates 
  s1:="<iq type='set' to='provider@domain/1' from='requester@domain/1' id='r4'> 
 <request xmlns='http://ntaforum.org/2011/harness' session='saw2'> 
 <parameter name='rate'>34.432</parameter>   
 <action harness='http://example.org/scp'>setFlowRate</action> 
 </request> 
</iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 13-1 : ", v_decodedPDUcIq);
  v_decodedPDURequest := dec_Request(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Request elem  Example 13-1 : ", v_decodedPDURequest);



  s1:="<iq type='result' from='provider@domain/1' to='requester@domain/1' id='r4'> 
 <response xmlns='http://ntaforum.org/2011/harness' session='saw2'> 
 <result>pending</result> 
 </response> 
</iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 13-2 : ", v_decodedPDUcIq);
  v_decodedPDUResponse := dec_Response(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Response elem  Example 13-2 : ", v_decodedPDUResponse);


  s1:="<message from='provider@domain/1' to='requester@domain' id='p1'> 
 <progress xmlns='http://ntaforum.org/2011/harness' session='saw2' requestId='r4'> 
 <totalWork>55</totalWork> 
 <remainingWork>24</remainingWork> 
 <status>Reconfiguring input flow motors</status> 
 </progress> 

</message>" 
  v_decodedPDUcMessage := dec_cMessage(char2oct(s1));
  log("Decoded Example 13-3 : ", v_decodedPDUcMessage);


  s1:="<message from='provider@domain/1' to='requester@domain' id='p2'> 
 <progress xmlns='http://ntaforum.org/2011/harness' session='saw2' requestId='r4'> 
 <totalWork>55</totalWork> 
 <remainingWork>49</remainingWork> 
 <status>Restarting line after modifying flow rate</status> 
 </progress> 
</message>" 

  v_decodedPDUcMessage := dec_cMessage(char2oct(s1));
  log("Decoded Example 13-4 : ", v_decodedPDUcMessage);

  s1:="<message from='provider@domain/1' to='requester@domain' id='n5'> 
 <response xmlns='http://ntaforum.org/2011/harness' session='saw2' requestId='r4'> 
 <result>pass</result> 
 </response> 
</message>" 


  v_decodedPDUcMessage := dec_cMessage(char2oct(s1));
  log("Decoded Example 13-5 : ", v_decodedPDUcMessage);


  //Example 14. A provider notifies a requester that it has closed a session that was previously opened 
  s1:="<iq type='set' to='provider@domain/1' from='requester@domain/1' id='o1'> 
 <open xmlns='http://ntaforum.org/2011/harness' 
 harness='http://example.org/scp' 
 mode='visible_and_interactive'> 
 <activationRef>38472859</activationRef> 
 </open> 
</iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 14-1 : ", v_decodedPDUcIq);
  v_decodedPDUOpen := dec_Open(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Open elem  Example 14-1 : ", v_decodedPDUOpen);

  s1:="<iq type='result' from='provider@domain/1' to='requester@domain/1' id='o1'> 
 <response xmlns='http://ntaforum.org/2011/harness' session='saw1'> 
 <result>pass</result> 
 </response> 
</iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 14-2 : ", v_decodedPDUcIq);
  v_decodedPDUResponse := dec_Response(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Response elem  Example 14-2 : ", v_decodedPDUResponse);



  s1:="<message from='provider@domain/1' to='requester@domain' id='close1'> 
 <notify-close xmlns='http://ntaforum.org/2011/harness' session='saw1'/> 
</message>" 
  v_decodedPDUcMessage := dec_cMessage(char2oct(s1));
  log("Decoded Example 14-3 : ", v_decodedPDUcMessage);




  //*******************************************************************************************************************************************
  //
  //********************************************************************************************************************************************



  v_encodedPDUIq := enc_cIq(valueof(t_Iq_Query_harness_1));
  v_decodedPDUcIq := dec_cIq(v_encodedPDUIq);


  log("Encoded Iq_Query_harness_1 : ", v_encodedPDUIq);
  log("Decoded Iq_Query_harness_1 : ", v_decodedPDUcIq);


  v_encodedPDUIq := enc_cIq(valueof(t_Iq_Query_harness_2));
  v_decodedPDUcIq := dec_cIq(v_encodedPDUIq);


  log("Encoded Iq_Query_harness_2 : ", v_encodedPDUIq);
  log("Decoded Iq_Query_harness_2 : ", v_decodedPDUcIq);


  v_encodedPDUIq := enc_cIq(valueof(t_Iq_Query_harness_3));
  v_decodedPDUcIq := dec_cIq(v_encodedPDUIq);


  log("Encoded Iq_Query_harness_3 : ", v_encodedPDUIq);
  log("Decoded Iq_Query_harness_3 : ", v_decodedPDUcIq);

  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem  in  Iq_Query_harness_3 : ", v_decodedPDUQuery_harness);

  v_encodedPDUQuery_harness := enc_Query_harness(v_decodedPDUQuery_harness);
  log("encoded Query_harness elem  in  Iq_Query_harness_3 : ", v_encodedPDUQuery_harness);




  v_encodedPDUIq := enc_cIq(valueof(t_Iq_Query_harness_4));
  v_decodedPDUcIq := dec_cIq(v_encodedPDUIq);


  log("Encoded Iq_Query_harness_4 : ", v_encodedPDUIq);
  log("Decoded Iq_Query_harness_4 : ", v_decodedPDUcIq);

  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem  in  Iq_Query_harness_4 : ", v_decodedPDUQuery_harness);

  v_encodedPDUQuery_harness := enc_Query_harness(v_decodedPDUQuery_harness);
  log("encoded Query_harness elem  in  Iq_Query_harness_4 : ", v_encodedPDUQuery_harness);


  v_encodedPDUIq := enc_cIq(valueof(t_Iq_Query_harness_5));
  v_decodedPDUcIq := dec_cIq(v_encodedPDUIq);


  log("Encoded Iq_Query_harness_5 : ", v_encodedPDUIq);
  log("Decoded Iq_Query_harness_5: ", v_decodedPDUcIq);

  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem  in  Iq_Query_harness_5 : ", v_decodedPDUQuery_harness);

  v_encodedPDUQuery_harness := enc_Query_harness(v_decodedPDUQuery_harness);
  log("encoded Query_harness elem  in  Iq_Query_harness_5 : ", v_encodedPDUQuery_harness);






  //*******************************************************************************************************************************************
  //
  //********************************************************************************************************************************************



  //Example 15. Simple parameter declaration, and corresponding request 
  s1:="<tq0006:iq xmlns:tq0006='jabber:client' type='result' from='provider@domain/1' to='requester@domain/1' id='q1'> 
 <h:query-harness xmlns:h='http://ntaforum.org/2011/harness' harness='http://example.org/example1' xml:lang='en'>
 <h:label>Sample harness</h:label> 
 <h:tooltip>A harness for demonstration purposes only</h:tooltip>
 <h:author>author</h:author>  
 <h:actionDecl name='setTitle'> 
 <h:label>Set Title</h:label> 
 <h:tooltip>Set the title for the object</h:tooltip> 
 <h:parameter name='title'> 
 <h:label>Title</h:label> 
 <h:tooltip>You can set the title to any string</h:tooltip> 
 </h:parameter> 
 </h:actionDecl> 
 </h:query-harness> 
</tq0006:iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 15-1 : ", v_decodedPDUcIq);



  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 15-1 : ", v_decodedPDUQuery_harness);





  s1:="<tq0006:iq xmlns:tq0006='jabber:client' id='d1' to='provider@domain/1' type='get'>
<h:query-harness xmlns:h='http://ntaforum.org/2011/harness' harness='http://example.org/scp' xml:lang='en'>
<h:label>Sawmill Control Panel</h:label>
<h:tooltip>A harness for controlling and monitoring sawmill operations</h:tooltip>
<h:helpURI>http://ntaforum.org/2011/help</h:helpURI>
<h:supercedes>http://ntaforum.org/2011/supercedes</h:supercedes>
<h:author>author</h:author>
<h:actionDecl name='setFlowRate'>
<h:label>Set Flow Rate</h:label>
<h:tooltip>Configure the flow rate of timber into the saw</h:tooltip>
<h:parameter name='rate'>
<h:label>Rate</h:label>
<h:tooltip>The rate to which the flow will be set</h:tooltip>
<h:datatype>decimal</h:datatype>
</h:parameter>
</h:actionDecl>
</h:query-harness>


</tq0006:iq>"


  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 15-1x : ", v_decodedPDUcIq);



  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 15-1x : ", v_decodedPDUQuery_harness);


  s1:="<iq type='set' to='provider@domain/1' from='requester@domain/1' id='r1'> 
 <request xmlns='http://ntaforum.org/2011/harness' session='ss1'>
     <parameter name='title'>New Object Title</parameter> 
     <action harness='http://example.org/example1'>setTitle</action> 
 </request> 
</iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 15-2 : ", v_decodedPDUcIq);

  v_decodedPDURequest := dec_Request(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Request elem  Example 15-2 : ", v_decodedPDURequest);





  //Example 16. An optional integer parameter with a restricted range 



  s1:="<tq0006:iq xmlns:tq0006='jabber:client' id='d1' to='provider@domain/1' type='get'>
<h:query-harness xmlns:h='http://ntaforum.org/2011/harness' harness='http://example.org/scp' xml:lang='en'>
<h:label>Sawmill Control Panel</h:label>
<h:tooltip>A harness for controlling and monitoring sawmill operations</h:tooltip>
<h:helpURI>http://ntaforum.org/2011/help</h:helpURI>
<h:supercedes>http://ntaforum.org/2011/supercedes</h:supercedes>
<h:author>author</h:author>
<h:actionDecl name='setFlowRate'>
<h:label>Set Flow Rate</h:label>
<h:tooltip>Configure the flow rate of timber into the saw</h:tooltip>

  <h:parameter name='numPeople'> 
 <h:label># People</h:label> 
 <h:tooltip>The number of people to be invited for dinner</h:tooltip> 
 <h:mandatory>false</h:mandatory> 
 <h:default>4</h:default> 
 <h:allowedRange> 
 <h:min>1</h:min> 
 <h:max>10</h:max> 
 </h:allowedRange> 
</h:parameter> 
    
    
    
</h:actionDecl>
</h:query-harness>


</tq0006:iq>"

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 16-1 : ", v_decodedPDUcIq);



  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 16-1 : ", v_decodedPDUQuery_harness);



  s1:="<iq type='set' to='provider@domain/1' from='requester@domain/1' id='r1'> 
 <request xmlns='http://ntaforum.org/2011/harness' session='ss1'> 
     <parameter name='numPeople'>5</parameter> 
     <action harness='http://example.org/example1'>selectPeople</action> 
 </request> 
</iq>" 


  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 16-2 : ", v_decodedPDUcIq);

  v_decodedPDURequest := dec_Request(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Request elem  Example 16-2 : ", v_decodedPDURequest);






  //Example 17. An enumerated sort order parameter, enabled based on another boolean sort parameter 

  s1:="<tq0006:iq xmlns:tq0006='jabber:client' id='d1' to='provider@domain/1' type='get'>
<h:query-harness xmlns:h='http://ntaforum.org/2011/harness' harness='http://example.org/scp' xml:lang='en'>
<h:label>Sawmill Control Panel</h:label>
<h:tooltip>A harness for controlling and monitoring sawmill operations</h:tooltip>
<h:helpURI>http://ntaforum.org/2011/help</h:helpURI>
<h:supercedes>http://ntaforum.org/2011/supercedes</h:supercedes>
<h:author>author</h:author>
<h:actionDecl name='setFlowRate'>
<h:label>Set Flow Rate</h:label>
<h:tooltip>Configure the flow rate of timber into the saw</h:tooltip>
  
<h:parameter name='sort'> 
 <h:label>Sort attendees</h:label> 
 <h:tooltip>If true, attendees will be sorted</h:tooltip> 
 <h:mandatory>false</h:mandatory> 
 <h:datatype>boolean</h:datatype>
 <h:default>true</h:default> 
 </h:parameter> 
<h:parameter name='sorting'> 
 <h:label>Sort Order</h:label> 
 <h:tooltip>The order in which people will be arranged</h:tooltip> 
 <h:allowedValue label='By Age'>age</h:allowedValue> 
 <h:allowedValue label='By Weight'>weight</h:allowedValue> 
 <h:allowedValue label='By Height'>height</h:allowedValue> 
 <h:allowedValue label='Alphabetically by Last Name'>lastName</h:allowedValue> 
 <h:enablementValue> 
 <h:parameter>sort</h:parameter> 
 <h:value>true</h:value> 
 <h:enableOn>equal</h:enableOn> 
 </h:enablementValue> 
</h:parameter> 
 

</h:actionDecl>
</h:query-harness>


</tq0006:iq>"


  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 17-1 : ", v_decodedPDUcIq);



  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 17-1 : ", v_decodedPDUQuery_harness);


  s1:="<iq type='set' to='provider@domain/1' from='requester@domain/1' id='r1'> 
 <request xmlns='http://ntaforum.org/2011/harness' session='ss1'> 
   <parameter name='sort'>true</parameter> 
   <parameter name='sorting'>weight</parameter>
   <action harness='http://example.org/example1'>organize</action>   
 </request> 
</iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 17-2 : ", v_decodedPDUcIq);

  v_decodedPDURequest := dec_Request(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Request elem  Example 17-2 : ", v_decodedPDURequest);




  //Example 18. A parameter that allows a list of constrained strings to be provided 

  s1:="<tq0006:iq xmlns:tq0006='jabber:client' id='d1' to='provider@domain/1' type='get'>
<h:query-harness xmlns:h='http://ntaforum.org/2011/harness' harness='http://example.org/scp' xml:lang='en'>
<h:label>Sawmill Control Panel</h:label>
<h:tooltip>A harness for controlling and monitoring sawmill operations</h:tooltip>
<h:helpURI>http://ntaforum.org/2011/help</h:helpURI>
<h:supercedes>http://ntaforum.org/2011/supercedes</h:supercedes>
<h:author>author</h:author>
<h:actionDecl name='setFlowRate'>
<h:label>Set Flow Rate</h:label>
<h:tooltip>Configure the flow rate of timber into the saw</h:tooltip>

  
<h:parameter name='names'> 
 <h:label>Attendee Names</h:label> 
 <h:tooltip>The list of full names of attendees in the form Lastname, Firstname</h:tooltip> 

 <h:allowedCount> 
 <h:min>1</h:min> 
 </h:allowedCount> 
 <h:allowedPattern>\\S+,\\S+</h:allowedPattern> 
</h:parameter> 

  </h:actionDecl>
</h:query-harness>


</tq0006:iq>"


  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 18-1 : ", v_decodedPDUcIq);



  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 18-1 : ", v_decodedPDUQuery_harness);


  s1:="<iq type='set' to='provider@domain/1' from='requester@domain/1' id='r1'> 
 <request xmlns='http://ntaforum.org/2011/harness' session='ss1'> 
      <parameter name='names'>Collins,Tom</parameter> 
      <parameter name='names'>Daniels,Jack</parameter> 
      <parameter name='names'>Mark,Makers</parameter> 
      <action harness='http://example.org/example1'>chooseAttendees</action> 
 </request> 
</iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 17-2 : ", v_decodedPDUcIq);

  v_decodedPDURequest := dec_Request(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Request elem  Example 17-2 : ", v_decodedPDURequest);



  //Example 19. Sample request and response containing a simple item 
  s1:="<tq0006:iq xmlns:tq0006='jabber:client' type='result' from='provider@domain/1' to='requester@domain/1' id='q3'> 
 <h:query-harness xmlns:h='http://ntaforum.org/2011/harness' harness='http://example.org/example3' xml:lang='en'> 
 <h:label>Sample harness</h:label> 
 <h:tooltip>A harness for demonstration purposes only</h:tooltip>
    <h:author>author</h:author>
 <h:actionDecl name='getTitle'> 
 <h:label>Get Title</h:label> 
 <h:tooltip>Get the title for the object</h:tooltip> 
 <h:responseDecl> 
 <h:item name='title'> 
 <h:label>Title</h:label> 
 <h:tooltip>The title of the object</h:tooltip> 
 </h:item> 
 </h:responseDecl> 
 </h:actionDecl> 
 </h:query-harness> 
</tq0006:iq>" 


  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 19-1 : ", v_decodedPDUcIq);



  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 19-1 : ", v_decodedPDUQuery_harness);



  s1:="<iq type='set' to='provider@domain/1' from='requester@domain/1' id='r3'> 
 <request xmlns='http://ntaforum.org/2011/harness' session='ss2'> 
 <action harness='http://example.org/example3'>getTitle</action> 
 </request> 
</iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 19-2 : ", v_decodedPDUcIq);

  v_decodedPDURequest := dec_Request(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Request elem  Example 19-2 : ", v_decodedPDURequest);




  s1:="<iq type='result' from='provider@domain/1' to='requester@domain/1' id='r3'> 
 <response xmlns='http://ntaforum.org/2011/harness' session='ss2'> 
 <result>pass</result> 
 <item name='title'>New Object Title</item> 
 </response> 
</iq>" 


  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 19-3 : ", v_decodedPDUcIq);
  v_decodedPDUResponse := dec_Response(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Response elem  Example 19-3 : ", v_decodedPDUResponse);


  //Example 20. An optional response item that is omitted from the response 

  s1:="<tq0006:iq xmlns:tq0006='jabber:client' type='result' from='provider@domain/1' to='requester@domain/1' id='q3'> 
 <h:query-harness xmlns:h='http://ntaforum.org/2011/harness' harness='http://example.org/example3' xml:lang='en'> 
 <h:label>Sample harness</h:label> 
 <h:tooltip>A harness for demonstration purposes only</h:tooltip>
    <h:author>author</h:author>
 <h:actionDecl name='getTitle'> 
 <h:label>Get Title</h:label> 
 <h:tooltip>Get the title for the object</h:tooltip> 
 	<h:responseDecl> 
	<h:item name='wasRaided'> 
 	<h:label>Party Was Raided</h:label> 
 	<h:tooltip>True if the party was raided by the police</h:tooltip> 
 	<h:mandatory>false</h:mandatory> 
 	<h:default>false</h:default> 
 	<h:datatype>boolean</h:datatype>
	</h:item> 
        </h:responseDecl> 
 </h:actionDecl> 
 </h:query-harness> 
</tq0006:iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 20-1 : ", v_decodedPDUcIq);



  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 20-1 : ", v_decodedPDUQuery_harness);


  //---------------------------------------------------------respponseDecl with group

  s1:="<tq0006:iq xmlns:tq0006='jabber:client' type='result' from='provider@domain/1' to='requester@domain/1' id='q3'> 
 <h:query-harness xmlns:h='http://ntaforum.org/2011/harness' harness='http://example.org/example3' xml:lang='en'> 
 <h:label>Sample harness</h:label> 
 <h:tooltip>A harness for demonstration purposes only</h:tooltip>
    <h:author>author</h:author>
 <h:actionDecl name='getTitle'> 
 <h:label>Get Title</h:label> 
 <h:tooltip>Get the title for the object</h:tooltip> 
 	<h:responseDecl> 
 	<h:group name='groupname'> 
	<h:label>Party Was Raided</h:label> 
 	<h:tooltip>True if the party was raided by the police</h:tooltip> 
 	<h:mandatory>false</h:mandatory> 
 	</h:group> 
 	</h:responseDecl> 
 </h:actionDecl> 
 </h:query-harness> 
</tq0006:iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 20-1x : ", v_decodedPDUcIq);



  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 20-1x : ", v_decodedPDUQuery_harness);












  s1:="<iq type='result' from='provider@domain/1' to='requester@domain/1' id='r4'> 
 <response xmlns='http://ntaforum.org/2011/harness' session='ss2'> 
 <result>pass</result> 
 </response> 
</iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 20-2 : ", v_decodedPDUcIq);
  v_decodedPDUResponse := dec_Response(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Response elem  Example 20-2 : ", v_decodedPDUResponse);



  //Example 21. A response item representing a list of enumerated values being returned 


  s1:="<tq0006:iq xmlns:tq0006='jabber:client' type='result' from='provider@domain/1' to='requester@domain/1' id='q3'> 
 <h:query-harness xmlns:h='http://ntaforum.org/2011/harness' harness='http://example.org/example3' xml:lang='en'> 
 <h:label>Sample harness</h:label> 
 <h:tooltip>A harness for demonstration purposes only</h:tooltip>
    <h:author>author</h:author>
 <h:actionDecl name='getTitle'> 
 <h:label>Get Title</h:label> 
 <h:tooltip>Get the title for the object</h:tooltip> 
 <h:responseDecl> 
 <h:item name='activities'> 
 <h:label>Activities</h:label> 
 <h:tooltip>A list of activities that took place at the party</h:tooltip> 
 <h:datatype>string</h:datatype> 
 <h:allowedValue label='Dancing'>dancing</h:allowedValue> 
 <h:allowedValue label='Drinking'>drinking</h:allowedValue> 
 <h:allowedValue label='Karaoke'>karaoke</h:allowedValue> 
 <h:allowedValue label='Dinner'>dinner</h:allowedValue> 
 <h:allowedValue label='Poetry Reading'>poetry</h:allowedValue> 
 <h:allowedCount> 
 <h:min>1</h:min> 
 </h:allowedCount> 
</h:item> 
     
 </h:responseDecl> 
 </h:actionDecl> 
 </h:query-harness> 
</tq0006:iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 21-1 : ", v_decodedPDUcIq);



  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 21-1 : ", v_decodedPDUQuery_harness);


  s1:="<tq0006:iq xmlns:tq0006='jabber:client'  type='result' from='provider@domain/1' to='requester@domain/1' id='q3'> 
 <h:query-harness xmlns:h='http://ntaforum.org/2011/harness' harness='http://example.org/example3' xmlns:xml=\"http://www.w3.org/XML/1998/namespace\"  xml:lang='en'> 
 <h:label>Sample harness</h:label> 
 <h:tooltip>A harness for demonstration purposes only</h:tooltip>
    <h:author>author</h:author>
 <h:actionDecl name='getTitle'> 
 <h:label>Get Title</h:label> 
 <h:tooltip>Get the title for the object</h:tooltip> 
 <h:responseDecl> 
 <h:item name='activities'> 
 <h:label>Activities</h:label> 
 <h:tooltip>A list of activities that took place at the party</h:tooltip> 
 <h:datatype>string</h:datatype> 
 <h:allowedValue label='Dancing'>dancing</h:allowedValue> 
 <h:allowedValue label='Drinking'>drinking</h:allowedValue> 
 <h:allowedValue label='Karaoke'>karaoke</h:allowedValue> 
 <h:allowedValue label='Dinner'>dinner</h:allowedValue> 
 <h:allowedValue label='Poetry Reading'>poetry</h:allowedValue> 
 <h:allowedCount> 
 <h:min>1</h:min> 
 </h:allowedCount> 
</h:item> 
    
    
 </h:responseDecl> 
 </h:actionDecl> 
 </h:query-harness> 
</tq0006:iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 21-1b : ", v_decodedPDUcIq);



  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 21-1b : ", v_decodedPDUQuery_harness);





  s1:="<iq type='result' from='provider@domain/1' to='requester@domain/1' id='r4'> 
 <response xmlns='http://ntaforum.org/2011/harness' session='ss2'> 
 <result>pass</result> 
 <item name='activities'>dancing</item> 
 <item name='activities'>drinking</item> 
 </response> 
</iq>" 



  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 21-2 : ", v_decodedPDUcIq);
  v_decodedPDUResponse := dec_Response(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Response elem  Example 21-2 : ", v_decodedPDUResponse);


  //Example 22. An event carrying a single timestamp item, with the corresponding event declaration shown first 
  s1:="<tq0006:iq xmlns:tq0006='jabber:client'  type='result' from='provider@domain/1' to='requester@domain/1' id='q4'> 
 <h:query-harness xmlns:h='http://ntaforum.org/2011/harness' harness='http://example.org/example4' xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xml:lang='en'> 
 <h:label>Sample harness</h:label> 
 <h:tooltip>A harness for demonstration purposes only</h:tooltip> 
    
        <h:author>author</h:author>
 <h:eventDecl name='raided'> 

 <h:item name='arrestCount'> 
 <h:label># Arrested</h:label> 
 <h:tooltip>The number of people arrested</h:tooltip> 
 <h:datatype>integer</h:datatype> 
 </h:item>
     <h:description>The party has been raided</h:description> 
 </h:eventDecl> 
 </h:query-harness> 
</tq0006:iq>" 

/*

  
  { harness := "http://example.org/example4", lang := "en", label_ := "Sample harness", tooltip := "A harness for demonstration purposes only", helpURI := omit, supercedes := omit, author := "author", actionDecl_list := { }, responseDecl := omit, eventDecl_list := { { name := "raided", item_list := { { name := "arrestCount", label_ := "# Arrested", tooltip := "The number of people arrested", description := omit, helpURI := omit, mandatory := omit, default_ := omit, datatype := integer_ (4), units := omit, masked := omit, isMultiline := omit, allowedValue_list := { }, allowedCount := omit } }, xmlItem_list := { }, fileItem_list := { }, description := "The party has been raided" } }, subharness_list := { } }
  { harness := "http://example.org/example4", lang := "en", label_ := "Sample harness", tooltip := "A harness for demonstration purposes only", helpURI := omit, supercedes := omit, author := "author", actionDecl_list := { }, responseDecl := omit, eventDecl_list := { { name := "raided", item_list := { }, xmlItem_list := { }, fileItem_list := { }, description := "The party has been raided" } }, subharness_list := { } }

  
  
\t<h:eventDecl name=\"raided\">
\t\t<h:item name=\"arrestCount\">
\t\t\t<h:label># Arrested</h:label>
\t\t\t<h:tooltip>The number of people arrested</h:tooltip>
\t\t\t<h:datatype>integer</h:datatype>
\t\t</h:item>
\t\t<h:description>The party has been raided</h:description>
\t</h:eventDecl>

  */
  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 22-1 : ", v_decodedPDUcIq);



  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 22-1 : ", v_decodedPDUQuery_harness);




  s1:="<message from='provider@domain/1' to='requester@domain' id='e4'> 

 <event xmlns='http://ntaforum.org/2011/harness' session='ss4' harness='http://example.org/example4' name='raided'> 
 <timestamp>2011-07-05T03:01:45-08:00</timestamp> 
 <item name='arrestCount'>21</item> 
 </event> 
</message>" 



  v_decodedPDUcMessage := dec_cMessage(char2oct(s1));

  log("Decoded Example 22-2 : ", v_decodedPDUcMessage);




  //Example 23. A session opened for interactive use, and a corresponding set of user activity notifications issued from the provider back to the requester 

  s1:="<iq type='set' to='provider@domain/1' from='requester@domain/1' id='o2'> 
 <open xmlns='http://ntaforum.org/2011/harness'  harness='http://example.org/scp'  mode='visible_and_interactive'> 
 <activationRef>38472859</activationRef> 
 </open> 
</iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));

  log("Decoded Example 23-1 : ", v_decodedPDUcIq);
  v_decodedPDUOpen := dec_Open(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Open elem Example 23-1: ", v_decodedPDUOpen);


  s1:="<iq type='result' from='provider@domain/1' to='requester@domain/1' id='o2'> 
 <response xmlns='http://ntaforum.org/2011/harness' session='saw2'> 
 <result>pass</result> 
 </response> 
</iq>" 


  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 23-2 : ", v_decodedPDUcIq);
  v_decodedPDUResponse := dec_Response(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Response elem  Example 23-2 : ", v_decodedPDUResponse);




  s1:="<message from='provider@domain/1' to='requester@domain' id='c1'> 
 <notify-action xmlns='http://ntaforum.org/2011/harness' session='saw2'> 
     <action harness='http://example.org/scp'>setFlowRate</action> 
 <started>2011-07-04T14:02:24-08:00</started> 

 <requestParameter name='rate'>50.0</requestParameter> 
 <result>pass</result> 
 <duration>31.42</duration> 
 </notify-action> 
</message>" 

  v_decodedPDUcMessage := dec_cMessage(char2oct(s1));

  log("Decoded Example 23-3 : ", v_decodedPDUcMessage);
  v_decodedPDUNotify_action := dec_Notify_action(char2oct(unichar2char(v_decodedPDUcMessage.elem_list[0])));
  log("Decoded Notify_action elem  Example 23-3 : ", v_decodedPDUNotify_action);



  s1:="<message from='provider@domain/1' to='requester@domain' id='c2'> 
 <notify-action xmlns='http://ntaforum.org/2011/harness' session='saw2'>
     <action harness='http://example.org/scp'>getStatus</action > 
 <started>2011-07-04T14:03:11-08:00</started> 

 <result>pass</result> 
 <responseItem name='isOperating'>true</responseItem> 
 </notify-action> 
</message>" 

  v_decodedPDUcMessage := dec_cMessage(char2oct(s1));

  log("Decoded Example 23-4 : ", v_decodedPDUcMessage);

  v_decodedPDUNotify_action := dec_Notify_action(char2oct(unichar2char(v_decodedPDUcMessage.elem_list[0])));
  log("Decoded Notify_action elem  Example 23-4 : ", v_decodedPDUNotify_action);


  s1:="<message from='provider@domain/1' to='requester@domain' id='c2'> 
 <notify-close xmlns='http://ntaforum.org/2011/harness' session='saw2'/> 
</message>" 



  v_decodedPDUcMessage := dec_cMessage(char2oct(s1));

  log("Decoded Example 23-5 : ", v_decodedPDUcMessage);


  v_decodedPDUNotify_close := dec_Notify_close(char2oct(unichar2char(v_decodedPDUcMessage.elem_list[0])));
  log("Decoded Notify_close elem  Example 23-5 : ", v_decodedPDUNotify_close);



  //Example 24. An XML parameter declaration, and an example of a request using that declaration 



  s1:="<tq0006:iq xmlns:tq0006='jabber:client'  type='result' from='provider@domain/1' to='requester@domain/1' id='q4'> 
 <h:query-harness xmlns:h='http://ntaforum.org/2011/harness' harness='http://example.org/example4' xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xml:lang='en'> 
 <h:label>Sample harness</h:label> 
 <h:tooltip>A harness for demonstration purposes only</h:tooltip> 
    
        <h:author>author</h:author>

 <h:actionDecl name='setConfiguration'> 

 <h:label>Set Configuration</h:label> 
 <h:tooltip>Set up the configuration using an XML</h:tooltip> 
 <h:xmlParameter name='config'> 
 <h:label>Configuration</h:label> 
 <h:element>device-configuration</h:element> 
 <h:xmlNamespace>http://example.org/schemas/sawmill/configuration/1.0</h:xmlNamespace> 
 </h:xmlParameter> 
</h:actionDecl>   
    
 </h:query-harness> 
</tq0006:iq>" 


  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 24-1 : ", v_decodedPDUcIq);



  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 24-1 : ", v_decodedPDUQuery_harness);



  s1:="<iq type='set' to='provider@domain/1' from='requester@domain/1' id='x1'> 
 <request xmlns='http://ntaforum.org/2011/harness' session='saw2'> 
 <xmlParameter name='config'> 
 <device-configuration xmlns='http://example.org/schemas/sawmill/configuration/1.0'> 
 <flowRate>24.252</flowRate> 
 <boardWidth>wide</boardWidth> 
 <timberType>softwood</timberType> 
 </device-configuration> 
 </xmlParameter> 
   <action harness='http://example.org/scp'>setConfiguration</action>   
 </request> 
</iq>" 





  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 24-2 : ", v_decodedPDUcIq);
  v_decodedPDURequest := dec_Request(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Request elem  Example 24-2: ", v_decodedPDURequest);





  //Example 25. An XML response item declaration, and a response that conforms to it 


  s1:="<tq0006:iq xmlns:tq0006='jabber:client'  type='result' from='provider@domain/1' to='requester@domain/1' id='q4'> 
 <h:query-harness xmlns:h='http://ntaforum.org/2011/harness' harness='http://example.org/example4' xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xml:lang='en'> 
 <h:label>Sample harness</h:label> 
 <h:tooltip>A harness for demonstration purposes only</h:tooltip> 
    
        <h:author>author</h:author>

<h:actionDecl name='getContract'> 
 <h:label>Get Contract</h:label> 
 <h:tooltip>Fetch the current operating contract</h:tooltip>
  <h:responseDecl>  
 <h:xmlItem name='contract'> 
 <h:label>Contract</h:label> 
 <h:element>contract</h:element> 
 <h:xmlNamespace>http://example.org/schemas/timber/contract</h:xmlNamespace> 
 </h:xmlItem>
  </h:responseDecl>  
</h:actionDecl> 
    
 </h:query-harness> 
</tq0006:iq>" 
  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 25-1 : ", v_decodedPDUcIq);



  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 25-1 : ", v_decodedPDUQuery_harness);


  s1:="<iq type='set' to='provider@domain/1' from='requester@domain/1' id='x1'> 
 <request xmlns='http://ntaforum.org/2011/harness' session='saw2'> 
 <action harness='http://example.org/scp'>getContract</action> 
 </request> 
</iq>" 



  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 25-2 : ", v_decodedPDUcIq);
  v_decodedPDURequest := dec_Request(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Request elem  Example 25-2 : ", v_decodedPDURequest);



  s1:="<iq type='result' from='provider@domain/1' to='requester@domain/1' id='x1'> 
 <response xmlns='http://ntaforum.org/2011/harness' session='saw2'> 
 <result>pass</result> 
 <xmlItem name='contract'> 
 <contract xmlns='http://example.org/schemas/timber/contract'> 
 <contractId>242-52969-22</contractId> 
 <signed>2011-04-01</signed> 
 <value currency='usd'>11425306</value> 
 </contract> 

 </xmlItem> 
 </response> 
</iq>" 



  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 25-3 : ", v_decodedPDUcIq);
  v_decodedPDUResponse := dec_Response(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Response elem  Example 25-3 : ", v_decodedPDUResponse);




  //Example 26. An action declaration that includes a file specification, and a corresponding request 


  s1:="<tq0006:iq xmlns:tq0006='jabber:client'  type='result' from='provider@domain/1' to='requester@domain/1' id='q4'> 
 <h:query-harness xmlns:h='http://ntaforum.org/2011/harness' harness='http://example.org/example4' xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xml:lang='en'> 
 <h:label>Sample harness</h:label> 
 <h:tooltip>A harness for demonstration purposes only</h:tooltip> 
    
        <h:author>author</h:author>

<h:actionDecl name='addProfiles'> 
 <h:label>Add Profiles</h:label> 
 <h:tooltip>Add one or more operating profile documents into the working set</h:tooltip> 
 <h:file name='profile'> 
 <h:label>Operating Profile</h:label> 
 <h:allowedCount> 
 <h:min>1</h:min> 
 <h:max>10</h:max> 
 </h:allowedCount> 
 <h:allowedFileExtension>pro</h:allowedFileExtension> 
 <h:allowedFileExtension>prox</h:allowedFileExtension> 
 </h:file> 
</h:actionDecl> 
    
 </h:query-harness> 
</tq0006:iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 26-1 : ", v_decodedPDUcIq);



  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 26-1 : ", v_decodedPDUQuery_harness);


  s1:="<h:request xmlns:h='http://ntaforum.org/2011/harness' session='saw2'>
<h:file name='profile'>
<h:filename>primary.pro</h:filename>
</h:file>
<h:file name='profile'>
<h:filename>secondary.prox</h:filename>
</h:file>
<h:action harness='http://example.org/scp'/>
</h:request>"

  v_decodedPDURequest := dec_Request(char2oct(s1));
  log("Decoded Request elem  Example 26-2a : ", v_decodedPDURequest);



/*
  Decoded Request elem  Example 26-2a : 
{ session := "saw2", context := omit, 
parameter_list := { }, 
xmlParameter_list := { }, 
file_list := 
  { { name := "profile", filename := "primary.pro" }, 
{ name := "profile", filename := "secondary.prox" } }, 
  group_list := { }, 
  timestamp := omit, 
action_ := { harness := "http://example.org/scp" } }
  */

  s1:="<iq type='set' to='provider@domain/1' from='requester@domain/1' id='f1'> 
 <request xmlns='http://ntaforum.org/2011/harness' session='saw2'> 

 <file name='profile'> 
 <filename>primary.pro</filename> 
 </file> 
 <file name='profile'> 
 <filename>secondary.prox</filename> 
 </file>
     <action  harness='http://example.org/scp'>addProfile</action> 
 </request> 
</iq>" 


  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 26-2 : ", v_decodedPDUcIq);
  v_decodedPDURequest := dec_Request(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Request elem  Example 26-2 : ", v_decodedPDURequest);






  //*******************************************************************************************************************************************
  //
  //********************************************************************************************************************************************


  v_encodedPDURequest := enc_Request(valueof(t_Request));
  v_decodedPDURequest := dec_Request(v_encodedPDURequest);


  log("Encoded Request : ", v_encodedPDURequest);
  log("Decoded Request : ", v_decodedPDURequest);


  //*******************************************************************************************************************************************
  //
  //********************************************************************************************************************************************



  //Example 27. A response declaration that includes a file specification, and a corresponding response. 



  s1:="<tq0006:iq xmlns:tq0006='jabber:client'  type='result' from='provider@domain/1' to='requester@domain/1' id='q4'> 
 <h:query-harness xmlns:h='http://ntaforum.org/2011/harness' harness='http://example.org/example4' xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xml:lang='en'> 
 <h:label>Sample harness</h:label> 
 <h:tooltip>A harness for demonstration purposes only</h:tooltip> 
    
        <h:author>author</h:author>

<h:actionDecl name='getProfiles'> 
 <h:label>Get Profiles</h:label> 
 <h:tooltip>Fetch operating profile documents in the working set</h:tooltip> 
 <h:file name='profile'> 
 <h:label>Operating Profile</h:label> 
 <h:allowedCount> 
 <h:min>1</h:min> 
 </h:allowedCount>
<h:allowedFileExtension>pro</h:allowedFileExtension> 
<h:allowedFileExtension>prox</h:allowedFileExtension> 
 </h:file> 
</h:actionDecl> 
    
 </h:query-harness> 
</tq0006:iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 26-1 : ", v_decodedPDUcIq);



  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 27-1 : ", v_decodedPDUQuery_harness);



  s1:="<iq type='set' to='provider@domain/1' from='requester@domain/1' id='f2'> 
 <request xmlns='http://ntaforum.org/2011/harness' session='saw2'> 
 <action harness='http://example.org/scp'>getProfiles</action> 
 </request> 
</iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 27-2 : ", v_decodedPDUcIq);
  v_decodedPDURequest := dec_Request(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Request elem  Example 27-2 : ", v_decodedPDURequest);




  s1:="<iq type='result' from='provider@domain/1' to='requester@domain/1' id='f2'> 
 <response xmlns='http://ntaforum.org/2011/harness' session='saw2'> 
 <result>pass</result> 
 <file name='profile'> 
 <filename>primary.pro</filename> 
 </file> 
 <file name='profile'> 
 <filename>secondary.prox</filename> 
 </file> 
 </response> 
</iq>" 





  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 27-3 : ", v_decodedPDUcIq);
  v_decodedPDUResponse := dec_Response(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Response elem  Example 27-3 : ", v_decodedPDUResponse);



  //Example 28. An action declaration that includes a request group, and a corresponding request 



  s1:="<tq0006:iq xmlns:tq0006='jabber:client'  type='result' from='provider@domain/1' to='requester@domain/1' id='q4'> 
 <h:query-harness xmlns:h='http://ntaforum.org/2011/harness' harness='http://example.org/example4' xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xml:lang='en'> 
 <h:label>Sample harness</h:label> 
 <h:tooltip>A harness for demonstration purposes only</h:tooltip> 
    
        <h:author>author</h:author>

<h:actionDecl name='setPermissions'> 
 <h:label>Set Operator Permissions</h:label> 
 <h:group name='permissionRecord'> 
 <h:label>Permission Record</h:label> 
 <h:allowedCount> 
 <h:min>0</h:min> 
 </h:allowedCount> 
 <h:parameterKeyName>userid</h:parameterKeyName> 
 <h:parameter name='userid'> 
 <h:label>User ID</h:label> 
 </h:parameter> 
 <h:parameter name='privilege'> 
 <h:label>Privilege Level</h:label> 
 <h:allowedValue label='Read only'>read-only</h:allowedValue> 
 <h:allowedValue label='Normal'>normal</h:allowedValue> 
 <h:allowedValue label='Administrator'>admin</h:allowedValue> 
 </h:parameter> 
 </h:group> 
</h:actionDecl> 
    
 </h:query-harness> 
</tq0006:iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 28-1 : ", v_decodedPDUcIq);



  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 28-1 : ", v_decodedPDUQuery_harness);


  //*******************************************************************************************************************************************
  //
  //********************************************************************************************************************************************


  v_encodedPDURequest := enc_Request(valueof(t_Request1));
  v_decodedPDURequest := dec_Request(v_encodedPDURequest);


  log("Encoded Request1 : ", v_encodedPDURequest);
  log("Decoded Request1 : ", v_decodedPDURequest);



  //*******************************************************************************************************************************************
  //
  //********************************************************************************************************************************************




  s1:="<iq type='set' to='provider@domain/1' from='requester@domain/1' id='r11'> 
 <request xmlns='http://ntaforum.org/2011/harness' session='saw2'> 

 <group name='permissionRecord'> 
 <parameter name='userid'>jschmoe</parameter> 
 <parameter name='privilege'>normal</parameter> 
 </group> 
 <group name='permissionRecord'> 
 <parameter name='userid'>jdoe</parameter> 
 <parameter name='privilege'>admin</parameter> 
 </group> 
 <group name='permissionRecord'> 
 <parameter name='userid'>bschwedchuk</parameter> 
 <parameter name='privilege'>normal</parameter> 
 </group> 
     <action harness='http://example.org/scp'>setPermissions</action> 
 </request> 
</iq>" 


  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 28-2 : ", v_decodedPDUcIq);
  v_decodedPDURequest := dec_Request(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Request elem  Example 28-2 : ", v_decodedPDURequest);




  //Example 29. A response declaration that includes a response group representing a table, and a corresponding  response 


  s1:="<tq0006:iq xmlns:tq0006='jabber:client'  type='result' from='provider@domain/1' to='requester@domain/1' id='q4'> 
  <h:query-harness xmlns:h='http://ntaforum.org/2011/harness' harness='http://example.org/example4' xmlns:xml='http://www.w3.org/XML/1998/namespace' xml:lang='en'> 
 <h:label>Sample harness</h:label> 
 <h:tooltip>A harness for demonstration purposes only</h:tooltip> 
    
        <h:author>author</h:author>
<h:actionDecl name='addProfiles'> 
 <h:label>Add Profiles</h:label> 
 <h:tooltip>Add one or more operating profile documents into the working set</h:tooltip> 

<h:responseDecl> 
 <h:group name='log'> 
 <h:label>Saw Logs</h:label> 

 <h:allowedCount> 
 <h:min>0</h:min> 
 </h:allowedCount> 
 <h:itemKeyName>timestamp</h:itemKeyName> 
 <h:item name='timestamp'> 
 <h:label>Timestamp</h:label> 
 <h:datatype>dateTime</h:datatype> 
 </h:item> 
 <h:item name='diameter'> 
 <h:label>Diameter</h:label> 
 <h:datatype>decimal</h:datatype> 
 <h:units>inches</h:units> 
 </h:item> 
 <h:item name='length'> 
 <h:label>Length</h:label> 
 <h:datatype>decimal</h:datatype> 
 <h:units>feet</h:units> 
 </h:item> 
 </h:group> 
</h:responseDecl> 
   </h:actionDecl>  
 </h:query-harness>  
</tq0006:iq>" 

  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 29-1 : ", v_decodedPDUcIq);



  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 29-1 : ", v_decodedPDUQuery_harness);



  s1:="<iq type='set' to='provider@domain/1' from='requester@domain/1' id='r12'> 
 <request xmlns='http://ntaforum.org/2011/harness' session='saw2'> 
 <action harness='http://example.org/scp'>getLogTable</action> 
 </request> 
</iq>" 


  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 29-2 : ", v_decodedPDUcIq);
  v_decodedPDURequest := dec_Request(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Request elem  Example 29-2 : ", v_decodedPDURequest);



  s1:="<iq type='result' from='provider@domain/1' to='requester@domain/1' id='r12'> 
 <response xmlns='http://ntaforum.org/2011/harness' session='saw2'> 
 <result>pass</result> 
 <group name='log'> 
 <item name='timestamp'>2011-07-04T15:39:01</item> 
 <item name='diameter'>14.24</item> 
 <item name='length'>41.5</item> 
 </group> 
 <group name='log'> 
 <item name='timestamp'>2011-07-04T15:43:19</item> 
 <item name='diameter'>13.51</item> 
 <item name='length'>61.3</item> 
 </group> 
 <group name='log'> 
 <item name='timestamp'>2011-07-04T15:45:33</item> 
 <item name='diameter'>12.97</item> 
 <item name='length'>50.4</item> 
 </group> 
 </response> 
</iq>" 


  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 29-3 : ", v_decodedPDUcIq);
  v_decodedPDUResponse := dec_Response(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Response elem  Example 29-3 : ", v_decodedPDUResponse);



  //Example 30. A chain of causal requests through a set of providers, each carrying context information 
  s1:="<iq type='set' from='bill@domain/1' to='bob@domain/1' id='rq1'> 
 <request xmlns='http://ntaforum.org/2011/harness' session='bob1'> 
 <action  harness='http://example.org/scp'>reset</action> 
 </request> 
</iq>" 


  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 30-1 : ", v_decodedPDUcIq);
  v_decodedPDURequest := dec_Request(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Request elem  Example 30-1 : ", v_decodedPDURequest);

  //*******************************************************************************************************************************************
  //
  //********************************************************************************************************************************************


  v_encodedPDURequest := enc_Request(valueof(t_Request2));
  v_decodedPDURequest := dec_Request(v_encodedPDURequest);


  log("Encoded Request2 : ", v_encodedPDURequest);
  log("Decoded Request2: ", v_decodedPDURequest);



  v_encodedPDURequest := enc_Request(valueof(t_Request3));
  v_decodedPDURequest := dec_Request(v_encodedPDURequest);


  log("Encoded Request3 : ", v_encodedPDURequest);
  log("Decoded Request3: ", v_decodedPDURequest);


  //*******************************************************************************************************************************************
  //
  //********************************************************************************************************************************************



  s1:="<iq type='set' from='bob@domain/1' to='joe@domain/1' id='rq2'> 
 <h:request xmlns:h='http://ntaforum.org/2011/harness' session='joe1'> 
 <h:context harness='http://example.org/bobcontrol' session='bob1'> 
 <h:details> 
 <bob-context xmlns='http://example.org/bobcontext'> 
 <software>BobSoft</software> 
 <version>2.1.1.5</version> 
 </bob-context>
  </h:details>  
    <h:context entity='bill@domain/1' requestId='rq1'> 
    <h:details/> 
  </h:context> 
 </h:context> 
     <h:action harness='http://example.org/scp'>resetDevice</h:action> 
 </h:request> 
</iq>" 




  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 30-2 : ", v_decodedPDUcIq);
  v_decodedPDURequest := dec_Request(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Request elem  Example 30-2 : ", v_decodedPDURequest);


  s1:="<iq type='set' from='joe@domain/1' to='jerry@domain/1' id='rq3'> 
 <h:request xmlns:h='http://ntaforum.org/2011/harness' session='jerry1'> 

 <h:context harness='http://example.org/joedevice' session='joe1'>
 <h:details/>   
 <h:context entity='bob@domain/1'  harness='http://example.org/bobcontrol'  session='bob1'  requestId='rq2'> 
 <h:details> 
    <bob-context xmlns='http://example.org/bobcontext'> 
    <software>BobSoft</software> 
    <version>2.1.1.5</version> 
    </bob-context> 
 </h:details> 
 <h:context entity='bill@domain/1' requestId='rq1'>
 <h:details/>   
 </h:context>   
 </h:context > 
 </h:context> 
     <h:action harness='http://example.org/scp'>resetPort</h:action>     
 </h:request> 
</iq>" 






  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 30-3 : ", v_decodedPDUcIq);
  v_decodedPDURequest := dec_Request(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Request elem  Example 30-3 : ", v_decodedPDURequest);








  //Example 31. A simple harness query and response that only includes a reference to a nested harness 
  s1:="<iq type='get' to='provider@domain/1' from='requester@domain/1' id='q6'> 
 <query-harness xmlns='http://ntaforum.org/2011/harness' harness='http://example.org/h6' xml:lang='en'> 
    	<label>Sample harness</label>
	<author>author</author> 
</query-harness>
</iq>" 


  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 31-1 : ", v_decodedPDUcIq);


  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 31-1 : ", v_decodedPDUQuery_harness);




  s1:="<iq type='result' from='provider@domain/1' to='requester@domain/1' id='q6'> 
 <query-harness xmlns='http://ntaforum.org/2011/harness'  harness='http://example.org/h6'   xml:lang='en'> 
 <label>Mail Labeling</label> 
 <tooltip>A harness for labeling of mail</tooltip> 
           <author>author</author>

 <subharness>http://example.org/harnesses/addressing</subharness> 
 </query-harness> 
</iq>" 




  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 31-2 : ", v_decodedPDUcIq);



  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 31-2 : ", v_decodedPDUQuery_harness);



  //Example 32. A query for details on a nested harness 
  s1:="<iq type='get' to='provider@domain/1' from='requester@domain/1' id='q7'> 
 <query-harness xmlns='http://ntaforum.org/2011/harness' harness='http://example.org/harnesses/addressing'  xml:lang='en'>
      	<label>Sample harness</label>
	<author>author</author> 
</query-harness>
</iq>" 


  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 32-1 : ", v_decodedPDUcIq);


  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 32-1 : ", v_decodedPDUQuery_harness);

  //*********************************************************************************************************************************

  v_encodedPDUIq := enc_cIq(valueof(t_Iq_Query_harness_6));
  v_decodedPDUcIq := dec_cIq(v_encodedPDUIq);


  log("Encoded t_Iq_Query_harness_6 : ", v_encodedPDUIq);
  log("Decoded t_Iq_Query_harness_6 : ", v_decodedPDUcIq);

  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem  in  t_Iq_Query_harness_6 : ", v_decodedPDUQuery_harness);

  v_encodedPDUQuery_harness := enc_Query_harness(v_decodedPDUQuery_harness);
  log("encoded Query_harness elem  in  t_Iq_Query_harness_6 : ", v_encodedPDUQuery_harness);





  v_encodedPDUIq := enc_cIq(valueof(t_Iq_Query_harness_7));
  v_decodedPDUcIq := dec_cIq(v_encodedPDUIq);


  log("Encoded t_Iq_Query_harness_7 : ", v_encodedPDUIq);
  log("Decoded t_Iq_Query_harness_7 : ", v_decodedPDUcIq);

  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem  in  t_Iq_Query_harness_7 : ", v_decodedPDUQuery_harness);

  v_encodedPDUQuery_harness := enc_Query_harness(v_decodedPDUQuery_harness);
  log("encoded Query_harness elem  in  t_Iq_Query_harness_7: ", v_encodedPDUQuery_harness);



  //*********************************************************************************************************************************
  s1:="<tq0006:iq xmlns:tq0006='jabber:client' xmlns:xml='http://www.w3.org/XML/1998/namespace' from='provider@domain/1' id='q7' xml:lang='en' to='requester@domain/1' type='result'>
 <h:query-harness xmlns:h='http://ntaforum.org/2011/harness' xmlns:xml='http://www.w3.org/XML/1998/namespace' harness='http://example.org/harnesses/addressing' xml:lang='en'>
<h:label>Postal Addressing</h:label>
<h:tooltip>A set of actions and events related to mail addressing</h:tooltip>
<h:author>author</h:author>
    
<h:actionDecl name='getAddress'>
<h:label>Get Address</h:label>
<h:tooltip>Fetch the current mailing address</h:tooltip>
<h:responseDecl>
<h:item name='streetAddress'>
<h:label>Street</h:label>
<h:tooltip>Street Address</h:tooltip>
<h:allowedCount>
<h:min>1</h:min>
</h:allowedCount>
</h:item>
<h:item name='city'>
<h:label>City</h:label>
<h:tooltip>City name</h:tooltip>
</h:item>
<h:item name='state'>
<h:label>State</h:label>
<h:tooltip>State name</h:tooltip>
</h:item>
<h:item name='postalCode'>
<h:label>Postal Code</h:label>
<h:tooltip>5 or 9 digit postal code</h:tooltip>
</h:item>
</h:responseDecl>
</h:actionDecl>
    
<h:actionDecl name='setAddress'>
<h:label>Set Address</h:label>
<h:tooltip>Update the current mailing address</h:tooltip>
    
<h:parameter name='streetAddress'>
<h:label>Street</h:label>
<h:tooltip>One or more lines of street address</h:tooltip>
<h:allowedCount>
<h:min>1</h:min>
</h:allowedCount>
</h:parameter>
<h:parameter name='city'>
<h:label>City</h:label>
<h:tooltip>City name</h:tooltip>
</h:parameter>
<h:parameter name='state'>
<h:label>State</h:label>
<h:tooltip>State name</h:tooltip>
<h:datatype>decimal</h:datatype>
</h:parameter>
<h:parameter name='postalCode'>
<h:label>Postal Code</h:label>
<h:tooltip>5 or 9 digit postal code</h:tooltip>
<h:datatype>decimal</h:datatype>
<h:allowedPattern>[0-9]{5}(\\-[0-9]{4})?</h:allowedPattern>
</h:parameter>
    
</h:actionDecl>
    
<h:eventDecl name='addressChanged'>
<h:description>The current address has changed</h:description>
</h:eventDecl>
</h:query-harness>

</tq0006:iq>"







  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 32-2 : ", v_decodedPDUcIq);


  v_decodedPDUQuery_harness := dec_Query_harness(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Query_harness elem Example 32-2 : ", v_decodedPDUQuery_harness);


  //Example 33. A request using an action defined in an a nested harness 
  s1:="<iq type='set' to='provider@domain/1' from='requester@domain/1' id='r10'> 
 <request xmlns='http://ntaforum.org/2011/harness' session='post1'> 
 <action harness='http://example.org/harnesses/addressing'>getAddress</action> 
 </request> 
</iq>" 


  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 33-1 : ", v_decodedPDUcIq);
  v_decodedPDURequest := dec_Request(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Request elem  Example 33-1 : ", v_decodedPDURequest);





  s1:="<iq type='result' from='provider@domain/1' to='requester@domain/1' id='r10'> 
 <response xmlns='http://ntaforum.org/2011/harness' session='post1'> 
 <result>pass</result> 
 <item name='streetAddress'>515 Maple St.</item> 
 <item name='streetAddress'>Suite 5100</item> 
 <item name='city'>Centerville</item> 
 <item name='state'>Kansas</item> 
 <item name='postalCode'>51105-3311</item> 
 </response> 
</iq>" 



  v_decodedPDUcIq := dec_cIq(char2oct(s1));
  log("Decoded Example 33-2 : ", v_decodedPDUcIq);
  v_decodedPDUResponse := dec_Response(char2oct(unichar2char(v_decodedPDUcIq.elem)));
  log("Decoded Response elem  Example 33-2 : ", v_decodedPDUResponse);



  //Example 34. An event notification for an event defined in a nested harness 
  s1:="<message from='provider@domain/1' to='requester@domain' id='e4'> 
 <event xmlns='http://ntaforum.org/2011/harness' session='ss4' name='addressChanged' harness='http://example.org/harnesses/addressing'> 
 <timestamp>2011-07-05T09:22:31-08:00</timestamp> 
 </event> 
</message>" 

  v_decodedPDUcMessage := dec_cMessage(char2oct(s1));

  log("Decoded Example 34 : ", v_decodedPDUcMessage);


  //************************************************************************************************************

  s1:="<iq type=\"result\" id=\"reg_publish_tool_info\" from=\"pubsub.ttcn.com\" to=\"toaster@ttcn.com/1\"/>"

  v_decodedPDUsIq := dec_sIq(char2oct(s1));
  log("Decoded shortform Iq : ", v_decodedPDUsIq);

  //************************************************************************************************************

  template http_jabber_org_protocol_pubsub_owner.Pubsub t_pubsub_owner:=

  {
    choice := {
      configure := {
        node := "ntaf.tools",
        choice := {
          x := {
            type_ := form ,

            title := "Node configuration",
            instructions_list := { },
            field_list := { },
            reported := omit,
            item_list := { }
          }
        }
      }
    }
  }



  template jabber_x_data.X t_X:=


  {
    type_ := form ,
    title := "Node configuration",
    instructions_list := {"Please provide the configuration for node 'ntaf.tools'." },
    field_list := { 


      {
        label_ :=omit,
        type_ :=hidden,
        var_ :="FORM_TYPE",
        desc :=omit,
        required :=omit,
        value_list:={"http://jabber.org/protocol/pubsub#node_config"},
        option_list:={}
      }






    },
    reported := omit,
    item_list := { }
  }





  var http_jabber_org_protocol_pubsub_owner.Pubsub v_pubsub_owner;
  var jabber_x_data.X v_X;

  s1:="<pubsub xmlns='http://jabber.org/protocol/pubsub#owner'>\n<configure node='ntaf.tools'>
		<x xmlns='jabber:x:data' type='form'>
			<title>Node configuration</title>
			<instructions>Please provide the configuration for node 'ntaf.tools'.</instructions>
			<field var='FORM_TYPE' type='hidden'>
				<value>http://jabber.org/protocol/pubsub#node_config</value>
			</field>
			<field var='pubsub#title' type='text-single' label='Short name for the node'>
				<value/>
			</field>
			<field var='pubsub#description' type='text-single' label='Description of the node'>
				<value/>
			</field>
			<field var='pubsub#node_type' type='text-single' label='Whether the node is a leaf (default) or a collection'>
				<value>collection</value>
			</field>
			<field var='pubsub#collection' type='text-single' label='The collection with which a node is affiliated.'/>
			<field var='pubsub#subscribe' type='boolean' label='Allow subscriptions to node'>
				<value>1</value>
			</field>
			<field var='pubsub#subscription_required' type='boolean' label='New subscriptions require configuration'>
				<value>0</value>
			</field>
			<field var='pubsub#deliver_payloads' type='boolean' label='Deliver payloads with event notifications'>
				<value>1</value>
			</field>
			<field var='pubsub#notify_config' type='boolean' label='Notify subscribers when the node configuration changes'>
				<value>1</value>
			</field>
			<field var='pubsub#notify_delete' type='boolean' label='Notify subscribers when the node is deleted'>
				<value>1</value>
			</field>
			<field var='pubsub#notify_retract' type='boolean' label='Notify subscribers when items are removed from the node'>
				<value>1</value>
			</field>
			<field var='pubsub#presence_based_delivery' type='boolean' label='Only deliver notifications to available users'>
				<value>0</value>
			</field>
			<field var='pubsub#type' type='text-single' label='Type of payload data to be provided at this node'>
				<value/>
			</field>
			<field var='pubsub#body_xslt' type='text-single' label='Message body XSLT'>
				<value/>
			</field>
			<field var='pubsub#dataform_xslt' type='text-single' label='Payload XSLT'>
				<value/>
			</field>
			<field var='pubsub#access_model' type='list-single' label='Specify who may subscribe and retrieve items'>
    				<value>open</value>
				<option>
					<value>authorize</value>
				</option>
				<option>
					<value>open</value>
				</option>
				<option>
					<value>presence</value>
				</option>
				<option>
					<value>roster</value>
				</option>
				<option>
					<value>whitelist</value>
				</option>

			</field>
			<field var='pubsub#publish_model' type='list-single' label='Publisher model'>
    				<value>open</value>
				<option>
					<value>publishers</value>
				</option>
				<option>
					<value>subscribers</value>
				</option>
				<option>
					<value>open</value>
				</option>

			</field>
			<field var='pubsub#roster_groups_allowed' type='list-multi' label='Roster groups allowed to subscribe'/>
			<field var='pubsub#contact' type='jid-multi' label='People to contact with questions'/>
			<field var='pubsub#language' type='text-single' label='Default language'>
				<value>English</value>
			</field>
			<field var='pubsub#owner' type='jid-multi' label='Node owners'>
				<value>toaster@esekilxxen1845.rnd.ericsson.se</value>
			</field>
			<field var='pubsub#publisher' type='jid-multi' label='Node publishers'/>
			<field var='pubsub#itemreply' type='list-single' label='Select entity that should receive replies to items'>
				<value>owner</value>
			</field>
			<field var='pubsub#replyroom' type='jid-multi' label='Multi-user chat room to which replies should be sent'/>
			<field var='pubsub#replyto' type='jid-multi' label='Users to which replies should be sent'/>
			<field var='pubsub#leaf_node_association_policy' type='list-single' label='Who may associate leaf nodes with a collection'>
    				<value>all</value>
				<option label='Anyone may associate leaf nodes with the collection'>
					<value>all</value>
				</option>
				<option label='Only collection node owners may associate leaf nodes with the collection'>
					<value>owners</value>
				</option>
				<option label='Only those on a whitelist may associate leaf nodes with the collection'>
					<value>whitelist</value>
				</option>

			</field>
			<field var='pubsub#children_association_policy' type='list-single' label='Who may associate leaf nodes with a collection'>
    				<value>all</value>
				<option label='Anyone may associate leaf nodes with the collection'>
					<value>all</value>
				</option>
				<option label='Only collection node owners may associate leaf nodes with the collection'>
					<value>owners</value>
				</option>
				<option label='Only those on a whitelist may associate leaf nodes with the collection'>
					<value>whitelist</value>
				</option>

			</field>
			<field var='pubsub#leaf_node_association_whitelist' type='jid-multi' label='The list of JIDs that may associate leaf nodes with a collection'/>
			<field var='pubsub#children_association_whitelist' type='jid-multi' label='The list of JIDs that may associate leaf nodes with a collection'/>
			<field var='pubsub#leaf_nodes_max' type='text-single' label='The maximum number of child nodes that can be associated with a collection'>
				<value>-1</value>
			</field>
			<field var='pubsub#chilren_max' type='text-single' label='The maximum number of child nodes that can be associated with a collection'>
				<value>-1</value>
			</field>
			<field var='pubsub#children' type='text-multi' label='The child nodes (leaf or collection) associated with a collection'>
				<value>toaster@esekilxxen1845.rnd.ericsson.se/1</value>
				<value>titan0@esekilxxen1845.rnd.ericsson.se/1</value>
			</field>
		</x>
	</configure>\n</pubsub>";



  v_pubsub_owner:=dec_Pubsub_owner(char2oct(s1));
  log("v_pubsub_owner>>>>>",v_pubsub_owner);   


  var charstring  s2:="<x xmlns='jabber:x:data' type='form'>
      	<title>Node configuration</title>
	<!-- instructions>Please provide the configuration for node 'ntaf.tools'.</instructions -->
	<field var='FORM_TYPE' type='hidden'>
		<value>http://jabber.org/protocol/pubsub#node_config</value>
	</field>
	<field var='pubsub#title' type='text-single' label='Short name for the node'>
		<value/>
	</field>
	<field var='pubsub#description' type='text-single' label='Description of the node'>
		<value/>
	</field>
	<field var='pubsub#node_type' type='text-single' label='Whether the node is a leaf (default) or a collection'>
		<value>collection</value>
	</field>
	<field var='pubsub#collection' type='text-single' label='The collection with which a node is affiliated.'/>
	<field var='pubsub#subscribe' type='boolean' label='Allow subscriptions to node'>
		<value>1</value>
	</field>
	<field var='pubsub#subscription_required' type='boolean' label='New subscriptions require configuration'>
		<value>0</value>
	</field>
	<field var='pubsub#deliver_payloads' type='boolean' label='Deliver payloads with event notifications'>
		<value>1</value>
	</field>
	<field var='pubsub#notify_config' type='boolean' label='Notify subscribers when the node configuration changes'>
		<value>1</value>
	</field>
	<field var='pubsub#notify_delete' type='boolean' label='Notify subscribers when the node is deleted'>
		<value>1</value>
	</field>
	<field var='pubsub#notify_retract' type='boolean' label='Notify subscribers when items are removed from the node'>
		<value>1</value>
	</field>
	<field var='pubsub#presence_based_delivery' type='boolean' label='Only deliver notifications to available users'>
		<value>0</value>
	</field>
	<field var='pubsub#type' type='text-single' label='Type of payload data to be provided at this node'>
		<value/>
	</field>
	<field var='pubsub#body_xslt' type='text-single' label='Message body XSLT'>
		<value/>
	</field>
	<field var='pubsub#dataform_xslt' type='text-single' label='Payload XSLT'>
		<value/>
	</field>
	<field var='pubsub#access_model' type='list-single' label='Specify who may subscribe and retrieve items'>
		<value>open</value>
		<option>
			<value>authorize</value>
		</option>
		<option>
			<value>open</value>
		</option>
		<option>
			<value>presence</value>
		</option>
		<option>
			<value>roster</value>
		</option>
		<option>
			<value>whitelist</value>
		</option>

	</field>
	<field var='pubsub#publish_model' type='list-single' label='Publisher model'>
		<value>open</value>
		<option>
			<value>publishers</value>
		</option>
		<option>
			<value>subscribers</value>
		</option>
		<option>
			<value>open</value>
		</option>

	</field>
	<field var='pubsub#roster_groups_allowed' type='list-multi' label='Roster groups allowed to subscribe'/>
	<field var='pubsub#contact' type='jid-multi' label='People to contact with questions'/>
	<field var='pubsub#language' type='text-single' label='Default language'>
		<value>English</value>
	</field>
	<field var='pubsub#owner' type='jid-multi' label='Node owners'>
		<value>toaster@esekilxxen1845.rnd.ericsson.se</value>
	</field>
	<field var='pubsub#publisher' type='jid-multi' label='Node publishers'/>
	<field var='pubsub#itemreply' type='list-single' label='Select entity that should receive replies to items'>
		<value>owner</value>
	</field>
	<field var='pubsub#replyroom' type='jid-multi' label='Multi-user chat room to which replies should be sent'/>
	<field var='pubsub#replyto' type='jid-multi' label='Users to which replies should be sent'/>
	<field var='pubsub#leaf_node_association_policy' type='list-single' label='Who may associate leaf nodes with a collection'>
		<value>all</value>
		<option label='Anyone may associate leaf nodes with the collection'>
			<value>all</value>
		</option>
		<option label='Only collection node owners may associate leaf nodes with the collection'>
			<value>owners</value>
		</option>
		<option label='Only those on a whitelist may associate leaf nodes with the collection'>
			<value>whitelist</value>
		</option>

	</field>
	<field var='pubsub#children_association_policy' type='list-single' label='Who may associate leaf nodes with a collection'>
		<value>all</value>
		<option label='Anyone may associate leaf nodes with the collection'>
			<value>all</value>
		</option>
		<option label='Only collection node owners may associate leaf nodes with the collection'>
			<value>owners</value>
		</option>
		<option label='Only those on a whitelist may associate leaf nodes with the collection'>
			<value>whitelist</value>
		</option>

	</field>
	<field var='pubsub#leaf_node_association_whitelist' type='jid-multi' label='The list of JIDs that may associate leaf nodes with a collection'/>
	<field var='pubsub#children_association_whitelist' type='jid-multi' label='The list of JIDs that may associate leaf nodes with a collection'/>
	<field var='pubsub#leaf_nodes_max' type='text-single' label='The maximum number of child nodes that can be associated with a collection'>
		<value>-1</value>
	</field>
	<field var='pubsub#chilren_max' type='text-single' label='The maximum number of child nodes that can be associated with a collection'>
		<value>-1</value>
	</field>
	<field var='pubsub#children' type='text-multi' label='The child nodes (leaf or collection) associated with a collection'>
		<value>toaster@esekilxxen1845.rnd.ericsson.se/1</value>
		<value>titan0@esekilxxen1845.rnd.ericsson.se/1</value>
	</field>
</x>"





  v_X:=dec_X(char2oct(s2));
  log("v_X>>>>>",v_X);   



  s1:=oct2char(enc_X(valueof(t_X)));

  log("s1>>>>>         ",s1);   





  s1:="<iq xmlns='jabber:server' type=\"result\" id=\"create_root_coll_node\" from=\"pubsub.esekilxxen1845.rnd.ericsson.se\" to=\"toaster@esekilxxen1845.rnd.ericsson.se/1\"/>";
  log("decoded ",dec_sIq(char2oct(s1)))

  s1:="<iq type='error' id='create_tool_node' from='pubsub.esekilxxen1845.rnd.ericsson.se' to='toaster@esekilxxen1845.rnd.ericsson.se/1'>
	<tq0001:pubsub xmlns:tq0001='http://jabber.org/protocol/pubsub' xmlns:xdata='jabber:x:data' xmlns:tq0000='jabber:x:data'>
		<tq0001:create node='toaster@esekilxxen1845.rnd.ericsson.se/1'/>
		<tq0001:configure>
			<xdata:x type='submit'>
				<tq0000:field var='pubsub#node_type'>
					<tq0000:value>leaf</tq0000:value>
				</tq0000:field>
				<tq0000:field var='pubsub#collection'>
					<tq0000:value>ntaf.tools</tq0000:value>
				</tq0000:field>
				<tq0000:field var='pubsub#children'>
					<tq0000:value/>
				</tq0000:field>
				<tq0000:field type='boolean' var='pubsub#deliver_payloads'>
					<tq0000:value>1</tq0000:value>
				</tq0000:field>
				<tq0000:field type='boolean' var='pubsub#notify_retract'>
					<tq0000:value>1</tq0000:value>
				</tq0000:field>
				<tq0000:field type='boolean' var='pubsub#persist_items'>
					<tq0000:value>1</tq0000:value>
				</tq0000:field>
				<tq0000:field type='boolean' var='pubsub#max_items'>
					<tq0000:value>1</tq0000:value>
				</tq0000:field>
				<tq0000:field type='list-single' var='pubsub#access_model'>
					<tq0000:value>open</tq0000:value>
				</tq0000:field>
				<tq0000:field type='list-single' var='pubsub#publish_model'>
					<tq0000:value>publishers</tq0000:value>
				</tq0000:field>
			</xdata:x>
		</tq0001:configure>
	</tq0001:pubsub>
	<error code='406' type='modify'>
		<not-acceptable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
	</error>
</iq>"


  log("decoded ",dec_sIq(char2oct(s1)))   



  s1:="<pubsub xmlns='http://jabber.org/protocol/pubsub'>
	<items node='toaster@esekilxxen1845.rnd.ericsson.se/1'>
		<item id='toaster@esekilxxen1845.rnd.ericsson.se/1#always_on'>
			<entry xmlns='http://ntaforum.org/2011/registry'>
				<tooltype>http://Example.org/tools/ttcn/titan</tooltype>
				<version>1.2.3.4567</version>
				<harness xmlns='http://ntaforum.org/2011/harness' name='http://Example.org/ttcn/titan'>
					<supportedMode>invisible_and_automated</supportedMode>
					<supportedMode>visible_and_interactive</supportedMode>
				</harness>
				<documentation xml:lang='en'>
					<vendor>TTCNTestTools</vendor>
					<name>TCC</name>
					<description>Automated Toaster</description>
                                        <helpUri>http://someURI</helpUri>
				</documentation>
    				<published>2013-03-11T11:30:02-08:00</published>
				<location>
					<workspaceID>0d9374c4-aa1e-47f5-8b61-98bae0ad8ca1</workspaceID>
					<ipv4>127.0.0.1</ipv4>
					<hostname>localhost</hostname>
					<description>1stfloor,bldg.A,BudapestHQ</description>
				</location>
			</entry>
		</item>
	</items>
</pubsub>"

  log("decoded ",dec_Pubsub(char2oct(s1)))   




  var http_jabber_org_protocol_pubsub.Pubsub v_Pubsub:=   { choice := 
    { choice_list := 
      { { items := 
          { max_items := omit, 
            node := "toaster@esekilxxen1845.rnd.ericsson.se/1", 
            subid := omit, 
            item_list := { { 
                id := "toaster@esekilxxen1845.rnd.ericsson.se/1#always_on", 
                sequence := {elem:="<entry xmlns='http://ntaforum.org/2011/registry'>
				<tooltype>http://Example.org/tools/ttcn/titan</tooltype>
				<version>1.2.3.4567</version>
				<harness xmlns='http://ntaforum.org/2011/harness' name='http://Example.org/ttcn/titan'>
					<supportedMode>invisible_and_automated</supportedMode>
					<supportedMode>visible_and_interactive</supportedMode>
				</harness>
				<documentation xml:lang='en'>
					<vendor>TTCNTestTools</vendor>
					<name>TCC</name>
					<description>Automated Toaster</description>
                                        <helpUri>http://someUri</helpUri>
				</documentation>
              			<published>2013-03-11T11:30:02-08:00</published>
				<location>
					<workspaceID>0d9374c4-aa1e-47f5-8b61-98bae0ad8ca1</workspaceID>
					<ipv4>127.0.0.1</ipv4>
					<hostname>localhost</hostname>
					<description>1stfloor,bldg.A,BudapestHQ</description>
				</location>
			</entry>" }
              }
            }

          }
        } 
      }
    } 
  }

  log("encoded ",enc_Pubsub(v_Pubsub) ) 


  log ("re-decoded", dec_Pubsub(enc_Pubsub(v_Pubsub)))


  var Entry v_Entry:=
  {
    tooltype:="http://Example.org/tools/ttcn/titan",
    version:="1.2.3.4567",
    harness_list:={{name:="http://Example.org/ttcn/titan", supportedMode_list:={invisible_and_automated,visible_and_interactive}}},
    documentation_list:={{
        lang:="en",
        vendor:="TTCNTestTools",
        name:="TestCompetenceCentre-Ericsson",
        description:="Automated Toaster",
        helpUri:="http://someUri"
      }},
    published:="2013-03-11T11:30:02-08:00",
    location:={
      workspaceID:="0d9374c4-aa1e-47f5-8b61-98bae0ad8ca1",
      ipv4_list:={"127.0.0.1"},
      ipv6_list:={},
      hostname:= "localhost",
      serialNumber:=omit,
      assetNumber :=omit,
      description :="1stfloor,bldg.A,BudapestHQ"
    } ,
    extension_list:={}
  }
  log("encoded Entry",enc_Entry(v_Entry) ) 




  v_Pubsub:=   { choice := 
    { choice_list := 
      { { items := 
          { max_items := omit, 
            node := "toaster@esekilxxen1845.rnd.ericsson.se/1", 
            subid := omit, 
            item_list := { { 
                id := "toaster@esekilxxen1845.rnd.ericsson.se/1#always_on", 
                sequence := {elem:= oct2char(enc_Entry(v_Entry))}
              }
            }

          }
        } 
      }
    } 
  }





  log("encoded again",enc_Pubsub(v_Pubsub) ) 

  log ("re-decoded again", dec_Pubsub(enc_Pubsub(v_Pubsub)))



  //************************************************************************************************************
  var charstring v_challenge:="cmVhbG09ImU3ODhhZTFkYjcyOTY5LmVyaWNzc29uLnNlIixub25jZT0icUxxR21aQy96a1FkNVVsQ3JmeWpjb2JYdW9MVFdFOFhZYVUzejc1aCIscW9wPSJhdXRoIixjaGFyc2V0PXV0Zi04LGFsZ29yaXRobT1tZDUtc2Vzcw==" 
  //realm="e788ae1db72969.ericsson.se",nonce="qLqGmZC/zkQd5UlCrfyjcobXuoLTWE8XYaU3z75h",qop="auth",charset=utf-8,algorithm=md5-sess

  var charstring v_response:="Y2hhcnNldD11dGYtOCx1c2VybmFtZT0idGl0YW4wIixyZWFsbT0iZTc4OGFlMWRiNzI5NjkuZXJpY3Nzb24uc2UiLG5vbmNlPSJxTHFHbVpDL3prUWQ1VWxDcmZ5amNvYlh1b0xUV0U4WFlhVTN6NzVoIixuYz0wMDAwMDAwMSxjbm9uY2U9IkJoZXp3SHFhRDJZWjI0U3lNWkYzVnA3b3ZGQm5MNlpwZEhCY3l1UDZhdlk9IixkaWdlc3QtdXJpPSJ4bXBwL2U3ODhhZTFkYjcyOTY5LmVyaWNzc29uLnNlIixyZXNwb25zZT1mZmQ1NTJjNDJlODdmNDdjMTcwZjgyNGZlNmU3NWJiZSxxb3A9YXV0aA=="
  //charset=utf-8,username="titan0",realm="e788ae1db72969.ericsson.se",nonce="qLqGmZC/zkQd5UlCrfyjcobXuoLTWE8XYaU3z75h",nc=00000001,cnonce="BhezwHqaD2YZ24SyMZF3Vp7ovFBnL6ZpdHBcyuP6avY=",digest-uri="xmpp/e788ae1db72969.ericsson.se",response=ffd552c42e87f47c170f824fe6e75bbe,qop=auth

  var AuthChallenge v_AuthChallenge
    var AuthResponse v_AuthResponse
      var octetstring v_o_challenge

        var charstring v_nonce,string_X, string_Y, string_A1, string_A2,string_HA1,string_HA2,string_KD,string_Z
          v_AuthChallenge:=dec_AuthChallenge(oct2char((dec_MIME_Base64(v_challenge) )) );



        log("decoded struct challenge ",v_AuthChallenge) 


        //  var charstring v_nonce:="qLqGmZC/zkQd5UlCrfyjcobXuoLTWE8XYaU3z75h";
        v_nonce:=v_AuthChallenge.nonce;

        log("v_nonce ",v_nonce) 






        v_AuthChallenge :={ realm := "\"e788ae1db72969.ericsson.se\"", nonce := "\"qLqGmZC/zkQd5UlCrfyjcobXuoLTWE8XYaU3z75h\"", qop := "\"auth\"", charset := "utf-8", algorithm := "md5-sess" }

        log ("encoded challenge", enc_AuthChallenge(v_AuthChallenge))

        v_AuthResponse:=dec_AuthResponse(oct2char((dec_MIME_Base64(v_response))));


        log("decoded struct response ",v_AuthResponse) 


      /* FIXME !!! v_response:=f_calculate_response("titan0","e788ae1db72969.ericsson.se","titan0","qLqGmZC/zkQd5UlCrfyjcobXuoLTWE8XYaU3z75h","BhezwHqaD2YZ24SyMZF3Vp7ovFBnL6ZpdHBcyuP6avY=",
          "","xmpp/e788ae1db72969.ericsson.se","00000001","auth" )
*/
        log("v_response  ",v_response) 



        //************************************************************************************************************
        var charstring v_str

          template Bind t_Bind_resource_1:= 

          {
            choice:={resource:="1"}
          }

          v_str:=oct2char(enc_Bind((valueof(t_Bind_resource_1))))
          log("v_str  ",v_str) 


          template Bind t_Bind_jid:= 

          {
            choice:={jid:="toaster@esekilxxen1845.rnd.ericsson.se/1"}
          }

          v_str:=oct2char(enc_Bind((valueof(t_Bind_jid))))
          log("v_str  ",v_str) 


          template Starttls t_Starttls0:=
          {
            choice:={required:=""}
          } 
          v_str:=oct2char(enc_Starttls((valueof(t_Starttls0))))
          log("v_str  ",v_str) 

          template Starttls t_Starttls1:=
          {
            choice:=omit
          } 
          v_str:=oct2char(enc_Starttls((valueof(t_Starttls1))))
          log("v_str  ",v_str) 

          template Proceed t_Proceed:="";
          v_str:=oct2char(enc_Proceed((valueof(t_Proceed))))
          log("v_str  ",v_str) 


          template Auth t_Auth0:=
          {
            mechanism:="PLAIN",
            base:="dG9hc3RlcgB0b2FzdGVyAHRvYXN0ZXI="
          }
          v_str:=oct2char(enc_Auth((valueof(t_Auth0))))
          log("v_str  ",v_str) 


          template Success t_Success:=""

          v_str:=oct2char(enc_Success((valueof(t_Success))))
          log("v_str  ",v_str) 



          template Challenge

            t_Challenge:="cmVhbG09ImU3ODhhZTFkYjcyOTY5LmVyaWNzc29uLnNlIixub25jZT0icUxxR21aQy96a1FkNVVsQ3JmeWpjb2JYdW9MVFdFOFhZYVUzejc1aCIscW9wPSJhdXRoIixjaGFyc2V0PXV0Zi04LGFsZ29yaXRobT1tZDUtc2Vzcw==";

          v_str:=oct2char(enc_saslChallenge((valueof(t_Challenge))))
          log("v_str  ",v_str) 

          template urn_ietf_params_xml_ns_xmpp_sasl.Response

            t_Response0:="dXNlcm5hbWU9InRpdGFuMCIscmVhbG09ImU3ODhhZTFkYjcyOTY5LmVyaWNzc29uLnNlIixub25jZT0icUxxR21aQy96a1FkNVVsQ3JmeWpjb2JYdW9MVFdFOFhZYVUzejc1aCIsY25vbmNlPSJCaGV6d0hxYUQyWVoyNFN5TVpGM1ZwN292RkJuTDZacGRIQmN5dVA2YXZZPSIsbmM9MDAwMDAwMDEsZGlnZXN0LXVyaT0ieG1wcC9lNzg4YWUxZGI3Mjk2OS5lcmljc3Nvbi5zZSIscW9wPWF1dGgscmVzcG9uc2U9ZmZkNTUyYzQyZTg3ZjQ3YzE3MGY4MjRmZTZlNzViYmUsY2hhcnNldD11dGYtOA=="

          v_str:=oct2char(enc_saslResponse((valueof(t_Response0))))
          log("v_str  ",v_str) 


          template Stream   t_Stream00:=
          {
            from_ :=omit,
            id :=omit,
            lang :=omit,
            to_ :=omit,
            version :=omit,
            attr:={},
            features :=omit,
            elem :=omit,
            elem_1 :=omit,
            elem_list:={},
            choice :=omit,
            error_ :=omit
          }


          v_str:=oct2char(enc_Stream((valueof(t_Stream00))))
          log("v_str  ",v_str) 


          template Stream   t_Stream10:=
          {
            from_ :="myxmpp.com",
            id :="01ba0092",
            lang :="en",
            to_ :=omit,
            version :="1.0",
            attr:={},
            features :={elem_list:={"<starttls xmlns=\"urn:ietf:params:xml:ns:xmpp-tls\"></starttls>",
                "<mechanisms xmlns=\"urn:ietf:params:xml:ns:xmpp-sasl\">
		<mechanism>DIGEST-MD5</mechanism>
		<mechanism>PLAIN</mechanism>
		<mechanism>ANONYMOUS</mechanism>
		<mechanism>CRAM-MD5</mechanism>
	</mechanisms>",
                "<compression xmlns=\"http://jabber.org/features/compress\">
		<method>zlib</method>
	</compression>",
                "<auth xmlns=\"http://jabber.org/features/iq-auth\" />",
                "<register xmlns=\"http://jabber.org/features/iq-register\" />"}},
            elem :=omit,
            elem_1 :=omit,
            elem_list:={},
            choice :=omit,
            error_ :=omit
          }


          v_str:=oct2char(enc_Stream((valueof(t_Stream10))))
          log("v_str  ",v_str) 

          template Mechanisms   t_Mechanisms:=

          {
            mechanism_list:={"DIGEST-MD5","PLAIN","ANONYMOUS","CRAM-MD5"},
            elem_list:={}
          } 
          v_str:=oct2char(enc_Mechanisms((valueof(t_Mechanisms))))
          log("v_str  ",v_str) 

          //************************************************************************************************************

          s1:="<entry xmlns='http://ntaforum.org/2011/registry'>
<tooltype>http://Example.org/tools/ttcn/titan</tooltype>
<version>1.2.3.4567</version>

<harness xmlns='http://ntaforum.org/2011/harness' name='http://Example.org/ttcn/titan'> 
<supportedMode>invisible_and_automated</supportedMode>
<supportedMode>visible_and_interactive</supportedMode>
</harness>
<documentation xml:lang='en'>
<vendor>TTCNTestTools</vendor>
<name>TCC</name>
<description>Automated Toaster</description>
            <helpUri>http://someUri</helpUri>
</documentation>
            <published>2013-03-11T11:30:02-08:00</published>
<location>
<workspaceID>0d9374c4-aa1e-47f5-8b61-98bae0ad8ca1</workspaceID>
<ipv4>127.0.0.1</ipv4>
<hostname>localhost</hostname>
<description>1stfloor,bldg.A,BudapestHQ</description>
</location>
</entry>"

          v_Entry :=dec_Entry(char2oct(s1))
          log("v_Entry  ",v_Entry)



          s1:="<entry xmlns='http://ntaforum.org/2011/registry'>
<tooltype>http://Example.org/tools/ttcn/titan</tooltype>
<version>1.2.3.4567</version>
<harness xmlns='http://ntaforum.org/2011/harness' name='http://Example.org/ttcn/titan'> 
<supportedMode>invisible_and_automated</supportedMode>
<supportedMode>visible_and_interactive</supportedMode>
</harness>
<documentation xml:lang='en'>
<vendor>TTCNTestTools</vendor>
<name>TCC</name>
<description>Automated Toaster</description>
                        <helpUri>http://someUri</helpUri>
</documentation>
        <published>2013-03-11T11:30:02-08:00</published>
<location>
<workspaceID>0d9374c4-aa1e-47f5-8b61-98bae0ad8ca1</workspaceID>
<ipv4>127.0.0.1</ipv4>
<hostname>localhost</hostname>
<description>1stfloor,bldg.A,BudapestHQ</description>
</location>
</entry>"

          v_Entry :=dec_Entry(char2oct(s1))
          log("v_Entry  ",v_Entry)


          //-----------------------------------------------------------------------------------------------------
          //TROUBLE REPORTS
          //-----------------------------------------------------------------------------------------------------

          //-----------------------------------------------------------------------------------------------------
          //HR39975 	 Wrong XML decoding when namespace is not present
          //-----------------------------------------------------------------------------------------------------

          s1:="<iq xmlns='jabber:server' type='error' id='ntaf_node_info' from='pubsub.esekilxxen1845.rnd.ericsson.se' to='toaster@esekilxxen1845.rnd.ericsson.se/1'>
                <query xmlns='http://jabber.org/protocol/disco#info' node='ntaf.tools'></query>
                <error  code='404' type='cancel'>
                                <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
                </error>
</iq>"



          v_decodedPDUsIq := dec_sIq(char2oct(s1));

          log("Decoded HR39975a : ", v_decodedPDUsIq  )



          s1:="<iq  type='error' id='ntaf_node_info' from='pubsub.esekilxxen1845.rnd.ericsson.se' to='toaster@esekilxxen1845.rnd.ericsson.se/1'>
                <query xmlns='http://jabber.org/protocol/disco#info' node='ntaf.tools'></query>
                <error  code='404' type='cancel'>
                                <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
                </error>
</iq>"



          v_decodedPDUsIq1 := dec_sIq(char2oct(s1));

          log("Decoded HR39975b : ", v_decodedPDUsIq  )  

          if (v_decodedPDUsIq1==v_decodedPDUsIq)   {  log(" HR39975 verification passed");}  else  {  log(" HR39975 verification failed");}
          //-----------------------------------------------------------------------------------------------------
          //HR39881 	  XML decoding error for short form XML
          //-----------------------------------------------------------------------------------------------------


          s1:="<iq type=\"result\" id=\"reg_publish_tool_info\" from=\"pubsub.ttcn.com\" to=\"toaster@ttcn.com/1\"/>"

          v_decodedPDUsIq := dec_sIq(char2oct(s1));
          log("Decoded shortform Iq : ", v_decodedPDUsIq);



          v_decodedPDUsIq1:={ from_ := "pubsub.ttcn.com", id := "reg_publish_tool_info", lang := omit, to_ := "toaster@ttcn.com/1", type_ := result, elem := omit, error_ := omit }


          if (v_decodedPDUsIq1==v_decodedPDUsIq) {  log(" HR39881 verification passed");}  else {  log(" HR39881 verification failed");}


          //-----------------------------------------------------------------------------------------------------
          //HR49727 Wrong XML decoding even in encoder-decoder loop
          //-----------------------------------------------------------------------------------------------------



          s1:="<pubsub xmlns='http://jabber.org/protocol/pubsub'>
	<items node='toaster@esekilxxen1845.rnd.ericsson.se/1'>
		<item id='toaster@esekilxxen1845.rnd.ericsson.se/1#always_on'>
			<entry xmlns='http://ntaforum.org/2011/registry'>
				<tooltype>http://Example.org/tools/ttcn/titan</tooltype>
				<version>1.2.3.4567</version>
				<harness xmlns='http://ntaforum.org/2011/harness' name='http://Example.org/ttcn/titan'>
					<supportedMode>invisible_and_automated</supportedMode>
					<supportedMode>visible_and_interactive</supportedMode>
				</harness>
				<documentation xml:lang='en'>
					<vendor>TTCNTestTools</vendor>
					<name>TCC</name>
					<description>Automated Toaster</description>
                                        <helpUri>http://someUri</helpUri>
				</documentation>
              			<published>2013-03-11T11:30:02-08:00</published>
				<location>
					<workspaceID>0d9374c4-aa1e-47f5-8b61-98bae0ad8ca1</workspaceID>
					<ipv4>127.0.0.1</ipv4>
					<hostname>localhost</hostname>
					<description>1stfloor,bldg.A,BudapestHQ</description>
				</location>
			</entry>
		</item>
	</items>
</pubsub>"


          log("decoded  HR49727",dec_Pubsub(char2oct(s1)));



          v_Pubsub:=   { choice := 
            { choice_list := 
              { { items := 
                  { max_items := omit, 
                    node := "toaster@esekilxxen1845.rnd.ericsson.se/1", 
                    subid := omit, 
                    item_list := { { 
                        id := "toaster@esekilxxen1845.rnd.ericsson.se/1#always_on", 
                        sequence := {elem:="<entry xmlns='http://ntaforum.org/2011/registry'>
				<tooltype>http://Example.org/tools/ttcn/titan</tooltype>
				<version>1.2.3.4567</version>
				<harness xmlns='http://ntaforum.org/2011/harness' name='http://Example.org/ttcn/titan'>
					<supportedMode>invisible_and_automated</supportedMode>
					<supportedMode>visible_and_interactive</supportedMode>
				</harness>
				<documentation xml:lang='en'>
					<vendor>TTCNTestTools</vendor>
					<name>TCC</name>
					<description>Automated Toaster</description>
                                        <helpUri>http://someUri</helpUri>
				</documentation>
              			<published>2013-03-11T11:30:02-08:00</published>
				<location>
					<workspaceID>0d9374c4-aa1e-47f5-8b61-98bae0ad8ca1</workspaceID>
					<ipv4>127.0.0.1</ipv4>
					<hostname>localhost</hostname>
					<description>1stfloor,bldg.A,BudapestHQ</description>
				</location>
			</entry>" }
                      }
                    }

                  }
                } 
              }
            } 
          }

          v_Pubsub:=dec_Pubsub(char2oct(s1));

          log("dec_Pubsub(char2oct(s1)  ",v_Pubsub);

          log("decoded Entry",dec_Entry(char2oct(unichar2char(v_Pubsub.choice.choice_list[0].items.item_list[0].sequence.elem)))) 

          if (match(v_Pubsub,dec_Pubsub(char2oct(s1))))   {  log(" HR49727 verification passed");}  else  {  log(" HR49727 verification failed");}


          //-----------------------------------------------------------------------------------------------------
          //HR49717 Wrong XML decoding 
          //-----------------------------------------------------------------------------------------------------

          v_decodedPDUsIq1:=

          {
            from_ := "pubsub.esekilxxen1845.rnd.ericsson.se",
            id := "create_tool_node",
            lang := omit,
            to_ := "toaster@esekilxxen1845.rnd.ericsson.se/1",
            type_ := error_ ,
            elem := "<tq0001:pubsub xmlns:tq0001=\"http://jabber.org/protocol/pubsub\" xmlns:xdata=\"jabber:x:data\" xmlns:tq0000=\"jabber:x:data\">\n<tq0001:create node=\"toaster@esekilxxen1845.rnd.ericsson.se/1\"/>\n<tq0001:configure>\n<xdata:x type=\"submit\">\n<tq0000:field var=\"pubsub#node_type\">\n<tq0000:value>leaf</tq0000:value>\n</tq0000:field>\n<tq0000:field var=\"pubsub#collection\">\n<tq0000:value>ntaf.tools</tq0000:value>\n</tq0000:field>\n<tq0000:field var=\"pubsub#children\">\n<tq0000:value/>\n</tq0000:field>\n<tq0000:field type=\"boolean\" var=\"pubsub#deliver_payloads\">\n<tq0000:value>1</tq0000:value>\n</tq0000:field>\n<tq0000:field type=\"boolean\" var=\"pubsub#notify_retract\">\n<tq0000:value>1</tq0000:value>\n</tq0000:field>\n<tq0000:field type=\"boolean\" var=\"pubsub#persist_items\">\n<tq0000:value>1</tq0000:value>\n</tq0000:field>\n<tq0000:field type=\"boolean\" var=\"pubsub#max_items\">\n<tq0000:value>1</tq0000:value>\n</tq0000:field>\n<tq0000:field type=\"list-single\" var=\"pubsub#access_model\">\n<tq0000:value>open</tq0000:value>\n</tq0000:field>\n<tq0000:field type=\"list-single\" var=\"pubsub#publish_model\">\n<tq0000:value>publishers</tq0000:value>\n</tq0000:field>\n</xdata:x>\n</tq0001:configure>\n</tq0001:pubsub>",
            error_ := {
              by := "406",
              type_ := modify,
              stanzaErrorGroup := {
                not_acceptable := ""
              },
              text := omit
            }
          }




          s1:=          "<iq type='error'  id='create_tool_node' from='pubsub.esekilxxen1845.rnd.ericsson.se' to='toaster@esekilxxen1845.rnd.ericsson.se/1'>
<tq0001:pubsub xmlns:tq0001='http://jabber.org/protocol/pubsub' xmlns:xdata='jabber:x:data' xmlns:tq0000='jabber:x:data'>
<tq0001:create node='toaster@esekilxxen1845.rnd.ericsson.se/1'/>
<tq0001:configure>
<xdata:x type='submit'>
<tq0000:field var='pubsub#node_type'>
<tq0000:value>leaf</tq0000:value>
</tq0000:field>
<tq0000:field var='pubsub#collection'>
<tq0000:value>ntaf.tools</tq0000:value>
</tq0000:field>
<tq0000:field var='pubsub#children'>
<tq0000:value/>
</tq0000:field>
<tq0000:field type='boolean' var='pubsub#deliver_payloads'>
<tq0000:value>1</tq0000:value>
</tq0000:field>
<tq0000:field type='boolean' var='pubsub#notify_retract'>
<tq0000:value>1</tq0000:value>
</tq0000:field>
<tq0000:field type='boolean' var='pubsub#persist_items'>
<tq0000:value>1</tq0000:value>
</tq0000:field>
<tq0000:field type='boolean' var='pubsub#max_items'>
<tq0000:value>1</tq0000:value>
</tq0000:field>
<tq0000:field type='list-single' var='pubsub#access_model'>
<tq0000:value>open</tq0000:value>
</tq0000:field>
<tq0000:field type='list-single' var='pubsub#publish_model'>
<tq0000:value>publishers</tq0000:value>
</tq0000:field>
</xdata:x>
</tq0001:configure>
</tq0001:pubsub>
<error code='406' type='modify'>
<not-acceptable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
</error>
</iq>";


          if (v_decodedPDUsIq1==dec_sIq(char2oct(s1))) {  log(" HR49717 verification passed");}  else {  log(" HR49717 verification failed");}




          //-----------------------------------------------------------------------------------------------------
          //nta2012.007.15  WT-004 Inventory
          //-----------------------------------------------------------------------------------------------------


          s1:="<query-harness xmlns='http://ntaforum.org/2011/harness' 
                  harness='http://ntaforum.org/2013/harness/resource/inventory'
                  xml:lang='en'>
	<label>Resource Inventory</label>
	<tooltip>Resource inventory interface</tooltip>
	<description>Basic inventory interface for NTAF entities which represent resources.</description>
	<author>NTAF WT-004</author>

	<!-- Action : getAttributes(resource)     -->
	<!--                                      -->
	<!-- Returns: List of tuples of the form: -->
	<!--          {resource, groupName, attributeName, attributeDatatype, attributeValue}  -->

	<actionDecl name='getAttributes'>
		<label>Get Resource Attributes</label>
		<tooltip>Fetch the attributes associated with a specific resource</tooltip>
		<description>Fetch the attributes associated with a specific resource. 
        Returns all attributes for requested groups.
        If no group is specified returns all attributes for all groups.</description>
		<parameter name='resource'>
			<label>Resource</label>
			<tooltip>Resource identifier</tooltip>
			<description>A resource identifier resource. The identifier is unique and must be one of the identifiers returned by the Resource/Owner
            harness getResources action. A value of \"SELF\" returns data for the NTAF entity itself. A value of \"ALL\" returns data for all resources owned by the NTAF entity</description>
			<mandatory>false</mandatory>
			<datatype>string</datatype>
			<default>SELF</default>
		</parameter>
		<responseDecl>
			<group name='attribute'>
				<label>Inventory attribute</label>
				<description>Set of data associated with a single inventory attribute.</description>
				<allowedCount>
					<min>0</min>
				</allowedCount>
				<item name='resource'>
					<label>Resource</label>
					<tooltip>Resource identifier</tooltip>
					<datatype>string</datatype>
				</item>
				<item name='groupName'>
					<label>Group name</label>
					<datatype>string</datatype>
				</item>
				<item name='attributeName'>
					<label>Attribute name</label>
					<datatype>string</datatype>
				</item>
				<item name='attributeDatatype'>
					<label>Attribute data type</label>
					<description>Type of data represented by attribute value.</description>
					<datatype>string</datatype>
					<allowedValue label='String'>string</allowedValue>
					<allowedValue label='Integer'>integer</allowedValue>
					<allowedValue label='Decimal'>decimal</allowedValue>
					<allowedValue label='Boolean'>boolean</allowedValue>
					<allowedValue label='Any URI'>anyURI</allowedValue>
					<allowedValue label='Date-Time'>dateTime</allowedValue>
				</item>
				<item name='attributeValue'>
					<label>Attribute value</label>
					<datatype>string</datatype>
				</item>
			</group>
		</responseDecl>
	</actionDecl>

	<!-- Action: requestUserInput(resource, message, uri) -->

	<actionDecl name='requestUserInput'>
		<label>Request Info</label>
		<tooltip>Request information from the user</tooltip>
		<description>Request information from the user</description>
		<parameter name='resource'>
			<label>Resource</label>
			<tooltip>Identifier for a resource</tooltip>
			<description>An identifier for a resource. The identifier is unique and corresponds to identifiers returned by getResources.</description>
			<mandatory>false</mandatory>
			<datatype>string</datatype>
			<default>SELF</default>
		</parameter>
		<parameter name='message'>
			<label>Message</label>
			<tooltip>A user-readable message describing what is required</tooltip>
			<description>This message will be associated with this request and may be displayed to the user.</description>
			<datatype>string</datatype>
		</parameter>
		<parameter name='uri'>
			<label>URI</label>
			<tooltip>Location where data can be supplied</tooltip>
			<description>This URI defines a location where the user may supply the requested information.</description>
			<datatype>anyURI</datatype>
		</parameter>
	</actionDecl>

	<!-- Action : getConnectors(resource)     -->
	<!--                                      -->
	<!-- Returns: List of tuples of the form: -->
	<!--          {resource, connectorId, type, connectedResource, connectedConnector}  -->

	<actionDecl name='getConnectors'>
		<label>Get connector data</label>
		<description>Gets resource connector data</description>
		<parameter name='resource'>
			<label>Resource</label>
			<tooltip>A Resource GUID</tooltip>
			<description>A resource identifier resource. The identifier is unique and must be one of the identifiers returned by the Resource/Owner
            harness getResources action. A value of \"SELF\" returns connector data for the NTAF entity itself. A value of \"ALL\" returns data for all connectors owned by the NTAF entity</description>
			<datatype>string</datatype>
			<default>SELF</default>
		</parameter>
		<responseDecl>
			<group name='connector'>
				<label>Connector</label>
				<tooltip>Connector information</tooltip>
				<description>Connector information</description>
				<helpURI/>
				<allowedCount>
					<min>0</min>
				</allowedCount>
				<item name='resource'>
					<label>Resource ID</label>
					<tooltip>Identifier of resource which owns this connector</tooltip>
					<datatype>string</datatype>
				</item>
				<item name='connectorId'>
					<label>Connector ID</label>
					<tooltip>The ID of this connector</tooltip>
					<description>ID of connector. This ID must be unique in context of associated resource.</description>
					<datatype>string</datatype>
				</item>
				<item name='type'>
					<label>Type</label>
					<tooltip>The type of connector</tooltip>
					<description>The type of connector</description>
					<datatype>string</datatype>
				</item>
				<item name='category'>
					<label>Category</label>
					<tooltip>The category group of this type of connector</tooltip>
					<description>The category group of this type of connector</description>
					<datatype>string</datatype>
				</item>
				<item name='speed'>
					<label>Speed</label>
					<tooltip>Speed of connector</tooltip>
					<description>A human readable description of a connector's speed.</description>
					<mandatory>false</mandatory>
					<datatype>string</datatype>
				</item>
				<item name='connectedResource'>
					<label>Resource</label>
					<tooltip>The resource connected to</tooltip>
					<description>The resource ID of the resource that this connector is connected to</description>
					<mandatory>false</mandatory>
					<datatype>string</datatype>
				</item>
				<item name='connectedConnector'>
					<label>Connector</label>
					<tooltip>The connector on the resource connected to</tooltip>
					<description>The connector ID of the connector that this connector is connected to</description>
					<mandatory>false</mandatory>
					<datatype>string</datatype>
				</item>
			</group>
		</responseDecl>
	</actionDecl>

	<subharness>http://ntaforum.org/2013/harness/resource/owner</subharness>
</query-harness>"





          v_decodedPDUQuery_harness := dec_Query_harness(char2oct(s1));
          log("Decoded Query_harness WT-004 Inventory: ", v_decodedPDUQuery_harness);


          //-----------------------------------------------------------------------------------------------------
          //nta2011.017.18  WT-003 Tool resource
          //-----------------------------------------------------------------------------------------------------


          s1:="<query-harness xmlns='http://ntaforum.org/2011/harness' 
                  harness='http://ntaforum.org/2013/harness/resource/owner'
                  xml:lang='en'>
	<label>Resource Owner</label>
	<tooltip>Resource owner interface</tooltip>
	<description>Basic interface for NTAF entities which own resources.</description>
	<author>NTAF WT-003</author>
	<actionDecl name='getResources'>
		<label>Get Resource List</label>
		<tooltip>Fetch the resources owned by this entity</tooltip>
		<description>Fetch the resources owned by this entity. The action must return the entity itself. In addition it may return identifiers for additional
            resources it controls or has created. Resources returned are first level children unless the special value \"ALL\"is sent as input.</description>
		<parameter name='resource'>
			<label>Resource</label>
			<tooltip>Identifier for a resource</tooltip>
			<description>An identifier for a resource. The identifier is unique and must be one of the identifiers returned by getResources. The special
            value \"SELF\" returns resources owned by the NTAF entity. The special value \"ALL\" returns children of the resource to all sub-levels (i.e. children, grandchildren, etc.).</description>
			<mandatory>false</mandatory>
			<datatype>string</datatype>
			<default>SELF</default>
		</parameter>
		<responseDecl>
			<item name='resource'>
				<label>Resource ID</label>
				<tooltip>Resource identifier</tooltip>
				<description>Each item is an identifier for a resource. Together the items form a list of resource identifiers. Resource identifiers must be unique.</description>
				<datatype>string</datatype>
				<allowedCount> 
					<min>1</min> 
				</allowedCount> 
			</item>
		</responseDecl>
	</actionDecl>
</query-harness>"



          v_decodedPDUQuery_harness := dec_Query_harness(char2oct(s1));
          log("Decoded Query_harness WT-003 Tool resource A: ", v_decodedPDUQuery_harness);



          s1:="<query-harness xmlns='http://ntaforum.org/2011/harness' 
                  harness='http://ntaforum.org/2012/harness/resource/owner'
                  xml:lang='en'>

  <label>Resource Owner</label>
  <tooltip>Resource owner interface</tooltip>
  <description>Basic interface for NTAF entities which own resources.</description>
  <author>NTAF WT-003</author>
  <actionDecl name='getResourceList'>
    <label>Get Resource List</label>
    <tooltip>Fetch the list of resources supported by this tool</tooltip>
    <description>Fetch the list of resources owned by this tool. The list may include only the identifier for this tool or may contain identifiers for this tool and for additional
            resources it controls or has created. Resources returned are first level children unless the special value 'ALL' is sent as input.</description>
     <parameter name='resource'>
        <label>Resource</label>
        <tooltip>Identifier for a resource</tooltip>
        <description>An identifier for a resource. The identifier is unique and must be one of the identifiers returned by getResourceList. The special value 'SELF' returns resources owned
            by the NTAF entity. The special value 'ALL' returns children of the resource to all sub-levels (i.e. children, grandchildren, etc.).</description>
        <mandatory>false</mandatory>
        <datatype>string</datatype>
        <default>SELF</default>
     </parameter>
    <responseDecl>
      <item name='resource'>
        <label>Resource ID</label>
        <tooltip>Resource identifier</tooltip>
        <description>Each item is an identifier for a resource. Together the items form a list of resource identifiers. Resource identifiers must be unique.</description>
        <datatype>string</datatype>
        <allowedCount> 
          <min>1</min> 
        </allowedCount> 
      </item>
     </responseDecl>
  </actionDecl>
</query-harness>";



          v_decodedPDUQuery_harness := dec_Query_harness(char2oct(s1));
          log("Decoded Query_harness WT-003 Tool resource B: ", v_decodedPDUQuery_harness);




          s1:="<query-harness xmlns='http://ntaforum.org/2011/harness' harness='http://Example.org/ttcn/titan' xml:lang='en'>
	<label>ToasterImpl</label>
	<tooltip>tooltip</tooltip>
	<description>A Toaster that can toast bread, and also help out with developing Requesters</description>
	<helpURI>helpUri</helpURI>
	<author>Ericsson</author>
	<actionDecl name='getBread_Sync'>
		<label>getBread_Sync</label>
		<tooltip>getBread_Sync tooltip</tooltip>
		<description>Get the bread</description>
		<helpURI>helpUri</helpURI>
		<responseDecl>
			<item name='getBread_Sync'>
				<label>getBread_Sync</label>
				<tooltip>getBread_Sync</tooltip>
				<description>Get the bread</description>
				<mandatory>false</mandatory>
				<default>DefaultValue</default>
				<datatype>string</datatype>
				<masked>false</masked>
				<isMultiline>false</isMultiline>
				<allowedCount>
					<min>1</min>
					<max>1</max>
				</allowedCount>
			</item>
		</responseDecl>
	</actionDecl>
	<actionDecl name='getDarkness_Sync'>
		<label>getDarkness_Sync</label>
		<tooltip>getDarkness_Sync tooltip</tooltip>
		<description>Get the darkness of the bread</description>
		<helpURI>helpUri</helpURI>
		<responseDecl>
			<item name='getDarkness_Sync'>
				<label>getDarkness_Sync</label>
				<tooltip>getDarkness_Sync</tooltip>
				<description>Get the darkness of the bread</description>
				<mandatory>false</mandatory>
				<default>DefaultValue</default>
				<datatype>integer</datatype>
				<masked>false</masked>
				<isMultiline>false</isMultiline>
				<allowedCount>
					<min>1</min>
					<max>1</max>
				</allowedCount>
			</item>
		</responseDecl>
	</actionDecl>
	<actionDecl name='getListOfToasterComponentSerialNumbers_Sync'>
		<label>getListOfToasterComponentSerialNumbers_Sync</label>
		<tooltip>getListOfToasterComponentSerialNumbers_Sync tooltip</tooltip>
		<helpURI>helpUri</helpURI>
		<responseDecl>
			<item name='getListOfToasterComponentSerialNumbers_Sync'>
				<label>getListOfToasterComponentSerialNumbers_Sync</label>
				<tooltip>getListOfToasterComponentSerialNumbers_Sync</tooltip>
				<mandatory>false</mandatory>
				<default>DefaultValue</default>
				<datatype>string</datatype>
				<masked>false</masked>
				<isMultiline>false</isMultiline>
				<allowedCount>
					<min>0</min>
					<max>2147483647</max>
				</allowedCount>
			</item>
		</responseDecl>
	</actionDecl>
	<actionDecl name='getListOfToasterNumbers_Sync'>
		<label>getListOfToasterNumbers_Sync</label>
		<tooltip>getListOfToasterNumbers_Sync tooltip</tooltip>
		<description>Get a really nice list of toaster numbers</description>
		<helpURI>helpUri</helpURI>
		<responseDecl>
			<item name='getListOfToasterNumbers_Sync'>
				<label>getListOfToasterNumbers_Sync</label>
				<tooltip>getListOfToasterNumbers_Sync</tooltip>
				<description>Get a really nice list of toaster numbers</description>
				<mandatory>false</mandatory>
				<default>DefaultValue</default>
				<datatype>integer</datatype>
				<masked>false</masked>
				<isMultiline>false</isMultiline>
				<allowedCount>
					<min>0</min>
					<max>2147483647</max>
				</allowedCount>
			</item>
		</responseDecl>
	</actionDecl>
	<actionDecl name='getLocation_Sync'>
		<label>getLocation_Sync</label>
		<tooltip>getLocation_Sync tooltip</tooltip>
		<description>Get the location of the toaster</description>
		<helpURI>helpUri</helpURI>
		<responseDecl>
			<item name='getLocation_Sync'>
				<label>getLocation_Sync</label>
				<tooltip>getLocation_Sync</tooltip>
				<description>Get the location of the toaster</description>
				<mandatory>false</mandatory>
				<default>DefaultValue</default>
				<datatype>string</datatype>
				<masked>false</masked>
				<isMultiline>false</isMultiline>
				<allowedCount>
					<min>1</min>
					<max>1</max>
				</allowedCount>
			</item>
		</responseDecl>
	</actionDecl>
	<actionDecl name='getNumberOfSlices_Sync'>
		<label>getNumberOfSlices_Sync</label>
		<tooltip>getNumberOfSlices_Sync tooltip</tooltip>
		<description>Get number of slices being toasted</description>
		<helpURI>helpUri</helpURI>
		<responseDecl>
			<item name='getNumberOfSlices_Sync'>
				<label>getNumberOfSlices_Sync</label>
				<tooltip>getNumberOfSlices_Sync</tooltip>
				<description>Get number of slices being toasted</description>
				<mandatory>false</mandatory>
				<default>DefaultValue</default>
				<datatype>integer</datatype>
				<masked>false</masked>
				<isMultiline>false</isMultiline>
				<allowedCount>
					<min>1</min>
					<max>1</max>
				</allowedCount>
			</item>
		</responseDecl>
	</actionDecl>
	<actionDecl name='getNumberOfSlots_Sync'>
		<label>getNumberOfSlots_Sync</label>
		<tooltip>getNumberOfSlots_Sync tooltip</tooltip>
		<description>Get number of slots in the toaster</description>
		<helpURI>helpUri</helpURI>
		<responseDecl>
			<item name='getNumberOfSlots_Sync'>
				<label>getNumberOfSlots_Sync</label>
				<tooltip>getNumberOfSlots_Sync</tooltip>
				<description>Get number of slots in the toaster</description>
				<mandatory>false</mandatory>
				<default>DefaultValue</default>
				<datatype>integer</datatype>
				<masked>false</masked>
				<isMultiline>false</isMultiline>
				<allowedCount>
					<min>1</min>
					<max>1</max>
				</allowedCount>
			</item>
		</responseDecl>
	</actionDecl>
	<actionDecl name='getPowerLevel_Sync'>
		<label>getPowerLevel_Sync</label>
		<tooltip>getPowerLevel_Sync tooltip</tooltip>
		<description>Get the power level of the toaster</description>
		<helpURI>helpUri</helpURI>
		<responseDecl>
			<item name='getPowerLevel_Sync'>
				<label>getPowerLevel_Sync</label>
				<tooltip>getPowerLevel_Sync</tooltip>
				<description>Get the power level of the toaster</description>
				<mandatory>false</mandatory>
				<default>DefaultValue</default>
				<datatype>integer</datatype>
				<masked>false</masked>
				<isMultiline>false</isMultiline>
				<allowedCount>
					<min>1</min>
					<max>1</max>
				</allowedCount>
			</item>
		</responseDecl>
	</actionDecl>
	<actionDecl name='isToasting_Sync'>
		<label>isToasting_Sync</label>
		<tooltip>isToasting_Sync tooltip</tooltip>
		<description>Is the toaster toasting?</description>
		<helpURI>helpUri</helpURI>
		<responseDecl>
			<item name='isToasting_Sync'>
				<label>isToasting_Sync</label>
				<tooltip>isToasting_Sync</tooltip>
				<description>Is the toaster toasting?</description>
				<mandatory>false</mandatory>
				<default>DefaultValue</default>
				<datatype>boolean</datatype>
				<masked>false</masked>
				<isMultiline>false</isMultiline>
				<allowedCount>
					<min>1</min>
					<max>1</max>
				</allowedCount>
			</item>
		</responseDecl>
	</actionDecl>
	<actionDecl name='setDarkness_Integer_Sync'>
		<label>setDarkness_Integer_Sync</label>
		<tooltip>setDarkness_Integer_Sync tooltip</tooltip>
		<description>Set the amount of darkness of the bread being toasted</description>
		<helpURI>helpUri</helpURI>
		<parameter name='intParam1'>
			<label>intParam1</label>
			<tooltip>intParam1 tooltip</tooltip>
			<mandatory>false</mandatory>
			<datatype>integer</datatype>
			<default/>
			<masked>false</masked>
			<isMultiline>false</isMultiline>
		</parameter>
		<responseDecl/>
	</actionDecl>
	<actionDecl name='setLocation_String_Sync'>
		<label>setLocation_String_Sync</label>
		<tooltip>setLocation_String_Sync tooltip</tooltip>
		<description>Set the Location of the toaster</description>
		<helpURI>helpUri</helpURI>
		<parameter name='StringParam1'>
			<label>StringParam1</label>
			<tooltip>StringParam1 tooltip</tooltip>
			<mandatory>false</mandatory>
			<datatype>string</datatype>
			<default/>
			<masked>false</masked>
			<isMultiline>false</isMultiline>
		</parameter>
		<responseDecl/>
	</actionDecl>
	<actionDecl name='setNumberOfSlices_Integer_Sync'>
		<label>setNumberOfSlices_Integer_Sync</label>
		<tooltip>setNumberOfSlices_Integer_Sync tooltip</tooltip>
		<description>Set number of slices being toasted</description>
		<helpURI>helpUri</helpURI>
		<parameter name='intParam1'>
			<label>intParam1</label>
			<tooltip>intParam1 tooltip</tooltip>
			<mandatory>false</mandatory>
			<datatype>integer</datatype>
			<default/>
			<masked>false</masked>
			<isMultiline>false</isMultiline>
		</parameter>
		<responseDecl/>
	</actionDecl>
	<actionDecl name='toast_Sync'>
		<label>toast_Sync</label>
		<tooltip>toast_Sync tooltip</tooltip>
		<description>Start toasting the bread!</description>
		<helpURI>helpUri</helpURI>
		<responseDecl/>
	</actionDecl>
</query-harness>"


          v_decodedPDUQuery_harness := dec_Query_harness(char2oct(s1));
          log("Decoded Query_harness Elis: ", v_decodedPDUQuery_harness);


          //-----------------------------------------------------------------------------------------------------
          //Session flow examples
          //-----------------------------------------------------------------------------------------------------

          s1:="<iq type='error' id='r3fQH-4' from='pubsub.myxmpp.com' to='tool1@myxmpp.com/1'>
	<query xmlns='http://jabber.org/protocol/disco#info' node='ntaf.tools' />
	<error code='404' type='cancel'>
		<item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas' />
	</error>
</iq>"


          v_decodedPDUsIq := dec_sIq(char2oct(s1));

          log("Decoded S_Ex2 : ", v_decodedPDUsIq  )  



v_decodedPDUcIq:=
{
    from_ := "pubsub.myxmpp.com",
    id := "r3fQH-4",
    lang := omit,
    to_ := "tool1@myxmpp.com/1",
    type_ := error_ ,
    elem := "<query xmlns=\"http://jabber.org/protocol/disco#info\" node=\"ntaf.tools\"/>",
    error_ := {
        by := "404",
        type_ := cancel ,
        stanzaErrorGroup := {
            item_not_found := ""
        },
        text := omit
    }
}
          
          log("Encoded C_Ex2 : ", enc_cIq(v_decodedPDUcIq )) ;

          //-----------------------------------------------------------------------------------------------------
          //Encvalue/Decvalue
          //HR55963  Codegeneration error at decvalue
          //-----------------------------------------------------------------------------------------------------




          var  http_ntaforum_org_2011_harness.Query_harness v_Query_harness:=
          {
            harness:="http://example.org/h6",
            lang:="en",
            label_:="Mail Labeling",
            tooltip:="A harness for labeling of mail",
            description:=omit,  
            helpURI:=omit,
            supercedes:=omit,
            author:="author",
            actionDecl_list:={},
            eventDecl_list:={},
            subharness_list:={"http://example.org/harnesses/addressing"}
          };
          log ("    ",v_Query_harness," is encodedTo: ",oct2char(bit2oct(encvalue(v_Query_harness))))



          v_Pubsub:=   { choice := 
            { choice_list := 
              { { items := 
                  { max_items := omit, 
                    node := "toaster@esekilxxen1845.rnd.ericsson.se/1", 
                    subid := omit, 
                    item_list := { { 
                        id := "toaster@esekilxxen1845.rnd.ericsson.se/1#always_on", 
                        sequence := {elem:="<entry xmlns='http://ntaforum.org/2011/registry'>
				<tooltype>http://Example.org/tools/ttcn/titan</tooltype>
				<version>1.2.3.4567</version>
				<harness xmlns='http://ntaforum.org/2011/harness' name='http://Example.org/ttcn/titan'>
					<supportedMode>invisible_and_automated</supportedMode>
					<supportedMode>visible_and_interactive</supportedMode>
				</harness>
				<documentation xml:lang='en'>
					<vendor>TTCNTestTools</vendor>
					<name>TCC</name>
					<description>Automated Toaster</description>
                                        <helpUri>http://someUri</helpUri>
				</documentation>
              			<published>2013-03-11T11:30:02-08:00</published>
				<location>
					<workspaceID>0d9374c4-aa1e-47f5-8b61-98bae0ad8ca1</workspaceID>
					<ipv4>127.0.0.1</ipv4>
					<hostname>localhost</hostname>
					<description>1stfloor,bldg.A,BudapestHQ</description>
				</location>
			</entry>" }
                      }
                    }

                  }
                } 
              }
            } 
          }

          log ("    ",v_Pubsub," is encodedTo: ",oct2char(bit2oct(encvalue(v_Pubsub))))




          s1:= "<query-harness xmlns='http://ntaforum.org/2011/harness' 
                  harness='http://ntaforum.org/2012/harness/resource/owner'
                  xml:lang='en'>

  <label>Resource Owner</label>
  <tooltip>Resource owner interface</tooltip>
  <description>Basic interface for NTAF entities which own resources.</description>
  <author>NTAF WT-003</author>
  <actionDecl name='getResourceList'>
    <label>Get Resource List</label>
    <tooltip>Fetch the list of resources supported by this tool</tooltip>
    <description>Fetch the list of resources owned by this tool. The list may include only the identifier for this tool or may contain identifiers for this tool and for additional
            resources it controls or has created. Resources returned are first level children unless the special value 'ALL' is sent as input.</description>
     <parameter name='resource'>
        <label>Resource</label>
        <tooltip>Identifier for a resource</tooltip>
        <description>An identifier for a resource. The identifier is unique and must be one of the identifiers returned by getResourceList. The special value 'SELF' returns resources owned
            by the NTAF entity. The special value 'ALL' returns children of the resource to all sub-levels (i.e. children, grandchildren, etc.).</description>
        <mandatory>false</mandatory>
        <datatype>string</datatype>
        <default>SELF</default>
     </parameter>
    <responseDecl>
      <item name='resource'>
        <label>Resource ID</label>
        <tooltip>Resource identifier</tooltip>
        <description>Each item is an identifier for a resource. Together the items form a list of resource identifiers. Resource identifiers must be unique.</description>
        <datatype>string</datatype>
        <allowedCount> 
          <min>1</min> 
        </allowedCount> 
      </item>
     </responseDecl>
  </actionDecl>
</query-harness>";


          var bitstring v_bit:=oct2bit(char2oct(s1));

          log ("    errCode: ",decvalue(v_bit,v_Query_harness),"  ",v_bit, " is decodedTo: ",v_Query_harness)


          //-----------------------------------------------------------------------------------------------------
          //CDATA
          //-----------------------------------------------------------------------------------------------------


          v_Pubsub:=   { choice := 
            { choice_list := 
              { { items := 
                  { max_items := omit, 
                    node := "toaster@esekilxxen1845.rnd.ericsson.se/1", 
                    subid := omit, 
                    item_list := { { 
                        id := "toaster@esekilxxen1845.rnd.ericsson.se/1#always_on", 
                        sequence := {elem:="<entry xmlns='http://ntaforum.org/2011/registry'>
				<tooltype>http://Example.org/tools/ttcn/titan</tooltype>
				<version>1.2.3.4567</version>
				<harness xmlns='http://ntaforum.org/2011/harness' name='http://Example.org/ttcn/titan'>
					<supportedMode>invisible_and_automated</supportedMode>
					<supportedMode>visible_and_interactive</supportedMode>
				</harness>
				<documentation xml:lang='en'>
					<vendor>TTCNTestTools</vendor>
					<name>TCC</name>
					<description>Automated Toaster</description>
                                        <helpUri>http://someUri</helpUri>
				</documentation>
              			<published>2013-03-11T11:30:02-08:00</published>
				<location>
					<workspaceID>0d9374c4-aa1e-47f5-8b61-98bae0ad8ca1</workspaceID>
					<ipv4>127.0.0.1</ipv4>
					<hostname>localhost</hostname>
					<description><![CDATA[this is my node. <i>this is italics</i> this is <b>bold</b>]]></description>
				</location>
			</entry>" }
                      }
                    }

                  }
                } 
              }
            } 
          }

          log ("    ",v_Pubsub," is encodedTo: ",oct2char(bit2oct(encvalue(v_Pubsub))))

          //----------------------------------------------------
          v_Entry :={
            tooltype := "http://Example.org/tools/ttcn/titan",
            version := "1.2.3.4567",
            harness_list := {
              {
                name := "http://Example.org/ttcn/titan",
                supportedMode_list := {
                  invisible_and_automated ,
                  visible_and_interactive 
                }
              }
            },
            documentation_list := {
              {
                lang := "en",
                vendor := "TTCNTestTools",
                name := "TCC",
                description := "Automated Toaster",
                helpUri := "http://someUri"
              }
            },
            published := "2013-03-11T11:30:02-08:00",
            location := {
              workspaceID := "0d9374c4-aa1e-47f5-8b61-98bae0ad8ca1",
              ipv4_list := {
                "127.0.0.1"
              },
              ipv6_list := { },
              hostname := "localhost",
              serialNumber := omit,
              assetNumber := omit,
              description := "aaa![CDATA[this is my node. <i>this is ""italics""</i> this is <b>bold</b>]]>bold</b>bbbb"
            },
            extension_list := { }
          }



          log("encoded v_Entry  ",oct2char(enc_Entry(v_Entry)))



          s1:="<entry xmlns='http://ntaforum.org/2011/registry'>
<tooltype>http://Example.org/tools/ttcn/titan</tooltype>
<version>1.2.3.4567</version>

<harness xmlns='http://ntaforum.org/2011/harness' name='http://Example.org/ttcn/titan'> 
<supportedMode>invisible_and_automated</supportedMode>
<supportedMode>visible_and_interactive</supportedMode>
</harness>
<documentation xml:lang='en'>
<vendor>TTCNTestTools</vendor>
<name>TCC</name>
<description>Automated Toaster</description>
            <helpUri>http://someUri</helpUri>
</documentation>
            <published>2013-03-11T11:30:02-08:00</published>
<location>
<workspaceID>0d9374c4-aa1e-47f5-8b61-98bae0ad8ca1</workspaceID>
<ipv4>127.0.0.1</ipv4>
<hostname>localhost</hostname>
<description>aaa<![CDATA[this is my node. <i>this is italics</i> this is <b>bold</b>]]>bbbb</description>
</location>
</entry>"

          v_Entry :=dec_Entry(char2oct(s1))
          log("v_Entry  ",v_Entry)








          s1:="<entry xmlns='http://ntaforum.org/2011/registry'>
<tooltype>http://Example.org/tools/ttcn/titan</tooltype>
<version>1.2.3.4567</version>

<harness xmlns='http://ntaforum.org/2011/harness' name='http://Example.org/ttcn/titan'> 
<supportedMode>invisible_and_automated</supportedMode>
<supportedMode>visible_and_interactive</supportedMode>
</harness>
<documentation xml:lang='en'>
<vendor>TTCNTestTools</vendor>
<name>TCC</name>
<description>Automated Toaster</description>
            <helpUri>http://someUri</helpUri>
</documentation>
            <published>2013-03-11T11:30:02-08:00</published>
<location>
<workspaceID>0d9374c4-aa1e-47f5-8b61-98bae0ad8ca1</workspaceID>
<ipv4>127.0.0.1</ipv4>
<hostname>localhost</hostname>
<description><![CDATA[INVITE urn:service:sos SIP/2.0 " &
          "Via: SIP/2.0/UDP 10.80.63.68:5060;branch=z9hG4bKb755649755f7a5a1c46d985eee0eb008jaaaaaaiaaaaaahbud3aa3Zqkv7aegit2opkfmsce " &
          "Via: SIP/2.0/TCP 10.80.63.220:5060;branch=z9hG4bKg3Zqkv7is1uh5v4cjx1wm31zzx9i7nu5o " &
          "Via: SIP/2.0/TCP [2001:1b70:82b2:4013:e12a:694b:4625:df08]:5070;branch=z9hG4bK204039595 " &
          "Max-Forwards: 68 " &
          "Route: <sip:lrf.tcu.ics.se;lr> " &
          "Record-Route: <sip:3Zqkv7%1Abaae5LTr8Wize%24oEORjciaaaaatel%3A%2B49165801800016@ecscf.tcu.ics.se:5060;maddr=10.80.63.68;lr> " &
          "Record-Route: <sip:10.80.63.220;transport=udp;lr> " &
          "Contact: <sip:+49165801800016@[2001:1b70:82b2:4013:e12a:694b:4625:df08]:5070;EriBindingId=2078;eribind-generated-at=10.80.63.220>;+g.3gpp.accesstype=\"cellular\";+g.3gpp.icsi-ref=\"urn%3Aurn-7%3A3gpp-service.ims.icsi.mmtel\";+sip.instance=\"<urn:gsma:imei:35160200-133064-0>\" " &
          "To: <urn:service:sos> " &
          "From: \"00016\" <sip:+49165801800016@tcu.ics.se>;tag=h7g4Esbg_4074409982 " &
          "Call-ID: 4074409902_2366689948@2001:1b70:82b2:4013:e12a:694b:4625:df08 " &
          "CSeq: 853184408 INVITE " &
          "Session-Expires: 1800 " &
          "Min-SE: 360 " &
          "Accept: application/sdp, application/3gpp-ims+xml " &
          "Allow: INVITE, ACK, CANCEL, BYE, UPDATE, PRACK, MESSAGE, REFER, NOTIFY " &
          "Content-Type: application/sdp " &
          "Priority: emergency " &
          "Supported: 100rel, replaces " &
          "P-Asserted-Identity: <tel:+49165801800016> " &
          "P-Asserted-Identity: <sip:+49165801800016@tcu.ics.se> " &
          "Accept-Contact: *;+g.3gpp.icsi-ref=\"urn%3Aurn-7%3A3gpp-service.ims.icsi.mmtel\" " &
          "P-Visited-Network-ID: tcu.ics.se " &
          "P-Access-Network-Info: 3GPP-E-UTRAN-FDD;utran-cell-id-3gpp=262800C00186A303 " &
          "P-Charging-Vector: icid-value=asbg2.tcu.ics.se-1368-11231-231234;icid-generated-at=asbg2.tcu.ics.se;orig-ioi=hem1.net " &
          "P-Charging-Function-Addresses: ccf=\"mmfe.tcu.ics.se\" " &
          "P-Preferred-Service: urn:urn-7:3gpp-service.ims.icsi.mmtel " &
          "Content-Length: 539 " &
          "v=0 " &
          "o=root 5000 1000 IN IP4 10.80.63.220 " &
          "s=QC VOIP " &
          "c=IN IP4 10.80.65.74 " &
          "t=0 0 " &
          "m=audio 9528 RTP/AVP 104 9 102 112 100 8 0 18 " &
          "b=AS:134 " &
          "a=rtpmap:104 AMR-WB/16000 " &
          "a=fmtp:104 mode-change-capability=2;max-red=0 " &
          "a=rtpmap:9 G722/8000 " &
          "a=rtpmap:102 AMR/8000 " &
          "a=fmtp:102 mode-change-capability=2;max-red=0 " &
          "a=rtpmap:112 telephone-event/16000 " &
          "a=fmtp:112 0-15 " &
          "a=rtpmap:100 telephone-event/8000 " &
          "a=fmtp:100 0-15 " &
          "a=sendrecv " &
          "a=maxptime:40 " &
          "a=ptime:20 " &
          "a=rtpmap:8 PCMA/8000 " &
          "a=rtpmap:0 PCMU/8000 " &
          "a=rtpmap:18 G729/8000 " &
          "a=fmtp:18 annexb=yes]]></description>
</location>
</entry>"

          v_Entry :=dec_Entry(char2oct(s1))
          log("v_Entry  ",v_Entry)
          //------------------------------------------------------------------------------------------
          var http_jabber_org_protocol_pubsub.Pubsub v_Pubsub_1 :=

          {
            choice := {
              choice_list := {
                {
                  retract := {
                    node := "acme_proxy@mycorp.com/2",
                    notify := omit,
                    item_list := {
                      {
                        id := "acme_proxy@mycorp.com/2#sleeper1",
                        sequence := omit
                      }
                    }
                  }
                }
              }
            }
          }

          log("encoded v_Pubsub  ",enc_Pubsub(v_Pubsub_1))


          log("re-decoded v_Pubsub  ",dec_Pubsub(enc_Pubsub(v_Pubsub_1)))



          var http_jabber_org_protocol_pubsub_owner.Pubsub v_Pubsub_owner :=
          {
            choice := {
              configure := {
                node := "ntaf.tools",
                choice := omit
              }
            }
          }

          log("encoded v_Pubsub_owner  ",enc_Pubsub_owner(v_Pubsub_owner))


          log("re-decoded v_Pubsub_owner  ",dec_Pubsub_owner(enc_Pubsub_owner(v_Pubsub_owner)))


          s1:="<pubsub xmlns='http://jabber.org/protocol/pubsub#owner'><configure node='ntaf.tools'/></pubsub>"

          log("decoded v_Pubsub_owner  ",dec_Pubsub_owner(char2oct(s1)))

          //-----------------------------------------------------------------------

          s1:=          "<query xmlns='http://jabber.org/protocol/disco#info' node='ntaf.tools'>
	<identity category='pubsub' type='collection'/>
	<feature var='http://jabber.org/protocol/pubsub'/>
	<feature var='http://jabber.org/protocol/disco#info'/>
	<x xmlns='jabber:x:data' type='result'>
		<field var='FORM_TYPE' type='hidden'>
			<value>http://jabber.org/protocol/pubsub#meta-data</value>
		</field>
		<field var='pubsub#title' type='text-single' label='Short name for the node'>
			<value/>
		</field>
		<field var='pubsub#description' type='text-single' label='Description of the node'>
			<value/>
		</field>
		<field var='pubsub#node_type' type='text-single' label='Whether the node is a leaf (default) or a collection'>
			<value>collection</value>
		</field>
		<field var='pubsub#collection' type='text-single' label='The collection with which a node is affiliated.'/>
		<field var='pubsub#subscribe' type='boolean' label='Allow subscriptions to node'>
			<value>1</value>
		</field>
		<field var='pubsub#subscription_required' type='boolean' label='New subscriptions require configuration'>
			<value>0</value>
		</field>
		<field var='pubsub#deliver_payloads' type='boolean' label='Deliver payloads with event notifications'>
			<value>1</value>
		</field>
		<field var='pubsub#notify_config' type='boolean' label='Notify subscribers when the node configuration changes'>
			<value>1</value>
		</field>
		<field var='pubsub#notify_delete' type='boolean' label='Notify subscribers when the node is deleted'>
			<value>1</value>
		</field>
		<field var='pubsub#notify_retract' type='boolean' label='Notify subscribers when items are removed from the node'>
			<value>1</value>
		</field>
		<field var='pubsub#presence_based_delivery' type='boolean' label='Only deliver notifications to available users'>
			<value>0</value>
		</field>
		<field var='pubsub#type' type='text-single' label='Type of payload data to be provided at this node'>
			<value/>
		</field>
		<field var='pubsub#body_xslt' type='text-single' label='Message body XSLT'>
			<value/>
		</field>
		<field var='pubsub#dataform_xslt' type='text-single' label='Payload XSLT'>
			<value/>
		</field>
		<field var='pubsub#access_model' type='list-single' label='Specify who may subscribe and retrieve items'>
			<value>open</value>            
			<option>
				<value>authorize</value>
			</option>
			<option>
				<value>open</value>
			</option>
			<option>
				<value>presence</value>
			</option>
			<option>
				<value>roster</value>
			</option>
			<option>
				<value>whitelist</value>
			</option>

		</field>
		<field var='pubsub#publish_model' type='list-single' label='Publisher model'>
            			<value>open</value>
			<option>
				<value>publishers</value>
			</option>
			<option>
				<value>subscribers</value>
			</option>
			<option>
				<value>open</value>
			</option>

		</field>
		<field var='pubsub#roster_groups_allowed' type='list-multi' label='Roster groups allowed to subscribe'/>
		<field var='pubsub#contact' type='jid-multi' label='People to contact with questions'/>
		<field var='pubsub#language' type='text-single' label='Default language'>
			<value>English</value>
		</field>
		<field var='pubsub#owner' type='jid-multi' label='Node owners'>
			<value>toaster@esekilxxen1843.rnd.ericsson.se</value>
		</field>
		<field var='pubsub#publisher' type='jid-multi' label='Node publishers'/>
		<field var='pubsub#itemreply' type='list-single' label='Select entity that should receive replies to items'>
			<value>owner</value>
		</field>
		<field var='pubsub#replyroom' type='jid-multi' label='Multi-user chat room to which replies should be sent'/>
		<field var='pubsub#replyto' type='jid-multi' label='Users to which replies should be sent'/>
		<field var='pubsub#leaf_node_association_policy' type='list-single' label='Who may associate leaf nodes with a collection'>
            			<value>all</value>
			<option label='Anyone may associate leaf nodes with the collection'>
				<value>all</value>
			</option>
			<option label='Only collection node owners may associate leaf nodes with the collection'>
				<value>owners</value>
			</option>
			<option label='Only those on a whitelist may associate leaf nodes with the collection'>
				<value>whitelist</value>
			</option>

		</field>
		<field var='pubsub#children_association_policy' type='list-single' label='Who may associate leaf nodes with a collection'>
            			<value>all</value>
			<option label='Anyone may associate leaf nodes with the collection'>
				<value>all</value>
			</option>
			<option label='Only collection node owners may associate leaf nodes with the collection'>
				<value>owners</value>
			</option>
			<option label='Only those on a whitelist may associate leaf nodes with the collection'>
				<value>whitelist</value>
			</option>

		</field>
		<field var='pubsub#leaf_node_association_whitelist' type='jid-multi' label='The list of JIDs that may associate leaf nodes with a collection'/>
		<field var='pubsub#children_association_whitelist' type='jid-multi' label='The list of JIDs that may associate leaf nodes with a collection'/>
		<field var='pubsub#leaf_nodes_max' type='text-single' label='The maximum number of child nodes that can be associated with a collection'>
			<value>-1</value>
		</field>
		<field var='pubsub#chilren_max' type='text-single' label='The maximum number of child nodes that can be associated with a collection'>
			<value>-1</value>
		</field>
		<field var='pubsub#children' type='text-multi' label='The child nodes (leaf or collection) associated with a collection'/>
	</x>
</query>"


          v_decodedPDUQuery_info := dec_Query_info(char2oct(s1));
          log("Decoded Info Query : ", v_decodedPDUQuery_info);




          s1:="<iq type='error' id='create_leaf_requestor' from='pubsub.e7d4c9efe72c63.ericsson.se' to='titan0@e7d4c9efe72c63.ericsson.se/1'>
	<tq0001:pubsub xmlns:tq0001='http://jabber.org/protocol/pubsub' xmlns:xdata='jabber:x:data' xmlns:tq0000='jabber:x:data'>
		<tq0001:create node='titan0@e7d4c9efe72c63.ericsson.se/1'/>
		<tq0001:configure>
			<xdata:x type='submit'>
				<tq0000:field var='pubsub#node_type'>
					<tq0000:value>leaf</tq0000:value>
				</tq0000:field>
				<tq0000:field var='pubsub#collection'>
					<tq0000:value>ntaf.tools</tq0000:value>
				</tq0000:field>
				<tq0000:field var='pubsub#children'>
					<tq0000:value/>
				</tq0000:field>
				<tq0000:field type='boolean' var='pubsub#deliver_payloads'>
					<tq0000:value>1</tq0000:value>
				</tq0000:field>
				<tq0000:field type='boolean' var='pubsub#notify_retract'>
					<tq0000:value>1</tq0000:value>
				</tq0000:field>
				<tq0000:field type='boolean' var='pubsub#subscribe'>
					<tq0000:value>1</tq0000:value>
				</tq0000:field>
				<tq0000:field type='boolean' var='pubsub#persist_items'>
					<tq0000:value>1</tq0000:value>
				</tq0000:field>
				<tq0000:field type='boolean' var='pubsub#max_items'>
					<tq0000:value>1</tq0000:value>
				</tq0000:field>
				<tq0000:field type='list-single' var='pubsub#access_model'>
					<tq0000:value>open</tq0000:value>
				</tq0000:field>
				<tq0000:field type='list-single' var='pubsub#publish_model'>
					<tq0000:value>publishers</tq0000:value>
				</tq0000:field>
			</xdata:x>
		</tq0001:configure>
	</tq0001:pubsub>
	<error code='409' type='cancel'>
		<conflict xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
	</error>
</iq>"








          v_decodedPDUsIq := dec_sIq(char2oct(s1));
          log("Decoded Example Eszter : ", v_decodedPDUsIq);


          //--------------------------------------------------------------------------------
          // HR60905 	
          //--------------------------------------------------------------------------------


          var  http_jabber_org_protocol_pubsub_event.Event v_Event:=

          {
            choice := {
              items := {
                node := "toaster@esekilxxen1843.rnd.ericsson.se/1",
                choice := {
                  item_list := {
                    {
                      id := "toaster@esekilxxen1843.rnd.ericsson.se/1#always_on",
                      node := omit,
                      publisher := omit,
                      choice := omit
                    }
                  }
                }
              }
            }
          }


          log("encode Event",enc_Pubsub_Event(v_Event))


          log("decode Event",dec_Pubsub_Event(enc_Pubsub_Event(v_Event)))
          v_Event:=

          {
            choice := {
              items := {
                node := "toaster@esekilxxen1843.rnd.ericsson.se/1",
                choice := {
                  item_list := {
                    {
                      id := "toaster@esekilxxen1843.rnd.ericsson.se/1#always_on",
                      node := omit,
                      publisher := omit,
                      choice := {elem:="<ns:a xmlns:ns='http://example.org/qualified'></ns:a>"}
                    }
                  }
                }
              }
            }
          }
          log("encode Event",enc_Pubsub_Event(v_Event))
          log("decode Event",dec_Pubsub_Event(enc_Pubsub_Event(v_Event)))








          //--------------------------------------------------------------------------------


          //--------------------------------------------------------------------------------





        }//end TC_staticEncodeDecode



        //***********************************************************************************************************
        //
        //***********************************************************************************************************



      }     with { encode "XML" }

      //endmodule
