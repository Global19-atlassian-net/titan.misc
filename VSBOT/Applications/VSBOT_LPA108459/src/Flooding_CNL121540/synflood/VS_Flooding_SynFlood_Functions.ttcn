/******************************************************************************
* Copyright (c) 2000-2018 Ericsson Telecom AB
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v2.0
* which accompanies this distribution, and is available at
* https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
*
* Contributor: david.ferenc.vranics@ericsson.com
******************************************************************************/

///////////////////////////////////////////////////////////
//  Module: VS_Flooding_SynFlood_Functions
//
//  Purpose:
//    This module contains the implementation of the SynFlood
//    related functions
//
//  Module Parameters:
//    -
//
//  Module depends on:
//    <VS_Flooding_SynFlood_Definitions>
//    <TCPPacketmsg_Types>
//    <VS_Logging_Functions>
//    <VS_Flooding_Functions>
//    <VS_Common_Definitions>
//    <VS_Common_Functions>
//    <TCCConversion_Functions>
//
//  Detailed Comments:
//    Implement the SynFlood functions here
//
///////////////////////////////////////////////////////////

module VS_Flooding_SynFlood_Functions
{

//=========================================================================
// Import Part
//=========================================================================

import from VS_Flooding_SynFlood_Definitions all;
import from TCPPacketmsg_Types all;
import from VS_Logging_Functions all;
import from VS_Flooding_Functions all;
import from VS_Common_Definitions all;
import from VS_Common_Functions all;
import from TCCConversion_Functions all;

//=========================================================================
// Functions
//=========================================================================

///////////////////////////////////////////////////////////////////////////////
//  Function: f_VS_Flooding_SynFlood_init
// 
//  Purpose:
//    Initialize a SynFlood test
//
//  Parameters:
//    pl_TCName - *in* *charstring* - name of the TC
//    pl_TCidx - *in* *integer* - the index of the TC
// 
//  Return Value:
//    -
//
//  Errors:
//    - 
// 
//  Detailed description:
//    Calls the parent's init. Maps packet_PT.
//    Should only be called by the behavior()!
// 
///////////////////////////////////////////////////////////////////////////////

private function f_VS_Flooding_SynFlood_init(in charstring pl_TCName, in integer pl_TCidx)
runs on VS_Flooding_SynFlood_CT
{
  log_debug(%definitionId & " started.");
  
  f_VS_Flooding_init(pl_TCName, pl_TCidx);
  map(self:packet_PT,system:packet_PT);
  
  log_debug(%definitionId & " finished.");
}

///////////////////////////////////////////////////////////////////////////////
//  Function: f_VS_Flooding_SynFlood_behavior
// 
//  Purpose:
//    Execute a SynFlood TestCase
//
//  Parameters:
//    pl_TC - *in* <VS_Flooding_SynFlood_TestCaseType_SynFlood> - the TC to be executed
//    pl_TCName - *in* *charstring* - name of the TC
//    pl_TCidx - *in* *integer* - the index of the TC
// 
//  Return Value:
//    -
//
//  Errors:
//    -
// 
//  Detailed description:
//    First calls the init. Implements load generating (fills and sends packets
//    using TL_limiter to corrigate average towards configured packet/sec).
// 
///////////////////////////////////////////////////////////////////////////////

function f_VS_Flooding_SynFlood_behavior(in VS_Flooding_SynFlood_TestCaseType_SynFlood pl_TC, in charstring pl_TCName, in integer pl_TCidx)
runs on VS_Flooding_SynFlood_CT
{  
  log_debug(%definitionId & " started.");
  
  f_VS_Flooding_SynFlood_init(pl_TCName, pl_TCidx);
  
  timer TL_limiter;
  timer TL_heartbeat := 1.0;
  
  var float vl_limiterValue := pl_TC.packetPerSec;
  var integer vl_synCounter := 1;
  var integer vl_previousSynCounter := 0;
  var TCPPacket vl_packetin;
  var TCPPacket vl_packetout := pl_TC.packet;
  
  packet_PT.send(vl_packetout);
  
  TL_limiter.start(1.0/vl_limiterValue);
  TL_heartbeat.start;
 
  alt {
    [] TL_heartbeat.timeout
       {
         f_VS_Flooding_reportInteger(vl_synCounter);
         
         if (pl_TC.packetPerSec > 1.0 and pl_TC.packetPerSec != int2float(vl_synCounter) and vl_limiterValue<pl_TC.packetPerSec*pl_TC.packetPerSec)
         {
           //Try to corrigate the actual syn/sec towards the configured
           vl_limiterValue := vl_limiterValue*pl_TC.packetPerSec/int2float(vl_synCounter);
         }
         else
         if (pl_TC.packetPerSec > 1.0 and pl_TC.packetPerSec != int2float(vl_synCounter))
         {
           log_warning("It seems that your host can't generate the configured syn/sec value...");
         }
         vl_previousSynCounter := vl_synCounter;
         vl_synCounter := 0;
         TL_heartbeat.start;
         repeat
       }
    [] TL_limiter.timeout
       {
         log_debug("Sending TCPPacket Syn!");
         
         if (ispresent(pl_TC.srcPortHigh))
         {
           if (pl_TC.srcPortHigh > vl_packetout.TCP.src)
           {
             vl_packetout.TCP.src := vl_packetout.TCP.src + 1;
           }
           else
           {
             vl_packetout.TCP.src := pl_TC.packet.TCP.src;
           }
         }
         
         if (ispresent(pl_TC.dstPortHigh))
         {
           if (pl_TC.dstPortHigh > vl_packetout.TCP.dst)
           {
             vl_packetout.TCP.dst := vl_packetout.TCP.dst + 1;
           }
           else
           {
             vl_packetout.TCP.dst := pl_TC.packet.TCP.dst;
           }
         }
         
         if (ispresent(pl_TC.srcIPHigh))
         {
           if (f_compOctetstring(f_OctetIpv4(pl_TC.srcIPHigh), f_OctetIpv4(vl_packetout.IP.src)) == 1)
           {
             f_VS_Common_incIPv4(vl_packetout.IP.src);
           }
           else
           {
             vl_packetout.IP.src := pl_TC.packet.IP.src;
           }
         }
         
         if (ispresent(pl_TC.dstIPHigh))
         {
           if (f_compOctetstring(f_OctetIpv4(pl_TC.dstIPHigh), f_OctetIpv4(vl_packetout.IP.dst)) == 1)
           {
             f_VS_Common_incIPv4(vl_packetout.IP.dst);
           }
           else
           {
             vl_packetout.IP.dst := pl_TC.packet.IP.dst;
           }
         }

         packet_PT.send(vl_packetout);
         vl_synCounter := vl_synCounter + 1;
         TL_limiter.start(1.0/vl_limiterValue);
         repeat
       }
    [] packet_PT.receive(TCPPacket:?) -> value vl_packetin
       {
         log_debug("TCPPacket received! " & log2str(vl_packetin));
         repeat
       }
    [] any port.receive { log_error("Unexpected message received!"); setverdict(inconc); /*f_VS_Exec_reportTCVerdict();*/ stop }
  }
  
  
  if (TL_limiter.running)
  {
    TL_limiter.stop;
  }
  
  stats_PT.send("finished");
  
  unmap(self:packet_PT,system:packet_PT);
  
  log_debug(%definitionId & " finished.");
}

}  // end of module
