// This Java file was generated by the TITAN Designer eclipse plug-in
// of the TTCN-3 Test Executor version CRL 113 200/6 R5A
// for (elnrnag@elx78355y6x)

// Copyright (c) 2000-2018 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

package org.eclipse.titan.generated;

import org.eclipse.titan.runtime.core.Base_Template;
import org.eclipse.titan.runtime.core.Base_Template.template_sel;
import org.eclipse.titan.runtime.core.Base_Type;
import org.eclipse.titan.runtime.core.Base_Type.TTCN_Typedescriptor;
import org.eclipse.titan.runtime.core.Index_Redirect;
import org.eclipse.titan.runtime.core.Module_List;
import org.eclipse.titan.runtime.core.Param_Types.Module_Param_Name;
import org.eclipse.titan.runtime.core.Param_Types.Module_Parameter;
import org.eclipse.titan.runtime.core.RAW.RAW_enc_tr_pos;
import org.eclipse.titan.runtime.core.RAW.RAW_enc_tree;
import org.eclipse.titan.runtime.core.TTCN_Buffer;
import org.eclipse.titan.runtime.core.TTCN_EncDec.coding_type;
import org.eclipse.titan.runtime.core.TTCN_EncDec.error_type;
import org.eclipse.titan.runtime.core.TTCN_EncDec.raw_order_t;
import org.eclipse.titan.runtime.core.TTCN_EncDec_ErrorContext;
import org.eclipse.titan.runtime.core.TTCN_Logger;
import org.eclipse.titan.runtime.core.TTCN_Module;
import org.eclipse.titan.runtime.core.Text_Buf;
import org.eclipse.titan.runtime.core.TitanAlt_Status;
import org.eclipse.titan.runtime.core.TitanCharString;
import org.eclipse.titan.runtime.core.TitanComponent;
import org.eclipse.titan.runtime.core.TitanComponent_template;
import org.eclipse.titan.runtime.core.TitanFloat;
import org.eclipse.titan.runtime.core.TitanLoggerApi;
import org.eclipse.titan.runtime.core.TitanOctetString;
import org.eclipse.titan.runtime.core.TitanPort;
import org.eclipse.titan.runtime.core.TtcnError;
import org.eclipse.titan.generated.IPL4asp__Types.*;
import org.eclipse.titan.generated.Socket__API__Definitions.*;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.LinkedList;
import org.eclipse.titan.user_provided.IPL4asp__PT_PROVIDER;
import org.eclipse.titan.user_provided.IPL4asp__PortType_externalfunctions;

public final class IPL4asp__PortType extends TTCN_Module {

public static final TTCN_Typedescriptor anytype_descr_ = new TTCN_Typedescriptor("anytype", null, null);

public IPL4asp__PortType() {
super("IPL4asp_PortType", module_type_enum.TTCN3_MODULE);
}

public static class anytype extends Base_Type {
public enum union_selection_type { UNBOUND_VALUE };
private union_selection_type union_selection;
public anytype() {
union_selection = union_selection_type.UNBOUND_VALUE;
};

public anytype(final anytype otherValue) {
copy_value(otherValue);
};

private void copy_value(final anytype otherValue) {
union_selection = otherValue.union_selection;
}

public anytype operator_assign( final anytype otherValue ) {
if (otherValue != this) {
clean_up();
copy_value(otherValue);
}

return this;
}
@Override
public anytype operator_assign( final Base_Type otherValue ) {
if (otherValue instanceof anytype) {
return operator_assign((anytype)otherValue);
}
throw new TtcnError("Internal Error: value can not be cast to @IPL4asp_PortType.anytype.");
}

@Override
public void clean_up() {
union_selection = union_selection_type.UNBOUND_VALUE;
}

public boolean ischosen(final union_selection_type checked_selection) {
if(checked_selection == union_selection_type.UNBOUND_VALUE) {
throw new TtcnError("Internal error: Performing ischosen() operation on an invalid field of union type @IPL4asp_PortType.anytype.");
}
return union_selection == checked_selection;
}

@Override
public boolean is_bound() {
return union_selection != union_selection_type.UNBOUND_VALUE;
}

@Override
public boolean is_value() {
switch (union_selection) {
case UNBOUND_VALUE:
return false;
default:
throw new TtcnError("Invalid selection in union is_bound");
}
}

@Override
public boolean is_present() {
return is_bound();
}

public boolean operator_equals( final anytype otherValue ) {
must_bound( "The left operand of comparison is an unbound value of union type @IPL4asp_PortType.anytype." );
otherValue.must_bound( "The right operand of comparison is an unbound value of union type @IPL4asp_PortType.anytype." );
if (union_selection != otherValue.union_selection) {
return false;
}
switch (union_selection) {
default:
return false;
}
}
@Override
public boolean operator_equals( final Base_Type otherValue ) {
if (otherValue instanceof anytype) {
return operator_equals((anytype)otherValue);
}
throw new TtcnError("Internal Error: value can not be cast to @IPL4asp_PortType.anytype.");
}

public boolean operator_not_equals( final anytype otherValue ) {
return !operator_equals(otherValue);
}

public union_selection_type get_selection() {
return union_selection;
}
@Override
public void log() {
switch (union_selection) {
default:
TTCN_Logger.log_event_unbound();
break;
}
}

@Override
public void set_param(final Module_Parameter param) {
param.basic_check(Module_Parameter.basic_check_bits_t.BC_VALUE.getValue(), "union value");
if(param.get_type() == Module_Parameter.type_t.MP_Value_List && param.get_size() == 0) {
return;
}
if (param.get_type() != Module_Parameter.type_t.MP_Assignment_List) {
param.error("union value with field name was expected");
}
final Module_Parameter mp_last = param.get_elem(param.get_size() - 1);
final String last_name = mp_last.get_id().get_name();
mp_last.error(MessageFormat.format("Field {0} does not exist in type @IPL4asp_PortType.anytype.", last_name));
}

@Override
public void encode_text(final Text_Buf text_buf) {
switch (union_selection) {
default:
throw new TtcnError("Text encoder: Encoding an unbound value of union type @IPL4asp_PortType.anytype.");
}
}

@Override
public void decode_text(final Text_Buf text_buf) {
final int temp = text_buf.pull_int().getInt();
switch (temp) {
default:
throw new TtcnError("Text decoder: Unrecognized union selector was received for type @IPL4asp_PortType.anytype.");
}
}

@Override
public void encode(final TTCN_Typedescriptor p_td, final TTCN_Buffer p_buf, final coding_type p_coding, final int flavour) {
switch (p_coding) {
case CT_RAW: {
final TTCN_EncDec_ErrorContext errorContext = new TTCN_EncDec_ErrorContext("While RAW-encoding type '%s': ", p_td.name);
if (p_td.raw == null) {
TTCN_EncDec_ErrorContext.error_internal("No RAW descriptor available for type '%s'.", p_td.name);
}
final RAW_enc_tr_pos rp = new RAW_enc_tr_pos(0, null);
final RAW_enc_tree root = new RAW_enc_tree(true, null, rp, 1, p_td.raw);
RAW_encode(p_td, root);
root.put_to_buf(p_buf);
errorContext.leaveContext();
break;
}
default:
throw new TtcnError(MessageFormat.format("Unknown coding method requested to encode type `{0}''", p_td.name));
}
}

@Override
public void decode(final TTCN_Typedescriptor p_td, final TTCN_Buffer p_buf, final coding_type p_coding, final int flavour) {
switch (p_coding) {
case CT_RAW: {
final TTCN_EncDec_ErrorContext errorContext = new TTCN_EncDec_ErrorContext("While RAW-decoding type '%s': ", p_td.name);
if (p_td.raw == null) {
TTCN_EncDec_ErrorContext.error_internal("No RAW descriptor available for type '%s'.", p_td.name);
}
raw_order_t order;
switch (p_td.raw.top_bit_order) {
case TOP_BIT_LEFT:
order = raw_order_t.ORDER_LSB;
break;
case TOP_BIT_RIGHT:
default:
order = raw_order_t.ORDER_MSB;
break;
}
final int rawr = RAW_decode(p_td, p_buf, p_buf.get_len() * 8, order);
if (rawr < 0) {
final error_type temp = error_type.values()[-rawr];
switch (temp) {
case ET_INCOMPL_MSG:
case ET_LEN_ERR:
TTCN_EncDec_ErrorContext.error(temp, "Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
break;
case ET_UNBOUND:
default:
TTCN_EncDec_ErrorContext.error(error_type.ET_INVAL_MSG, "Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
break;
}
}
errorContext.leaveContext();
break;
}
default:
throw new TtcnError(MessageFormat.format("Unknown coding method requested to decode type `{0}''", p_td.name));
}
}

}
public static class anytype_template extends Base_Template {
//if single value which value?
private anytype.union_selection_type single_value_union_selection;
// value_list part
private ArrayList<anytype_template> value_list;

private void copy_value(final anytype other_value) {
single_value_union_selection = other_value.get_selection();
set_selection(template_sel.SPECIFIC_VALUE);
}
private void copy_template(final anytype_template other_value) {
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value_union_selection = other_value.single_value_union_selection;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list = new ArrayList<anytype_template>(other_value.value_list.size());
for(int i = 0; i < other_value.value_list.size(); i++) {
final anytype_template temp = new anytype_template(other_value.value_list.get(i));
value_list.add(temp);
}
break;
default:
throw new TtcnError("Copying an uninitialized template of union type @IPL4asp_PortType.anytype.");
}
set_selection(other_value);
}

public anytype_template() {
// do nothing
}
public anytype_template(final template_sel other_value) {
super(other_value);
check_single_selection(other_value);
}
public anytype_template(final anytype other_value) {
copy_value(other_value);
}
public anytype_template(final anytype_template other_value) {
copy_template(other_value);
}

@Override
public void clean_up() {
switch (template_selection) {
case SPECIFIC_VALUE:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.clear();
value_list = null;
break;
default:
break;
}
template_selection = template_sel.UNINITIALIZED_TEMPLATE;
}

@Override
public anytype_template operator_assign(final template_sel otherValue ) {
check_single_selection(otherValue);
clean_up();
set_selection(otherValue);
return this;
}

public anytype_template operator_assign(final anytype otherValue ) {
clean_up();
copy_value(otherValue);
return this;
}

public anytype_template operator_assign(final anytype_template otherValue ) {
if (otherValue != this) {
clean_up();
copy_template(otherValue);
}
return this;
}

@Override
public anytype_template operator_assign(final Base_Type otherValue ) {
if (otherValue instanceof anytype) {
return operator_assign((anytype)otherValue);
}
throw new TtcnError("Internal Error: value can not be cast to anytype.");
}

@Override
public anytype_template operator_assign(final Base_Template otherValue ) {
if (otherValue instanceof anytype_template) {
return operator_assign((anytype_template)otherValue);
}
throw new TtcnError("Internal Error: value can not be cast to anytype_template.");
}

public boolean match(final anytype other_value) {
return match(other_value, false);
}

public boolean match(final anytype other_value, final boolean legacy) {
if(!other_value.is_bound()) {
return false;
}
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return true;
case OMIT_VALUE:
return false;
case SPECIFIC_VALUE:
final anytype.union_selection_type value_selection = other_value.get_selection();
if (value_selection == anytype.union_selection_type.UNBOUND_VALUE) {
return false;
}
if (value_selection != single_value_union_selection) {
return false;
}
switch (value_selection) {
default:
throw new TtcnError("Internal error: Invalid selector in a specific value when matching a template of union type @IPL4asp_PortType.anytype.");
}
case VALUE_LIST:
case COMPLEMENTED_LIST:
for(int i = 0 ; i < value_list.size(); i++) {
if(value_list.get(i).match(other_value, legacy)) {
return template_selection == template_sel.VALUE_LIST;
}
}
return template_selection == template_sel.COMPLEMENTED_LIST;
default:
throw new TtcnError("Matching with an uninitialized/unsupported integer template.");
}
}

	@Override
	public boolean match(final Base_Type otherValue, final boolean legacy) {
	if (otherValue instanceof anytype) {
		return match((anytype)otherValue, legacy);
	}

		throw new TtcnError("Internal Error: The left operand of assignment is not of type anytype.");
	}

public boolean ischosen(final anytype.union_selection_type checked_selection) {
if(checked_selection == anytype.union_selection_type.UNBOUND_VALUE) {
throw new TtcnError("Internal error: Performing ischosen() operation on an invalid field of union type @IPL4asp_PortType.anytype.");
}
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value_union_selection == anytype.union_selection_type.UNBOUND_VALUE) {
throw new TtcnError("Internal error: Invalid selector in a specific value when performing ischosen() operation on a template of union type @IPL4asp_PortType.anytype.");
}
return single_value_union_selection == checked_selection;
case VALUE_LIST:
if (value_list.isEmpty()) {
throw new TtcnError("Internal error: Performing ischosen() operation on a template of union type @IPL4asp_PortType.anytype containing an empty list.");
}
for (int i = 0; i < value_list.size(); i++) {
if(!value_list.get(i).ischosen(checked_selection)) {
return false;
}
}
return true;
default:
return false;
}
}

@Override
public boolean is_value() {
if (template_selection != template_sel.SPECIFIC_VALUE || is_ifPresent) {
return false;
}
switch (single_value_union_selection) {
default:
throw new TtcnError("Internal error: Invalid selector in a specific value when performing is_value operation on a template of union type @IPL4asp_PortType.anytype.");
}
}

@Override
public anytype valueof() {
if (template_selection != template_sel.SPECIFIC_VALUE || is_ifPresent) {
throw new TtcnError("Performing a valueof or send operation on a non-specific template of union type @IPL4asp_PortType.anytype.");
}
switch (single_value_union_selection) {
default:
throw new TtcnError("Internal error: Invalid selector in a specific value when performing valueof operation on a template of union type @IPL4asp_PortType.anytype.");
}
}

@Override
public void set_type(final template_sel template_type, final int list_length) {
if (template_type != template_sel.VALUE_LIST && template_type != template_sel.COMPLEMENTED_LIST) {
throw new TtcnError("Internal error: Setting an invalid list for a template of union type @IPL4asp_PortType.anytype.");
}
clean_up();
set_selection(template_type);
value_list = new ArrayList<anytype_template>(list_length);
for(int i = 0 ; i < list_length; i++) {
value_list.add(new anytype_template());
}
}

@Override
public anytype_template list_item(final int list_index)  {
if (template_selection != template_sel.VALUE_LIST && template_selection != template_sel.COMPLEMENTED_LIST) {
throw new TtcnError("Internal error: Accessing a list element of a non-list template of union type @IPL4asp_PortType.anytype.");
}
if (list_index < 0) {
throw new TtcnError("Internal error: Index underflow in a value list template of union type @IPL4asp_PortType.anytype.");
}
if(list_index >= value_list.size()) {
throw new TtcnError("Internal error: Index overflow in a value list template of union type @IPL4asp_PortType.anytype.");
}
return value_list.get(list_index);
}

@Override
public boolean match_omit(final boolean legacy) {
if (is_ifPresent) {
return true;
}
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return true;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (int i = 0 ; i < value_list.size(); i++) {
if (value_list.get(i).match_omit(legacy)) {
return template_selection == template_sel.VALUE_LIST;
}
}
return template_selection == template_sel.COMPLEMENTED_LIST;
}
return false;
default:
return false;
}
}

@Override
public void log() {
switch (template_selection) {
case SPECIFIC_VALUE:
break;
case COMPLEMENTED_LIST:
TTCN_Logger.log_event_str("complement");
case VALUE_LIST:
TTCN_Logger.log_char('(');
for (int list_count = 0; list_count < value_list.size(); list_count++) {
if (list_count > 0) {
TTCN_Logger.log_event_str(", ");
}
value_list.get(list_count).log();
}
TTCN_Logger.log_char(')');
break;
default:
log_generic();
break;
}
log_ifpresent();
}

@Override
public void log_match(final Base_Type match_value, final boolean legacy) {
if (match_value instanceof anytype) {
log_match((anytype)match_value, legacy);
			return;
}

throw new TtcnError("Internal Error: value can not be cast to @IPL4asp_PortType.anytype.");
}

public void log_match(final anytype match_value, final boolean legacy) {
if (TTCN_Logger.matching_verbosity_t.VERBOSITY_COMPACT == TTCN_Logger.get_matching_verbosity() && match(match_value, legacy)) {
TTCN_Logger.print_logmatch_buffer();
TTCN_Logger.log_event_str(" matched");
return;
}
if (template_selection == template_sel.SPECIFIC_VALUE && single_value_union_selection == match_value.get_selection()) {
switch (single_value_union_selection) {
default:
TTCN_Logger.print_logmatch_buffer();
TTCN_Logger.log_event_str("<invalid selector>");
}
} else {
TTCN_Logger.print_logmatch_buffer();
match_value.log();
TTCN_Logger.log_event_str(" with ");
log();
if (match(match_value, legacy)) {
TTCN_Logger.log_event_str(" matched");
} else {
TTCN_Logger.log_event_str(" unmatched");
}
}
}

@Override
public void encode_text(final Text_Buf text_buf) {
encode_text_base(text_buf);
switch (template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case SPECIFIC_VALUE:
text_buf.push_int(single_value_union_selection.ordinal());
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.size());
for (int i = 0; i < value_list.size(); i++) {
value_list.get(i).encode_text(text_buf);
}
break;
default:
throw new TtcnError("Text encoder: Encoding an uninitialized template of type @IPL4asp_PortType.anytype.");
}
}

@Override
public void decode_text(final Text_Buf text_buf) {
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case SPECIFIC_VALUE:{
final int temp = text_buf.pull_int().getInt();
switch (temp) {
}
}
case VALUE_LIST:
case COMPLEMENTED_LIST: {
final int size = text_buf.pull_int().getInt();
value_list = new ArrayList<anytype_template>(size);
for (int i = 0; i < size; i++) {
final anytype_template temp2 = new anytype_template();
temp2.decode_text(text_buf);
value_list.add(temp2);
}
break;
}
default:
throw new TtcnError("Text decoder: Unrecognized selector was received in a template of type @IPL4asp_PortType.anytype.");
}
}

@Override
public void set_param(final Module_Parameter param) {
if((param.get_id() instanceof Module_Param_Name) && param.get_id().next_name()) {
final String param_field = param.get_id().get_current_name();
if (param_field.charAt(0) >= '0' && param_field.charAt(0) <= '9') {
param.error("Unexpected array index in module parameter, expected a valid field name for union template type `@IPL4asp_PortType.anytype");
}
 else {
param.error(MessageFormat.format("Field `{0}' not found in union template type `{0}", param_field));
}
}
param.basic_check(Module_Parameter.basic_check_bits_t.BC_TEMPLATE.getValue(), "union template");
switch (param.get_type()) {
case MP_Omit:
operator_assign(template_sel.OMIT_VALUE);
break;
case MP_Any:
operator_assign(template_sel.ANY_VALUE);
break;
case MP_AnyOrNone:
operator_assign(template_sel.ANY_OR_OMIT);
break;
case MP_List_Template:
case MP_ComplementList_Template: {
final int size = param.get_size();
set_type(param.get_type() == Module_Parameter.type_t.MP_List_Template ? template_sel.VALUE_LIST : template_sel.COMPLEMENTED_LIST, size);
for (int i = 0; i < size; i++) {
list_item(i).set_param(param.get_elem(i));
}
break;
}
case MP_Value_List:
if (param.get_size() == 0) {
break;
}
param.type_error("union template", "@IPL4asp_PortType.anytype");
break;
case MP_Assignment_List: {
final Module_Parameter mp_last = param.get_elem(param.get_size() - 1);
final String last_name = mp_last.get_id().get_name();
mp_last.error(MessageFormat.format("Field {0} does not exist in type @IPL4asp_PortType.anytype.", last_name));
break;
}
default:
param.type_error("union template", "@IPL4asp_PortType.anytype");
}
is_ifPresent = param.get_ifpresent();
}

@Override
public void check_restriction(final template_res restriction, final String name, final boolean legacy) {
if (template_selection == template_sel.UNINITIALIZED_TEMPLATE) {
return;
}
switch ((name != null && restriction == template_res.TR_VALUE) ? template_res.TR_OMIT : restriction) {
case TR_OMIT:
if (template_selection == template_sel.OMIT_VALUE) {
return;
}
case TR_VALUE:
if (template_selection != template_sel.SPECIFIC_VALUE || is_ifPresent) {
break;
}
switch (single_value_union_selection) {
default:
throw new TtcnError("Internal error: Invalid selector in a specific value when performing check_restriction operation on a template of union type @IPL4asp_PortType.anytype.");
}
case TR_PRESENT:
if (!match_omit(legacy)) {
return;
}
break;
default:
return;
}
throw new TtcnError(MessageFormat.format("Restriction `{0}'' on template of type {1} violated.", get_res_name(restriction), name == null ? "@IPL4asp_PortType.anytype" : name));
}
}
public static  class IPL4asp__PT extends IPL4asp__PT_PROVIDER {
enum message_selection { MESSAGE_0, MESSAGE_1, MESSAGE_2};
private class Message_queue_item {
message_selection item_selection;
// base type could be: IPL4asp__Types.ASP__RecvFrom, Socket__API__Definitions.PortEvent, IPL4asp__Types.ASP__ConnId__ReadyToRelease
Base_Type message;
int sender_component;
}
private LinkedList<Message_queue_item> message_queue = new LinkedList<Message_queue_item>();

private void remove_msg_queue_head() {
message_queue.removeFirst();
}

protected void clear_queue() {
message_queue.clear();
}

public IPL4asp__PT( final String port_name) {
super(port_name);
}

public IPL4asp__PT( ) {
this((String)null);
}

public void send(final IPL4asp__Types.ASP__SendTo send_par, final TitanComponent destination_component, final TitanFloat timestamp_redirect) {
if (!is_started) {
throw new TtcnError(MessageFormat.format("Sending a message on port {0}, which is not started.", get_name()));
}
if (!destination_component.is_bound()) {
throw new TtcnError("Unbound component reference in the to clause of send operation.");
}
final TTCN_Logger.Severity log_severity = destination_component.getComponent() == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.PORTEVENT_MMSEND : TTCN_Logger.Severity.PORTEVENT_MCSEND;
if (TTCN_Logger.log_this_event(log_severity)) {
TTCN_Logger.begin_event(log_severity);
TTCN_Logger.log_event_str(" @IPL4asp_Types.ASP_SendTo : ");
send_par.log();
TTCN_Logger.log_msgport_send(get_name(), destination_component.getComponent(), TTCN_Logger.end_event_log2str());
}
if (destination_component.operator_equals(TitanComponent.SYSTEM_COMPREF)) {
get_default_destination();
outgoing_send(send_par);
} else {
final Text_Buf text_buf = new Text_Buf();
prepare_message(text_buf, "@IPL4asp_Types.ASP_SendTo");
send_par.encode_text(text_buf);
send_data(text_buf, destination_component);
}
}

public void send(final IPL4asp__Types.ASP__SendTo send_par, final TitanFloat timestamp_redirect) {
send(send_par, new TitanComponent(get_default_destination()), timestamp_redirect);
}

public void send(final IPL4asp__Types.ASP__SendTo_template send_par, final TitanComponent destination_component, final TitanFloat timestamp_redirect) {
final IPL4asp__Types.ASP__SendTo send_par_value = send_par.valueof();
send(send_par_value, destination_component, timestamp_redirect);
}

public void send(final IPL4asp__Types.ASP__SendTo_template send_par, final TitanFloat timestamp_redirect) {
final IPL4asp__Types.ASP__SendTo send_par_value = send_par.valueof();
send(send_par_value, new TitanComponent(get_default_destination()), timestamp_redirect);
}

public void send(final IPL4asp__Types.ASP__Send send_par, final TitanComponent destination_component, final TitanFloat timestamp_redirect) {
if (!is_started) {
throw new TtcnError(MessageFormat.format("Sending a message on port {0}, which is not started.", get_name()));
}
if (!destination_component.is_bound()) {
throw new TtcnError("Unbound component reference in the to clause of send operation.");
}
final TTCN_Logger.Severity log_severity = destination_component.getComponent() == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.PORTEVENT_MMSEND : TTCN_Logger.Severity.PORTEVENT_MCSEND;
if (TTCN_Logger.log_this_event(log_severity)) {
TTCN_Logger.begin_event(log_severity);
TTCN_Logger.log_event_str(" @IPL4asp_Types.ASP_Send : ");
send_par.log();
TTCN_Logger.log_msgport_send(get_name(), destination_component.getComponent(), TTCN_Logger.end_event_log2str());
}
if (destination_component.operator_equals(TitanComponent.SYSTEM_COMPREF)) {
get_default_destination();
outgoing_send(send_par);
} else {
final Text_Buf text_buf = new Text_Buf();
prepare_message(text_buf, "@IPL4asp_Types.ASP_Send");
send_par.encode_text(text_buf);
send_data(text_buf, destination_component);
}
}

public void send(final IPL4asp__Types.ASP__Send send_par, final TitanFloat timestamp_redirect) {
send(send_par, new TitanComponent(get_default_destination()), timestamp_redirect);
}

public void send(final IPL4asp__Types.ASP__Send_template send_par, final TitanComponent destination_component, final TitanFloat timestamp_redirect) {
final IPL4asp__Types.ASP__Send send_par_value = send_par.valueof();
send(send_par_value, destination_component, timestamp_redirect);
}

public void send(final IPL4asp__Types.ASP__Send_template send_par, final TitanFloat timestamp_redirect) {
final IPL4asp__Types.ASP__Send send_par_value = send_par.valueof();
send(send_par_value, new TitanComponent(get_default_destination()), timestamp_redirect);
}

public TitanAlt_Status receive(final TitanComponent_template sender_template, final TitanComponent sender_pointer, final TitanFloat timestamp_redirect, final Index_Redirect index_redirect) {
if (message_queue.isEmpty()) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
}
TTCN_Logger.log_str(TTCN_Logger.Severity.MATCHING_PROBLEM, MessageFormat.format("Matching on port {0} failed: Port is not started and the queue is empty.", get_name()));
return TitanAlt_Status.ALT_NO;
}
final Message_queue_item my_head = message_queue.getFirst();
if (my_head == null) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
 } else {
TTCN_Logger.log_str(TTCN_Logger.Severity.MATCHING_PROBLEM, MessageFormat.format("Matching on port {0} failed: Port is not started and the queue is empty.", get_name()));
return TitanAlt_Status.ALT_NO;
}
}
if (!sender_template.match(my_head.sender_component, false)) {
final TTCN_Logger.Severity log_sev = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC:TTCN_Logger.Severity.MATCHING_MCUNSUCC;
if (TTCN_Logger.log_this_event(log_sev)) {
TTCN_Logger.begin_event(log_sev);
TTCN_Logger.log_event("Matching on port {0}: Sender of the first message in the queue does not match the from clause:", get_name());
sender_template.log_match(new TitanComponent(my_head.sender_component), false);
TTCN_Logger.end_event();
}
return TitanAlt_Status.ALT_NO;
} else {
if (sender_pointer != null) {
sender_pointer.operator_assign(my_head.sender_component);
}
TTCN_Logger.log(my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMSUCCESS : TTCN_Logger.Severity.MATCHING_MCSUCCESS,  MessageFormat.format("Matching on port {0} succeeded.", get_name()));
final TTCN_Logger.Severity log_sev = my_head.sender_component==TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.PORTEVENT_MMRECV : TTCN_Logger.Severity.PORTEVENT_MCRECV;
if (TTCN_Logger.log_this_event(log_sev)) {
switch (my_head.item_selection) {
case MESSAGE_0:
TTCN_Logger.begin_event(log_sev);
TTCN_Logger.log_event_str(": @IPL4asp_Types.ASP_RecvFrom: ");
my_head.message.log();
TTCN_Logger.log_msgport_recv(get_name(), TitanLoggerApi.Msg__port__recv_operation.enum_type.receive__op, my_head.sender_component, new TitanCharString(""),TTCN_Logger.end_event_log2str(), msg_head_count+1);
break;
case MESSAGE_1:
TTCN_Logger.begin_event(log_sev);
TTCN_Logger.log_event_str(": @Socket_API_Definitions.PortEvent: ");
my_head.message.log();
TTCN_Logger.log_msgport_recv(get_name(), TitanLoggerApi.Msg__port__recv_operation.enum_type.receive__op, my_head.sender_component, new TitanCharString(""),TTCN_Logger.end_event_log2str(), msg_head_count+1);
break;
case MESSAGE_2:
TTCN_Logger.begin_event(log_sev);
TTCN_Logger.log_event_str(": @IPL4asp_Types.ASP_ConnId_ReadyToRelease: ");
my_head.message.log();
TTCN_Logger.log_msgport_recv(get_name(), TitanLoggerApi.Msg__port__recv_operation.enum_type.receive__op, my_head.sender_component, new TitanCharString(""),TTCN_Logger.end_event_log2str(), msg_head_count+1);
break;
default:
throw new TtcnError("Internal error: unknown message");
}
}
remove_msg_queue_head();
return TitanAlt_Status.ALT_YES;
}
}

public TitanAlt_Status check_receive(final TitanComponent_template sender_template, final TitanComponent sender_pointer, final TitanFloat timestamp_redirect, final Index_Redirect index_redirect) {
if (message_queue.isEmpty()) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
}
TTCN_Logger.log_str(TTCN_Logger.Severity.MATCHING_PROBLEM, MessageFormat.format("Matching on port {0} failed: Port is not started and the queue is empty.", get_name()));
return TitanAlt_Status.ALT_NO;
}
final Message_queue_item my_head = message_queue.getFirst();
if (my_head == null) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
 } else {
TTCN_Logger.log_str(TTCN_Logger.Severity.MATCHING_PROBLEM, MessageFormat.format("Matching on port {0} failed: Port is not started and the queue is empty.", get_name()));
return TitanAlt_Status.ALT_NO;
}
}
if (!sender_template.match(my_head.sender_component, false)) {
final TTCN_Logger.Severity log_sev = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC:TTCN_Logger.Severity.MATCHING_MCUNSUCC;
if (TTCN_Logger.log_this_event(log_sev)) {
TTCN_Logger.begin_event(log_sev);
TTCN_Logger.log_event("Matching on port {0}: Sender of the first message in the queue does not match the from clause:", get_name());
sender_template.log_match(new TitanComponent(my_head.sender_component), false);
TTCN_Logger.end_event();
}
return TitanAlt_Status.ALT_NO;
} else {
if (sender_pointer != null) {
sender_pointer.operator_assign(my_head.sender_component);
}
TTCN_Logger.log(my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMSUCCESS : TTCN_Logger.Severity.MATCHING_MCSUCCESS,  MessageFormat.format("Matching on port {0} succeeded.", get_name()));
final TTCN_Logger.Severity log_sev = my_head.sender_component==TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.PORTEVENT_MMRECV : TTCN_Logger.Severity.PORTEVENT_MCRECV;
if (TTCN_Logger.log_this_event(log_sev)) {
switch (my_head.item_selection) {
case MESSAGE_0:
TTCN_Logger.begin_event(log_sev);
TTCN_Logger.log_event_str(": @IPL4asp_Types.ASP_RecvFrom: ");
my_head.message.log();
TTCN_Logger.log_msgport_recv(get_name(), TitanLoggerApi.Msg__port__recv_operation.enum_type.check__receive__op, my_head.sender_component, new TitanCharString(""),TTCN_Logger.end_event_log2str(), msg_head_count+1);
break;
case MESSAGE_1:
TTCN_Logger.begin_event(log_sev);
TTCN_Logger.log_event_str(": @Socket_API_Definitions.PortEvent: ");
my_head.message.log();
TTCN_Logger.log_msgport_recv(get_name(), TitanLoggerApi.Msg__port__recv_operation.enum_type.check__receive__op, my_head.sender_component, new TitanCharString(""),TTCN_Logger.end_event_log2str(), msg_head_count+1);
break;
case MESSAGE_2:
TTCN_Logger.begin_event(log_sev);
TTCN_Logger.log_event_str(": @IPL4asp_Types.ASP_ConnId_ReadyToRelease: ");
my_head.message.log();
TTCN_Logger.log_msgport_recv(get_name(), TitanLoggerApi.Msg__port__recv_operation.enum_type.check__receive__op, my_head.sender_component, new TitanCharString(""),TTCN_Logger.end_event_log2str(), msg_head_count+1);
break;
default:
throw new TtcnError("Internal error: unknown message");
}
}
return TitanAlt_Status.ALT_YES;
}
}

public TitanAlt_Status trigger(final TitanComponent_template sender_template, final TitanComponent sender_pointer, final TitanFloat timestamp_redirect, final Index_Redirect index_redirect) {
if (message_queue.isEmpty()) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
}
TTCN_Logger.log_str(TTCN_Logger.Severity.MATCHING_PROBLEM, MessageFormat.format("Matching on port {0} failed: Port is not started and the queue is empty.", get_name()));
return TitanAlt_Status.ALT_NO;
}
final Message_queue_item my_head = message_queue.getFirst();
if (my_head == null) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
 } else {
TTCN_Logger.log_str(TTCN_Logger.Severity.MATCHING_PROBLEM, MessageFormat.format("Matching on port {0} failed: Port is not started and the queue is empty.", get_name()));
return TitanAlt_Status.ALT_NO;
}
}
if (!sender_template.match(my_head.sender_component, false)) {
final TTCN_Logger.Severity log_sev = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC:TTCN_Logger.Severity.MATCHING_MCUNSUCC;
if (TTCN_Logger.log_this_event(log_sev)) {
TTCN_Logger.begin_event(log_sev);
TTCN_Logger.log_event("Matching on port {0}  will drop a message: Sender of the first message in the queue does not match the from clause: " , get_name());
sender_template.log_match( new TitanComponent(my_head.sender_component), false);
TTCN_Logger.end_event();
}
remove_msg_queue_head();
return TitanAlt_Status.ALT_REPEAT;
} else {
if (sender_pointer != null) {
sender_pointer.operator_assign(my_head.sender_component);
}
TTCN_Logger.log(my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMSUCCESS : TTCN_Logger.Severity.MATCHING_MCSUCCESS,  MessageFormat.format("Matching on port {0} succeeded.", get_name()));
final TTCN_Logger.Severity log_sev = my_head.sender_component==TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.PORTEVENT_MMRECV : TTCN_Logger.Severity.PORTEVENT_MCRECV;
if (TTCN_Logger.log_this_event(log_sev)) {
switch (my_head.item_selection) {
case MESSAGE_0:
TTCN_Logger.begin_event(log_sev);
TTCN_Logger.log_event_str(": @IPL4asp_Types.ASP_RecvFrom: ");
my_head.message.log();
TTCN_Logger.log_msgport_recv(get_name(), TitanLoggerApi.Msg__port__recv_operation.enum_type.trigger__op, my_head.sender_component, new TitanCharString(""),TTCN_Logger.end_event_log2str(), msg_head_count+1);
break;
case MESSAGE_1:
TTCN_Logger.begin_event(log_sev);
TTCN_Logger.log_event_str(": @Socket_API_Definitions.PortEvent: ");
my_head.message.log();
TTCN_Logger.log_msgport_recv(get_name(), TitanLoggerApi.Msg__port__recv_operation.enum_type.trigger__op, my_head.sender_component, new TitanCharString(""),TTCN_Logger.end_event_log2str(), msg_head_count+1);
break;
case MESSAGE_2:
TTCN_Logger.begin_event(log_sev);
TTCN_Logger.log_event_str(": @IPL4asp_Types.ASP_ConnId_ReadyToRelease: ");
my_head.message.log();
TTCN_Logger.log_msgport_recv(get_name(), TitanLoggerApi.Msg__port__recv_operation.enum_type.trigger__op, my_head.sender_component, new TitanCharString(""),TTCN_Logger.end_event_log2str(), msg_head_count+1);
break;
default:
throw new TtcnError("Internal error: unknown message");
}
}
remove_msg_queue_head();
return TitanAlt_Status.ALT_YES;
}
}

protected boolean process_message(final String message_type, final Text_Buf incoming_buf, final int sender_component, final TitanOctetString slider) {
if ("@IPL4asp_Types.ASP_RecvFrom".equals(message_type)) {
final IPL4asp__Types.ASP__RecvFrom incoming_par = new IPL4asp__Types.ASP__RecvFrom();
incoming_par.decode_text(incoming_buf);
incoming_message(incoming_par, sender_component);
return true;
} else if ("@Socket_API_Definitions.PortEvent".equals(message_type)) {
final Socket__API__Definitions.PortEvent incoming_par = new Socket__API__Definitions.PortEvent();
incoming_par.decode_text(incoming_buf);
incoming_message(incoming_par, sender_component);
return true;
} else if ("@IPL4asp_Types.ASP_ConnId_ReadyToRelease".equals(message_type)) {
final IPL4asp__Types.ASP__ConnId__ReadyToRelease incoming_par = new IPL4asp__Types.ASP__ConnId__ReadyToRelease();
incoming_par.decode_text(incoming_buf);
incoming_message(incoming_par, sender_component);
return true;
} else return false;
}

public TitanAlt_Status receive(final IPL4asp__Types.ASP__RecvFrom_template value_template, final IPL4asp__Types.ASP__RecvFrom value_redirect, final TitanComponent_template sender_template, final TitanComponent sender_pointer, final TitanFloat timestamp_redirect, final Index_Redirect index_redirect) {
if (value_template.get_selection() == template_sel.ANY_OR_OMIT) {
throw new TtcnError("Receive operation using '*' as matching template");
}
if (message_queue.isEmpty()) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
}
TTCN_Logger.log_str(TTCN_Logger.Severity.MATCHING_PROBLEM, MessageFormat.format("Matching on port {0} failed: Port is not started and the queue is empty.", get_name()));
return TitanAlt_Status.ALT_NO;
}

final Message_queue_item my_head = message_queue.getFirst();
if (my_head == null) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
} else {
TTCN_Logger.log_str(TTCN_Logger.Severity.MATCHING_PROBLEM, MessageFormat.format("Matching on port {0} failed: Port is not started and the queue is empty.", get_name()));
return TitanAlt_Status.ALT_NO;
}
} else if (!sender_template.match(my_head.sender_component, false)) {
final TTCN_Logger.Severity log_sev = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC : TTCN_Logger.Severity.MATCHING_MCUNSUCC;
if (TTCN_Logger.log_this_event(log_sev)) {
TTCN_Logger.begin_event(log_sev);
TTCN_Logger.log_event_str(MessageFormat.format("Matching on port {0} failed: Sender of the first message in the queue does not match the from clause: ", get_name()));
sender_template.log_match(new TitanComponent(my_head.sender_component), false);
TTCN_Logger.end_event();
}
return TitanAlt_Status.ALT_NO;
} else if (my_head.item_selection != message_selection.MESSAGE_0 || !(my_head.message instanceof IPL4asp__Types.ASP__RecvFrom)) {
TTCN_Logger.log_str(my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC : TTCN_Logger.Severity.MATCHING_MCUNSUCC, MessageFormat.format("Matching on port {0} failed: Type of the first message in the queue is not IPL4asp__Types.ASP__RecvFrom.", get_name()));
return TitanAlt_Status.ALT_NO;
} else if (!value_template.match((IPL4asp__Types.ASP__RecvFrom) my_head.message)) {
final TTCN_Logger.Severity log_sev = TTCN_Logger.Severity.MATCHING_MMUNSUCC;
if (TTCN_Logger.log_this_event(log_sev)) {
TTCN_Logger.begin_event(log_sev);
value_template.log_match(my_head.message, false);
TTCN_Logger.log_matching_failure(TitanLoggerApi.PortType.enum_type.message__, get_name(), my_head.sender_component, TitanLoggerApi.MatchingFailureType_reason.enum_type.message__does__not__match__template, TTCN_Logger.end_event_log2str());
}
return TitanAlt_Status.ALT_NO;
 } else {
if (value_redirect != null) {
value_redirect.operator_assign((IPL4asp__Types.ASP__RecvFrom) my_head.message);
}
if (sender_pointer != null) {
sender_pointer.operator_assign(my_head.sender_component);
}
TTCN_Logger.Severity log_severity = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMSUCCESS : TTCN_Logger.Severity.MATCHING_MCSUCCESS;
if (TTCN_Logger.log_this_event(log_severity)) {
TTCN_Logger.begin_event_log2str();
value_template.log_match(my_head.message, true);
TitanCharString temp = TTCN_Logger.end_event_log2str();
TTCN_Logger.log_matching_success(TitanLoggerApi.PortType.enum_type.message__, port_name, my_head.sender_component, temp);
}
log_severity = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.PORTEVENT_MMRECV : TTCN_Logger.Severity.PORTEVENT_MCRECV;
if (TTCN_Logger.log_this_event(log_severity)) {
TTCN_Logger.begin_event_log2str();
TTCN_Logger.log_event_str(": @IPL4asp_Types.ASP_RecvFrom : ");
my_head.message.log();
TitanCharString temp = TTCN_Logger.end_event_log2str();
TTCN_Logger.log_msgport_recv(port_name, TitanLoggerApi.Msg__port__recv_operation.enum_type.receive__op, my_head.sender_component, new TitanCharString(""), temp, msg_head_count + 1);
}
remove_msg_queue_head();
return TitanAlt_Status.ALT_YES;
}
}

public TitanAlt_Status check_receive(final IPL4asp__Types.ASP__RecvFrom_template value_template, final IPL4asp__Types.ASP__RecvFrom value_redirect, final TitanComponent_template sender_template, final TitanComponent sender_pointer, final TitanFloat timestamp_redirect, final Index_Redirect index_redirect) {
if (value_template.get_selection() == template_sel.ANY_OR_OMIT) {
throw new TtcnError("Check-receive operation using '*' as matching template");
}
if (message_queue.isEmpty()) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
}
TTCN_Logger.log_str(TTCN_Logger.Severity.MATCHING_PROBLEM, MessageFormat.format("Matching on port {0} failed: Port is not started and the queue is empty.", get_name()));
return TitanAlt_Status.ALT_NO;
}

final Message_queue_item my_head = message_queue.getFirst();
if (my_head == null) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
} else {
TTCN_Logger.log_str(TTCN_Logger.Severity.MATCHING_PROBLEM, MessageFormat.format("Matching on port {0} failed: Port is not started and the queue is empty.", get_name()));
return TitanAlt_Status.ALT_NO;
}
} else if (!sender_template.match(my_head.sender_component, false)) {
final TTCN_Logger.Severity log_sev = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC : TTCN_Logger.Severity.MATCHING_MCUNSUCC;
if (TTCN_Logger.log_this_event(log_sev)) {
TTCN_Logger.begin_event(log_sev);
TTCN_Logger.log_event_str(MessageFormat.format("Matching on port {0} failed: Sender of the first message in the queue does not match the from clause: ", get_name()));
sender_template.log_match(new TitanComponent(my_head.sender_component), false);
TTCN_Logger.end_event();
}
return TitanAlt_Status.ALT_NO;
} else if (my_head.item_selection != message_selection.MESSAGE_0 || !(my_head.message instanceof IPL4asp__Types.ASP__RecvFrom)) {
TTCN_Logger.log_str(my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC : TTCN_Logger.Severity.MATCHING_MCUNSUCC, MessageFormat.format("Matching on port {0} failed: Type of the first message in the queue is not IPL4asp__Types.ASP__RecvFrom.", get_name()));
return TitanAlt_Status.ALT_NO;
} else if (!value_template.match((IPL4asp__Types.ASP__RecvFrom) my_head.message)) {
final TTCN_Logger.Severity log_sev = TTCN_Logger.Severity.MATCHING_MMUNSUCC;
if (TTCN_Logger.log_this_event(log_sev)) {
TTCN_Logger.begin_event(log_sev);
value_template.log_match(my_head.message, false);
TTCN_Logger.log_matching_failure(TitanLoggerApi.PortType.enum_type.message__, get_name(), my_head.sender_component, TitanLoggerApi.MatchingFailureType_reason.enum_type.message__does__not__match__template, TTCN_Logger.end_event_log2str());
}
return TitanAlt_Status.ALT_NO;
 } else {
if (value_redirect != null) {
value_redirect.operator_assign((IPL4asp__Types.ASP__RecvFrom) my_head.message);
}
if (sender_pointer != null) {
sender_pointer.operator_assign(my_head.sender_component);
}
TTCN_Logger.Severity log_severity = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMSUCCESS : TTCN_Logger.Severity.MATCHING_MCSUCCESS;
if (TTCN_Logger.log_this_event(log_severity)) {
TTCN_Logger.begin_event_log2str();
value_template.log_match(my_head.message, true);
TitanCharString temp = TTCN_Logger.end_event_log2str();
TTCN_Logger.log_matching_success(TitanLoggerApi.PortType.enum_type.message__, port_name, my_head.sender_component, temp);
}
log_severity = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.PORTEVENT_MMRECV : TTCN_Logger.Severity.PORTEVENT_MCRECV;
if (TTCN_Logger.log_this_event(log_severity)) {
TTCN_Logger.begin_event_log2str();
TTCN_Logger.log_event_str(": @IPL4asp_Types.ASP_RecvFrom : ");
my_head.message.log();
TitanCharString temp = TTCN_Logger.end_event_log2str();
TTCN_Logger.log_msgport_recv(port_name, TitanLoggerApi.Msg__port__recv_operation.enum_type.check__receive__op, my_head.sender_component, new TitanCharString(""), temp, msg_head_count + 1);
}
return TitanAlt_Status.ALT_YES;
}
}

public TitanAlt_Status trigger(final IPL4asp__Types.ASP__RecvFrom_template value_template, final IPL4asp__Types.ASP__RecvFrom value_redirect, final TitanComponent_template sender_template, final TitanComponent sender_pointer, final TitanFloat timestamp_redirect, final Index_Redirect index_redirect) {
if (value_template.get_selection() == template_sel.ANY_OR_OMIT) {
throw new TtcnError("Trigger operation using '*' as matching template");
}
if (message_queue.isEmpty()) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
}
TTCN_Logger.log(TTCN_Logger.Severity.MATCHING_PROBLEM, "Matching on port {0} will drop a message: Port is not started and the queue is empty.", get_name());
return TitanAlt_Status.ALT_NO;
}

final Message_queue_item my_head = message_queue.getFirst();
if (my_head == null) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
} else {
TTCN_Logger.log(TTCN_Logger.Severity.MATCHING_PROBLEM, "Matching on port {0} will drop a message: Port is not started and the queue is empty.", get_name());
return TitanAlt_Status.ALT_NO;
}
} else if (!sender_template.match(my_head.sender_component, false)) {
final TTCN_Logger.Severity log_sev = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC : TTCN_Logger.Severity.MATCHING_MCUNSUCC;
if (TTCN_Logger.log_this_event(log_sev)) {
TTCN_Logger.begin_event(log_sev);
TTCN_Logger.log_event("Matching on port {0} will drop a message: Sender of the first message in the queue does not match the from clause: ", get_name());
sender_template.log_match(new TitanComponent(my_head.sender_component), false);
TTCN_Logger.end_event();
}
remove_msg_queue_head();
return TitanAlt_Status.ALT_REPEAT;
} else if (my_head.item_selection != message_selection.MESSAGE_0 || !(my_head.message instanceof IPL4asp__Types.ASP__RecvFrom)) {
TTCN_Logger.log(my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC : TTCN_Logger.Severity.MATCHING_MCUNSUCC, "Matching on port {0} will drop a message: Type of the first message in the queue is not IPL4asp__Types.ASP__RecvFrom.", get_name());
remove_msg_queue_head();
return TitanAlt_Status.ALT_REPEAT;
} else if (!value_template.match((IPL4asp__Types.ASP__RecvFrom) my_head.message)) {
final TTCN_Logger.Severity log_sev = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC : TTCN_Logger.Severity.MATCHING_MCUNSUCC;
if (TTCN_Logger.log_this_event(log_sev)) {
TTCN_Logger.begin_event(log_sev);
value_template.log_match(my_head.message, false);
TTCN_Logger.log_matching_failure(TitanLoggerApi.PortType.enum_type.message__, get_name(), my_head.sender_component, TitanLoggerApi.MatchingFailureType_reason.enum_type.message__does__not__match__template, TTCN_Logger.end_event_log2str());
}
remove_msg_queue_head();
return TitanAlt_Status.ALT_REPEAT;
 } else {
if (value_redirect != null) {
value_redirect.operator_assign((IPL4asp__Types.ASP__RecvFrom) my_head.message);
}
if (sender_pointer != null) {
sender_pointer.operator_assign(my_head.sender_component);
}
TTCN_Logger.Severity log_severity = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMSUCCESS : TTCN_Logger.Severity.MATCHING_MCSUCCESS;
if (TTCN_Logger.log_this_event(log_severity)) {
TTCN_Logger.begin_event_log2str();
value_template.log_match(my_head.message, true);
TitanCharString temp = TTCN_Logger.end_event_log2str();
TTCN_Logger.log_matching_success(TitanLoggerApi.PortType.enum_type.message__, port_name, my_head.sender_component, temp);
}
log_severity = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.PORTEVENT_MMRECV : TTCN_Logger.Severity.PORTEVENT_MCRECV;
if (TTCN_Logger.log_this_event(log_severity)) {
TTCN_Logger.begin_event_log2str();
TTCN_Logger.log_event_str(": @IPL4asp_Types.ASP_RecvFrom : ");
my_head.message.log();
TitanCharString temp = TTCN_Logger.end_event_log2str();
TTCN_Logger.log_msgport_recv(port_name, TitanLoggerApi.Msg__port__recv_operation.enum_type.trigger__op, my_head.sender_component, new TitanCharString(""), temp, msg_head_count + 1);
}
remove_msg_queue_head();
return TitanAlt_Status.ALT_YES;
}
}

public TitanAlt_Status receive(final Socket__API__Definitions.PortEvent_template value_template, final Socket__API__Definitions.PortEvent value_redirect, final TitanComponent_template sender_template, final TitanComponent sender_pointer, final TitanFloat timestamp_redirect, final Index_Redirect index_redirect) {
if (value_template.get_selection() == template_sel.ANY_OR_OMIT) {
throw new TtcnError("Receive operation using '*' as matching template");
}
if (message_queue.isEmpty()) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
}
TTCN_Logger.log_str(TTCN_Logger.Severity.MATCHING_PROBLEM, MessageFormat.format("Matching on port {0} failed: Port is not started and the queue is empty.", get_name()));
return TitanAlt_Status.ALT_NO;
}

final Message_queue_item my_head = message_queue.getFirst();
if (my_head == null) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
} else {
TTCN_Logger.log_str(TTCN_Logger.Severity.MATCHING_PROBLEM, MessageFormat.format("Matching on port {0} failed: Port is not started and the queue is empty.", get_name()));
return TitanAlt_Status.ALT_NO;
}
} else if (!sender_template.match(my_head.sender_component, false)) {
final TTCN_Logger.Severity log_sev = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC : TTCN_Logger.Severity.MATCHING_MCUNSUCC;
if (TTCN_Logger.log_this_event(log_sev)) {
TTCN_Logger.begin_event(log_sev);
TTCN_Logger.log_event_str(MessageFormat.format("Matching on port {0} failed: Sender of the first message in the queue does not match the from clause: ", get_name()));
sender_template.log_match(new TitanComponent(my_head.sender_component), false);
TTCN_Logger.end_event();
}
return TitanAlt_Status.ALT_NO;
} else if (my_head.item_selection != message_selection.MESSAGE_1 || !(my_head.message instanceof Socket__API__Definitions.PortEvent)) {
TTCN_Logger.log_str(my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC : TTCN_Logger.Severity.MATCHING_MCUNSUCC, MessageFormat.format("Matching on port {0} failed: Type of the first message in the queue is not Socket__API__Definitions.PortEvent.", get_name()));
return TitanAlt_Status.ALT_NO;
} else if (!value_template.match((Socket__API__Definitions.PortEvent) my_head.message)) {
final TTCN_Logger.Severity log_sev = TTCN_Logger.Severity.MATCHING_MMUNSUCC;
if (TTCN_Logger.log_this_event(log_sev)) {
TTCN_Logger.begin_event(log_sev);
value_template.log_match(my_head.message, false);
TTCN_Logger.log_matching_failure(TitanLoggerApi.PortType.enum_type.message__, get_name(), my_head.sender_component, TitanLoggerApi.MatchingFailureType_reason.enum_type.message__does__not__match__template, TTCN_Logger.end_event_log2str());
}
return TitanAlt_Status.ALT_NO;
 } else {
if (value_redirect != null) {
value_redirect.operator_assign((Socket__API__Definitions.PortEvent) my_head.message);
}
if (sender_pointer != null) {
sender_pointer.operator_assign(my_head.sender_component);
}
TTCN_Logger.Severity log_severity = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMSUCCESS : TTCN_Logger.Severity.MATCHING_MCSUCCESS;
if (TTCN_Logger.log_this_event(log_severity)) {
TTCN_Logger.begin_event_log2str();
value_template.log_match(my_head.message, true);
TitanCharString temp = TTCN_Logger.end_event_log2str();
TTCN_Logger.log_matching_success(TitanLoggerApi.PortType.enum_type.message__, port_name, my_head.sender_component, temp);
}
log_severity = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.PORTEVENT_MMRECV : TTCN_Logger.Severity.PORTEVENT_MCRECV;
if (TTCN_Logger.log_this_event(log_severity)) {
TTCN_Logger.begin_event_log2str();
TTCN_Logger.log_event_str(": @Socket_API_Definitions.PortEvent : ");
my_head.message.log();
TitanCharString temp = TTCN_Logger.end_event_log2str();
TTCN_Logger.log_msgport_recv(port_name, TitanLoggerApi.Msg__port__recv_operation.enum_type.receive__op, my_head.sender_component, new TitanCharString(""), temp, msg_head_count + 1);
}
remove_msg_queue_head();
return TitanAlt_Status.ALT_YES;
}
}

public TitanAlt_Status check_receive(final Socket__API__Definitions.PortEvent_template value_template, final Socket__API__Definitions.PortEvent value_redirect, final TitanComponent_template sender_template, final TitanComponent sender_pointer, final TitanFloat timestamp_redirect, final Index_Redirect index_redirect) {
if (value_template.get_selection() == template_sel.ANY_OR_OMIT) {
throw new TtcnError("Check-receive operation using '*' as matching template");
}
if (message_queue.isEmpty()) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
}
TTCN_Logger.log_str(TTCN_Logger.Severity.MATCHING_PROBLEM, MessageFormat.format("Matching on port {0} failed: Port is not started and the queue is empty.", get_name()));
return TitanAlt_Status.ALT_NO;
}

final Message_queue_item my_head = message_queue.getFirst();
if (my_head == null) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
} else {
TTCN_Logger.log_str(TTCN_Logger.Severity.MATCHING_PROBLEM, MessageFormat.format("Matching on port {0} failed: Port is not started and the queue is empty.", get_name()));
return TitanAlt_Status.ALT_NO;
}
} else if (!sender_template.match(my_head.sender_component, false)) {
final TTCN_Logger.Severity log_sev = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC : TTCN_Logger.Severity.MATCHING_MCUNSUCC;
if (TTCN_Logger.log_this_event(log_sev)) {
TTCN_Logger.begin_event(log_sev);
TTCN_Logger.log_event_str(MessageFormat.format("Matching on port {0} failed: Sender of the first message in the queue does not match the from clause: ", get_name()));
sender_template.log_match(new TitanComponent(my_head.sender_component), false);
TTCN_Logger.end_event();
}
return TitanAlt_Status.ALT_NO;
} else if (my_head.item_selection != message_selection.MESSAGE_1 || !(my_head.message instanceof Socket__API__Definitions.PortEvent)) {
TTCN_Logger.log_str(my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC : TTCN_Logger.Severity.MATCHING_MCUNSUCC, MessageFormat.format("Matching on port {0} failed: Type of the first message in the queue is not Socket__API__Definitions.PortEvent.", get_name()));
return TitanAlt_Status.ALT_NO;
} else if (!value_template.match((Socket__API__Definitions.PortEvent) my_head.message)) {
final TTCN_Logger.Severity log_sev = TTCN_Logger.Severity.MATCHING_MMUNSUCC;
if (TTCN_Logger.log_this_event(log_sev)) {
TTCN_Logger.begin_event(log_sev);
value_template.log_match(my_head.message, false);
TTCN_Logger.log_matching_failure(TitanLoggerApi.PortType.enum_type.message__, get_name(), my_head.sender_component, TitanLoggerApi.MatchingFailureType_reason.enum_type.message__does__not__match__template, TTCN_Logger.end_event_log2str());
}
return TitanAlt_Status.ALT_NO;
 } else {
if (value_redirect != null) {
value_redirect.operator_assign((Socket__API__Definitions.PortEvent) my_head.message);
}
if (sender_pointer != null) {
sender_pointer.operator_assign(my_head.sender_component);
}
TTCN_Logger.Severity log_severity = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMSUCCESS : TTCN_Logger.Severity.MATCHING_MCSUCCESS;
if (TTCN_Logger.log_this_event(log_severity)) {
TTCN_Logger.begin_event_log2str();
value_template.log_match(my_head.message, true);
TitanCharString temp = TTCN_Logger.end_event_log2str();
TTCN_Logger.log_matching_success(TitanLoggerApi.PortType.enum_type.message__, port_name, my_head.sender_component, temp);
}
log_severity = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.PORTEVENT_MMRECV : TTCN_Logger.Severity.PORTEVENT_MCRECV;
if (TTCN_Logger.log_this_event(log_severity)) {
TTCN_Logger.begin_event_log2str();
TTCN_Logger.log_event_str(": @Socket_API_Definitions.PortEvent : ");
my_head.message.log();
TitanCharString temp = TTCN_Logger.end_event_log2str();
TTCN_Logger.log_msgport_recv(port_name, TitanLoggerApi.Msg__port__recv_operation.enum_type.check__receive__op, my_head.sender_component, new TitanCharString(""), temp, msg_head_count + 1);
}
return TitanAlt_Status.ALT_YES;
}
}

public TitanAlt_Status trigger(final Socket__API__Definitions.PortEvent_template value_template, final Socket__API__Definitions.PortEvent value_redirect, final TitanComponent_template sender_template, final TitanComponent sender_pointer, final TitanFloat timestamp_redirect, final Index_Redirect index_redirect) {
if (value_template.get_selection() == template_sel.ANY_OR_OMIT) {
throw new TtcnError("Trigger operation using '*' as matching template");
}
if (message_queue.isEmpty()) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
}
TTCN_Logger.log(TTCN_Logger.Severity.MATCHING_PROBLEM, "Matching on port {0} will drop a message: Port is not started and the queue is empty.", get_name());
return TitanAlt_Status.ALT_NO;
}

final Message_queue_item my_head = message_queue.getFirst();
if (my_head == null) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
} else {
TTCN_Logger.log(TTCN_Logger.Severity.MATCHING_PROBLEM, "Matching on port {0} will drop a message: Port is not started and the queue is empty.", get_name());
return TitanAlt_Status.ALT_NO;
}
} else if (!sender_template.match(my_head.sender_component, false)) {
final TTCN_Logger.Severity log_sev = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC : TTCN_Logger.Severity.MATCHING_MCUNSUCC;
if (TTCN_Logger.log_this_event(log_sev)) {
TTCN_Logger.begin_event(log_sev);
TTCN_Logger.log_event("Matching on port {0} will drop a message: Sender of the first message in the queue does not match the from clause: ", get_name());
sender_template.log_match(new TitanComponent(my_head.sender_component), false);
TTCN_Logger.end_event();
}
remove_msg_queue_head();
return TitanAlt_Status.ALT_REPEAT;
} else if (my_head.item_selection != message_selection.MESSAGE_1 || !(my_head.message instanceof Socket__API__Definitions.PortEvent)) {
TTCN_Logger.log(my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC : TTCN_Logger.Severity.MATCHING_MCUNSUCC, "Matching on port {0} will drop a message: Type of the first message in the queue is not Socket__API__Definitions.PortEvent.", get_name());
remove_msg_queue_head();
return TitanAlt_Status.ALT_REPEAT;
} else if (!value_template.match((Socket__API__Definitions.PortEvent) my_head.message)) {
final TTCN_Logger.Severity log_sev = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC : TTCN_Logger.Severity.MATCHING_MCUNSUCC;
if (TTCN_Logger.log_this_event(log_sev)) {
TTCN_Logger.begin_event(log_sev);
value_template.log_match(my_head.message, false);
TTCN_Logger.log_matching_failure(TitanLoggerApi.PortType.enum_type.message__, get_name(), my_head.sender_component, TitanLoggerApi.MatchingFailureType_reason.enum_type.message__does__not__match__template, TTCN_Logger.end_event_log2str());
}
remove_msg_queue_head();
return TitanAlt_Status.ALT_REPEAT;
 } else {
if (value_redirect != null) {
value_redirect.operator_assign((Socket__API__Definitions.PortEvent) my_head.message);
}
if (sender_pointer != null) {
sender_pointer.operator_assign(my_head.sender_component);
}
TTCN_Logger.Severity log_severity = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMSUCCESS : TTCN_Logger.Severity.MATCHING_MCSUCCESS;
if (TTCN_Logger.log_this_event(log_severity)) {
TTCN_Logger.begin_event_log2str();
value_template.log_match(my_head.message, true);
TitanCharString temp = TTCN_Logger.end_event_log2str();
TTCN_Logger.log_matching_success(TitanLoggerApi.PortType.enum_type.message__, port_name, my_head.sender_component, temp);
}
log_severity = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.PORTEVENT_MMRECV : TTCN_Logger.Severity.PORTEVENT_MCRECV;
if (TTCN_Logger.log_this_event(log_severity)) {
TTCN_Logger.begin_event_log2str();
TTCN_Logger.log_event_str(": @Socket_API_Definitions.PortEvent : ");
my_head.message.log();
TitanCharString temp = TTCN_Logger.end_event_log2str();
TTCN_Logger.log_msgport_recv(port_name, TitanLoggerApi.Msg__port__recv_operation.enum_type.trigger__op, my_head.sender_component, new TitanCharString(""), temp, msg_head_count + 1);
}
remove_msg_queue_head();
return TitanAlt_Status.ALT_YES;
}
}

public TitanAlt_Status receive(final IPL4asp__Types.ASP__ConnId__ReadyToRelease_template value_template, final IPL4asp__Types.ASP__ConnId__ReadyToRelease value_redirect, final TitanComponent_template sender_template, final TitanComponent sender_pointer, final TitanFloat timestamp_redirect, final Index_Redirect index_redirect) {
if (value_template.get_selection() == template_sel.ANY_OR_OMIT) {
throw new TtcnError("Receive operation using '*' as matching template");
}
if (message_queue.isEmpty()) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
}
TTCN_Logger.log_str(TTCN_Logger.Severity.MATCHING_PROBLEM, MessageFormat.format("Matching on port {0} failed: Port is not started and the queue is empty.", get_name()));
return TitanAlt_Status.ALT_NO;
}

final Message_queue_item my_head = message_queue.getFirst();
if (my_head == null) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
} else {
TTCN_Logger.log_str(TTCN_Logger.Severity.MATCHING_PROBLEM, MessageFormat.format("Matching on port {0} failed: Port is not started and the queue is empty.", get_name()));
return TitanAlt_Status.ALT_NO;
}
} else if (!sender_template.match(my_head.sender_component, false)) {
final TTCN_Logger.Severity log_sev = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC : TTCN_Logger.Severity.MATCHING_MCUNSUCC;
if (TTCN_Logger.log_this_event(log_sev)) {
TTCN_Logger.begin_event(log_sev);
TTCN_Logger.log_event_str(MessageFormat.format("Matching on port {0} failed: Sender of the first message in the queue does not match the from clause: ", get_name()));
sender_template.log_match(new TitanComponent(my_head.sender_component), false);
TTCN_Logger.end_event();
}
return TitanAlt_Status.ALT_NO;
} else if (my_head.item_selection != message_selection.MESSAGE_2 || !(my_head.message instanceof IPL4asp__Types.ASP__ConnId__ReadyToRelease)) {
TTCN_Logger.log_str(my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC : TTCN_Logger.Severity.MATCHING_MCUNSUCC, MessageFormat.format("Matching on port {0} failed: Type of the first message in the queue is not IPL4asp__Types.ASP__ConnId__ReadyToRelease.", get_name()));
return TitanAlt_Status.ALT_NO;
} else if (!value_template.match((IPL4asp__Types.ASP__ConnId__ReadyToRelease) my_head.message)) {
final TTCN_Logger.Severity log_sev = TTCN_Logger.Severity.MATCHING_MMUNSUCC;
if (TTCN_Logger.log_this_event(log_sev)) {
TTCN_Logger.begin_event(log_sev);
value_template.log_match(my_head.message, false);
TTCN_Logger.log_matching_failure(TitanLoggerApi.PortType.enum_type.message__, get_name(), my_head.sender_component, TitanLoggerApi.MatchingFailureType_reason.enum_type.message__does__not__match__template, TTCN_Logger.end_event_log2str());
}
return TitanAlt_Status.ALT_NO;
 } else {
if (value_redirect != null) {
value_redirect.operator_assign((IPL4asp__Types.ASP__ConnId__ReadyToRelease) my_head.message);
}
if (sender_pointer != null) {
sender_pointer.operator_assign(my_head.sender_component);
}
TTCN_Logger.Severity log_severity = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMSUCCESS : TTCN_Logger.Severity.MATCHING_MCSUCCESS;
if (TTCN_Logger.log_this_event(log_severity)) {
TTCN_Logger.begin_event_log2str();
value_template.log_match(my_head.message, true);
TitanCharString temp = TTCN_Logger.end_event_log2str();
TTCN_Logger.log_matching_success(TitanLoggerApi.PortType.enum_type.message__, port_name, my_head.sender_component, temp);
}
log_severity = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.PORTEVENT_MMRECV : TTCN_Logger.Severity.PORTEVENT_MCRECV;
if (TTCN_Logger.log_this_event(log_severity)) {
TTCN_Logger.begin_event_log2str();
TTCN_Logger.log_event_str(": @IPL4asp_Types.ASP_ConnId_ReadyToRelease : ");
my_head.message.log();
TitanCharString temp = TTCN_Logger.end_event_log2str();
TTCN_Logger.log_msgport_recv(port_name, TitanLoggerApi.Msg__port__recv_operation.enum_type.receive__op, my_head.sender_component, new TitanCharString(""), temp, msg_head_count + 1);
}
remove_msg_queue_head();
return TitanAlt_Status.ALT_YES;
}
}

public TitanAlt_Status check_receive(final IPL4asp__Types.ASP__ConnId__ReadyToRelease_template value_template, final IPL4asp__Types.ASP__ConnId__ReadyToRelease value_redirect, final TitanComponent_template sender_template, final TitanComponent sender_pointer, final TitanFloat timestamp_redirect, final Index_Redirect index_redirect) {
if (value_template.get_selection() == template_sel.ANY_OR_OMIT) {
throw new TtcnError("Check-receive operation using '*' as matching template");
}
if (message_queue.isEmpty()) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
}
TTCN_Logger.log_str(TTCN_Logger.Severity.MATCHING_PROBLEM, MessageFormat.format("Matching on port {0} failed: Port is not started and the queue is empty.", get_name()));
return TitanAlt_Status.ALT_NO;
}

final Message_queue_item my_head = message_queue.getFirst();
if (my_head == null) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
} else {
TTCN_Logger.log_str(TTCN_Logger.Severity.MATCHING_PROBLEM, MessageFormat.format("Matching on port {0} failed: Port is not started and the queue is empty.", get_name()));
return TitanAlt_Status.ALT_NO;
}
} else if (!sender_template.match(my_head.sender_component, false)) {
final TTCN_Logger.Severity log_sev = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC : TTCN_Logger.Severity.MATCHING_MCUNSUCC;
if (TTCN_Logger.log_this_event(log_sev)) {
TTCN_Logger.begin_event(log_sev);
TTCN_Logger.log_event_str(MessageFormat.format("Matching on port {0} failed: Sender of the first message in the queue does not match the from clause: ", get_name()));
sender_template.log_match(new TitanComponent(my_head.sender_component), false);
TTCN_Logger.end_event();
}
return TitanAlt_Status.ALT_NO;
} else if (my_head.item_selection != message_selection.MESSAGE_2 || !(my_head.message instanceof IPL4asp__Types.ASP__ConnId__ReadyToRelease)) {
TTCN_Logger.log_str(my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC : TTCN_Logger.Severity.MATCHING_MCUNSUCC, MessageFormat.format("Matching on port {0} failed: Type of the first message in the queue is not IPL4asp__Types.ASP__ConnId__ReadyToRelease.", get_name()));
return TitanAlt_Status.ALT_NO;
} else if (!value_template.match((IPL4asp__Types.ASP__ConnId__ReadyToRelease) my_head.message)) {
final TTCN_Logger.Severity log_sev = TTCN_Logger.Severity.MATCHING_MMUNSUCC;
if (TTCN_Logger.log_this_event(log_sev)) {
TTCN_Logger.begin_event(log_sev);
value_template.log_match(my_head.message, false);
TTCN_Logger.log_matching_failure(TitanLoggerApi.PortType.enum_type.message__, get_name(), my_head.sender_component, TitanLoggerApi.MatchingFailureType_reason.enum_type.message__does__not__match__template, TTCN_Logger.end_event_log2str());
}
return TitanAlt_Status.ALT_NO;
 } else {
if (value_redirect != null) {
value_redirect.operator_assign((IPL4asp__Types.ASP__ConnId__ReadyToRelease) my_head.message);
}
if (sender_pointer != null) {
sender_pointer.operator_assign(my_head.sender_component);
}
TTCN_Logger.Severity log_severity = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMSUCCESS : TTCN_Logger.Severity.MATCHING_MCSUCCESS;
if (TTCN_Logger.log_this_event(log_severity)) {
TTCN_Logger.begin_event_log2str();
value_template.log_match(my_head.message, true);
TitanCharString temp = TTCN_Logger.end_event_log2str();
TTCN_Logger.log_matching_success(TitanLoggerApi.PortType.enum_type.message__, port_name, my_head.sender_component, temp);
}
log_severity = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.PORTEVENT_MMRECV : TTCN_Logger.Severity.PORTEVENT_MCRECV;
if (TTCN_Logger.log_this_event(log_severity)) {
TTCN_Logger.begin_event_log2str();
TTCN_Logger.log_event_str(": @IPL4asp_Types.ASP_ConnId_ReadyToRelease : ");
my_head.message.log();
TitanCharString temp = TTCN_Logger.end_event_log2str();
TTCN_Logger.log_msgport_recv(port_name, TitanLoggerApi.Msg__port__recv_operation.enum_type.check__receive__op, my_head.sender_component, new TitanCharString(""), temp, msg_head_count + 1);
}
return TitanAlt_Status.ALT_YES;
}
}

public TitanAlt_Status trigger(final IPL4asp__Types.ASP__ConnId__ReadyToRelease_template value_template, final IPL4asp__Types.ASP__ConnId__ReadyToRelease value_redirect, final TitanComponent_template sender_template, final TitanComponent sender_pointer, final TitanFloat timestamp_redirect, final Index_Redirect index_redirect) {
if (value_template.get_selection() == template_sel.ANY_OR_OMIT) {
throw new TtcnError("Trigger operation using '*' as matching template");
}
if (message_queue.isEmpty()) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
}
TTCN_Logger.log(TTCN_Logger.Severity.MATCHING_PROBLEM, "Matching on port {0} will drop a message: Port is not started and the queue is empty.", get_name());
return TitanAlt_Status.ALT_NO;
}

final Message_queue_item my_head = message_queue.getFirst();
if (my_head == null) {
if (is_started) {
return TitanAlt_Status.ALT_MAYBE;
} else {
TTCN_Logger.log(TTCN_Logger.Severity.MATCHING_PROBLEM, "Matching on port {0} will drop a message: Port is not started and the queue is empty.", get_name());
return TitanAlt_Status.ALT_NO;
}
} else if (!sender_template.match(my_head.sender_component, false)) {
final TTCN_Logger.Severity log_sev = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC : TTCN_Logger.Severity.MATCHING_MCUNSUCC;
if (TTCN_Logger.log_this_event(log_sev)) {
TTCN_Logger.begin_event(log_sev);
TTCN_Logger.log_event("Matching on port {0} will drop a message: Sender of the first message in the queue does not match the from clause: ", get_name());
sender_template.log_match(new TitanComponent(my_head.sender_component), false);
TTCN_Logger.end_event();
}
remove_msg_queue_head();
return TitanAlt_Status.ALT_REPEAT;
} else if (my_head.item_selection != message_selection.MESSAGE_2 || !(my_head.message instanceof IPL4asp__Types.ASP__ConnId__ReadyToRelease)) {
TTCN_Logger.log(my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC : TTCN_Logger.Severity.MATCHING_MCUNSUCC, "Matching on port {0} will drop a message: Type of the first message in the queue is not IPL4asp__Types.ASP__ConnId__ReadyToRelease.", get_name());
remove_msg_queue_head();
return TitanAlt_Status.ALT_REPEAT;
} else if (!value_template.match((IPL4asp__Types.ASP__ConnId__ReadyToRelease) my_head.message)) {
final TTCN_Logger.Severity log_sev = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMUNSUCC : TTCN_Logger.Severity.MATCHING_MCUNSUCC;
if (TTCN_Logger.log_this_event(log_sev)) {
TTCN_Logger.begin_event(log_sev);
value_template.log_match(my_head.message, false);
TTCN_Logger.log_matching_failure(TitanLoggerApi.PortType.enum_type.message__, get_name(), my_head.sender_component, TitanLoggerApi.MatchingFailureType_reason.enum_type.message__does__not__match__template, TTCN_Logger.end_event_log2str());
}
remove_msg_queue_head();
return TitanAlt_Status.ALT_REPEAT;
 } else {
if (value_redirect != null) {
value_redirect.operator_assign((IPL4asp__Types.ASP__ConnId__ReadyToRelease) my_head.message);
}
if (sender_pointer != null) {
sender_pointer.operator_assign(my_head.sender_component);
}
TTCN_Logger.Severity log_severity = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.MATCHING_MMSUCCESS : TTCN_Logger.Severity.MATCHING_MCSUCCESS;
if (TTCN_Logger.log_this_event(log_severity)) {
TTCN_Logger.begin_event_log2str();
value_template.log_match(my_head.message, true);
TitanCharString temp = TTCN_Logger.end_event_log2str();
TTCN_Logger.log_matching_success(TitanLoggerApi.PortType.enum_type.message__, port_name, my_head.sender_component, temp);
}
log_severity = my_head.sender_component == TitanComponent.SYSTEM_COMPREF ? TTCN_Logger.Severity.PORTEVENT_MMRECV : TTCN_Logger.Severity.PORTEVENT_MCRECV;
if (TTCN_Logger.log_this_event(log_severity)) {
TTCN_Logger.begin_event_log2str();
TTCN_Logger.log_event_str(": @IPL4asp_Types.ASP_ConnId_ReadyToRelease : ");
my_head.message.log();
TitanCharString temp = TTCN_Logger.end_event_log2str();
TTCN_Logger.log_msgport_recv(port_name, TitanLoggerApi.Msg__port__recv_operation.enum_type.trigger__op, my_head.sender_component, new TitanCharString(""), temp, msg_head_count + 1);
}
remove_msg_queue_head();
return TitanAlt_Status.ALT_YES;
}
}

public void add_port(final TitanPort port) {
throw new TtcnError("Internal error: Adding invalid port type.");
}

public void remove_port(final TitanPort port) {
throw new TtcnError("Internal error: Removing invalid port type.");
}

protected void reset_port_variables() {
}

public void incoming_message(final IPL4asp__Types.ASP__RecvFrom incoming_par, final int sender_component) {
if (!is_started) {
throw new TtcnError(MessageFormat.format("Port {0} is not started but a message has arrived on it.", get_name()));
}
msg_tail_count++;
if (TTCN_Logger.log_this_event(TTCN_Logger.Severity.PORTEVENT_MQUEUE)) {
final TitanCharString log_sender_address = new TitanCharString("");
TTCN_Logger.begin_event(TTCN_Logger.Severity.PORTEVENT_MQUEUE);
TTCN_Logger.log_event_str(" @IPL4asp_Types.ASP_RecvFrom : ");
incoming_par.log();
final TitanCharString log_parameter = TTCN_Logger.end_event_log2str();
TTCN_Logger.log_port_queue(TitanLoggerApi.Port__Queue_operation.enum_type.enqueue__msg, port_name, sender_component, msg_tail_count, log_sender_address, log_parameter);
}
final Message_queue_item new_item = new Message_queue_item();
new_item.item_selection = message_selection.MESSAGE_0;
new_item.message = new IPL4asp__Types.ASP__RecvFrom(incoming_par);
new_item.sender_component = sender_component;
message_queue.addLast(new_item);
}

protected void incoming_message(final IPL4asp__Types.ASP__RecvFrom incoming_par) {
incoming_message(incoming_par, TitanComponent.SYSTEM_COMPREF);
}

public void incoming_message(final Socket__API__Definitions.PortEvent incoming_par, final int sender_component) {
if (!is_started) {
throw new TtcnError(MessageFormat.format("Port {0} is not started but a message has arrived on it.", get_name()));
}
msg_tail_count++;
if (TTCN_Logger.log_this_event(TTCN_Logger.Severity.PORTEVENT_MQUEUE)) {
final TitanCharString log_sender_address = new TitanCharString("");
TTCN_Logger.begin_event(TTCN_Logger.Severity.PORTEVENT_MQUEUE);
TTCN_Logger.log_event_str(" @Socket_API_Definitions.PortEvent : ");
incoming_par.log();
final TitanCharString log_parameter = TTCN_Logger.end_event_log2str();
TTCN_Logger.log_port_queue(TitanLoggerApi.Port__Queue_operation.enum_type.enqueue__msg, port_name, sender_component, msg_tail_count, log_sender_address, log_parameter);
}
final Message_queue_item new_item = new Message_queue_item();
new_item.item_selection = message_selection.MESSAGE_1;
new_item.message = new Socket__API__Definitions.PortEvent(incoming_par);
new_item.sender_component = sender_component;
message_queue.addLast(new_item);
}

protected void incoming_message(final Socket__API__Definitions.PortEvent incoming_par) {
incoming_message(incoming_par, TitanComponent.SYSTEM_COMPREF);
}

public void incoming_message(final IPL4asp__Types.ASP__ConnId__ReadyToRelease incoming_par, final int sender_component) {
if (!is_started) {
throw new TtcnError(MessageFormat.format("Port {0} is not started but a message has arrived on it.", get_name()));
}
msg_tail_count++;
if (TTCN_Logger.log_this_event(TTCN_Logger.Severity.PORTEVENT_MQUEUE)) {
final TitanCharString log_sender_address = new TitanCharString("");
TTCN_Logger.begin_event(TTCN_Logger.Severity.PORTEVENT_MQUEUE);
TTCN_Logger.log_event_str(" @IPL4asp_Types.ASP_ConnId_ReadyToRelease : ");
incoming_par.log();
final TitanCharString log_parameter = TTCN_Logger.end_event_log2str();
TTCN_Logger.log_port_queue(TitanLoggerApi.Port__Queue_operation.enum_type.enqueue__msg, port_name, sender_component, msg_tail_count, log_sender_address, log_parameter);
}
final Message_queue_item new_item = new Message_queue_item();
new_item.item_selection = message_selection.MESSAGE_2;
new_item.message = new IPL4asp__Types.ASP__ConnId__ReadyToRelease(incoming_par);
new_item.sender_component = sender_component;
message_queue.addLast(new_item);
}

protected void incoming_message(final IPL4asp__Types.ASP__ConnId__ReadyToRelease incoming_par) {
incoming_message(incoming_par, TitanComponent.SYSTEM_COMPREF);
}

}

public void pre_init_module()
{
if (pre_init_called) {
return;
}
pre_init_called = true;
Module_List.pre_init_module("IPL4asp_Types");
}

public void post_init_module()
{
if (post_init_called) {
return;
}
post_init_called = true;
TTCN_Logger.log_module_init(module_name, false);
Module_List.post_init_module("IPL4asp_Types");
TTCN_Logger.log_module_init(module_name, true);
}

}
