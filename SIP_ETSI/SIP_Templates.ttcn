/*
******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission 
 * is hereby granted, free of charge, to copy, reproduce and amend this file 
 * under the following conditions: It is provided "as is", without warranty of any 
 * kind, expressed or implied. 
 *
 * ETSI shall never be liable for any claim, damages, or other liability arising 
 * from its use or inability of use.This permission does not apply to any documentation 
 * associated with this file for which ETSI keeps all rights reserved. The present 
 * copyright notice shall be included in all copies of whole or part of this 
 * file and shall not imply any sub-license right.
 *
 *  Modified by: Elemer Lelik
******************************************************************************
//-----------------------------------------------------------------------------
//AUTHOR:      Gyorgy Rethy, L.M. Ericsson (STF296, STF270, STF246, STF196, STF166)
//DATE:        September 2007
//VERSION:     4.2.1
//
//DTS/MTS 0097-3
//
//Methods for Testing and Specification (MTS);
//Conformance Test Specification for SIP (RFC32361);
//Part 3: Abstract Test Suite (TTCN-3 code)
//
//(c) European Telecommunications Standards Institute 2001.
//All rights reserved.
//
//-----------------------------------------------------------------------------
//HISTORY: ---> see History in SIP_MainModule.ttcn
//
//References
//The following documents contain provisions which, through reference in this text, constitute provisions of the present document.
//- References are either specific (identified by date of publication, edition number, version number, etc.) or non-specific.
//- For a specific reference, subsequent revisions do not apply.
//- For a non-specific reference, the latest version applies.
//- A non-specific reference to an ETS shall also be taken to refer to later versions published as an EN with the same number.
//[1]  RFC 3261, "Session Description Protocol", SDP: Session Description Protocol. M. Handley, V. Jacobson. April 1998. (Status: PROPOSED STANDARD).
//[3]  ISO/IEC 9646-1: "Information technology - Open Systems Interconnection - Conformance testing methodology and framework - Part 1: General concepts
//[4]  ISO/IEC 9646-2: "Information technology - Open Systems Interconnection - Conformance testing methodology and framework - Part 2: Abstract Test Suite specification".
//[5] ISO/IEC 9646-3: "Information technology - Open Systems Interconnection - Conformance testing methodology and framework - Part 3: The Tree and Tabular Combined Notation".
//[6]  ETS 300 406: "Methods for Testing and Specification (MTS); Protocol and profile conformance testing specifications; Standardization methodology".
*/


//**************************************************************************************************
//compiled with Titan 5 R4C 2016.02.22 Elemer Lelik
//**************************************************************************************************


module SIP_Templates {
import from SIP_TypesAndConf all;
import from SIPmsg_Types all;



group Templates {
  group SimpleTemplates {
    template charstring Inc_SDP := ?; //pattern "?*/sdp*";
    template charstring ValidBranch := ?; //pattern "z9hG4bK*";
    template charstring charstring_any_value := ?;
    template charstring charstring_0 := "0";
  }
  group SubTemplates {
    template MaxForwards MaxForwards_s(
      integer loc_int)
    := {
      fieldName := MAX_FORWARDS_E,
      forwards := loc_int
    };
    
    template ContentDisposition ContentDisposition_s1 := {
      fieldName := CONTENT_DISPOSITION_E,
      dispositionType := "session",
      dispositionParams := omit
    };
    template From From_s1(charstring tag_str) := {
      fieldName := FROM_E,
      addressField := {
        nameAddr := { displayName := PX_ETS_DISP_NAME,
          // optional charstring
          addrSpec := SipUrl_ofCaller_s // SipUrl
        }
      },
      fromParams := { { id := TAG_ID, paramValue := tag_str }
      }
    };
    
    //RGy (2007-11-05) Template From_s2 is deleted as was EXACTLY the same as From_s1
    
    template From From_withoutTag_s1 := {
      fieldName := FROM_E,
      addressField := {
        nameAddr := { displayName := PX_ETS_DISP_NAME,
          addrSpec := SipUrl_ofCaller_s // SipUrl
        }
      },
      fromParams := omit
    };
    
    template SentProtocol SentProtocol_s(
      charstring loc_protocol)
    := {
      protocolName := SIP_NAME,
      protocolVersion := SIP_VERSION,
      transport := loc_protocol
    };
    
    template SipUrl SipUrl_Ambiguous  // Ambiguous SIP-URL
    := {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := // optional
      {
        userOrTelephoneSubscriber := PX_AMBIGUOUS_USERINFO,
        // charstring
        password := omit // optional charstring
      },
      hostPort := { host := PX_TE_CALLEE_DOMAIN,
        // hostname, IPv4 or IPv6 as a charstring
        portField := omit //optional integer
      },
      urlParameters := omit,
      headers := omit
    }
    
    template SipUrl SipUrl_ofETS
    // SIP-URL of the test system on MTC side
    := {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := // optional
      {
        userOrTelephoneSubscriber := PX_ETS_LOCAL_USER,
        // charstring
        password := omit // optional charstring
      },
      hostPort := { host := PX_ETS_LOCAL_DOMAIN,
        // hostname, IPv4 or IPv6 as a charstring
        portField := PX_ETS_PORT //optional integer
      },
      urlParameters := omit,
      headers := omit
    }
    
    template SipUrl SipUrl_IP_ofETS :=
    // SIP-URL of the test system on MTC side
    {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := // optional
      {
        userOrTelephoneSubscriber := PX_ETS_LOCAL_USER,
        // charstring
        password := omit // optional charstring
      },
      hostPort := { host := PX_ETS_IPADDR,
        // hostname, IPv4 or IPv6 as a charstring
        portField := PX_ETS_PORT //optional integer
      },
      urlParameters := omit,
      headers := omit
    }
    template SipUrl SipUrl_IP_ofETS_2 :=
    // SIP-URL of the test system on MTC side
    {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := // optional
      {
        userOrTelephoneSubscriber := PX_ETS_LOCAL_USER2,
        // charstring
        password := omit // optional charstring
      },
      hostPort := { host := PX_ETS_IPADDR2,
        // hostname, IPv4 or IPv6 as a charstring
        portField := PX_ETS_PORT2 //optional integer
      },
      urlParameters := omit,
      headers := omit
    }
    
    template SipUrl SipUrl_ofPTC :=
    // SIP-URL of the test system on PTC side
    {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := // optional
      {
        userOrTelephoneSubscriber := PX_ETS_LOCAL_USER2,
        // charstring
        password := omit // optional charstring
      },
      hostPort := { host := PX_ETS_LOCAL_DOMAIN2,
        // hostname, IPv4 or IPv6 as a charstring
        portField := omit //dbo: set to omit
      },
      urlParameters := omit,
      headers := omit
    }
    template SipUrl SipUrl_ofPTC_TEL :=
    // SIP-URL of the test system on PTC side
    {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := // optional
      {
        userOrTelephoneSubscriber := PX_ETS_LOCAL_USER2_TEL,
        // charstring
        password := omit // optional charstring
      },
      hostPort := { host := PX_ETS_LOCAL_DOMAIN2,
        // hostname, IPv4 or IPv6 as a charstring
        portField := omit //dbo: set to omit
      },
      urlParameters := omit,
      headers := omit
    }
    template SipUrl SipUrl_ofPTC_Tel :=
    // SIP-URL of the test system on PTC side
    {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := // optional
      {
        userOrTelephoneSubscriber := PX_ETS_LOCAL_USER2_TEL,
        // charstring
        password := omit // optional charstring
      },
      hostPort := { host := PX_ETS_LOCAL_DOMAIN2,
        // hostname, IPv4 or IPv6 as a charstring
        portField := omit //dbo: set to omit
      },
      urlParameters := omit,
      headers := omit
    }
    
    template SipUrl SipUrl_forOptions :=
    // SIP-URL of the test system on PTC side
    {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := omit,//!!!!!!!!!!!!
      /* userInfo := // optional
      {
      userOrTelephoneSubscriber := omit,
      // charstring
      password := omit // optional charstring
      }, */
      hostPort := { host := PX_ETS_LOCAL_DOMAIN2,
        // hostname, IPv4 or IPv6 as a charstring
        portField := omit //dbo: set to omit
      },
      urlParameters := omit,
      headers := omit
    }
    template SipUrl SipUrl_forOptions_Proxy :=
    // SIP-URL of the test system on PTC side
    {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := omit,// !!!!!
      /*    userInfo := // optional
      {
      userOrTelephoneSubscriber := omit,
      // charstring
      password := omit // optional charstring
      },  */
      hostPort := { host := PX_IUT_IPADDR,
        // hostname, IPv4 or IPv6 as a charstring
        portField := omit //dbo: set to omit
      },
      urlParameters := omit,
      headers := omit
    }
    template SipUrl SipUrl_ofRDPTC :=
    // SIP-URL of the test system on PTC side
    {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := // optional
      {
        userOrTelephoneSubscriber := PX_ETS_LOCAL_USER2,
        // charstring
        password := omit // optional charstring
      },
      hostPort := { host := PX_IUT_HOME_DOMAIN,
        // hostname, IPv4 or IPv6 as a charstring
        portField := PX_IUT_PORT //optional integer
      },
      urlParameters := omit,
      headers := omit
    }
    
    template SipUrl SipUrl_IP_ofPTC :=
    // SIP-URL of the test system on PTC side
    {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := // optional
      {
        userOrTelephoneSubscriber := PX_ETS_LOCAL_USER2,
        // charstring
        password := omit // optional charstring
      },
      hostPort := { host := PX_ETS_IPADDR2,
        // hostname, IPv4 or IPv6 as a charstring
        portField := PX_ETS_PORT2 //optional integer
      },
      urlParameters := omit,
      headers := omit
    }
    
    template SipUrl SipUrl_IP_ofPTC2 :=
    // SIP-URL of the test system on PTC side
    {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := // optional
      {
        userOrTelephoneSubscriber := PX_ETS_LOCAL_USER2,
        // charstring
        password := omit // optional charstring
      },
      hostPort := { host := PX_ETS_IPADDR3,
        // hostname, IPv4 or IPv6 as a charstring
        portField := PX_ETS_PORT3 //optional integer
      },
      urlParameters := omit,
      headers := omit
    }
    
    template SipUrl SipUrl_ofPTC_r_1 :=
    // SIP-URL of the test system on PTC side
    {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := *, // optional
      hostPort := { host := PX_ETS_LOCAL_DOMAIN2,
        // hostname, IPv4 or IPv6 as a charstring
        portField := * //optional integer
      },
      urlParameters := omit,
      headers := *
    }
    template SipUrl SipUrl_ofPTC_r_2 :=
    // SIP-URL of the test system on PTC side
    {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := *, // optional
      hostPort := { host := PX_ETS_IPADDR2,
        // hostname, IPv4 or IPv6 as a charstring
        portField := * //optional integer
      },
      urlParameters := omit,
      headers := *
    }
    
    template SipUrl SipUrl_ofPTCRoute :=
    // SIP-URL of the test system on PTC side
    {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := omit, // dbo:optional charstring PTCROUTE
      hostPort := { host := PX_ETS_IPADDR2,
        // hostname, IPv4 or IPv6 as a charstring
        portField := PX_ETS_PORT2 //optional integer
      },
      urlParameters := omit,
      headers := omit
    }
    
    template SipUrl SipUrl_ofIut := // SIP-URL of the test system
    {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := omit,
      // FA : Can be not supported FA: to be reviewed
      hostPort := { host := PX_IUT_HOME_DOMAIN,
        // hostname, IPv4 or IPv6 as a charstring
        portField := PX_IUT_PORT //optional integer
      },
      urlParameters := omit,
      headers := omit
    }
    
    template SipUrl SipUrl_ofProxy := // SIP-URL of the proxy
    {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := omit, // optional
      hostPort := { host := PX_PROXY_IPADDR,
        // hostname, IPv4 or IPv6 as a charstring
        portField := PX_PROXY_PORT //optional integer
      },
      urlParameters := omit,
      headers := omit
    }
    
    template SipUrl SipUrl_ofCallee_r :=
    // SIP-URL of the callee when the IUT is the caller
    {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := {
        userOrTelephoneSubscriber := PX_ETS_LOCAL_USER,
        password := * },
      hostPort := { host := PX_ETS_LOCAL_DOMAIN,
        // hostname, IPv4 or IPv6 as a charstring
        portField := * //optional integer
      },
      urlParameters := *,
      headers := *
    }
    
    template SipUrl SipUrl_ofCallee_s :=
    // SIP-URL of the callee when the IUT is the callee
    {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := {
        userOrTelephoneSubscriber := PX_TE_CALLEE_USERINFO,
        password := omit
      },
      hostPort := {
        host := PX_TE_CALLEE_DOMAIN, // hostname, IPv4 or IPv6 as a charstring
        portField := PX_IUT_PORT
      },
      urlParameters := { { id := PX_SIPURL_PARAM_ID, paramValue := PX_SIPURL_PARAM_VALUE}},
      headers := omit
    }
    
    template SipUrl SipUrl_ofBYE(
      HostPort loc_reqHostPort,
      template charstring loc_user) := {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := {
        userOrTelephoneSubscriber := loc_user,
        password := omit
      },
      hostPort := loc_reqHostPort,
      urlParameters := omit,
      headers := omit
    }
    
    template SipUrl SipUrl_ofCaller_s :=
    // SIP-URL of the caller when the IUT is the callee
    {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := {
        userOrTelephoneSubscriber := PX_ETS_LOCAL_USER,
        password := omit },
      hostPort := {
        host := PX_ETS_LOCAL_DOMAIN,// hostname, IPv4 or IPv6 as a charstring
        portField := PX_ETS_PORT },
      urlParameters := omit,
      headers := omit
    }
    
    template SipUrl SipUrl_ofUnknown_s :=
    // SIP-URL set to an unknown address when the IUT is the callee
    {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := {
        userOrTelephoneSubscriber := PX_UNKNOWN_USERINFO,
        password := omit },
      hostPort := { host := PX_UNKNOWN_DOMAIN,
        // hostname, IPv4 or IPv6 as a charstring
        portField := omit },
      urlParameters := omit,
      headers := omit
    }
    
    template SipUrl SipUrl_ofMulticast_r :=
    // SIP-URL set to address multicast
    {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := omit, // forbidden
      hostPort := { host := MCAST_SIP_IPADDR,
        // hostname, "sip.mcast.net" (224.0.1.75)
        portField := * },
      urlParameters := *,
      headers := *
    }
    
    template SipUrl SipUrl_ofRouteEts
    := {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := omit, // dbo:optional charstring MTCROUTE
      hostPort := { host := PX_ETS_IPADDR,
        // hostname, IPv4 or IPv6 as a charstring
        portField := PX_ETS_PORT //optional integer
      },
      urlParameters := omit,
      headers := omit
    }
    
    template SipUrl SipUrl_ofRouteEts_lr
    := {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := omit, // optional MTCROUTE
      hostPort := { host := PX_ETS_IPADDR,
        // hostname, IPv4 or IPv6 as a charstring
        portField := PX_ETS_PORT //optional integer
      },
      urlParameters := { { id := "lr", paramValue := omit }
      },
      headers := omit
    }
    
    template SipUrl SipUrl_ofRoutePtc
    := {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := omit,
      // dbo:optional charstring PTCROUTE
      hostPort := { host := PX_ETS_LOCAL_DOMAIN2,
        // hostname, IPv4 or IPv6 as a charstring
        portField := PX_ETS_PORT2 //optional integer
      },
      urlParameters := *,
      headers := omit
    }
    
    template SipUrl SipUrl_ofRoutePtc_s
    := {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := omit,
      // dbo:optional charstring PTCROUTE
      hostPort := { host := PX_ETS_LOCAL_DOMAIN2,
        // hostname, IPv4 or IPv6 as a charstring
        portField := PX_ETS_PORT2 //optional integer
      },
      urlParameters := omit,
      headers := omit
    }
    
    template SipUrl SipUrl_ofRoutePtc_lr
    := {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := omit, // dbo:optional charstring PTCROUTE
      hostPort := { host := PX_ETS_LOCAL_DOMAIN2,
        // hostname, IPv4 or IPv6 as a charstring
        portField := PX_ETS_PORT2 //optional integer
      },
      urlParameters := { { id := "lr", paramValue := omit }
      },
      headers := omit
    }
    
    template SipUrl SipUrl_ofRouteIUT
    := {
      scheme := SIP_SCHEME, // contains "sip"
      userInfo := omit, //optional IUTROUTE
      hostPort := { host := PX_IUT_HOME_DOMAIN,
        // hostname, IPv4 or IPv6 as a charstring
        portField := PX_IUT_PORT //optional integer
      },
      urlParameters := omit,
      headers := omit
    }
    
    template CSeq Cseg_s_1
    := {
      fieldName := CSEQ_E,
      seqNumber := 0,
      method := "INVITE"
    };
    
    template Route Route_l_1
    := {
      fieldName := ROUTE_E,
      routeBody := {
        {
          nameAddr := {
            displayName := omit, addrSpec := SipUrl_ofProxy },
          rrParam := omit },
        {
          nameAddr := {
            displayName := omit,
            addrSpec := SipUrl_ofRouteIUT },
          rrParam := omit
        }
      }
    }
    template Route Route_l_2 
    := {
      fieldName := ROUTE_E,
      routeBody := {
        {
          nameAddr := {
            displayName := omit, addrSpec := SipUrl_ofRouteIUT },
          rrParam := omit },
        {
          nameAddr := {
            displayName := omit,
            addrSpec := SipUrl_ofRoutePtc_lr },
          rrParam := omit
        }
      }
    }
    template Route Route_l_3
    := {
      fieldName := ROUTE_E,
      routeBody := {
        {
          nameAddr := {
            displayName := omit, addrSpec := SipUrl_ofRoutePtc_s },
          rrParam := omit },
        {
          nameAddr := {
            displayName := omit, addrSpec := SipUrl_ofProxy },
          rrParam := omit
        }
      }
    }
    
    template Route Route_l_4
    := {
      fieldName := ROUTE_E,
      routeBody := {
        {
          nameAddr := {
            displayName := omit,
            addrSpec := SipUrl_ofProxy
          },
          rrParam := omit },
        {
          nameAddr := {
            displayName := omit,
            addrSpec := {
              scheme := SIP_SCHEME, // contains "sip"
              userInfo := *, // optional
              hostPort := { host := PX_ETS_LOCAL_DOMAIN2,
                // hostname, IPv4 or IPv6 as a charstring
                portField := * //optional integer
              },
              urlParameters := omit, headers := omit
            }
          },
          rrParam := omit
        }
      }
    }
    
    template Route Route_l_5
    := {
      fieldName := ROUTE_E,
      routeBody := {
        {
          nameAddr := {
            displayName := omit,
            addrSpec := valueof(SipUrl_ofRoutePtc_lr)},
          rrParam := omit },
        {
          nameAddr := {
            displayName := omit,
            addrSpec := valueof(SipUrl_ofProxy)},
          rrParam := omit
        }
      }
    }
    
    template Route Route_remove_r_1
    := {
      fieldName := ROUTE_E,
      routeBody := {
        {
          nameAddr := {
            displayName := omit,
            addrSpec := SipUrl_ofRoutePtc },
          rrParam := omit }
      }
    }
    
    template Route Route_reverse_r_1 := {
      fieldName := ROUTE_E,
      routeBody := {
        {
          nameAddr := {
            displayName := omit, addrSpec := SipUrl_ofRouteEts_lr },
          rrParam := omit },
        {
          nameAddr := {
            displayName := omit, addrSpec := SipUrl_ofProxy },
          rrParam := omit
        }
      }
    }
    
    template ViaBody ViaBody_ETS_IPADDR(
      charstring loc_branchValue)
    := {
      sentProtocol := SentProtocol_s(PX_TRANSPORT),
      sentBy := { host := PX_ETS_IPADDR, portField := PX_ETS_PORT },
      viaParams := { { id := BRANCH_ID, paramValue := loc_branchValue }
      }
    }
    
    template ViaBody ViaBody_ETS_NoBranch
    := {
      sentProtocol := SentProtocol_s(PX_TRANSPORT),
      sentBy := { host := PX_ETS_IPADDR, portField := PX_ETS_PORT },
      viaParams := omit
    }
    
    template ViaBody ViaBody_IUT_IPADDR(
      charstring loc_branchValue)
    := {
      sentProtocol := SentProtocol_s(PX_TRANSPORT),
      sentBy := { host := PX_IUT_IPADDR, portField := PX_IUT_PORT },
      viaParams := { { id := BRANCH_ID, paramValue := loc_branchValue }
      }
    }
    
    template ViaBody ViaBody_PTC(
      template charstring loc_branchValue)
    := {
      sentProtocol := SentProtocol_s(PX_TRANSPORT),
      sentBy := { host := PX_ETS_IPADDR2, portField := PX_ETS_PORT2 },
      viaParams := { { id := BRANCH_ID, paramValue := loc_branchValue }
      }
    }
    
    template ViaBody ViaBody_PTC2(
      charstring loc_branchValue)
    := {
      sentProtocol := SentProtocol_s(PX_TRANSPORT),
      sentBy := { host := PX_ETS_IPADDR3, portField := PX_ETS_PORT3 },
      viaParams := { { id := BRANCH_ID, paramValue := loc_branchValue }
      }
    }
    template Via Via_l1(
      template charstring loc_branchValue)
    := {
      fieldName := VIA_E,
      viaBody := { ViaBody_PTC(loc_branchValue)}
    }
    
    template Via Via_l2
    := {
      fieldName := VIA_E,
      viaBody := {
        {
          sentProtocol := ?,
          sentBy := {
            host := PX_ETS_IPADDR, portField := PX_ETS_PORT },
          viaParams := ? }
      }
    }
    
    template Contact Contact_Proxy_s
    := {
      fieldName := CONTACT_E,
      contactBody := {
        contactAddresses := {
          {
            addressField := { addrSpecUnion := SipUrl_ofProxy },
            contactParams := omit }
        }
      }
    }
    
    template Contact Contact_Multi_s1
    := {
      fieldName := CONTACT_E,
      contactBody := {
        contactAddresses := {
          {
            addressField := { addrSpecUnion := SipUrl_IP_ofPTC },
            contactParams := omit },
          {
            addressField := { addrSpecUnion := SipUrl_ofPTC },
            contactParams := omit }
        }
      } //end contactBody
    } //end Contact_Multi_s
    
    template Contact Contact_Multi_s2
    := {
      fieldName := CONTACT_E,
      contactBody := {
        contactAddresses := {
          {
            addressField := { addrSpecUnion := SipUrl_IP_ofETS },
            contactParams := omit },
          {
            addressField := { addrSpecUnion := SipUrl_ofETS },
            contactParams := omit }
        }
      } //end contactBody
    } //end Contact_Multi_s
    
    template Contact Contact_RD_Multi_s
    := {
      fieldName := CONTACT_E,
      contactBody := {
        contactAddresses := {
          {
            addressField := { addrSpecUnion := SipUrl_IP_ofPTC },
            contactParams := omit },
          {
            addressField := { addrSpecUnion := SipUrl_ofProxy },
            contactParams := omit }
        }
      } //end contactBody
    } //end Contact_RD_Multi_s
    
    template Contact Contact_ETS_s
    := {
      fieldName := CONTACT_E,
      contactBody := {
        contactAddresses := {
          {
            addressField := { addrSpecUnion := SipUrl_IP_ofETS },
            contactParams := omit }
        }
      } //end contactBody
    } //end Contact_ETS_s
    
    template Contact Contact_ETS_s_2
    := {
      fieldName := CONTACT_E,
      contactBody := {
        contactAddresses := {
          {
            addressField := { addrSpecUnion := SipUrl_IP_ofETS_2 },
            contactParams := omit }
        }
      } //end contactBody
    } //end Contact_ETS_s
    
    template Contact Contact_PTC_s
    := {
      fieldName := CONTACT_E,
      contactBody := {
        contactAddresses := {
          { addressField := {
              nameAddr := {
                displayName := PX_ETS_DISP_NAME2,
                addrSpec := SipUrl_IP_ofPTC }
            },
            contactParams := {
              { id := "transport", paramValue := PX_TRANSPORT }
            }
          }
        }
      }
    };
    
    template Contact Contact_PTC2_s
    := {
      fieldName := CONTACT_E,
      contactBody := {
        contactAddresses := {
          { addressField := {
              nameAddr := {
                displayName := PX_ETS_DISP_NAME2,
                addrSpec := SipUrl_IP_ofPTC2 }
            },
            contactParams := {
              { id := "transport", paramValue := PX_TRANSPORT }
            }
          }
        }
      }
    };
    
    template Contact Contact_RD_PTC_r
    := {
      fieldName := CONTACT_E,
      contactBody := {
        contactAddresses := { { addressField := { nameAddr := {
                //displayName := PX_ETS_DISP_NAME2 ifpresent,
                displayName := *,
                addrSpec := SipUrl_IP_ofPTC }
            }, contactParams := * }
        } //end contactAddresses
      } //end contactBody
    }; //end Contact_RD_PTC_r
    
    template ContactAddress ContactAddress_r_1
    := {
      addressField := ?,
      contactParams := *
    };
    
    template To To_s1
    := {
      fieldName := TO_E,
      addressField := {
        nameAddr := {
          displayName := omit, // optional charstring
          addrSpec := SipUrl_ofCallee_s // SipUrl
        }
      }, //end addressField
      toParams := omit
    }
    
    template To To_s1_Unknown
    := {
      fieldName := TO_E,
      addressField := {
        nameAddr := { displayName := omit, // optional charstring
          addrSpec := SipUrl_ofUnknown_s // SipUrl unknown
        }
      }, //end addressField
      toParams := omit
    }
    template To To_s2
    := {
      fieldName := TO_E,
      addressField := {
        nameAddr := { displayName := PX_ETS_DISP_NAME2,
          // optional charstring
          addrSpec :=
          SipUrl_ofPTC // SipUrl : PX_ETS_LOCAL_USER2, PX_EST_LOCAL_DOMAIN2
        }
      }, //addressField
      toParams := omit //optional set of GenericParam
    };
    
    template To To_s2_Tel
    := {
      fieldName := TO_E,
      addressField := {
        nameAddr := { displayName := PX_ETS_DISP_NAME2,
          // optional charstring
          addrSpec :=
          SipUrl_ofPTC_TEL // SipUrl : PX_ETS_LOCAL_USER2, PX_EST_LOCAL_DOMAIN2
        }
      }, //addressField
      toParams := omit //optional set of GenericParam
    };
    template To To_s3 //identical to From_s1
    := {
      fieldName := TO_E,
      addressField := {
        nameAddr := { displayName := PX_ETS_DISP_NAME,
          // optional charstring
          addrSpec := SipUrl_ofCaller_s // SipUrl
        }
      },
      toParams := omit
    };
    
    template To To_s4(
      charstring loc_tagValue)
    := {
      fieldName := TO_E,
      addressField := {
        nameAddr := { displayName := PX_ETS_DISP_NAME2,
          // optional charstring
          addrSpec :=
          SipUrl_ofPTC // SipUrl : PX_ETS_LOCAL_USER2, PX_EST_LOCAL_DOMAIN2
        }
      }, //addressField
      toParams := { { id := TAG_ID, paramValue := loc_tagValue }
      }
    };
    
    template To To_s5
    := {
      fieldName := TO_E,
      addressField := {
        nameAddr := { displayName := PX_ETS_DISP_NAME2,
          // optional charstring
          addrSpec :=
          SipUrl_ofRDPTC // SipUrl : PX_ETS_LOCAL_USER2, PX_EST_LOCAL_DOMAIN2
        }
      }, //addressField
      toParams := omit //optional set of GenericParam
    };
    
  } //end of Group SubTemplates
  group MSGtemplates {
    group RequestTemplates {
      template REGISTER_Request REGISTER_Request_r_1
      := {
        requestLine := {
          method := REGISTER_E,
          requestUri := ?,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          accept := *,
          acceptEncoding := *,
          acceptLanguage := *,
          allow := *,
          authorization := *,
          callId := ?,
          callInfo := *,
          contact := *,
          contentDisposition := *,
          contentEncoding := *,
          contentLanguage := *,
          contentLength := *,
          contentType := *,
          cSeq := ?,
          date := *,
          expires := *,
          fromField := ?,
          maxForwards := ?,
          mimeVersion := *,
          organization := *,
          proxyAuthorization := *,
          proxyRequire := *,
          require := *,
          route := *,
          supported := *,
          timestamp := *,
          toField := ?,
          userAgent := *,
          via := ?,
          undefinedHeader_List := *,
          // the following header fields may never appear in a REGISTER request [20]
          alertInfo := *,
          authenticationInfo := *,
          errorInfo := *,
          inReplyTo := *,
          minExpires := *,
          priority := *,
          proxyAuthenticate := *,
          recordRoute := *,
          replyTo := *,
          retryAfter := *,
          server := *,
          subject := *,
          unsupported := *,
          warning := *,
          wwwAuthenticate := * },
        messageBody := *,
        payload := *
      }
      
      template REGISTER_Request REGISTER_Request_r_2
      modifies REGISTER_Request_r_1
      := {
        requestLine := {
          method := REGISTER_E,
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := omit,
            hostPort := ?,
            urlParameters := *,
            headers := * },
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          contact := {
            fieldName := CONTACT_E,
            contactBody := { contactAddresses := ? }
          }
        }
      } // end template REGISTER_Request_r_2
      // Register request with an Authorization field
      template REGISTER_Request REGISTER_Request_r_4
      modifies REGISTER_Request_r_1
      := {
        requestLine := {
          method := REGISTER_E,
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := omit,
            hostPort := ?,
            urlParameters := *,
            headers := * },
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          contact := {
            fieldName := CONTACT_E,
            contactBody := { contactAddresses := ? }
          }, authorization := ? }
      }
      
      // Register request with a request URI addressed to the configured Registrar PX_ETS_LOCAL_DOMAIN
      template REGISTER_Request REGISTER_Request_r_5
      modifies REGISTER_Request_r_1
      := {
        requestLine := {
          method := REGISTER_E,
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := omit,
            hostPort := {
              host := PX_ETS_LOCAL_DOMAIN, portField := * },
            urlParameters := *,
            headers := * },
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          contact := {
            fieldName := CONTACT_E,
            contactBody := { contactAddresses := ? }
          }
        }
      }
      
      // Register request with a request URI addressed to address of record PX_IUT_HOME_DOMAIN
      template REGISTER_Request REGISTER_Request_r_6
      modifies REGISTER_Request_r_1
      := {
        requestLine := {
          method := REGISTER_E,
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := omit,
            hostPort := {
              host := PX_IUT_HOME_DOMAIN, portField := * },
            urlParameters := *,
            headers := * },
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          contact := {
            fieldName := CONTACT_E,
            contactBody := { contactAddresses := ? }
          }
        }
      }
      
      // Register request with CallId, CSeq, From, To, Contact as parameters
      template REGISTER_Request REGISTER_Request_r_7(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Contact loc_Contact) modifies REGISTER_Request_r_1
      := {
        requestLine := {
          method := REGISTER_E,
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := omit,
            hostPort := ?,
            urlParameters := *,
            headers := * },
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          fromField := loc_From,
          toField := loc_To,
          callId := loc_CallId,
          cSeq := loc_CSeq,
          contact := loc_Contact }
      }
      
      // Register request with CallId as parameters
      template REGISTER_Request REGISTER_Request_r_8 (
        CallId loc_CallId) modifies REGISTER_Request_r_1
      := {
        requestLine := {
          method := REGISTER_E,
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := omit,
            hostPort := ?,
            urlParameters := *,
            headers := * },
          sipVersion := SIP_NAME_VERSION },
        msgHeader := { callId := loc_CallId }
      }
      // Register request with Contact set to * and Expires header set to 0
      template REGISTER_Request REGISTER_Request_r_9
      modifies REGISTER_Request_r_1
      := {
        requestLine := {
          method := REGISTER_E,
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := omit,
            hostPort := ?,
            urlParameters := *,
            headers := * },
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          expires := { fieldName := EXPIRES_E, deltaSec := "0" },
          contact := {
            fieldName := CONTACT_E,
            contactBody := { wildcard := "*" }
          }
        }
      }
      //        Register request without a Contact header field
      template REGISTER_Request REGISTER_Request_r_10
      modifies REGISTER_Request_r_1
      := {
        msgHeader := { contact := omit }
      }
      
      template REGISTER_Request REGISTER_Request_r_11
      modifies REGISTER_Request_r_6
      := {
        msgHeader := { expires := ? }
      }
      
      template REGISTER_Request REGISTER_Request_r_12
      modifies REGISTER_Request_r_6
      := {
        msgHeader := {
          contact := {
            fieldName := CONTACT_E,
            contactBody := {
              contactAddresses := {
                {
                  addressField := ?,
                  contactParams := {
                    { id := "expires", paramValue := ? }
                  }
                }
              }
            }
          }
        }
      }
      template REGISTER_Request REGISTER_Request_r_13 
      modifies REGISTER_Request_r_6 
      := {
        msgHeader := {
          contact := {
            fieldName := CONTACT_E,
            contactBody := {
              contactAddresses := {
                *,
                {
                  addressField := ?,
                  contactParams := {
                    { id := "q", paramValue := ? }
                  }
                }, * }
            }
          }
        }
      }
      
      // Register request with an Authorization field
      template REGISTER_Request REGISTER_Request_r_14 
      modifies REGISTER_Request_r_1 
      := {
        requestLine := {
          method := REGISTER_E,
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := omit,
            hostPort := ?,
            urlParameters := *,
            headers := * },
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          contact := {
            fieldName := CONTACT_E,
            contactBody := { contactAddresses := ? }
          },
          authorization := {
            fieldName := AUTHORIZATION_E, body := ? }
        }
      }
      
      // Register request with an Proxy-Authorization field
      template REGISTER_Request REGISTER_Request_r_15 
      modifies REGISTER_Request_r_1
      := {
        requestLine := {
          method := REGISTER_E,
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := omit,
            hostPort := ?,
            urlParameters := *,
            headers := * },
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          contact := {
            fieldName := CONTACT_E,
            contactBody := { contactAddresses := ? }
          }, proxyAuthorization := ? }
      }
      //        Register request with an Proxy-Authorization field
      template REGISTER_Request REGISTER_Request_r_16 
      modifies REGISTER_Request_r_1 
      := {
        requestLine := {
          method := REGISTER_E,
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := omit,
            hostPort := ?,
            urlParameters := *,
            headers := * },
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          contact := {
            fieldName := CONTACT_E,
            contactBody := { contactAddresses := ? }
          },
          proxyAuthorization := {
            fieldName := PROXY_AUTHORIZATION_E,
            credentials := ? }
        }
      }
      
      template REGISTER_Request REGISTER_Request_r_17(
        CallId loc_CallId,
        CSeq loc_CSeq) modifies REGISTER_Request_r_1
      := {
        msgHeader := { callId := loc_CallId, cSeq := loc_CSeq }
      }
      
      // General send template sent to Registrar
      template REGISTER_Request REGISTER_Request_s_1(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        Contact loc_Contact,
        From loc_From,
        To loc_To,
        Via loc_Via)
      := {
        requestLine := {
          method := REGISTER_E,
          requestUri := loc_RequestUri,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          via := loc_Via,
          contact := loc_Contact,
          fromField := loc_From,
          toField := loc_To,
          callId := loc_CallId,
          cSeq := loc_CSeq,
          contentLength := {
            fieldName := CONTENT_LENGTH_E, len := 0 },
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := 70 },
          authorization := omit,
          accept := omit,
          acceptEncoding := omit,
          acceptLanguage := omit,
          allow := omit,
          callInfo := omit,
          contentDisposition := omit,
          contentEncoding := omit,
          contentLanguage := omit,
          contentType := omit,
          date := omit,
          expires := omit,
          mimeVersion := omit,
          organization := omit,
          proxyAuthorization := omit,
          proxyRequire := omit,
          require := omit,
          route := omit,
          supported := omit,
          timestamp := omit,
          userAgent := omit,
          undefinedHeader_List := omit,
          // the following header fields may never appear in a REGISTER request [20]
          alertInfo := omit,
          authenticationInfo := omit,
          errorInfo := omit,
          inReplyTo := omit,
          minExpires := omit,
          priority := omit,
          proxyAuthenticate := omit,
          recordRoute := omit,
          replyTo := omit,
          retryAfter := omit,
          server := omit,
          subject := omit,
          unsupported := omit,
          warning := omit,
          wwwAuthenticate := omit },
        messageBody := omit,
        payload := omit
      }
      
      template REGISTER_Request REGISTER_Request_s_2(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        Contact loc_Contact,
        From loc_From,
        To loc_To,
        Via loc_Via,
        charstring loc_Expires) modifies REGISTER_Request_s_1
      := {
        msgHeader := {
          expires := {
            fieldName := EXPIRES_E, deltaSec := loc_Expires }
        }
      }
      
      //REGISTER request with no Contact
      template REGISTER_Request REGISTER_Request_s_3(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via)
      := {
        requestLine := {
          method := REGISTER_E,
          requestUri := loc_RequestUri,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          via := loc_Via,
          contact := omit,
          fromField := loc_From,
          toField := loc_To,
          callId := loc_CallId,
          cSeq := loc_CSeq,
          contentLength := {
            fieldName := CONTENT_LENGTH_E, len := 0 },
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := 70 },
          authorization := omit,
          accept := omit,
          acceptEncoding := omit,
          acceptLanguage := omit,
          allow := omit,
          callInfo := omit,
          contentDisposition := omit,
          contentEncoding := omit,
          contentLanguage := omit,
          contentType := omit,
          date := omit,
          expires := omit,
          mimeVersion := omit,
          organization := omit,
          proxyAuthorization := omit,
          proxyRequire := omit,
          require := omit,
          route := omit,
          supported := omit,
          timestamp := omit,
          userAgent := omit,
          undefinedHeader_List := omit,
          // the following header fields may never appear in a REGISTER request [20]
          alertInfo := omit,
          authenticationInfo := omit,
          errorInfo := omit,
          inReplyTo := omit,
          minExpires := omit,
          priority := omit,
          proxyAuthenticate := omit,
          recordRoute := omit,
          replyTo := omit,
          retryAfter := omit,
          server := omit,
          subject := omit,
          unsupported := omit,
          warning := omit,
          wwwAuthenticate := omit },
        messageBody := omit,
        payload := omit
      }
      
      template REGISTER_Request REGISTER_Request_s_4(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        Contact loc_Contact,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies REGISTER_Request_s_1
      := {
        msgHeader := {
          authorization := {
            //       fieldName := AUTHORIZATION_E, body := omit }


            fieldName := AUTHORIZATION_E, body := {digestResponse :={}} } //!!!!!!!
        }
      }
      
      template REGISTER_Request REGISTER_Request_s_5(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        Contact loc_Contact,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies REGISTER_Request_s_1
      := {
        msgHeader := {
          alertInfo := {
            fieldName := ALERT_INFO_E,
            alertInfoBody := {
              { url := "alert@info.body", genericParams := omit }
            }
          }
        }
      }
      
      //REGISTER Request with no Cseq
      template REGISTER_Request REGISTER_Request_s_6(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        Contact loc_Contact,
        From loc_From,
        To loc_To,
        Via loc_Via)
      := {
        requestLine := {
          method := REGISTER_E,
          requestUri := loc_RequestUri,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          via := loc_Via,
          contact := loc_Contact,
          fromField := loc_From,
          toField := loc_To,
          callId := loc_CallId,
          cSeq := omit,
          contentLength := {
            fieldName := CONTENT_LENGTH_E, len := 0 },
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := 70 },
          authorization := omit,
          accept := omit,
          acceptEncoding := omit,
          acceptLanguage := omit,
          allow := omit,
          callInfo := omit,
          contentDisposition := omit,
          contentEncoding := omit,
          contentLanguage := omit,
          contentType := omit,
          date := omit,
          expires := omit,
          mimeVersion := omit,
          organization := omit,
          proxyAuthorization := omit,
          proxyRequire := omit,
          require := omit,
          route := omit,
          supported := omit,
          timestamp := omit,
          userAgent := omit,
          undefinedHeader_List := omit,
          // the following header fields may never appear in a REGISTER request [20]
          alertInfo := omit,
          authenticationInfo := omit,
          errorInfo := omit,
          inReplyTo := omit,
          minExpires := omit,
          priority := omit,
          proxyAuthenticate := omit,
          recordRoute := omit,
          replyTo := omit,
          retryAfter := omit,
          server := omit,
          subject := omit,
          unsupported := omit,
          warning := omit,
          wwwAuthenticate := omit },
        messageBody := omit,
        payload := omit
      }
      
      template REGISTER_Request REGISTER_Request_s_7(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        Contact loc_Contact,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies REGISTER_Request_s_1
      := {
        requestLine := { sipVersion := "sip/2.0" }
      }
      
      // OPTION TEMPLATES
      template OPTIONS_Request OPTIONS_Request_r_1
      := {
        requestLine := {
          method := OPTIONS_E,
          requestUri := ?,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          callId := { fieldName := CALL_ID_E, callid := ? },
          contact := *,
          cSeq := {
            fieldName := CSEQ_E,
            seqNumber := ?,
            method := "OPTIONS" },
          fromField := ?,
          toField := ?,
          via := ?,
          accept := *,
          acceptEncoding := *,
          acceptLanguage := *,
          alertInfo := *,
          allow := *,
          authorization := *,
          callInfo := *,
          contentDisposition := *,
          contentEncoding := *,
          contentLanguage := *,
          contentLength := *,
          contentType := *,
          date := *,
          expires := *,
          inReplyTo := *,
          maxForwards := ?,
          mimeVersion := *,
          organization := *,
          priority := *,
          proxyAuthorization := *,
          proxyRequire := *,
          recordRoute := *,
          replyTo := *,
          require := *,
          route := *,
          subject := *,
          supported := *,
          timestamp := *,
          userAgent := *,
          undefinedHeader_List := *,
          // the following header fields may never appear in a OPTIONS request [20]
          authenticationInfo := *,
          errorInfo := *,
          minExpires := *,
          proxyAuthenticate := *,
          retryAfter := *,
          server := *,
          unsupported := *,
          warning := *,
          wwwAuthenticate := * },
        messageBody := *,
        payload := *
      }
      
      template OPTIONS_Request OPTIONS_Request_r_4_1 
      modifies OPTIONS_Request_r_1
      := {
        requestLine := {
          method := OPTIONS_E,
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := omit,
            hostPort := ?,
            urlParameters := *,
            headers := * },
          sipVersion := SIP_NAME_VERSION },
        msgHeader := { authorization := ? }
      }
      
      template OPTIONS_Request OPTIONS_Request_r_4_1a
      modifies OPTIONS_Request_r_1 
      := {
        requestLine := {
          method := OPTIONS_E,
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := omit,
            hostPort := ?,
            urlParameters := *,
            headers := * },
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          authorization := {
            fieldName := AUTHORIZATION_E, body := ? }
        }
      }
      
      template OPTIONS_Request OPTIONS_Request_r_4_2 
      modifies OPTIONS_Request_r_1 
      := {
        requestLine := {
          method := OPTIONS_E,
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := omit,
            hostPort := ?,
            urlParameters := *,
            headers := * },
          sipVersion := SIP_NAME_VERSION },
        msgHeader := { proxyAuthorization := ? }
      }
      template OPTIONS_Request OPTIONS_Request_r_4_2a 
      modifies OPTIONS_Request_r_1 
      := {
        requestLine := {
          method := OPTIONS_E,
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := omit,
            hostPort := ?,
            urlParameters := *,
            headers := * },
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          proxyAuthorization := {
            fieldName := PROXY_AUTHORIZATION_E,
            credentials := ? }
        }
      }
      
      template OPTIONS_Request OPTIONS_Request_r_5 
      modifies OPTIONS_Request_r_1 
      := {
        msgHeader := { cSeq := ? }
      }
      
      template OPTIONS_Request OPTIONS_Request_r_6 
      modifies OPTIONS_Request_r_1 
      := {
        msgHeader := {
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := 70 }
        } // end msgHeader
      }
      
      template OPTIONS_Request OPTIONS_Request_r_7 
      modifies OPTIONS_Request_r_1 
      := {
        msgHeader := {
          via := {
            fieldName := VIA_E, viaBody := { //ViaBody_List
              {
                sentProtocol := {
                  protocolName := SIP_NAME,
                  protocolVersion := SIP_VERSION,
                  transport := ? },
                sentBy := ?,
                //Parameter branch shall be present
                viaParams := ? }, * } //end viaBody
          } // end via
        } // end msgHeader
      }
      template OPTIONS_Request OPTIONS_Request_r_8 //CK used in CC_OE_CE_V_008
      modifies OPTIONS_Request_r_1 
      := {
        msgHeader := { accept := ? } // end msgHeader
      }
      
      template OPTIONS_Request OPTIONS_Request_r_9(
        CallId loc_CallId,
        CSeq loc_CSeq) modifies OPTIONS_Request_r_1 
      := {
        msgHeader := { accept := ? }
      }
      template OPTIONS_Request OPTIONS_Request_s_1(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) 
      := {
        requestLine := {
          method := OPTIONS_E,
          requestUri := loc_RequestUri,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          callId := loc_CallId,
          contact := omit,
          cSeq := loc_CSeq,
          fromField := loc_From,
          toField := loc_To,
          via := loc_Via,
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := 70 },
          accept := omit,
          acceptEncoding := omit,
          acceptLanguage := omit,
          alertInfo := omit,
          allow := omit,
          authorization := omit,
          callInfo := omit,
          contentDisposition := omit,
          contentEncoding := omit,
          contentLanguage := omit,
          contentLength := {
            fieldName := CONTENT_LENGTH_E, len := 0 },
          contentType := omit,
          date := omit,
          expires := omit,
          inReplyTo := omit,
          mimeVersion := omit,
          organization := omit,
          priority := omit,
          proxyAuthorization := omit,
          proxyRequire := omit,
          recordRoute := omit,
          replyTo := omit,
          require := omit,
          route := omit,
          subject := omit,
          supported := omit,
          timestamp := omit,
          userAgent := omit,
          undefinedHeader_List := omit,
          authenticationInfo := omit,
          errorInfo := omit,
          minExpires := omit,
          proxyAuthenticate := omit,
          retryAfter := omit,
          server := omit,
          unsupported := omit,
          warning := omit,
          wwwAuthenticate := omit },
        messageBody := omit,
        payload := omit
      }
      
      template OPTIONS_Request OPTIONS_Request_s_2(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies OPTIONS_Request_s_1
      := {
        msgHeader := {
          accept := {
            fieldName := ACCEPT_E,
            acceptArgs := { { SDP_APPLICATION, omit }
            } // end acceptArgs
          } // end accept
        }
      }
      
      //INVITE TEMPLATES
      template INVITE_Request INVITE_Request_r_1
      := {
        requestLine := {
          method := INVITE_E,
          requestUri := ?,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          callId := { fieldName := CALL_ID_E, callid := ? },
          contact := ?,
          cSeq := {
            fieldName := CSEQ_E,
            seqNumber := ?,
            method := "INVITE" },
          fromField := ?,
          toField := ?,
          via := ?,
          accept := *,
          acceptEncoding := *,
          acceptLanguage := *,
          alertInfo := *,
          allow := *,
          authorization := *,
          callInfo := *,
          contentDisposition := *,
          contentEncoding := *,
          contentLanguage := *,
          contentLength := *,
          contentType := *,
          date := *,
          expires := *,
          inReplyTo := *,
          maxForwards := ?,
          mimeVersion := *,
          organization := *,
          priority := *,
          proxyAuthorization := *,
          proxyRequire := *,
          recordRoute := *,
          replyTo := *,
          require := *,
          route := *,
          subject := *,
          supported := *,
          timestamp := *,
          userAgent := *,
          undefinedHeader_List := *,
          // the following header fields may never appear in a INVITE request [20]
          authenticationInfo := *,
          errorInfo := *,
          minExpires := *,
          proxyAuthenticate := *,
          retryAfter := *,
          server := *,
          unsupported := *,
          warning := *,
          wwwAuthenticate := * },
        messageBody := *,
        payload := *
      }
      
      template NameAddr nameAddr_ofCallee_r
      := {
        displayName := *,
        addrSpec := { scheme := SIP_SCHEME, // contains "sip"
          userInfo := *,
          hostPort := {
            host := PX_ETS_LOCAL_DOMAIN,
            portField := * //optional integer
          }, urlParameters := *, headers := * }
      }
      template Addr_Union addr_Union_nameAddr_ofCallee_r
      := {
        nameAddr := nameAddr_ofCallee_r
      }
      
      template Addr_Union addr_Union_SipUrl_ofCallee_r
      := {
        addrSpecUnion := SipUrl_ofCallee_r
      }
      
      template INVITE_Request INVITE_Request_r_2
      modifies INVITE_Request_r_1
      := {
        msgHeader := {
          toField := {
            fieldName := TO_E,
            addressField := addr_Union_nameAddr_ofCallee_r,
            toParams := * }
        }
      }
      
      template INVITE_Request INVITE_Request_r_3 
      modifies INVITE_Request_r_1 
      := {
        msgHeader := { contentLength := ?, contentType := {
            //fieldName := CONTENT_TYPE_E, mediaType := Inc_SDP ifpresent }
            fieldName := CONTENT_TYPE_E, mediaType := ? }
        },
        messageBody := ?
      }
      
      template INVITE_Request INVITE_Request_r_5 //CK used in CC_OE_CE_V_001
      modifies INVITE_Request_r_1
      := {
        msgHeader := { cSeq := ? } // end msgHeader
      }
      
      template INVITE_Request INVITE_Request_r_6 ( //CK used in CC_OE_CE_V_006
        integer loc_fwdValue) modifies INVITE_Request_r_1
      := {
        msgHeader := {
          maxForwards := {
            fieldName := MAX_FORWARDS_E,
            forwards := loc_fwdValue }
        } // end msgHeader
      }
      
      template INVITE_Request INVITE_Request_r_7 //CK used in CC_OE_CE_V_007
      modifies INVITE_Request_r_1
      := {
        msgHeader := {
          via := {
            fieldName := VIA_E, viaBody := { //ViaBody_List
              {
                sentProtocol := {
                  protocolName := SIP_NAME,
                  protocolVersion := SIP_VERSION,
                  transport := ? },
                sentBy := ?,
                //Parameter branch shall be present
                viaParams := ? }, * } //end viaBody
          } // end via
        } // end msgHeader
      }
      
      template INVITE_Request INVITE_Request_r_7_1 
      modifies INVITE_Request_r_1 
      := {
        msgHeader := {
          via := {
            fieldName := VIA_E, viaBody := { //ViaBody_List
              {
                sentProtocol := {
                  protocolName := SIP_NAME,
                  protocolVersion := SIP_VERSION,
                  transport := ? },
                sentBy := ?,
                //Parameter branch shall be present
                viaParams := ? }, ?, ? } //end viaBody
          } // end via
        } // end msgHeader
      }
      
      template INVITE_Request INVITE_Request_r_7_2 (
        template ViaBody_List loc_ViaBody_List ) modifies INVITE_Request_r_1 //CK used in CC_PR_MP_RQ_V_018
      := {
        msgHeader := {
          via := {
            fieldName := VIA_E, viaBody := { //ViaBody_List
              {
                sentProtocol := {
                  protocolName := SIP_NAME,
                  protocolVersion := SIP_VERSION,
                  transport := ? },
                sentBy := ?,
                //Parameter branch shall be present
                viaParams := ? }
            }
            //ATS problem!              & loc_ViaBody_List //end viaBody
          } // end via
        } // end msgHeader
      }
      
      template INVITE_Request INVITE_Request_r_8 //CK used in CC_OE_CE_V_008
      modifies INVITE_Request_r_1
      := {
        msgHeader := {
          allow := ?, supported := ? } // end msgHeader
      }
      template INVITE_Request INVITE_Request_r_9 //CK used in CC_OE_CE_V_030 PTC side
      modifies INVITE_Request_r_1
      := {
        requestLine := {
          method := INVITE_E,
          requestUri := SipUrl_ofPTC_r_2,
          sipVersion := SIP_NAME_VERSION }
      }
      
      template INVITE_Request INVITE_Request_r_10(
        CallId loc_CallId,
        CSeq loc_CSeq) modifies INVITE_Request_r_1
      := {
        msgHeader := { callId := loc_CallId, cSeq := loc_CSeq }
      }
      
      template INVITE_Request INVITE_Request_r_11
      modifies INVITE_Request_r_1 
      := {
        requestLine := {
          method := INVITE_E,
          requestUri := SipUrl_ofPTC_r_2,
          sipVersion := SIP_NAME_VERSION }
      }
      
      template INVITE_Request INVITE_Request_r_12(
        template Route loc_Route) modifies INVITE_Request_r_1 
      := {
        msgHeader := { route := loc_Route }
      }
      
      template INVITE_Request INVITE_Request_r_13(
        template Route loc_Route) modifies INVITE_Request_r_1
      := {
        requestLine := {
          method := INVITE_E,
          requestUri := SipUrl_ofPTC_r_1,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := { route := loc_Route }
      }
      template INVITE_Request INVITE_Request_r_14 
      modifies INVITE_Request_r_1
      := {
        msgHeader := { undefinedHeader_List := ? }
      }
      
      template INVITE_Request INVITE_Request_r_15_1 
      modifies INVITE_Request_r_1 
      := {
        requestLine := {
          method := INVITE_E,
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := omit,
            hostPort := ?,
            urlParameters := *,
            headers := * },
          sipVersion := SIP_NAME_VERSION },
        msgHeader := { authorization := ? }
      }
      
      template INVITE_Request INVITE_Request_r_15_1a 
      modifies INVITE_Request_r_1 
      := {
        requestLine := {
          method := INVITE_E,
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := omit,
            hostPort := ?,
            urlParameters := *,
            headers := * },
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          authorization := {
            fieldName := AUTHORIZATION_E, body := ? }
        }
      }
      
      template INVITE_Request INVITE_Request_r_15_2 
      modifies INVITE_Request_r_1
      := {
        requestLine := {
          method := INVITE_E,
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := omit,
            hostPort := ?,
            urlParameters := *,
            headers := * },
          sipVersion := SIP_NAME_VERSION },
        msgHeader := { proxyAuthorization := ? }
      }
      
      template INVITE_Request INVITE_Request_r_15_2a 
      modifies INVITE_Request_r_1
      := {
        requestLine := {
          method := INVITE_E,
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := omit,
            hostPort := ?,
            urlParameters := *,
            headers := * },
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          proxyAuthorization := {
            fieldName := PROXY_AUTHORIZATION_E,
            credentials := ? }
        }
      }
      
      template INVITE_Request INVITE_Request_s_1(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        Contact loc_Contact)
      := {
        requestLine := {
          method := INVITE_E,
          requestUri := loc_RequestUri,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          callId := loc_CallId,
          contact := loc_Contact,
          cSeq := loc_CSeq,
          fromField := loc_From,
          toField := loc_To,
          via := loc_Via,
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := 70 },
          accept := omit,
          acceptEncoding := omit,
          acceptLanguage := omit,
          alertInfo := omit,
          allow := omit,
          authorization := omit,
          callInfo := omit,
          contentDisposition := omit,
          contentEncoding := omit,
          contentLanguage := omit,
          contentLength := {
            fieldName := CONTENT_LENGTH_E, len := 0 },
          contentType := omit,
          date := omit,
          expires := omit,
          inReplyTo := omit,
          mimeVersion := omit,
          organization := omit,
          priority := omit,
          proxyAuthorization := omit,
          proxyRequire := omit,
          recordRoute := omit,
          replyTo := omit,
          require := omit,
          route := omit,
          subject := omit,
          supported := omit,
          timestamp := omit,
          userAgent := omit,
          undefinedHeader_List := omit,
          // the following header fields may never appear in a INVITE request [20]
          authenticationInfo := omit,
          errorInfo := omit,
          minExpires := omit,
          proxyAuthenticate := omit,
          retryAfter := omit,
          server := omit,
          unsupported := omit,
          warning := omit,
          wwwAuthenticate := omit },
        messageBody := omit,
        payload := omit
      }
      
      template INVITE_Request INVITE_Request_s_2(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via)
      := {
        requestLine := {
          method := INVITE_E,
          requestUri := loc_RequestUri,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          callId := loc_CallId,
          contact := Contact_ETS_s,
          cSeq := loc_CSeq,
          fromField := loc_From,
          toField := loc_To,
          via := loc_Via,
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := 70 },
          contentDisposition := {
            fieldName := CONTENT_DISPOSITION_E,
            dispositionType := "session",
            dispositionParams := omit },
          contentLength := {
            fieldName := CONTENT_LENGTH_E,
            len := lengthof (PX_SDPBODY & CRLF)},
          contentType := {
            fieldName := CONTENT_TYPE_E,
            mediaType := SDP_APPLICATION },
          contentEncoding := omit,
          /* <- Is this what you meant ??? */
          contentLanguage := omit,
          accept := omit,
          acceptEncoding := omit,
          acceptLanguage := omit,
          alertInfo := omit,
          allow := omit,
          authorization := omit,
          callInfo := omit,
          date := omit,
          expires := omit,
          inReplyTo := omit,
          mimeVersion := omit,
          organization := omit,
          priority := omit,
          proxyAuthorization := omit,
          proxyRequire := omit,
          recordRoute := omit,
          replyTo := omit,
          require := omit,
          route := omit,
          subject := omit,
          supported := omit,
          timestamp := omit,
          userAgent := omit,
          undefinedHeader_List := omit,
          // the following header fields may never appear in a INVITE request [20]
          authenticationInfo := omit,
          errorInfo := omit,
          minExpires := omit,
          proxyAuthenticate := omit,
          retryAfter := omit,
          server := omit,
          unsupported := omit,
          warning := omit,
          wwwAuthenticate := omit },
        messageBody := PX_SDPBODY & CRLF,
        payload := omit
      }
      
      template INVITE_Request INVITE_Request_s_2b(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        Contact loc_Contact,
        charstring loc_sdp) modifies INVITE_Request_s_1
      := {
        msgHeader := {
          contentDisposition := {
            fieldName := CONTENT_DISPOSITION_E,
            dispositionType := "session",
            dispositionParams := omit },
          contentLength := {
            fieldName := CONTENT_LENGTH_E,
            len := lengthof (loc_sdp)},
          contentType := {
            fieldName := CONTENT_TYPE_E,
            mediaType := SDP_APPLICATION }
        },
        messageBody := loc_sdp
      }
      
      template INVITE_Request INVITE_Request_ContentDisposition_s_2(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        charstring loc_sdp,
        ContentDisposition loc_ContentDispostion) modifies INVITE_Request_s_2
      := {
        msgHeader := {
          contentDisposition := loc_ContentDispostion,
          contentLength := {
            fieldName := CONTENT_LENGTH_E,
            len := lengthof (loc_sdp)},
          contentType := {
            fieldName := CONTENT_TYPE_E,
            mediaType := SDP_APPLICATION }
        },
        messageBody := loc_sdp
      }
      
      template INVITE_Request INVITE_Request_ContentLanguage_s_2(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        ContentDisposition loc_ContentDispostion) modifies INVITE_Request_s_2
      := {
        msgHeader := {
          contentDisposition := loc_ContentDispostion,
          contentLanguage := {
            fieldName := CONTENT_LANGUAGE_E,
            languageTag := { PX_LANGUAGE_UNSUPPORTED }
          },
          contentLength := {
            fieldName := CONTENT_LENGTH_E,
            len := lengthof (PX_SDPBODY & CRLF)},
          contentType := {
            fieldName := CONTENT_TYPE_E,
            mediaType := SDP_APPLICATION }
        },
        messageBody := PX_SDPBODY & CRLF
      }
      
      template INVITE_Request INVITE_Request_ContentEncoding_s_2(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        ContentDisposition loc_ContentDispostion) modifies INVITE_Request_s_2
      := {
        msgHeader := {
          contentDisposition := loc_ContentDispostion,
          contentEncoding := {
            fieldName := CONTENT_ENCODING_E,
            contentCoding := { PX_CONTENCOD_UNSUPPORTED }
          },
          contentLength := {
            fieldName := CONTENT_LENGTH_E,
            len := lengthof (PX_SDPBODY & CRLF)},
          contentType := {
            fieldName := CONTENT_TYPE_E,
            mediaType := SDP_APPLICATION }
        },
        messageBody := PX_SDPBODY & CRLF
      }
      
      template INVITE_Request INVITE_Request_s_3(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        RecordRoute loc_RecordRoute) modifies INVITE_Request_s_2
      := {
        msgHeader := { recordRoute := loc_RecordRoute }
      }
      
      template INVITE_Request INVITE_Request_s_4(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        charstring loc_deltaValue) modifies INVITE_Request_s_2
      := {
        msgHeader := {
          expires := {
            fieldName := EXPIRES_E, deltaSec := loc_deltaValue }
        }
      }
      
      template INVITE_Request INVITE_Request_s_5(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        Contact loc_Contact,
        integer loc_lenSdp,
        charstring loc_sdp) modifies INVITE_Request_s_1
      := {
        msgHeader := {
          contentDisposition := {
            fieldName := CONTENT_DISPOSITION_E,
            dispositionType := "session",
            dispositionParams := omit },
          contentLength := {
            fieldName := CONTENT_LENGTH_E, len := loc_lenSdp },
          contentType := {
            fieldName := CONTENT_TYPE_E,
            mediaType := SDP_APPLICATION }
        },
        messageBody := loc_sdp
      }
      
      template INVITE_Request INVITE_Request_s_6(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies INVITE_Request_s_2
      := {
        msgHeader := {
          contentDisposition := {
            fieldName := CONTENT_DISPOSITION_E,
            dispositionType := "session",
            dispositionParams := omit },
          contentLength := {
            fieldName := CONTENT_LENGTH_E,
            len := lengthof (PX_SDPBODY & CRLF)},
          contentType := {
            fieldName := CONTENT_TYPE_E,
            mediaType := SDP_APPLICATION },
          require := {
            fieldName := REQUIRE_E,
            optionsTags := { PX_OPTION_UNSUPPORTED }
          }
        },
        messageBody := PX_SDPBODY & CRLF
      }
      
      template INVITE_Request INVITE_Request_s_7(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        TimeValue loc_TimeValue) modifies INVITE_Request_s_2
      := {
        msgHeader := {
          contentDisposition := {
            fieldName := CONTENT_DISPOSITION_E,
            dispositionType := "session",
            dispositionParams := omit },
          contentLength := {
            fieldName := CONTENT_LENGTH_E,
            len := lengthof (PX_SDPBODY & CRLF)},
          contentType := {
            fieldName := CONTENT_TYPE_E,
            mediaType := SDP_APPLICATION },
          timestamp := {
            fieldName := TIMESTAMP_E,
            timeValue := loc_TimeValue,
            delay := omit }
        },
        messageBody := PX_SDPBODY & CRLF
      }
      
      template INVITE_Request INVITE_Request_s_8(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        Contact loc_Contact) modifies INVITE_Request_s_1
      := {
        msgHeader := {
          contentDisposition := {
            fieldName := CONTENT_DISPOSITION_E,
            dispositionType := "session",
            dispositionParams := omit },
          contentLength := {
            fieldName := CONTENT_LENGTH_E,
            len := lengthof (PX_SDPBODY & CRLF)},
          contentType := {
            fieldName := CONTENT_TYPE_E,
            mediaType := SDP_APPLICATION },
          recordRoute := {
            fieldName := RECORD_ROUTE_E,
            routeBody := {
              {
                nameAddr := {
                  displayName := omit,
                  addrSpec := SipUrl_ofRouteEts },
                rrParam := omit }
            }
          }
        },
        messageBody := PX_SDPBODY & CRLF
      }
      
      template INVITE_Request INVITE_Request_s_9(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies INVITE_Request_s_2
      := {
        msgHeader := {
          expires := {
            fieldName := EXPIRES_E,
            deltaSec :=
            int2str (float2int (SHORT_REGISTRATION))}
        }
      }
      
      template INVITE_Request INVITE_Request_s_10(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies INVITE_Request_s_2
      := {
        msgHeader := {
          proxyRequire := { fieldName := PROXY_REQUIRE_E,
            //OptionTag_List
            optionsTags := { PX_OPTION_UNSUPPORTED }
          }
        }
      }
      
      template INVITE_Request INVITE_Request_s_11(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        integer loc_mf) modifies INVITE_Request_s_2
      := {
        msgHeader := {
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := loc_mf }
        }
      }
      
      template INVITE_Request INVITE_Request_s_12(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        Contact loc_contact) modifies INVITE_Request_s_2
      := {
        msgHeader := { contact := loc_contact }
      }
      
      template INVITE_Request INVITE_Request_s_13(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies INVITE_Request_s_2
      := {
        requestLine := {
          method := INVITE_E,
          requestUri := loc_To.addressField.nameAddr.addrSpec,
          sipVersion := "SIP/9.9" }
      }
      
      template INVITE_Request INVITE_Request_s_14(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        Route loc_Route) modifies INVITE_Request_s_2
      := {
        msgHeader := { route := loc_Route }
      }
      
      template INVITE_Request INVITE_Request_s_15(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies INVITE_Request_s_2
      := {
        msgHeader := { maxForwards := omit }
      }
      template INVITE_Request INVITE_Request_s_16(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        Contact loc_Contact) modifies INVITE_Request_s_2
      := {
        requestLine := { sipVersion := "sip/2.0" },
        msgHeader := { contact := loc_Contact }
      }
      
      template INVITE_Request INVITE_Request_Inv_s_1(
        SipUrl loc_RequestUri,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        Contact loc_Contact)
      := {
        requestLine := {
          method := INVITE_E,
          requestUri := loc_RequestUri,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := { callId := omit, //Invalid
          contact := loc_Contact,
          cSeq := loc_CSeq,
          fromField := loc_From,
          toField := loc_To,
          via := loc_Via,
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := 70 },
          accept := omit,
          acceptEncoding := omit,
          acceptLanguage := omit,
          alertInfo := omit,
          allow := omit,
          authorization := omit,
          callInfo := omit,
          contentDisposition := omit,
          contentEncoding := omit,
          contentLanguage := omit,
          contentLength := omit,
          contentType := omit,
          date := omit,
          expires := omit,
          inReplyTo := omit,
          mimeVersion := omit,
          organization := omit,
          priority := omit,
          proxyAuthorization := omit,
          proxyRequire := omit,
          recordRoute := omit,
          replyTo := omit,
          require := omit,
          route := omit,
          subject := omit,
          supported := omit,
          timestamp := omit,
          userAgent := omit,
          undefinedHeader_List := omit,
          // the following header fields may never appear in a INVITE request [20]
          authenticationInfo := omit,
          errorInfo := omit,
          minExpires := omit,
          proxyAuthenticate := omit,
          retryAfter := omit,
          server := omit,
          unsupported := omit,
          warning := omit,
          wwwAuthenticate := omit },
        messageBody := omit,
        payload := omit
      }
      
      template INVITE_Request INVITE_Request_Inv_s_2(
        SipUrl loc_RequestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        Contact loc_Contact) modifies INVITE_Request_s_2
      := {
        msgHeader := {
          contact := loc_Contact,
          retryAfter := {
            fieldName := RETRY_AFTER_E,
            deltaSec := "62",
            comment := omit,
            retryParams := omit }
        }
      }
      
      template BYE_Request BYE_Request_r_1(
        template CallId loc_CallId)
      := {
        requestLine := {
          method := BYE_E,
          requestUri := ?,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          accept := *,
          acceptEncoding := *,
          acceptLanguage := *,
          allow := *,
          authorization := *,
          callId := loc_CallId,
          contentDisposition := *,
          contentEncoding := *,
          contentLanguage := *,
          contentLength := ?,
          contentType := *,
          cSeq := ?,
          date := *,
          fromField := ?,
          maxForwards := ?,
          mimeVersion := *,
          proxyAuthorization := *,
          proxyRequire := *,
          recordRoute := *,
          require := *,
          route := *,
          supported := *,
          timestamp := *,
          toField := ?,
          userAgent := *,
          via := ?,
          undefinedHeader_List := *,
          // the following header fields may never appear in a BYE request [20]
          alertInfo := *,
          authenticationInfo := *,
          callInfo := *,
          contact := *,
          expires := *,
          errorInfo := *,
          inReplyTo := *,
          minExpires := *,
          organization := *,
          priority := *,
          proxyAuthenticate := *,
          replyTo := *,
          retryAfter := *,
          server := *,
          subject := *,
          unsupported := *,
          warning := *,
          wwwAuthenticate := * },
        messageBody := *,
        payload := *
      }
      
      template BYE_Request BYE_Request_r_2(
        template CallId loc_CallId,
        template CSeq loc_CSeq,
        template From loc_From,
        template To loc_To) modifies BYE_Request_r_1
      := {
        msgHeader := {
          fromField := loc_From,
          toField := loc_To,
          callId := loc_CallId,
          cSeq := loc_CSeq }
      }
      
      template BYE_Request BYE_Request_r_3(
        template CallId loc_CallId,
        template To loc_To) modifies BYE_Request_r_1
      := {
        msgHeader := { toField := loc_To }
      }
      
      template BYE_Request BYE_Request_r_4(
        template CallId loc_CallId) modifies BYE_Request_r_1
      := {
        requestLine := { requestUri := SipUrl_IP_ofETS },
        
        msgHeader := { route := omit }
      }
      
      template BYE_Request BYE_Request_r_5(
        template CallId loc_CallId) modifies BYE_Request_r_1
      := {
        requestLine := { requestUri := SipUrl_IP_ofETS },
        msgHeader := {
          route := {
            fieldName := ROUTE_E,
            routeBody := {
              {
                nameAddr := {
                  displayName := omit,
                  addrSpec := SipUrl_ofRouteEts_lr },
                rrParam := * },
              {
                nameAddr := {
                  displayName := omit,
                  addrSpec := SipUrl_ofProxy },
                rrParam := * }
            }
          }
        }
      }
      
      template BYE_Request BYE_Request_r_6(
        template CallId loc_CallId) modifies BYE_Request_r_1
      := {
        requestLine := { requestUri := SipUrl_ofRouteEts },
        msgHeader := {
          route := {
            fieldName := ROUTE_E,
            routeBody := {
              {
                nameAddr := {
                  displayName := omit,
                  addrSpec := SipUrl_ofProxy },
                rrParam := omit },
              {
                nameAddr := {
                  displayName := omit,
                  addrSpec := SipUrl_IP_ofETS },
                rrParam := omit }
            }
          }
        }
      }
      
      template BYE_Request BYE_Request_r_7(
        template CallId loc_CallId,
        template From loc_From) modifies BYE_Request_r_1
      := {
        msgHeader := { fromField := loc_From }
      }
      
      template BYE_Request BYE_Request_r_8(
        template CallId loc_CallId) modifies BYE_Request_r_1
      := {
        requestLine := {
          method := BYE_E,
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := *,
            hostPort := ?,
            urlParameters := omit,
            headers := omit },
          sipVersion := SIP_NAME_VERSION }
      }
      
      template BYE_Request BYE_Request_r_9(
        template CallId loc_CallId,
        template Route loc_Route) modifies BYE_Request_r_1
      := {
        msgHeader := { route := loc_Route }
      }
      
      template BYE_Request BYE_Request_r_10(
        template CallId loc_CallId,
        template integer loc_mf) modifies BYE_Request_r_1
      := {
        msgHeader := {
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := loc_mf }
        }
      }
      
      template BYE_Request BYE_Request_r_11(
        template CallId loc_CallId) modifies BYE_Request_r_1
      := {
        msgHeader := {
          via := {
            fieldName := VIA_E, viaBody := { //ViaBody_List
              {
                sentProtocol := {
                  protocolName := SIP_NAME,
                  protocolVersion := SIP_VERSION,
                  transport := ? },
                sentBy := ?,
                //Parameter branch shall be present
                viaParams := ? }
            } //end viaBody
          } // end via
        } // end msgHeader
      }
      
      template BYE_Request BYE_Request_s_1(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        HostPort loc_reqHostPort,
        Route loc_route,
        charstring loc_branchValue)
      := {
        requestLine := { method := BYE_E,
          //SIP URL
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := loc_requestUri.userInfo,
            hostPort := loc_reqHostPort,
            urlParameters := omit,
            headers := omit },
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          via := {
            fieldName := VIA_E,
            viaBody := { ViaBody_ETS_IPADDR(loc_branchValue)}
          },
          fromField := loc_From,
          toField := loc_To,
          callId := loc_CallId,
          cSeq := loc_CSeq,
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := 70 },
          route := loc_route,
          contentLength := {
            fieldName := CONTENT_LENGTH_E, len := 0 },
          accept := omit,
          acceptEncoding := omit,
          acceptLanguage := omit,
          allow := omit,
          authorization := omit,
          contentDisposition := omit,
          contentEncoding := omit,
          contentLanguage := omit,
          contentType := omit,
          date := omit,
          mimeVersion := omit,
          proxyAuthorization := omit,
          proxyRequire := omit,
          recordRoute := omit,
          require := omit,
          supported := omit,
          timestamp := omit,
          userAgent := omit,
          undefinedHeader_List := omit,
          // the following header fields may never appear in a BYE request [20]
          alertInfo := omit,
          authenticationInfo := omit,
          callInfo := omit,
          contact := omit,
          errorInfo := omit,
          expires := omit,
          inReplyTo := omit,
          minExpires := omit,
          organization := omit,
          priority := omit,
          proxyAuthenticate := omit,
          replyTo := omit,
          retryAfter := omit,
          server := omit,
          subject := omit,
          unsupported := omit,
          warning := omit,
          wwwAuthenticate := omit },
        messageBody := omit,
        payload := omit
      }
      
      template BYE_Request BYE_Request_noroute_s_1(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        HostPort loc_reqHostPort,
        charstring loc_branchValue)
      := {
        requestLine := { method := BYE_E,
          //SIP URL
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := loc_requestUri.userInfo,
            hostPort := loc_reqHostPort,
            urlParameters := omit,
            headers := omit },
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          via := {
            fieldName := VIA_E,
            viaBody := { ViaBody_ETS_IPADDR(loc_branchValue)}
          },
          fromField := loc_From,
          toField := loc_To,
          callId := loc_CallId,
          cSeq := loc_CSeq,
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := 70 },
          route := omit,
          contentLength := {
            fieldName := CONTENT_LENGTH_E, len := 0 },
          accept := omit,
          acceptEncoding := omit,
          acceptLanguage := omit,
          allow := omit,
          authorization := omit,
          contentDisposition := omit,
          contentEncoding := omit,
          contentLanguage := omit,
          contentType := omit,
          date := omit,
          mimeVersion := omit,
          proxyAuthorization := omit,
          proxyRequire := omit,
          recordRoute := omit,
          require := omit,
          supported := omit,
          timestamp := omit,
          userAgent := omit,
          undefinedHeader_List := omit,
          // the following header fields may never appear in a BYE request [20]
          alertInfo := omit,
          authenticationInfo := omit,
          callInfo := omit,
          contact := omit,
          errorInfo := omit,
          expires := omit,
          inReplyTo := omit,
          minExpires := omit,
          organization := omit,
          priority := omit,
          proxyAuthenticate := omit,
          replyTo := omit,
          retryAfter := omit,
          server := omit,
          subject := omit,
          unsupported := omit,
          warning := omit,
          wwwAuthenticate := omit },
        messageBody := omit,
        payload := omit
      }
      
      template BYE_Request BYE_Request_s_2(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        HostPort loc_reqHostPort,
        charstring loc_branchValue) modifies BYE_Request_noroute_s_1
      := {
        msgHeader := {
          undefinedHeader_List := {
            {
              headerName := "unknownHeader:",
              headerValue := "unknownValue" }
          }
        }
      }
      
      template BYE_Request BYE_Request_s_3(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        HostPort loc_reqHostPort,
        charstring loc_branchValue) modifies BYE_Request_noroute_s_1
      := {
        msgHeader := { require := { fieldName := REQUIRE_E,
            //OptionTag_List
            optionsTags := { PX_OPTION_UNSUPPORTED }
          }
        }
      }
      
      template BYE_Request BYE_Request_s_4(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        HostPort loc_reqHostPort,
        Via loc_Via)
      := {
        requestLine := { method := BYE_E,
          //SIP URL
          requestUri := loc_requestUri,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          via := loc_Via,
          fromField := loc_From,
          toField := loc_To,
          callId := loc_CallId,
          cSeq := loc_CSeq,
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := 70 },
          contentLength := {
            fieldName := CONTENT_LENGTH_E, len := 0 },
          accept := omit,
          acceptEncoding := omit,
          acceptLanguage := omit,
          allow := omit,
          authorization := omit,
          contentDisposition := omit,
          contentEncoding := omit,
          contentLanguage := omit,
          contentType := omit,
          date := omit,
          mimeVersion := omit,
          proxyAuthorization := omit,
          proxyRequire := omit,
          recordRoute := omit,
          require := omit,
          route := omit,
          supported := omit,
          timestamp := omit,
          userAgent := omit,
          undefinedHeader_List := omit,
          // the following header fields may never appear in a BYE request [20]
          alertInfo := omit,
          authenticationInfo := omit,
          callInfo := omit,
          contact := omit,
          errorInfo := omit,
          expires := omit,
          inReplyTo := omit,
          minExpires := omit,
          organization := omit,
          priority := omit,
          proxyAuthenticate := omit,
          replyTo := omit,
          retryAfter := omit,
          server := omit,
          subject := omit,
          unsupported := omit,
          warning := omit,
          wwwAuthenticate := omit },
        messageBody := omit,
        payload := omit
      }
      
      template BYE_Request BYE_Request_s_5(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via)
      := {
        requestLine := { method := BYE_E,
          //SIP URL
          requestUri := loc_requestUri,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          via := loc_Via,
          fromField := loc_From,
          toField := loc_To,
          callId := loc_CallId,
          cSeq := loc_CSeq,
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := 70 },
          contentLength := {
            fieldName := CONTENT_LENGTH_E, len := 0 },
          accept := omit,
          acceptEncoding := omit,
          acceptLanguage := omit,
          allow := omit,
          authorization := omit,
          contentDisposition := omit,
          contentEncoding := omit,
          contentLanguage := omit,
          contentType := omit,
          date := omit,
          mimeVersion := omit,
          proxyAuthorization := omit,
          proxyRequire := omit,
          recordRoute := omit,
          require := omit,
          route := omit,
          supported := omit,
          timestamp := omit,
          userAgent := omit,
          undefinedHeader_List := omit,
          // the following header fields may never appear in a BYE request [20]
          alertInfo := omit,
          authenticationInfo := omit,
          callInfo := omit,
          contact := omit,
          errorInfo := omit,
          expires := omit,
          inReplyTo := omit,
          minExpires := omit,
          organization := omit,
          priority := omit,
          proxyAuthenticate := omit,
          replyTo := omit,
          retryAfter := omit,
          server := omit,
          subject := omit,
          unsupported := omit,
          warning := omit,
          wwwAuthenticate := omit },
        messageBody := omit,
        payload := omit
      }
      
      template BYE_Request BYE_Request_WithRoute_s_5(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        Route loc_route) modifies BYE_Request_s_5
      := {
        msgHeader := { route := loc_route }
      }
      
      template BYE_Request BYE_Request_s_6(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        integer loc_mf) modifies BYE_Request_s_5
      := {
        msgHeader := {
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := loc_mf }
        }
      }
      
      template BYE_Request BYE_Request_WithRoute_s_6(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        integer loc_mf,
        Route loc_route) modifies BYE_Request_s_5
      := {
        msgHeader := {
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := loc_mf },
          route := loc_route }
      }
      
      template BYE_Request BYE_Request_s_7(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies BYE_Request_s_5
      := {
        msgHeader := {
          proxyRequire := { fieldName := PROXY_REQUIRE_E,
            //OptionTag_List
            optionsTags := { PX_OPTION_UNSUPPORTED }
          }
        }
      }
      
      template BYE_Request BYE_Request_WithRoute_s_7(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        Route loc_route) modifies BYE_Request_s_5
      := {
        msgHeader := {
          proxyRequire := { fieldName := PROXY_REQUIRE_E,
            //OptionTag_List
            optionsTags := { PX_OPTION_UNSUPPORTED }
          }, route := loc_route }
      }
      
      template BYE_Request BYE_Request_s_8(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        template Route loc_route) modifies BYE_Request_s_5
      := {
        msgHeader := { route := loc_route }
      }
      
      template BYE_Request BYE_Request_s_9(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        template MaxForwards loc_mf) modifies BYE_Request_s_5
      := {
        msgHeader := { maxForwards := loc_mf }
      }
      
      template BYE_Request BYE_Request_WithRoute_s_9(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        template MaxForwards loc_mf,
        Route loc_route) modifies BYE_Request_s_5
      := {
        msgHeader := { maxForwards := loc_mf, route := loc_route }
      }
      
      template BYE_Request BYE_Request_s_10(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies BYE_Request_s_5
      := {
        msgHeader := {
          inReplyTo := {
            fieldName := IN_REPLY_TO_E,
            callids := { "erronous replyto" }
          }
        }
      }
      
      template BYE_Request BYE_Request_WithRoute_s_10(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        Route loc_route) modifies BYE_Request_s_5
      := {
        msgHeader := {
          inReplyTo := {
            fieldName := IN_REPLY_TO_E,
            callids := { "erronous replyto" }
          }, route := loc_route }
      }
      
      template CANCEL_Request CANCEL_Request_ANY_r_1
      := {
        requestLine := {
          method := CANCEL_E,
          requestUri := ?,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          authorization := *,
          callId := ?,
          contentLength := *,
          cSeq := ?,
          date := *,
          fromField := ?,
          maxForwards := ?,
          recordRoute := *,
          route := *,
          supported := *,
          timestamp := *,
          toField := ?,
          userAgent := *,
          via := ?,
          undefinedHeader_List := *,
          // the following header fields may never appear in a CANCEL request [20]
          accept := *,
          acceptEncoding := *,
          acceptLanguage := *,
          alertInfo := *,
          allow := *,
          authenticationInfo := *,
          callInfo := *,
          contact := *,
          contentDisposition := *,
          contentEncoding := *,
          contentLanguage := *,
          contentType := *,
          errorInfo := *,
          expires := *,
          inReplyTo := *,
          minExpires := *,
          mimeVersion := *,
          organization := *,
          priority := *,
          proxyAuthenticate := *,
          proxyAuthorization := *,
          proxyRequire := *,
          replyTo := *,
          require := *,
          retryAfter := *,
          server := *,
          subject := *,
          unsupported := *,
          warning := *,
          wwwAuthenticate := * },
        messageBody := *,
        payload := *
      }
      
      template CANCEL_Request CANCEL_Request_r_1(
        CallId loc_CallId)
      := {
        requestLine := {
          method := CANCEL_E,
          requestUri := ?,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          authorization := *,
          callId := loc_CallId,
          contentLength := *,
          cSeq := ?,
          date := *,
          fromField := ?,
          maxForwards := *,
          recordRoute := *,
          route := *,
          supported := *,
          timestamp := *,
          toField := ?,
          userAgent := *,
          via := ?,
          undefinedHeader_List := *,
          // the following header fields may never appear in a CANCEL request [20]
          accept := *,
          acceptEncoding := *,
          acceptLanguage := *,
          alertInfo := *,
          allow := *,
          authenticationInfo := *,
          callInfo := *,
          contact := *,
          contentDisposition := *,
          contentEncoding := *,
          contentLanguage := *,
          contentType := *,
          errorInfo := *,
          expires := *,
          inReplyTo := *,
          minExpires := *,
          mimeVersion := *,
          organization := *,
          priority := *,
          proxyAuthenticate := *,
          proxyAuthorization := *,
          proxyRequire := *,
          replyTo := *,
          require := *,
          retryAfter := *,
          server := *,
          subject := *,
          unsupported := *,
          warning := *,
          wwwAuthenticate := * },
        messageBody := *,
        payload := *
      }
      
      template CANCEL_Request CANCEL_Request_r_2(
        CallId loc_CallId,
        From loc_From,
        To loc_To,
        SipUrl loc_RequestUri) modifies CANCEL_Request_r_1
      := {
        requestLine := {
          method := CANCEL_E,
          requestUri := loc_RequestUri,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          callId := loc_CallId,
          fromField := loc_From,
          toField := loc_To }
      }
      
      template CANCEL_Request CANCEL_Request_r_3(
        CallId loc_CallId,
        integer loc_Cseq_value) modifies CANCEL_Request_r_1
      := {
        msgHeader := {
          cSeq := {
            fieldName := CSEQ_E,
            seqNumber := loc_Cseq_value,
            method := "CANCEL" }
        }
      }
      
      template CANCEL_Request CANCEL_Request_r_4(
        CallId loc_CallId,
        Via loc_via) modifies CANCEL_Request_r_1
      := {
        msgHeader := { via := loc_via }
      }
      
      template CANCEL_Request CANCEL_Request_r_5(
        CallId loc_CallId) modifies CANCEL_Request_r_1
      := {
        msgHeader := { proxyRequire := omit, require := omit }
      }
      
      template CANCEL_Request CANCEL_Request_r_6(
        CallId loc_CallId) modifies CANCEL_Request_r_1
      := {
        requestLine := {
          method := CANCEL_E,
          requestUri := SipUrl_ofPTC_r_1,
          sipVersion := SIP_NAME_VERSION }
      }
      
      template CANCEL_Request CANCEL_Request_r_7(
        CallId loc_CallId,
        template Route loc_Route) modifies CANCEL_Request_r_1
      := {
        msgHeader := { route := loc_Route }
      }
      
      template CANCEL_Request CANCEL_Request_r_8(
        CallId loc_CallId,
        integer loc_mf) modifies CANCEL_Request_r_1
      := {
        msgHeader := {
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := loc_mf }
        }
      }
      
      template CANCEL_Request CANCEL_Request_r_9(
        CallId loc_CallId,
        Route loc_Route) modifies CANCEL_Request_r_1
      := {
        requestLine := {
          method := CANCEL_E,
          requestUri := SipUrl_ofRoutePtc,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := { route := loc_Route }
      }
      
      template CANCEL_Request CANCEL_Request_r_10(
        CallId loc_CallId,
        From loc_From,
        To loc_To,
        SipUrl loc_RequestUri,
        integer loc_Cseq_value,
        Via loc_via) modifies CANCEL_Request_r_1
      := {
        requestLine := {
          method := CANCEL_E,
          requestUri := loc_RequestUri,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          callId := loc_CallId,
          cSeq := {
            fieldName := CSEQ_E,
            seqNumber := loc_Cseq_value,
            method := "CANCEL" },
          fromField := loc_From,
          toField := loc_To,
          via := loc_via }
      }
      
      template CANCEL_Request CANCEL_Request_r_11(
        CallId loc_CallId,
        From loc_From,
        To loc_To,
        SipUrl loc_RequestUri,
        integer loc_Cseq_value) modifies CANCEL_Request_r_1
      := {
        requestLine := {
          method := CANCEL_E,
          requestUri := loc_RequestUri,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          callId := loc_CallId,
          cSeq := {
            fieldName := CSEQ_E,
            seqNumber := loc_Cseq_value,
            method := "CANCEL" },
          fromField := loc_From,
          toField := loc_To }
      }
      
      template CANCEL_Request CANCEL_Request_s_1(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        HostPort loc_reqUri,
        Via loc_via)
      := {
        requestLine := {
          method := CANCEL_E,
          //SIP URL
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := loc_requestUri.userInfo,
            hostPort := {
              host := loc_reqUri.host,
              portField := loc_reqUri.portField },
            urlParameters := omit,
            headers := omit },
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          via := loc_via,
          fromField := loc_From,
          toField := loc_To,
          callId := loc_CallId,
          cSeq := loc_CSeq,
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := 70 },
          authorization := omit,
          contentLength := omit,
          date := omit,
          recordRoute := omit,
          //require   := omit,
          route := omit,
          supported := omit,
          timestamp := omit,
          userAgent := omit,
          undefinedHeader_List := omit,
          // the following header fields may never appear in a CANCEL request [20]
          accept := omit,
          acceptEncoding := omit,
          acceptLanguage := omit,
          alertInfo := omit,
          allow := omit,
          authenticationInfo := omit,
          callInfo := omit,
          contact := omit,
          contentDisposition := omit,
          contentEncoding := omit,
          contentLanguage := omit,
          contentType := omit,
          errorInfo := omit,
          expires := omit,
          inReplyTo := omit,
          minExpires := omit,
          mimeVersion := omit,
          organization := omit,
          priority := omit,
          proxyAuthenticate := omit,
          proxyAuthorization := omit,
          proxyRequire := omit,
          replyTo := omit,
          require := omit,
          retryAfter := omit,
          server := omit,
          subject := omit,
          unsupported := omit,
          warning := omit,
          wwwAuthenticate := omit },
        messageBody := omit,
        // CANCEL requests do not have a message body
        payload := omit
      }
      
      template CANCEL_Request CANCEL_Request_s_2(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        HostPort loc_reqUri,
        Via loc_via) modifies CANCEL_Request_s_1
      := {
        msgHeader := { require := { fieldName := REQUIRE_E,
            //OptionTag_List
            optionsTags := { PX_OPTION_UNSUPPORTED }
          }
        }
      }
      
      template CANCEL_Request CANCEL_Request_s_3(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        HostPort loc_reqUri,
        Via loc_via) modifies CANCEL_Request_s_1
      := {
        msgHeader := {
          proxyRequire := { fieldName := PROXY_REQUIRE_E,
            //OptionTag_List
            optionsTags := { PX_OPTION_UNSUPPORTED }
          }
        }
      }
      
      template CANCEL_Request CANCEL_Request_s_4(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_via)
      := {
        requestLine := { method := CANCEL_E,
          //SIP URL
          requestUri := loc_requestUri,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          via := loc_via,
          fromField := loc_From,
          toField := loc_To,
          callId := loc_CallId,
          cSeq := loc_CSeq,
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := 70 },
          authorization := omit,
          contentLength := omit,
          date := omit,
          recordRoute := omit,
          require := omit,
          route := omit,
          supported := omit,
          timestamp := omit,
          userAgent := omit,
          undefinedHeader_List := omit,
          // the following header fields may never appear in a CANCEL request [20]
          accept := omit,
          acceptEncoding := omit,
          acceptLanguage := omit,
          alertInfo := omit,
          allow := omit,
          authenticationInfo := omit,
          callInfo := omit,
          contact := omit,
          contentDisposition := omit,
          contentEncoding := omit,
          contentLanguage := omit,
          contentType := omit,
          errorInfo := omit,
          expires := omit,
          inReplyTo := omit,
          minExpires := omit,
          mimeVersion := omit,
          organization := omit,
          priority := omit,
          proxyAuthenticate := omit,
          proxyAuthorization := omit,
          proxyRequire := omit,
          replyTo := omit,
          retryAfter := omit,
          server := omit,
          subject := omit,
          unsupported := omit,
          warning := omit,
          wwwAuthenticate := omit },
        messageBody := omit,
        // CANCEL requests do not have a message body
        payload := omit
      }
      
      template CANCEL_Request CANCEL_Request_s_5(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_via,
        integer loc_mf) modifies CANCEL_Request_s_4
      := {
        msgHeader := {
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := loc_mf }
        }
      }
      
      template CANCEL_Request CANCEL_Request_s_6(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_via,
        Route loc_Route) modifies CANCEL_Request_s_4
      := {
        msgHeader := { route := loc_Route }
      }
      
      template CANCEL_Request CANCEL_Request_s_7(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_via) modifies CANCEL_Request_s_4
      := {
        msgHeader := { maxForwards := omit }
      }
      
      template ACK_Request ACK_Request_r_1(
        template CallId loc_CallId)
      := {
        requestLine := {
          method := ACK_E,
          requestUri := ?,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          authorization := *,
          callId := loc_CallId,
          contact := *,
          contentDisposition := *,
          contentEncoding := *,
          contentLanguage := *,
          contentLength := ?,
          contentType := *,
          cSeq := {
            fieldName := CSEQ_E, seqNumber := ?, method := ? },
          date := *,
          fromField := ?,
          maxForwards := *,
          mimeVersion := *,
          proxyAuthorization := *,
          proxyRequire := *,
          recordRoute := *,
          route := *,
          timestamp := *,
          toField := ?,
          userAgent := *,
          via := ?,
          undefinedHeader_List := *,
          // the following header fields may never appear in a ACK request [20]
          accept := *,
          acceptEncoding := *,
          acceptLanguage := *,
          alertInfo := *,
          authenticationInfo := *,
          allow := *,
          callInfo := *,
          errorInfo := *,
          expires := *,
          inReplyTo := *,
          minExpires := *,
          organization := *,
          priority := *,
          proxyAuthenticate := *,
          replyTo := *,
          require := *,
          retryAfter := *,
          server := *,
          subject := *,
          supported := *,
          unsupported := *,
          warning := *,
          wwwAuthenticate := * },
        messageBody := *,
        payload := *
      }
      
      template ACK_Request ACK_Request_r_2(
        template CallId loc_CallId,
        To loc_To) modifies ACK_Request_r_1
      := {
        msgHeader := {
          //Tag param shall be present
          toField := loc_To }
      }
      template ACK_Request ACK_Request_r_3(
        template CallId loc_CallId) modifies ACK_Request_r_1
      := {
        msgHeader := { contentLength := ?, contentType := {
            //fieldName := CONTENT_TYPE_E, mediaType := Inc_SDP ifpresent }
            fieldName := CONTENT_TYPE_E, mediaType := ? }
        },
        messageBody := ?
      }
      
      template ACK_Request ACK_Request_r_4(
        template CallId loc_CallId,
        template SipUrl loc_requestUri,
        template Route loc_route) modifies ACK_Request_r_1
      := {
        requestLine := { requestUri := loc_requestUri },
        msgHeader := { route := loc_route }
      }
      
      template ACK_Request ACK_Request_r_5(
        template CallId loc_CallId) modifies ACK_Request_r_1
      := {
        requestLine := { requestUri := SipUrl_ofRouteEts },
        msgHeader := {
          route := {
            fieldName := ROUTE_E,
            routeBody := {
              {
                nameAddr := {
                  displayName := omit,
                  addrSpec := SipUrl_ofProxy },
                rrParam := omit },
              {
                nameAddr := {
                  displayName := omit,
                  addrSpec := SipUrl_IP_ofETS },
                rrParam := omit }
            }
          }
        }
      }
      
      template ACK_Request ACK_Request_r_7(
        template CallId loc_CallId) modifies ACK_Request_r_1
      := {
        msgHeader := {
          route := { fieldName := ROUTE_E, routeBody := ? }
        }
      }
      
      template ACK_Request ACK_Request_r_8(
        template CallId loc_CallId,
        template Via loc_Via) modifies ACK_Request_r_1
      := {
        msgHeader := { via := loc_Via }
      }
      
      template ACK_Request ACK_Request_r_9(
        template CallId loc_CallId) modifies ACK_Request_r_1
      := {
        requestLine := {
          method := ACK_E,
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := *,
            hostPort := ?,
            urlParameters := omit,
            headers := omit },
          sipVersion := SIP_NAME_VERSION }
      }
      
      template ACK_Request ACK_Request_r_10(
        template CallId loc_CallId,
        CSeq loc_CSeq) modifies ACK_Request_r_1
      := {
        msgHeader := {
          cSeq := {
            fieldName := CSEQ_E,
            seqNumber := loc_CSeq.seqNumber,
            method := "ACK" }
        }
      }
      template ACK_Request ACK_Request_r_11(
        template CallId loc_CallId,
        From loc_From) modifies ACK_Request_r_1
      := {
        msgHeader := {
          //Tag param shall be present
          fromField := loc_From }
      }
      template ACK_Request ACK_Request_r_12(
        template CallId loc_CallId) modifies ACK_Request_r_1
      := {
        requestLine := { requestUri := SipUrl_IP_ofETS },
        
        msgHeader := { route := omit }
      }
      template ACK_Request ACK_Request_r_13(
        template CallId loc_CallId,
        From loc_From,
        To loc_To,
        SipUrl loc_RequestUri) modifies ACK_Request_r_1
      := {
        requestLine := { requestUri := loc_RequestUri },
        msgHeader := { toField := loc_To, fromField := loc_From }
      }
      
      template ACK_Request ACK_Request_r_14(
        template CallId loc_CallId,
        integer loc_mf) modifies ACK_Request_r_1
      := {
        msgHeader := {
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := loc_mf }
        }
      }
      
      template ACK_Request ACK_Request_r_15(
        template CallId loc_CallId,
        template SipUrl loc_requestUri,
        template Route loc_route) modifies ACK_Request_r_1
      := {
        requestLine := {
          method := ACK_E,
          requestUri := loc_requestUri,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := { route := loc_route }
      }
      
      template ACK_Request ACK_Request_r_16(
        template CallId loc_CallId,
        From loc_From,
        To loc_To,
        SipUrl loc_RequestUri,
        integer loc_Cseq_value) modifies ACK_Request_r_1
      := {
        requestLine := {
          method := ACK_E,
          requestUri := loc_RequestUri,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          callId := loc_CallId,
          cSeq := {
            fieldName := CSEQ_E,
            seqNumber := loc_Cseq_value,
            method := "ACK" },
          fromField := loc_From,
          toField := loc_To }
      }
      
      template ACK_Request ACK_Request_s_1(
        SipUrl loc_requestUri,
        HostPort loc_reqHostPort,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via)
      := {
        requestLine := {
          method := ACK_E,
          requestUri := {
            scheme := SIP_SCHEME,
            userInfo := loc_requestUri.userInfo,
            hostPort := loc_reqHostPort,
            urlParameters := omit,
            headers := omit },
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          callId := loc_CallId,
          cSeq := {
            fieldName := CSEQ_E,
            seqNumber := loc_CSeq.seqNumber,
            method := "ACK" },
          fromField := loc_From,
          toField := loc_To,
          via := loc_Via,
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := 70 },
          authorization := omit,
          contact := omit,
          contentDisposition := omit,
          contentEncoding := omit,
          contentLanguage := omit,
          contentLength := {
            fieldName := CONTENT_LENGTH_E, len := 0 },
          contentType := omit,
          date := omit,
          mimeVersion := omit,
          proxyAuthorization := omit,
          proxyRequire := omit,
          recordRoute := omit,
          route := omit,
          timestamp := omit,
          userAgent := omit,
          undefinedHeader_List := omit,
          // the following header fields may never appear in a ACK request [20]
          accept := omit,
          acceptEncoding := omit,
          acceptLanguage := omit,
          alertInfo := omit,
          allow := omit,
          authenticationInfo := omit,
          callInfo := omit,
          errorInfo := omit,
          expires := omit,
          inReplyTo := omit,
          minExpires := omit,
          organization := omit,
          priority := omit,
          proxyAuthenticate := omit,
          replyTo := omit,
          require := omit,
          retryAfter := omit,
          server := omit,
          subject := omit,
          supported := omit,
          unsupported := omit,
          warning := omit,
          wwwAuthenticate := omit },
        messageBody := omit,
        payload := omit
      }
      
      template ACK_Request ACK_Request_s_2(
        SipUrl loc_requestUri,
        HostPort loc_reqHostPort,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        Route loc_route) modifies ACK_Request_s_1
      := {
        msgHeader := { route := loc_route }
      }
      
      template ACK_Request ACK_Request_s_3(
        SipUrl loc_requestUri,
        HostPort loc_reqHostPort,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies ACK_Request_s_1
      := {
        msgHeader := {
          proxyRequire := { fieldName := PROXY_REQUIRE_E,
            //OptionTag_List
            optionsTags := { PX_OPTION_UNSUPPORTED }
          }
        }
      }
      
      template ACK_Request ACK_Request_s_4(
        SipUrl loc_requestUri,
        HostPort loc_reqHostPort,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies ACK_Request_s_1
      := {
        msgHeader := { require := { fieldName := REQUIRE_E,
            //OptionTag_List
            optionsTags := { PX_OPTION_UNSUPPORTED }
          }
        }
      }
      
      template ACK_Request ACK_Request_s_5(
        SipUrl loc_requestUri,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via)
      := {
        requestLine := {
          method := ACK_E,
          requestUri := loc_requestUri,
          sipVersion := SIP_NAME_VERSION },
        msgHeader := {
          callId := loc_CallId,
          cSeq := {
            fieldName := CSEQ_E,
            seqNumber := loc_CSeq.seqNumber,
            method := "ACK" },
          fromField := loc_From,
          toField := loc_To,
          via := loc_Via,
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := 70 },
          authorization := omit,
          contact := omit,
          contentDisposition := omit,
          contentEncoding := omit,
          contentLanguage := omit,
          contentLength := {
            fieldName := CONTENT_LENGTH_E, len := 0 },
          contentType := omit,
          date := omit,
          mimeVersion := omit,
          proxyAuthorization := omit,
          proxyRequire := omit,
          recordRoute := omit,
          route := omit,
          timestamp := omit,
          userAgent := omit,
          undefinedHeader_List := omit,
          // the following header fields may never appear in a ACK request [20]
          accept := omit,
          acceptEncoding := omit,
          acceptLanguage := omit,
          alertInfo := omit,
          allow := omit,
          authenticationInfo := omit,
          callInfo := omit,
          errorInfo := omit,
          expires := omit,
          inReplyTo := omit,
          minExpires := omit,
          organization := omit,
          priority := omit,
          proxyAuthenticate := omit,
          replyTo := omit,
          require := omit,
          retryAfter := omit,
          server := omit,
          subject := omit,
          supported := omit,
          unsupported := omit,
          warning := omit,
          wwwAuthenticate := omit },
        messageBody := omit,
        payload := omit
      }
      
      template ACK_Request ACK_Request_s_6(
        SipUrl loc_requestUri,
        HostPort loc_reqHostPort,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        integer loc_mf) modifies ACK_Request_s_1
      := {
        msgHeader := {
          maxForwards := {
            fieldName := MAX_FORWARDS_E, forwards := loc_mf }
        }
      }
      
      template ACK_Request ACK_Request_s_7(
        SipUrl loc_requestUri,
        HostPort loc_reqHostPort,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies ACK_Request_s_1
      := {
        msgHeader := { maxForwards := omit }
      }
      
      template ACK_Request ACK_Request_s_8(
        SipUrl loc_requestUri,
        HostPort loc_reqHostPort,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        ContentType loc_ContentType) modifies ACK_Request_s_1
      := {
        msgHeader := { contentType := loc_ContentType },
        messageBody := PX_SDPBODY & CRLF
      }
      
      template ACK_Request ACK_Request_s_9(
        SipUrl loc_requestUri,
        HostPort loc_reqHostPort,
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        Route loc_route,
        ContentType loc_ContentType) modifies ACK_Request_s_2
      := {
        msgHeader := { contentType := loc_ContentType },
        messageBody := PX_SDPBODY & CRLF
      }
      
      template Raw_REGISTER_Request Raw_REGISTER_Request_s_1(
        charstring loc_ReqUri,
        charstring loc_CallId,
        charstring loc_CSeq,
        charstring loc_Contact,
        charstring loc_From,
        charstring loc_To,
        charstring loc_Via)
      :=
      "REGISTER "
      & loc_ReqUri
      & " SIP/2.0"
      & CRLF
      & loc_CallId
      & CRLF
      & loc_CSeq
      & CRLF
      & loc_From
      & CRLF
      & loc_To
      & CRLF
      & loc_Via
      & CRLF
      & loc_Contact
      & CRLF
      & "Max-Forwards: 70"
      & CRLF
      & "Content-Length: 0"
      & CRLF
      & CRLF;
      
      template Raw_REGISTER_Request Raw_REGISTER_Request_s_1a(
        charstring loc_ReqUri,
        charstring loc_CallId,
        charstring loc_CSeq,
        charstring loc_Contact,
        charstring loc_From,
        charstring loc_To,
        charstring loc_Via,
        charstring loc_Authorization)
      :=
      "REGISTER "
      & loc_ReqUri
      & " SIP/2.0"
      & CRLF
      & loc_CallId
      & CRLF
      & loc_CSeq
      & CRLF
      & loc_From
      & CRLF
      & loc_To
      & CRLF
      & loc_Via
      & CRLF
      & loc_Contact
      & CRLF
      & loc_Authorization
      & CRLF
      & "Max-Forwards: 70"
      & CRLF
      & "Content-Length: 0"
      & CRLF
      & CRLF;
      
      template Raw_REGISTER_Request Raw_REGISTER_Request_s_2(
        charstring loc_ReqUri,
        charstring loc_CallId,
        charstring loc_CSeq,
        charstring loc_Contact,
        charstring loc_From,
        charstring loc_To,
        charstring loc_Via)
      :=
      CRLF
      & CRLF
      & CRLF
      & "REGISTER "
      & loc_ReqUri
      & " SIP/2.0"
      & CRLF
      & loc_CallId
      & CRLF
      & loc_CSeq
      & CRLF
      & loc_From
      & CRLF
      & loc_To
      & CRLF
      & loc_Via
      & CRLF
      & loc_Contact
      & CRLF
      & "Max-Forwards: 70"
      & CRLF
      & "Content-Length: 0"
      & CRLF
      & CRLF;
      
      template Raw_BYE_Request Raw_BYE_Request_s_1(
        charstring loc_ReqUri,
        charstring loc_CallId,
        charstring loc_CSeq,
        charstring loc_From,
        charstring loc_To,
        charstring loc_Via,
        charstring loc_Route)
      :=
      "BYE "
      & loc_ReqUri
      & " SIP/2.0"
      & CRLF
      & loc_CallId
      & CRLF
      & loc_CSeq
      & CRLF
      & loc_From
      & CRLF
      & loc_To
      & CRLF
      & loc_Via
      & CRLF
      & "Max-Forwards: 70"
      & CRLF
      & "Content-Length: 0"
      & CRLF
      & loc_Route
      & CRLF
      & CRLF;
      
      template Raw_INVITE_Request Raw_INVITE_Request_s_1(
        charstring loc_ReqUri,
        charstring loc_CallId,
        charstring loc_CSeq,
        charstring loc_Contact,
        charstring loc_From,
        charstring loc_To,
        charstring loc_Via,
        charstring loc_len,
        charstring loc_sdp)
      :=
      "INVITE "
      & loc_ReqUri
      & " SIP/2.0"
      & CRLF
      & loc_CallId
      & CRLF
      & loc_CSeq
      & CRLF
      & loc_From
      & CRLF
      & loc_To
      & CRLF
      & loc_Via
      & CRLF
      & loc_Contact
      & CRLF
      & "Max-Forwards: 70"
      & CRLF
      & "Content-Type: application/sdp"
      & CRLF
      & "Content-Length: "
      & loc_len
      & CRLF
      & CRLF
      & loc_sdp;
      
      template Raw_INVITE_Request Raw_INVITE_Request_s_1a(
        charstring loc_ReqUri,
        charstring loc_CallId,
        charstring loc_CSeq,
        charstring loc_Contact,
        charstring loc_From,
        charstring loc_To,
        charstring loc_Via,
        charstring loc_len,
        charstring loc_sdp,
        charstring loc_auth)
      :=
      "INVITE "
      & loc_ReqUri
      & " SIP/2.0"
      & CRLF
      & loc_CallId
      & CRLF
      & loc_CSeq
      & CRLF
      & loc_From
      & CRLF
      & loc_To
      & CRLF
      & loc_Via
      & CRLF
      & loc_Contact
      & CRLF
      & loc_auth
      & CRLF
      & "Max-Forwards: 70"
      & CRLF
      & "Content-Type: application/sdp"
      & CRLF
      & "Content-Length: "
      & loc_len
      & CRLF
      & CRLF
      & loc_sdp;
      
      template Raw_INVITE_Request Raw_INVITE_Request_s_2(
        charstring loc_ReqUri,
        charstring loc_CallId,
        charstring loc_CSeq,
        charstring loc_Contact,
        charstring loc_From,
        charstring loc_To,
        charstring loc_Via,
        charstring loc_len,
        charstring loc_sdp)
      :=
      CRLF
      & CRLF
      & CRLF
      & "INVITE "
      & loc_ReqUri
      & " SIP/2.0"
      & CRLF
      & loc_CallId
      & CRLF
      & loc_CSeq
      & CRLF
      & loc_From
      & CRLF
      & loc_To
      & CRLF
      & loc_Via
      & CRLF
      & loc_Contact
      & CRLF
      & "Max-Forwards: 70"
      & CRLF
      & "Content-Length: "
      & loc_len
      & CRLF
      & CRLF
      & loc_sdp;
      
      template Raw_Unknown_Request Raw_Unknown_Request_s_1(
        charstring loc_ReqUri,
        charstring loc_CallId,
        charstring loc_CSeq,
        charstring loc_Contact,
        charstring loc_From,
        charstring loc_To,
        charstring loc_Via)
      :=
      "UNKNOWN "
      & loc_ReqUri
      & " SIP/2.0"
      & CRLF
      & loc_CallId
      & CRLF
      & loc_CSeq
      & CRLF
      & loc_From
      & CRLF
      & loc_To
      & CRLF
      & loc_Via
      & CRLF
      & loc_Contact
      & CRLF
      & "Max-Forwards: 70"
      & CRLF
      & "Content-Length: 0"
      & CRLF
      & CRLF;
    } //end Groupe RequestTemplates
    
    group ResponseTemplates {
      template Response Response_Any_r_1
      := {
        statusLine := {
          sipVersion := ?,
          statusCode := ?,
          reasonPhrase := ?
        },
        msgHeader := {
          callId := ?,
          cSeq := ?,
          fromField := ?,
          toField := ?,
          via := ?,
          // OPTIONAL FIELDs are IGNORED except undefined
          accept := *,
          acceptEncoding := *,
          acceptLanguage := *,
          alertInfo := *,
          allow := *,
          authenticationInfo := *,
          callInfo := *,
          contact := *,
          contentDisposition := *,
          contentEncoding := *,
          contentLanguage := *,
          contentLength := *,
          contentType := *,
          date := *,
          errorInfo := *,
          expires := *,
          minExpires := *,
          mimeVersion := *,
          organization := *,
          proxyAuthenticate := *,
          recordRoute := *,
          replyTo := *,
          require := *,
          retryAfter := *,
          server := *,
          supported := *,
          timestamp := *,
          userAgent := *,
          unsupported := *,
          warning := *,
          wwwAuthenticate := *,
          undefinedHeader_List := *,
          // the following header fields may never appear in responses [20]
          authorization := *,
          inReplyTo := *,
          maxForwards := *,
          priority := *,
          proxyAuthorization := *,
          proxyRequire := *,
          route := *,
          subject := * },
        messageBody := *,
        payload := *
      }
      
      template Response Response_Any_r_2(
        CallId loc_CallId,
        CSeq loc_CSeq) modifies Response_Any_r_1
      := {
        statusLine := {
          sipVersion := ?,
          statusCode := (100 .. 699),
          reasonPhrase := ? },
        msgHeader := { callId := loc_CallId, cSeq := loc_CSeq }
      }
      
      template Response Response_Final_r(
        template CallId loc_CallId,
        template CSeq loc_CSeq)
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := (200 .. 699),
          reasonPhrase := ? },
        msgHeader := {
          callId := loc_CallId,
          cSeq := loc_CSeq,
          fromField := ?,
          toField := ?,
          via := ?,
          // OPTIONAL FIELDs are IGNORED except undefined
          accept := *,
          acceptEncoding := *,
          acceptLanguage := *,
          alertInfo := *,
          allow := *,
          authenticationInfo := *,
          callInfo := *,
          contact := *,
          contentDisposition := *,
          contentEncoding := *,
          contentLanguage := *,
          contentLength := *,
          contentType := *,
          date := *,
          errorInfo := *,
          expires := *,
          minExpires := *,
          mimeVersion := *,
          organization := *,
          proxyAuthenticate := *,
          recordRoute := *,
          replyTo := *,
          require := *,
          retryAfter := *,
          server := *,
          supported := *,
          timestamp := *,
          userAgent := *,
          unsupported := *,
          warning := *,
          wwwAuthenticate := *,
          undefinedHeader_List := *,
          // the following header fields may never appear in responses [20]
          authorization := *,
          inReplyTo := *,
          maxForwards := *,
          priority := *,
          proxyAuthorization := *,
          proxyRequire := *,
          route := *,
          subject := * },
        messageBody := *,
        payload := *
      }
      
      template Response Response_NonOK_Final_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_Final_r
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := (300 .. 699),
          reasonPhrase := ? }
      }
      
      template Response Response_100_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 100,
          reasonPhrase := "Trying" }
      }
      
      template Response Response_180_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 180,
          reasonPhrase := "Ringing" }
      }
      
      template Response Response_183_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 183,
          reasonPhrase := "Session Progress" }
      }
      
      template Response Response_199_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 199,
          reasonPhrase := "Unknown" }
      }
      
      template Response Response_183I_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        Contact loc_Contact) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 183,
          reasonPhrase := "Session Progress" },
        msgHeader := { contact := loc_Contact }
      }
      
      template Response Response_1XX_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq)
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := (100 .. 199),
          reasonPhrase := ? },
        msgHeader := {
          callId := loc_CallId,
          cSeq := loc_CSeq,
          fromField := ?,
          toField := ?,
          via := ?,
          // OPTIONAL FIELDs are IGNORED except undefined
          accept := *,
          acceptEncoding := *,
          acceptLanguage := *,
          alertInfo := *,
          allow := *,
          authenticationInfo := *,
          callInfo := *,
          contact := *,
          contentDisposition := *,
          contentEncoding := *,
          contentLanguage := *,
          contentLength := *,
          contentType := *,
          date := *,
          errorInfo := *,
          expires := *,
          minExpires := *,
          mimeVersion := *,
          organization := *,
          proxyAuthenticate := *,
          recordRoute := *,
          replyTo := *,
          require := *,
          retryAfter := *,
          server := *,
          supported := *,
          timestamp := *,
          userAgent := *,
          unsupported := *,
          warning := *,
          wwwAuthenticate := *,
          undefinedHeader_List := *,
          // the following header fields may never appear in responses [20]
          authorization := *,
          inReplyTo := *,
          maxForwards := *,
          priority := *,
          proxyAuthorization := *,
          proxyRequire := *,
          route := *,
          subject := * },
        messageBody := *,
        payload := *
      }
      
      template Response Response_1XX_r_2(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_1XX_r_1
      := {
        msgHeader := { callId := * }
      }
      
      template Response Response_101_199_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_1XX_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := (101 .. 199),
          reasonPhrase := ? }
      }
      
      template Response Response_101_199_r_2(
        template CallId loc_CallId,
        template CSeq loc_CSeq,
        From loc_From,
        template Via loc_via) modifies Response_1XX_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := (101 .. 199),
          reasonPhrase := ? },
        msgHeader := { fromField := loc_From, via := loc_via }
      }
      
      template Response Response_101_199_r_3(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_1XX_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := (101 .. 199),
          reasonPhrase := ? },
        msgHeader := {
          toField := {
            fieldName := TO_E,
            addressField := {
              nameAddr := { displayName := *,
                addrSpec := SipUrl_ofCallee_s // SipUrl
              }
            },
            toParams := ? //toParams shall contain a tag (checked in behaviour)
          }
        }
      }
      
      template Response Response_101_199_r_4(
        template CallId loc_CallId,
        template CSeq loc_CSeq,
        template To loc_to) modifies Response_1XX_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := (101 .. 199),
          reasonPhrase := ? },
        msgHeader := { toField := loc_to }
      }
      
      template Response Response_101_199_r_5(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_1XX_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := (101 .. 199),
          reasonPhrase := ? },
        msgHeader := {
          contact := {
            fieldName := CONTACT_E,
            contactBody := { contactAddresses := 
              {
                // One contact exactly
                {
                  addressField := ?, contactParams := *
                }
              }
            }
          }
        }
      }
      
      template Response Response_101_199_r_6(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_1XX_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := (101 .. 199),
          reasonPhrase := ? },
        msgHeader := { recordRoute := * }
      }
      
      template Response Response_101_199_r_7(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_1XX_r_1
      := {
        msgHeader := {
          allow := *, supported := * } // end msgHeader
      }
      
      template Response Response_100_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_1XX_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 100,
          reasonPhrase := ? }
      }
      template Response Response_100_r_2(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_1XX_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 100,
          reasonPhrase := ? },
        msgHeader := {
          timestamp := {
            fieldName := TIMESTAMP_E,
            timeValue := ?,
            delay := * }
        }
      }
      
      template Response Response_100_r_3(
        template CallId loc_CallId,
        template CSeq loc_CSeq,
        template Via loc_via) modifies Response_1XX_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 100,
          reasonPhrase := ? },
        msgHeader := { via := loc_via }
      }
      
      template Response Response_100_r_4(
        template CallId loc_CallId,
        template CSeq loc_CSeq,
        From loc_From,
        Via loc_via) modifies Response_1XX_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 100,
          reasonPhrase := ? },
        msgHeader := { fromField := loc_From, via := loc_via }
      }
      
      template Response Response_100_r_5(
        template CallId loc_CallId,
        template CSeq loc_CSeq,
        To loc_To) modifies Response_1XX_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 100,
          reasonPhrase := ? },
        msgHeader := { toField := loc_To }
      }
      
      template Response Response_180_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_1XX_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 180,
          reasonPhrase := ? }
      }
      
      template Response Response_180_r_2(
        template CallId loc_CallId,
        template CSeq loc_CSeq,
        template Via loc_via) modifies Response_1XX_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 180,
          reasonPhrase := ? },
        msgHeader := { via := loc_via }
      }
      
      template Response Response_182_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_1XX_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 182,
          reasonPhrase := ? }
      }
      
      template Response Response_183_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_1XX_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 183,
          reasonPhrase := ? }
      }
      
      template Response Response_200_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq)
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 200,
          reasonPhrase := ? },
        msgHeader := {
          callId := loc_CallId,
          cSeq := loc_CSeq,
          fromField := ?,
          toField := ?,
          via := ?,
          // OPTIONAL FIELDs are IGNORED except undefined
          accept := *,
          acceptEncoding := *,
          acceptLanguage := *,
          alertInfo := *,
          allow := *,
          authenticationInfo := *,
          callInfo := *,
          contact := *,
          contentDisposition := *,
          contentEncoding := *,
          contentLanguage := *,
          contentLength := *,
          contentType := *,
          date := *,
          errorInfo := *,
          expires := *,
          minExpires := *,
          mimeVersion := *,
          organization := *,
          proxyAuthenticate := *,
          recordRoute := *,
          replyTo := *,
          require := *,
          retryAfter := *,
          server := *,
          supported := *,
          timestamp := *,
          unsupported := *,
          userAgent := *,
          warning := *,
          wwwAuthenticate := *,
          undefinedHeader_List := *,
          // the following header fields may never appear in responses [20]
          authorization := *,
          inReplyTo := *,
          maxForwards := *,
          priority := *,
          proxyAuthorization := *,
          proxyRequire := *,
          route := *,
          subject := * },
        messageBody := *,
        payload := *
      }
      
      template Response Response_INVITE_200_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        msgHeader := {
          //contact is mandatory in 2XX response to an INVITE
          contact := {
            fieldName := CONTACT_E,
            contactBody := {
              contactAddresses := { ContactAddress_r_1 }
            }
          }
        }
      }
      
      template Response Response_REGISTER_200_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        msgHeader := { contact := ?,
          //contact is expected in 2XX response to an REGISTER
          recordRoute :=
          omit //record-route is forbidden in 2XX response to an REGISTER
        }
      }
      template Response Response_REGISTER_200_r_2(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        msgHeader := { contact := omit, //contact list is empty
          recordRoute :=
          omit //record-route is forbidden in 2XX response to an REGISTER
        }
      }
      
      template Response Response_200_r_2(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        msgHeader := {
          expires := { fieldName := EXPIRES_E, deltaSec := ? }
        }
      }
      
      template Response Response_200_r_3(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        msgHeader := {
          date := { fieldName := DATE_E, sipDate := ? }
        }
      }
      
      template Response Response_200_r_4(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        msgHeader := { contact := ?,
          //contact is mandatory in 2XX response to an INVITE
          contentLength := ?, contentType := {
            //fieldName := CONTENT_TYPE_E, mediaType := Inc_SDP ifpresent }
            fieldName := CONTENT_TYPE_E, mediaType := ? }
        },
        messageBody := ?
      }
      
      template Response Response_200_r_5(
        template CallId loc_CallId,
        template CSeq loc_CSeq,
        From loc_From,
        template Via loc_via) modifies Response_200_r_1
      := {
        msgHeader := { fromField := loc_From, via := loc_via }
      }
      
      template Response Response_200_r_6(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        msgHeader := {
          contact := {
            fieldName := CONTACT_E,
            contactBody := { contactAddresses := {
                // One contact exactly
                {
                  addressField := ?, contactParams := * }
              }
            }
          }
        }
      }
      
      template Response Response_200_r_7(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        msgHeader := {
          recordRoute := {
            fieldName := RECORD_ROUTE_E,
            routeBody := {
              {
                nameAddr := {
                  displayName := *,
                  addrSpec := SipUrl_ofRouteEts },
                rrParam := * },
              {
                nameAddr := {
                  displayName := *,
                  addrSpec := SipUrl_ofProxy },
                rrParam := * }
            }
          }
        }
      }
      
      template Response Response_200_r_8(
        template CallId loc_CallId,
        template CSeq loc_CSeq,
        TimeValue loc_TimeValue) modifies Response_200_r_1
      := {
        msgHeader := { contact := ?,
          //contact is mandatory in 2XX response to an INVITE
          timestamp := {
            fieldName := TIMESTAMP_E,
            timeValue := loc_TimeValue,
            delay := omit }
        }
      }
      
      template Response Response_200_r_9(
        template CallId loc_CallId,
        template CSeq loc_CSeq,
        SipUrl loc_toUri) modifies Response_200_r_1
      := {
        msgHeader := {
          toField := {
            fieldName := TO_E,
            addressField := {
              nameAddr := { displayName := *,
                addrSpec := loc_toUri
              }
            },
            toParams := ? //toParams shall contain a tag (checked in behaviour)
          }
        }
      }
      
      template Response Response_200_r_10(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        msgHeader := { contact := ?,
          //contact is mandatory in 2XX response to an INVITE
          recordRoute := {
            fieldName := RECORD_ROUTE_E, routeBody := ? }
        }
      }
      
      template Response Response_200_r_11(
        template CallId loc_CallId,
        template CSeq loc_CSeq,
        template To loc_To) modifies Response_200_r_1
      := {
        msgHeader := { toField := loc_To }
      }
      
      template Response Response_200_r_12(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        msgHeader := {
          allow := ?, supported := ? } // end msgHeader
      }
      
      template Response Response_200_r_13(
        template CallId loc_CallId,
        template CSeq loc_CSeq,
        template Via loc_via) modifies Response_200_r_1
      := {
        msgHeader := { via := loc_via }
      }
      
      template Response Response_200_r_14(
        template CallId loc_CallId,
        template CSeq loc_CSeq,
        From loc_From,
        To loc_To) modifies Response_200_r_1
      := {
        msgHeader := { fromField := loc_From, toField := loc_To }
      }
      
      template Response Response_200_r_15(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        msgHeader := {
          accept := ?,
          allow := ?,
          acceptEncoding := ?,
          acceptLanguage := ?,
          supported := ? } // end msgHeader
      }
      
      template Response Response_200_r_16(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        messageBody := ?
      }
      
      template Response Response_2XX_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := (200 .. 299),
          reasonPhrase := ? }
      }
      
      template Response Response_200_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via)
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 200,
          reasonPhrase := "OK" },
        msgHeader := {
          callId := loc_CallId,
          contentLength := {
            fieldName := CONTENT_LENGTH_E, len := 0 },
          cSeq := loc_CSeq,
          fromField := loc_From,
          toField := loc_To,
          via := loc_Via,
          accept := omit,
          acceptEncoding := omit,
          acceptLanguage := omit,
          alertInfo := omit,
          allow := omit,
          authenticationInfo := omit,
          callInfo := omit,
          contact := omit,
          contentDisposition := omit,
          contentEncoding := omit,
          contentLanguage := omit,
          contentType := omit,
          date := omit,
          errorInfo := omit,
          expires := omit,
          minExpires := omit,
          mimeVersion := omit,
          organization := omit,
          proxyAuthenticate := omit,
          recordRoute := omit,
          replyTo := omit,
          require := omit,
          retryAfter := omit,
          server := omit,
          supported := omit,
          timestamp := omit,
          unsupported := omit,
          userAgent := omit,
          warning := omit,
          wwwAuthenticate := omit,
          undefinedHeader_List := omit,
          // the following header fields may never appear in responses [20]
          authorization := omit,
          inReplyTo := omit,
          maxForwards := omit,
          priority := omit,
          proxyAuthorization := omit,
          proxyRequire := omit,
          route := omit,
          subject := omit },
        messageBody := omit,
        payload := omit
      }
      
      template Response Response_200_withRoute_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        RecordRoute loc_Route) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 200,
          reasonPhrase := "OK" },
        msgHeader := { recordRoute := loc_Route }
      }
      
      template Response Response_200_PTC_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        RecordRoute loc_Route) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 200,
          reasonPhrase := "OK" },
        msgHeader := { recordRoute := loc_Route }
      }
      
      // According to RFC2543bis-05 13.3.1.4, it must contain a SDP offer and a contact
      template Response Response_200_Invite_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via)
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 200,
          reasonPhrase := "OK" },
        msgHeader := {
          callId := loc_CallId,
          cSeq := loc_CSeq,
          fromField := loc_From,
          toField := loc_To,
          via := loc_Via,
          contact := Contact_ETS_s,
          accept := omit,
          acceptEncoding := omit,
          acceptLanguage := omit,
          alertInfo := omit,
          allow := omit,
          authenticationInfo := omit,
          callInfo := omit,
          contentDisposition := omit,
          contentEncoding := omit,
          contentLanguage := omit,
          contentLength := {
            fieldName := CONTENT_LENGTH_E,
            len := lengthof (PX_SDPBODY & CRLF)},
          contentType := {
            fieldName := CONTENT_TYPE_E,
            mediaType := SDP_APPLICATION },
          date := omit,
          errorInfo := omit,
          expires := omit,
          minExpires := omit,
          mimeVersion := omit,
          organization := omit,
          proxyAuthenticate := omit,
          recordRoute := omit,
          replyTo := omit,
          require := omit,
          retryAfter := omit,
          server := omit,
          supported := omit,
          timestamp := omit,
          unsupported := omit,
          userAgent := omit,
          warning := omit,
          wwwAuthenticate := omit,
          undefinedHeader_List := omit,
          // the following header fields may never appear in responses [20]
          authorization := omit,
          inReplyTo := omit,
          maxForwards := omit,
          priority := omit,
          proxyAuthorization := omit,
          proxyRequire := omit,
          route := omit,
          subject := omit },
        messageBody := PX_SDPBODY & CRLF,
        payload := omit
      }
      
      template Response Response_200_PTCInvite_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        RecordRoute loc_Route) // with RecordRoute header
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 200,
          reasonPhrase := "OK" },
        msgHeader := {
          callId := loc_CallId,
          cSeq := loc_CSeq,
          fromField := loc_From,
          toField := loc_To,
          via := loc_Via,
          contact := Contact_PTC_s,
          recordRoute := loc_Route,
          accept := omit,
          acceptEncoding := omit,
          acceptLanguage := omit,
          alertInfo := omit,
          allow := omit,
          authenticationInfo := omit,
          callInfo := omit,
          contentDisposition := omit,
          contentEncoding := omit,
          contentLanguage := omit,
          contentLength := {
            fieldName := CONTENT_LENGTH_E,
            len := lengthof (PX_SDPBODY & CRLF)},
          contentType := {
            fieldName := CONTENT_TYPE_E,
            mediaType := SDP_APPLICATION },
          date := omit,
          errorInfo := omit,
          expires := omit,
          minExpires := omit,
          mimeVersion := omit,
          organization := omit,
          proxyAuthenticate := omit,
          replyTo := omit,
          require := omit,
          retryAfter := omit,
          server := omit,
          supported := omit,
          timestamp := omit,
          unsupported := omit,
          userAgent := omit,
          warning := omit,
          wwwAuthenticate := omit,
          undefinedHeader_List := omit,
          // the following header fields may never appear in responses [20]
          authorization := omit,
          inReplyTo := omit,
          maxForwards := omit,
          priority := omit,
          proxyAuthorization := omit,
          proxyRequire := omit,
          route := omit,
          subject := omit },
        messageBody := PX_SDPBODY & CRLF,
        payload := omit
      }
      
      template Response Response_200_PTCInvite_noroute_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) // with no RecordRoute header
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 200,
          reasonPhrase := "OK" },
        msgHeader := {
          callId := loc_CallId,
          cSeq := loc_CSeq,
          fromField := loc_From,
          toField := loc_To,
          via := loc_Via,
          contact := Contact_PTC_s,
          recordRoute := omit,
          accept := omit,
          acceptEncoding := omit,
          acceptLanguage := omit,
          alertInfo := omit,
          allow := omit,
          authenticationInfo := omit,
          callInfo := omit,
          contentDisposition := omit,
          contentEncoding := omit,
          contentLanguage := omit,
          contentLength := {
            fieldName := CONTENT_LENGTH_E,
            len := lengthof (PX_SDPBODY & CRLF)},
          contentType := {
            fieldName := CONTENT_TYPE_E,
            mediaType := SDP_APPLICATION },
          date := omit,
          errorInfo := omit,
          expires := omit,
          minExpires := omit,
          mimeVersion := omit,
          organization := omit,
          proxyAuthenticate := omit,
          replyTo := omit,
          require := omit,
          retryAfter := omit,
          server := omit,
          supported := omit,
          timestamp := omit,
          unsupported := omit,
          userAgent := omit,
          warning := omit,
          wwwAuthenticate := omit,
          undefinedHeader_List := omit,
          // the following header fields may never appear in responses [20]
          authorization := omit,
          inReplyTo := omit,
          maxForwards := omit,
          priority := omit,
          proxyAuthorization := omit,
          proxyRequire := omit,
          route := omit,
          subject := omit },
        messageBody := PX_SDPBODY & CRLF,
        payload := omit
      }
      
      template Response Response_2XX_PTCInvite_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        RecordRoute loc_Route,
        integer loc_sc,
        charstring loc_rp) modifies Response_200_PTCInvite_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := loc_sc,
          reasonPhrase := loc_rp }
      }
      
      template Response Response_2XX_PTCInvite_noroute_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        integer loc_sc,
        charstring loc_rp) modifies Response_200_PTCInvite_noroute_s_1
      // (loc_CallId, loc_CSeq, loc_From, loc_To,loc_Via)  // original params
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := loc_sc,
          reasonPhrase := loc_rp }
      }
      template Response Response_200_Invite_WithRoute_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        RecordRoute loc_Route) modifies Response_200_Invite_s_1
      := {
        msgHeader := { recordRoute := loc_Route }
      }
      
      template Response Response_200_Invite_WithRoute_s_2(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        RecordRoute loc_Route) modifies Response_200_Invite_s_1
      := {
        msgHeader := {
          recordRoute := loc_Route, contact := Contact_ETS_s_2 }
      }
      
      template Response Response_200_Invite_WithRoute_s_1b(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        Contact loc_Contact,
        RecordRoute loc_Route) modifies Response_200_Invite_s_1
      := {
        msgHeader := {
          recordRoute := loc_Route, contact := loc_Contact }
      }
      
      template Response Response_200_Invite_s_2(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        Contact loc_Contact) modifies Response_200_Invite_s_1
      := {
        msgHeader := { contact := loc_Contact }
      }
      
      template Response Response_200_Invite_s_3(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        charstring loc_sdp,
        template RecordRoute loc_Route) modifies Response_200_Invite_s_1
      := {
        msgHeader := {
          contentLength := {
            fieldName := CONTENT_LENGTH_E,
            len := lengthof (loc_sdp)},
          contentType := {
            fieldName := CONTENT_TYPE_E,
            mediaType := SDP_APPLICATION },
          recordRoute := loc_Route },
        messageBody := loc_sdp
      }
      
      template Response Response_200_Invite_s_3a(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        charstring loc_sdp) modifies Response_200_Invite_s_1
      := {
        msgHeader := {
          contentLength := {
            fieldName := CONTENT_LENGTH_E,
            len := lengthof (loc_sdp)},
          contentType := {
            fieldName := CONTENT_TYPE_E,
            mediaType := SDP_APPLICATION }
        },
        messageBody := loc_sdp
      }
      
      template Response Response_200_Invite_s_4(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        integer loc_sdp,
        template RecordRoute loc_Route) modifies Response_200_Invite_s_1
      := {
        msgHeader := {
          contentLength := {
            fieldName := CONTENT_LENGTH_E, len := loc_sdp },
          contentType := {
            fieldName := CONTENT_TYPE_E,
            mediaType := SDP_APPLICATION },
          recordRoute := loc_Route },
        messageBody := PX_SDPBODY & CRLF
      }
      
      template Response Response_200_Invite_s_4a(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        integer loc_sdp) modifies Response_200_Invite_s_1
      := {
        msgHeader := {
          contentLength := {
            fieldName := CONTENT_LENGTH_E, len := loc_sdp },
          contentType := {
            fieldName := CONTENT_TYPE_E,
            mediaType := SDP_APPLICATION }
        },
        messageBody := PX_SDPBODY & CRLF
      }
      
      template Response Response_2XX_Invite_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        integer loc_sc,
        charstring loc_rp) modifies Response_200_Invite_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := loc_sc,
          reasonPhrase := loc_rp }
      }
      
      template Response Response_2XX_Invite_WithRoute_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        RecordRoute loc_Route,
        integer loc_sc,
        charstring loc_rp) modifies Response_200_Invite_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := loc_sc,
          reasonPhrase := loc_rp },
        msgHeader := { recordRoute := loc_Route }
      }
      
      template Response Response_200_Invite_s_5(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        integer loc_lenSdp,
        charstring loc_sdp,
        template RecordRoute loc_Route) modifies Response_200_Invite_s_1
      := {
        msgHeader := {
          contact := Contact_PTC_s,
          contentLength := {
            fieldName := CONTENT_LENGTH_E,
            len := loc_lenSdp },
          contentType := {
            fieldName := CONTENT_TYPE_E,
            mediaType := SDP_APPLICATION },
          recordRoute := loc_Route },
        messageBody := loc_sdp
      }
      
      template Response Response_200_Invite_s_6(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_Invite_s_1 := {
        msgHeader := { contact := Contact_ETS_s_2 }
      }
      
      template Response Response_Register_200_s_1( //used as a response to REGISTER_Request
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        Contact loc_Contact,
        charstring loc_Date,
        charstring loc_expires) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 200,
          reasonPhrase := "OK" },
        msgHeader := { contact := loc_Contact,
          // expires := {EXPIRES_E, loc_Expires}, // expires fields must be part of contact
          date := { fieldName := DATE_E, sipDate := loc_Date },
          //eg Sat, 13 Nov 2010 23:29:00 GMT
          expires := {
            fieldName := EXPIRES_E, deltaSec := loc_expires }
        }
      }
      
      template Response Response_Register_200_s_2( //used as a response to REGISTER_Request
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        Contact loc_Contact,
        charstring loc_Date) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 200,
          reasonPhrase := "OK" },
        msgHeader := { contact := loc_Contact,
          // expires := {EXPIRES_E, loc_Expires}, // expires fields must be part of contact
          date := {
            fieldName := DATE_E,
            sipDate :=
            loc_Date } //eg Sat, 13 Nov 2010 23:29:00 GMT
        }
      }
      
      template Response Response_200_s_3(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        Contact loc_Contact,
        template RecordRoute loc_Route) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 200,
          reasonPhrase := "OK" },
        msgHeader := { contact := loc_Contact }
      }
      
      template Response Response_200_s_4(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        charstring loc_Expires) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 200,
          reasonPhrase := "OK" },
        msgHeader := {
          expires := {
            fieldName := EXPIRES_E, deltaSec := loc_Expires }
        }
      }
      
      template Response Response_200_s_5( // with RecordRoute header
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_Invite_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 200,
          reasonPhrase := "OK" },
        msgHeader := {
          recordRoute := {
            fieldName := RECORD_ROUTE_E,
            routeBody := {
              {
                nameAddr := {
                  displayName := omit,
                  addrSpec := SipUrl_ofProxy },
                rrParam := omit },
              {
                nameAddr := {
                  displayName := omit,
                  addrSpec := SipUrl_ofRouteEts_lr },
                rrParam := omit }
            }
          }
        }
      }
      
      template Response Response_200_s_6( // with RecordRoute header set to a list
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_Invite_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 200,
          reasonPhrase := "OK" },
        msgHeader := {
          recordRoute := {
            fieldName := RECORD_ROUTE_E,
            routeBody := {
              {
                nameAddr := {
                  displayName := omit,
                  addrSpec := SipUrl_ofRouteEts },
                rrParam := omit },
              {
                nameAddr := {
                  displayName := omit,
                  addrSpec := SipUrl_ofProxy },
                rrParam := omit }
            }
          },
          contact := Contact_ETS_s
        }
      }
      
      template Response Response_200_s_7( // with RecordRoute header
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_Invite_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 200,
          reasonPhrase := "OK" },
        msgHeader := {
          allow := {
            fieldName := ALLOW_E,
            methods := {
              "INVITE", "ACK", "CANCEL", "OPTIONS", "BYE" }
          },
          accept := {
            fieldName := ACCEPT_E,
            acceptArgs := { { SDP_APPLICATION, omit }
            } // end acceptArgs
          }, //end accept
          acceptEncoding := {
            fieldName := ACCEPT_ENCODING_E,
            contentCoding := { "gzip" }
          },
          acceptLanguage := {
            fieldName := ACCEPT_LANGUAGE_E,
            languageBody := { { "en", omit }
            } // end languageBody
          }, // end acceptLanguage
          supported := {
            fieldName := SUPPORTED_E,
            optionsTags := { "data" }
          }
        }
      }
      
      template Response Response_2xx_REGISTER_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        Contact loc_Contact,
        charstring loc_Date,
        integer loc_status,
        charstring loc_phrase) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := loc_status,
          reasonPhrase := loc_phrase },
        msgHeader := {
          callId := loc_CallId,
          contentLength := {
            fieldName := CONTENT_LENGTH_E, len := 0 },
          cSeq := loc_CSeq,
          fromField := loc_From,
          toField := loc_To,
          via := loc_Via,
          contact := loc_Contact,
          date := {
            fieldName := DATE_E,
            sipDate :=
            loc_Date } //eg Sat, 13 Nov 2010 23:29:00 GMT
        }
      }
      
      template Response Response_300_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 300,
          reasonPhrase := "Multiple Choices" },
        msgHeader := { contact := Contact_Multi_s1 }
      }
      
      template Response Response_301_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 301,
          reasonPhrase := "Moved Permanently" },
        msgHeader := { contact := Contact_PTC_s }
      }
      
      template Response Response_302_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 302,
          reasonPhrase := "Moved Temporarily" },
        msgHeader := { contact := Contact_PTC_s }
      }
      
      template Response Response_305_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 305,
          reasonPhrase := "Use Proxy" },
        msgHeader := { contact := Contact_Proxy_s }
      }
      
      template Response Response_302_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 302,
          reasonPhrase := ? }
      }
      
      template Response Response_302_r_2(
        template CallId loc_CallId,
        template CSeq loc_CSeq,
        template Via loc_via) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 302,
          reasonPhrase := ? },
        msgHeader := { via := loc_via }
      }
      
      template Response Response_3XX_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := (300 .. 399),
          reasonPhrase := ? },
        msgHeader := {
          toField := {
            fieldName := TO_E,
            addressField := {
              nameAddr := {
                displayName := *,
                addrSpec := SipUrl_ofRDPTC }
            }, toParams := ? },
          // tag shall be present
          //contact is mandatory in 3XX response to an INVITE
          contact := Contact_RD_PTC_r }
      }
      
      template Response Response_3XX_r_2(
        template CallId loc_CallId,
        template CSeq loc_CSeq,
        Via loc_Via) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := (300 .. 399),
          reasonPhrase := ? },
        msgHeader := { via := loc_Via,
          //contact is mandatory in 3XX response to an INVITE
          contact := ? }
      }
      
      template Response Response_3XX_r_3(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := (300 .. 399),
          reasonPhrase := ? }
      }
      
      template Response Response_3XX_r_4(
        template CallId loc_CallId,
        template CSeq loc_CSeq,
        Contact loc_Contact) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := (300 .. 399),
          reasonPhrase := ? },
        msgHeader := { contact := loc_Contact }
      }
      
      template Response Response_400_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 400,
          reasonPhrase := "Bad Request" }
      }
      
      template Response Response_401_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 401,
          reasonPhrase := "Unauthorized" },
        msgHeader := {
          wwwAuthenticate := {
            fieldName := WWW_AUTHENTICATE_E,
            challenge := {{    //!!!!!
                digestCln := {
                  { id := "realm", paramValue := PX_REALM },
                  {
                    id := "nonce",
                    paramValue :=
                    "42bfba535a393fa147373e690510b2971140e294" }
                }
              }
            }}
        }
      }
      template Response Response_401_s_2(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 401,
          reasonPhrase := "Unauthorized" },
        msgHeader := {
          proxyAuthenticate := {
            fieldName := PROXY_AUTHENTICATE_E,
            challenge := {{  //!!!!
                digestCln := {
                  { id := "realm", paramValue := PX_REALM },
                  {
                    id := "nonce",
                    paramValue :=
                    "42bfba535a393fa147373e690510b2971140e294" }
                }
              }
            }}
        }
      }
      
      template Response Response_404_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 404,
          reasonPhrase := "Not Found" }
      }
      
      template Response Response_407_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 407,
          reasonPhrase := "Proxy Authentication Required" },
        msgHeader := {
          proxyAuthenticate := {
            fieldName := PROXY_AUTHENTICATE_E,
            challenge := {{ //!!!
                digestCln := {
                  { id := "realm", paramValue := PX_REALM },
                  {
                    id := "nonce",
                    paramValue :=
                    "42bfba535a393fa147373e690510b2971140e294" }
                }
              }
            }}
        }
      }
      
      template Response Response_409_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 409,
          reasonPhrase := "Conflict" }
      }
      
      template Response Response_410_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 410,
          reasonPhrase := "Gone" }
      }
      
      template Response Response_480_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 480,
          reasonPhrase := "Temporarily Unavailable" }
      }
      
      template Response Response_481_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 481,
          reasonPhrase := "Call/Transaction Does Not Exist" }
      }
      
      template Response Response_486_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 486,
          reasonPhrase := "User Busy" }
      }
      
      template Response Response_400_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 400,
          reasonPhrase := ? }
      }
      
      //template ignoring Callid
      template Response Response_400_r_2(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 400,
          reasonPhrase := ? },
        msgHeader := { callId := * }
      }
      
      //template ignoring CSeq
      template Response Response_400_r_3(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 400,
          reasonPhrase := ? },
        msgHeader := { cSeq := * }
      }
      
      template Response Response_401_r_0(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 401,
          reasonPhrase := ? }
      }
      
      template Response Response_401_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 401,
          reasonPhrase := ? },
        msgHeader := {
          wwwAuthenticate := {
            fieldName := WWW_AUTHENTICATE_E, challenge := ? }
        }
      }
      template Response Response_401_r_2(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 401,
          reasonPhrase := ? },
        msgHeader := {
          proxyAuthenticate := {
            fieldName := PROXY_AUTHENTICATE_E, challenge := ? },
          wwwAuthenticate := {
            fieldName := WWW_AUTHENTICATE_E, challenge := ? }
        }
      }
      
      template Response Response_403_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 403,
          reasonPhrase := ? }
      }
      
      template Response Response_404_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 404,
          reasonPhrase := ? }
      }
      
      template Response Response_405_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 405,
          reasonPhrase := ? },
        msgHeader := { allow := ? }
      }
      
      template Response Response_407_r_0(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 407,
          reasonPhrase := ? }
      }
      
      template Response Response_407_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 407,
          reasonPhrase := ? },
        msgHeader := {
          proxyAuthenticate := {
            fieldName := PROXY_AUTHENTICATE_E, challenge := ? }
        }
      }
      
      template Response Response_408_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 408,
          reasonPhrase := ? }
      }
      
      template Response Response_409_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 409,
          reasonPhrase := ? }
      }
      
      template Response Response_410_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 410,
          reasonPhrase := ? }
      }
      
      template Response Response_410_r_2(
        template CallId loc_CallId,
        template CSeq loc_CSeq,
        template Via loc_via) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 410,
          reasonPhrase := ? },
        msgHeader := { via := loc_via }
      }
      
      template Response Response_415_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 415,
          reasonPhrase := ? }
      }
      
      template Response Response_415_r_2(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 415,
          reasonPhrase := ? },
        msgHeader := { accept := ? }
      }
      
      template Response Response_415_r_3(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 415,
          reasonPhrase := ? },
        msgHeader := { acceptEncoding := ? }
      }
      
      template Response Response_416_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 416,
          reasonPhrase := ? }
      }
      
      template Response Response_420_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 420,
          reasonPhrase := ? }
      }
      
      template Response Response_420_r_2(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 420,
          reasonPhrase := ? },
        msgHeader := { unsupported := ? }
      }
      
      template Response Response_480_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 480,
          reasonPhrase := ? }
      }
      
      template Response Response_481_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 481,
          reasonPhrase := ? }
      }
      
      template Response Response_481_r_2(
        template CallId loc_CallId,
        template CSeq loc_CSeq,
        template To loc_To) modifies Response_481_r_1
      := {
        msgHeader := { toField := loc_To }
      }
      
      template Response Response_482_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 482,
          reasonPhrase := ? }
      }
      
      template Response Response_483_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 483,
          reasonPhrase := ? }
      }
      
      template Response Response_484_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 484,
          reasonPhrase := ? }
      }
      
      template Response Response_485_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 485,
          reasonPhrase := ? }
      }
      
      template Response Response_486_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 486,
          reasonPhrase := ? }
      }
      
      template Response Response_487_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 487,
          reasonPhrase := ? }
      }
      
      template Response Response_488_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 488,
          reasonPhrase := ? },
        msgHeader := { warning := ? }
      }
      
      template Response Response_491_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 491,
          reasonPhrase := ? }
      }
      
      template Response Response_4XX_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := (400 .. 499),
          reasonPhrase := ? }
      }
      
      template Response Response_500_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 500,
          reasonPhrase := "Server Internal Error" }
      }
      
      template Response Response_500_r_0(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 500,
          reasonPhrase := ? }
      }
      
      template Response Response_500_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 500,
          reasonPhrase := ? },
        msgHeader := {
          retryAfter := {
            fieldName := RETRY_AFTER_E,
            deltaSec := ?,
            comment := *,
            retryParams := * }
        }
      }
      
      template Response Response_500_r_2(
        template CallId loc_CallId,
        template CSeq loc_CSeq,
        template Via loc_via) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 500,
          reasonPhrase := ? },
        msgHeader := { via := loc_via }
      }
      template Response Response_501_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 501,
          reasonPhrase := ? }
      }
      
      template Response Response_503_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 503,
          reasonPhrase := ? }
      }
      
      template Response Response_505_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := ?, statusCode := 505, reasonPhrase := ? }
      }
      
      template Response Response_513_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := ?, statusCode := 513, reasonPhrase := ? }
      }
      
      template Response Response_600_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 600,
          reasonPhrase := "Busy Everywhere" }
      }
      
      template Response Response_603_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 603,
          reasonPhrase := "Decline" }
      }
      
      template Response Response_699_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 699,
          reasonPhrase := "Unknown" }
      }
      
      template Response Response_603_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 603,
          reasonPhrase := ? }
      }
      
      template Response Response_603_r_2(
        template CallId loc_CallId,
        template CSeq loc_CSeq,
        template Via loc_via) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 603,
          reasonPhrase := ? },
        msgHeader := { via := loc_via }
      }
      
      template Response Response_606_r_1(
        template CallId loc_CallId,
        template CSeq loc_CSeq) modifies Response_200_r_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := 606,
          reasonPhrase := ? }
      }
      
      template Response Response_XXX_with_route_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        RecordRoute loc_Route,
        integer loc_sc,
        charstring loc_rp) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := loc_sc,
          reasonPhrase := loc_rp },
        msgHeader := { recordRoute := loc_Route }
      }
      
      template Response Response_XXX_noroute_s_1(
        CallId loc_CallId,
        CSeq loc_CSeq,
        From loc_From,
        To loc_To,
        Via loc_Via,
        integer loc_sc,
        charstring loc_rp) modifies Response_200_s_1
      := {
        statusLine := {
          sipVersion := SIP_NAME_VERSION,
          statusCode := loc_sc,
          reasonPhrase := loc_rp }
      }
      
      template Raw_Response Raw_Response_Register_200_s_1(
        charstring loc_CallId,
        charstring loc_CSeq,
        charstring loc_From,
        charstring loc_To,
        charstring loc_Via,
        charstring loc_Contact,
        charstring loc_Date)
      :=
      "SIP/2.0 200 OK"
      & CRLF
      & loc_CallId
      & CRLF
      & loc_CSeq
      & CRLF
      & loc_From
      & CRLF
      & loc_To
      & CRLF
      & loc_Via
      & CRLF
      & loc_Contact
      & CRLF
      & loc_Date
      & CRLF
      & "Content-Length: 0"
      & CRLF
      & CRLF;
      
      template Raw_Response Raw_Response_Register_200_s_2(
        charstring loc_CallId,
        charstring loc_CSeq,
        charstring loc_From,
        charstring loc_To,
        charstring loc_Via,
        charstring loc_Contact,
        charstring loc_Date)
      :=
      CRLF
      & CRLF
      & CRLF
      & "SIP/2.0 200 OK"
      & CRLF
      & loc_CallId
      & CRLF
      & loc_CSeq
      & CRLF
      & loc_From
      & CRLF
      & loc_To
      & CRLF
      & loc_Via
      & CRLF
      & loc_Contact
      & CRLF
      & loc_Date
      & CRLF
      & "Content-Length: 0"
      & CRLF
      & CRLF
      & CRLF;
      
      template Raw_Response Raw_Response_Invite_200_s_1(
        charstring loc_CallId,
        charstring loc_CSeq,
        charstring loc_From,
        charstring loc_To,
        charstring loc_Via,
        charstring loc_Contact)
      :=
      "SIP/2.0 200 OK"
      & CRLF
      & loc_CallId
      & CRLF
      & loc_CSeq
      & CRLF
      & loc_From
      & CRLF
      & loc_To
      & CRLF
      & loc_Via
      & CRLF
      & loc_Contact
      & CRLF
      & "Content-Type: application/sdp"
      & CRLF
      & "Content-Length: "
      & int2str (lengthof (PX_SDPBODY & CRLF))
      & CRLF
      & CRLF
      & PX_SDPBODY
      & CRLF;
      template Raw_Response Raw_Response_Invite_200_WithRoute_s_1(
        charstring loc_CallId,
        charstring loc_CSeq,
        charstring loc_From,
        charstring loc_To,
        charstring loc_Via,
        charstring loc_Contact,
        charstring loc_RecordRoute)
      :=
      "SIP/2.0 200 OK"
      & CRLF
      & loc_CallId
      & CRLF
      & loc_CSeq
      & CRLF
      & loc_From
      & CRLF
      & loc_To
      & CRLF
      & loc_Via
      & CRLF
      & loc_Contact
      & CRLF
      & loc_RecordRoute
      & CRLF
      & "Content-Type: application/sdp"
      & CRLF
      & "Content-Length: "
      & int2str (lengthof (PX_SDPBODY & CRLF))
      & CRLF
      & CRLF
      & PX_SDPBODY
      & CRLF;
    } //end Group ResponseTemplates
    
    group CMtemplates {
      template charstring CM_Stop := "Stop";
      template charstring CM_Init_OK := "Init OK";
      template charstring CM_Check_Done := "Check Done";
      template charstring CM_Rsp_Rcved := "Message Received";
      template charstring CM_Send_Rsp := "Send Response";
      template charstring CM_Param(
        template charstring loc_par)
      :=
      loc_par;
    }
  } // end Group MSGtemplates
  group ExampleTemplates {
    //  template example with any additional header
    //      template INVITE_Request INVITE_Request_r_add modifies INVITE_Request_r_1 := {
    //        msgHeader := { myMessage := ? }
    //      }
    //      //      template example used with any additional header
    //      template INVITE_Request INVITE_Request_s_add(
    //        SipUrl loc_RequestUri,
    //        CallId loc_CallId,
    //        CSeq loc_CSeq,
    //        From loc_From,
    //        To loc_To,
    //        Via loc_Via,
    //        Contact loc_Contact) modifies INVITE_Request_s_2 := {
    //        msgHeader := {
    //          myMessage := {
    //            fieldName := MY_MESSAGE_E,
    //            messageValue := { name := "Dirk", msg := "Hello" }
    //          }
    //        }
    //      }
    //      template Response Response_200_r_add(
    //        CallId loc_CallId,
    //        CSeq loc_CSeq,
    //        From loc_From,
    //        To loc_To) modifies Response_200_r_1
    //      //(loc_CallId, loc_CSeq)
    //      := {
    //        msgHeader := {
    //          myMessage := {
    //            fieldName := MY_MESSAGE_E,
    //            messageValue := { name := "Dirk", msg := "Hello" }
    //          }
    //        }
    //      }
  } // end Group ExampleTemplates
} // end Group Templates
}
