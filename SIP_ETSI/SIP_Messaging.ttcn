/*
******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission 
 * is hereby granted, free of charge, to copy, reproduce and amend this file 
 * under the following conditions: It is provided "as is", without warranty of any 
 * kind, expressed or implied. 
 *
 * ETSI shall never be liable for any claim, damages, or other liability arising 
 * from its use or inability of use.This permission does not apply to any documentation 
 * associated with this file for which ETSI keeps all rights reserved. The present 
 * copyright notice shall be included in all copies of whole or part of this 
 * file and shall not imply any sub-license right.
 *
 *  Modified by: Elemer Lelik
******************************************************************************
//-----------------------------------------------------------------------------
//AUTHOR:      Gyorgy Rethy, L.M. Ericsson (STF296, STF270, STF246, STF196, STF166)
//DATE:        September 2007
//VERSION:     4.2.1
//
//DTS/MTS 0097-3
//
//Methods for Testing and Specification (MTS);
//Conformance Test Specification for SIP (RFC32361);
//Part 3: Abstract Test Suite (TTCN-3 code)
//
//(c) European Telecommunications Standards Institute 2001.
//All rights reserved.
//
//-----------------------------------------------------------------------------
//HISTORY: ---> see History in SIP_MainModule.ttcn
//
//References
//The following documents contain provisions which, through reference in this text, constitute provisions of the present document.
//- References are either specific (identified by date of publication, edition number, version number, etc.) or non-specific.
//- For a specific reference, subsequent revisions do not apply.
//- For a non-specific reference, the latest version applies.
//- A non-specific reference to an ETS shall also be taken to refer to later versions published as an EN with the same number.
//[1]  RFC 3261, "Session Description Protocol", SDP: Session Description Protocol. M. Handley, V. Jacobson. April 1998. (Status: PROPOSED STANDARD).
//[3]  ISO/IEC 9646-1: "Information technology - Open Systems Interconnection - Conformance testing methodology and framework - Part 1: General concepts
//[4]  ISO/IEC 9646-2: "Information technology - Open Systems Interconnection - Conformance testing methodology and framework - Part 2: Abstract Test Suite specification".
//[5] ISO/IEC 9646-3: "Information technology - Open Systems Interconnection - Conformance testing methodology and framework - Part 3: The Tree and Tabular Combined Notation".
//[6]  ETS 300 406: "Methods for Testing and Specification (MTS); Protocol and profile conformance testing specifications; Standardization methodology".
*/

//**************************************************************************************************
//compiled with Titan 5 R4C 2016.02.22 Elemer Lelik
//**************************************************************************************************


module SIP_Messaging {

import from SIPmsg_Types all;
import from SIP_TypesAndConf all;
import from SIP_Templates all;
import from SIP_Steps all;

group TestPurposesforMessaging {
  group Registrant {
    // GroupSelection:    Registration being listed as an option, the test purpose is appl
    // icable if the IUT is declared as supporting periodic registration and can behave
    //  as User Agent.
    //
    group ValidBehaviour {
      testcase SIP_MG_RT_V_001(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, having sent a REGISTER request, on receipt of a
      // valid Success (200 OK) response including non-understood uri-parameters in
      // SIP-URI of the Contact header, ignores it and considers to have received a
      // Success (200 OK).
      {
        var REGISTER_Request vl_REGISTER_Request;
        var ContactAddress vl_ContactAddress;
        var SemicolonParam_List vl_params;
        var integer i := 0;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRT());
        
        havingSentARegister(vl_REGISTER_Request);
        
        // Update contact list to set expiration of each contact to SHORT_REGISTRATION delay
        updateContactAddress_List(
          v_Contact,
          int2str (float2int (SHORT_REGISTRATION)));
        // append a non-understood URL parameter in SIP-URL of the contact header field
        vl_ContactAddress :=
        v_Contact.contactBody.contactAddresses[0];
        
        if (ischosen (vl_ContactAddress.addressField.nameAddr)) {
          if (ispresent (vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "paramUnknown",
              paramValue := "nonunderstood"
            }
          } else {
            vl_params := {
              {
                id := "paramUnknown",
                paramValue := "nonunderstood"
              }
            }
          };
          vl_ContactAddress
          .addressField
          .nameAddr
          .addrSpec
          .urlParameters :=
          vl_params
        } else {
          if (ispresent (vl_ContactAddress
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "paramUnknown",
              paramValue := "nonunderstood"
            }
          } else {
            vl_params := {
              {
                id := "paramUnknown",
                paramValue := "nonunderstood"
              }
            }
          };
          vl_ContactAddress
          .addressField
          .addrSpecUnion
          .urlParameters :=
          vl_params
        }
        
        v_Contact.contactBody.contactAddresses[0] :=
        vl_ContactAddress;
        // Get current Date in format rfc1123-Date
        v_date := getCurrentGMTDate();
        // Send an Answer to the UA with a Date field
        // and the updated contact list
        SIPP.send (
          Response_Register_200_s_2(
            v_CallId,
            v_CSeq,
            v_From,
            v_To,
            v_Via,
            v_Contact,
            v_date)) to v_sent_label;
        
        checkNoFurtherMessages();
        
      }
      with {
        extension "Preconditions: IUT is declared as supporting periodic registration and can behave as User Agent";
        extension "Description: Ensure that the IUT, having sent a REGISTER request, on receipt of a  valid Success (200 OK) response including non-understood uri-parameters in SIP-URI of the Contact header, ignores it and considers to have received a Success (200 OK).";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid REGISTER_Request reveived OR Any message received after valid Success (200 OK) response";
        extension "InconcCause: No REGISTER_Request received";
      } // end testcase SIP_MG_RT_V_001
      testcase SIP_MG_RT_V_002(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, having sent a REGISTER request, on receipt of a
      // valid Success (200 OK) response including header parameters in the SIP-URI of
      // the Contact header, considers to have received a Success (200 OK).
      {
        var REGISTER_Request vl_REGISTER_Request;
        var ContactAddress vl_ContactAddress;
        var SemicolonParam_List vl_params;
        var integer i := 0;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRT());
        
        havingSentARegister(vl_REGISTER_Request);
        
        // Update contact list to set expiration of each contact to SHORT_REGISTRATION delay
        updateContactAddress_List(
          v_Contact,
          int2str (float2int (SHORT_REGISTRATION)));
        
        // append header parameter in SIP-URL of the contact header field
        vl_ContactAddress :=
        v_Contact.contactBody.contactAddresses[0];
        if (ischosen (vl_ContactAddress.addressField.nameAddr)) {
          if (ispresent (vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .headers)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          vl_ContactAddress.addressField.nameAddr.addrSpec.headers :=
          vl_params
        } else {
          if (ispresent (vl_ContactAddress
              .addressField
              .addrSpecUnion
              .headers)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .addrSpecUnion
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          vl_ContactAddress.addressField.addrSpecUnion.headers :=
          vl_params
        }
        //update Contact
        v_Contact.contactBody.contactAddresses[0] :=
        vl_ContactAddress;
        // Get current Date in format rfc1123-Date
        v_date := getCurrentGMTDate();
        // Send an Answer to the UA with a Date field
        // and the updated contact list
        SIPP.send (
          Response_Register_200_s_2(
            v_CallId,
            v_CSeq,
            v_From,
            v_To,
            v_Via,
            v_Contact,
            v_date)) to v_sent_label;
        
        checkNoFurtherMessages();
        
      }
      with {
        extension "Preconditions: IUT is declared as supporting periodic registration and can behave as User Agent";
        extension "Description: Ensure that the IUT, having sent a REGISTER request, on receipt of a  valid Success (200 OK) response including header parameters in the SIP-URI of  the Contact header, considers to have received a Success (200 OK).";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid REGISTER_Request reveived OR Any message received after valid Success (200 OK) response";
        extension "InconcCause: No REGISTER_Request received";
      } // end testcase SIP_MG_RT_V_002
      testcase SIP_MG_RT_V_003(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.2 [1]
      // Purpose : Ensure that the IUT, having sent a REGISTER request, on receipt of a
      // valid Success (299 OK) response with non-defined last two digits considers to
      // have received a Success (200 OK).
      {
        var REGISTER_Request vl_REGISTER_Request;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRT());
        
        havingSentARegister(vl_REGISTER_Request);
        
        // Update contact list to set expiration of each contact to SHORT_REGISTRATION delay
        updateContactAddress_List(
          v_Contact,
          int2str (float2int (SHORT_REGISTRATION)));
        // Get current Date in format rfc1123-Date
        v_date := getCurrentGMTDate();
        // Send an Answer to the UA with a Date field
        // and the updated contact list
        //Send a 299 OK Answer to the UA
        SIPP.send (
          Response_2xx_REGISTER_s_1(
            v_CallId,
            v_CSeq,
            v_From,
            v_To,
            v_Via,
            v_Contact,
            v_date,
            299,
            "OK")) to v_sent_label;
        
        checkNoFurtherMessages();
        
      }
      with {
        extension "Preconditions: IUT is declared as supporting periodic registration and can behave as User Agent";
        extension "Description: Ensure that the IUT, having sent a REGISTER request, on receipt of a  valid Success (299 OK) response with non-defined last two digits considers to  have received a Success (200 OK).";
        extension "Reference: 7.2 [1] ";
        extension "FailCause: Invalid REGISTER_Request reveived OR Any message received after valid Success (299 OK) response";
        extension "InconcCause: No REGISTER_Request received";
      } // end testcase SIP_MG_RT_V_003
      testcase SIP_MG_RT_V_004(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.2 [1]
      // Purpose : Ensure that the IUT, having sent a REGISTER request, on receipt of a
      // valid Success (200 PERFECT) response with an unknown reason phrase considers
      // to have received a Success (200 OK).
      {
        var REGISTER_Request vl_REGISTER_Request;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRT());
        
        havingSentARegister(vl_REGISTER_Request);
        
        // Update contact list to set expiration of each contact to SHORT_REGISTRATION delay
        updateContactAddress_List(
          v_Contact,
          int2str (float2int (SHORT_REGISTRATION)));
        // Get current Date in format rfc1123-Date
        v_date := getCurrentGMTDate();
        // Send an Answer to the UA with a Date field
        // and the updated contact list
        //Send a 299 OK Answer to the UA
        SIPP.send (
          Response_2xx_REGISTER_s_1(
            v_CallId,
            v_CSeq,
            v_From,
            v_To,
            v_Via,
            v_Contact,
            v_date,
            200,
            "PERFECT")) to v_sent_label;
        
        checkNoFurtherMessages();
        
      }
      with {
        extension "Preconditions: IUT is declared as supporting periodic registration and can behave as User Agent";
        extension "Description: Ensure that the IUT, having sent a REGISTER request, on receipt of a  valid Success (200 PERFECT) response with an unknown reason phrase considers to have received a Success (200 OK).";
        extension "Reference: 7.2 [1] ";
        extension "FailCause: Invalid REGISTER_Request reveived OR Any message received after valid Success (200 PERFECT) response";
        extension "InconcCause: No REGISTER_Request received";
      } // end testcase SIP_MG_RT_V_004
      testcase SIP_MG_RT_V_005(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1]
      // Purpose : Ensure that the IUT, having sent a REGISTER request, is able to
      // receive a Success (200 OK) response including headers named with upper
      // and lower cases.
      {
        var REGISTER_Request vl_REGISTER_Request;
        var integer i := 0;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRT());
        
        havingSentARegister(vl_REGISTER_Request);
        
        // Update contact list to set expiration of each contact to SHORT_REGISTRATION delay
        updateContactAddress_List(
          v_Contact,
          int2str (float2int (SHORT_REGISTRATION)));
        // Get current Date in format rfc1123-Date
        v_date := getCurrentGMTDate();
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CallId[1] := "A";
        
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_CSeq[2] := "E";
        
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_From[1] := "R";
        v_Raw_From[2] := "O";
        v_Raw_From[3] := "M";
        
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_Date := buildRaw_DateHeader(v_date);
        
        //Send a  raw 200OK Answer to the UA with a Date field
        // and the updated contact list
        SIPP.send (
          Raw_Response_Register_200_s_1(
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            v_Raw_Contact,
            v_Raw_Date)) to v_sent_label;
        
        checkNoFurtherMessages();
        
      }
      with {
        extension "Preconditions: IUT is declared as supporting periodic registration and can behave as User Agent";
        extension "Description: Ensure that the IUT, having sent a REGISTER request, is able to  receive a Success (200 OK) response including headers named with upper  and lower cases.";
        extension "Reference: 7.3.1 [1]";
        extension "FailCause: Invalid REGISTER_Request reveived OR Any message received after valid Success (200 OK) response";
        extension "InconcCause: No REGISTER_Request received";
      } // end testcase SIP_MG_RT_V_005
      testcase SIP_MG_RT_V_006(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 25.1 [1]
      // Purpose : Ensure that the IUT, having sent a REGISTER request, is able to
      // receive a Success (200 OK) response including headers set with values
      // preceded by several leading white space and properly extended over ;
      // multiple lines.
      {
        var REGISTER_Request vl_REGISTER_Request;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRT());
        
        havingSentARegister(vl_REGISTER_Request);
        
        // Update contact list to set expiration of each contact to SHORT_REGISTRATION delay
        updateContactAddress_List(
          v_Contact,
          int2str (float2int (SHORT_REGISTRATION)));
        // Get current Date in format rfc1123-Date
        v_date := getCurrentGMTDate();
        // raw headers are built
        v_white_space := true;
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_white_space := false;
        
        v_Raw_To := buildRaw_ToHeader(v_To);
        
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Via := SP & v_Raw_Via;
        
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_Contact := SP & v_Raw_Contact;
        v_Raw_Date := buildRaw_DateHeader(v_date);
        
        //Send a  raw 200OK Answer to the UA with a Date field
        // and the updated contact list
        SIPP.send (
          Raw_Response_Register_200_s_1(
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            v_Raw_Contact,
            v_Raw_Date)) to v_sent_label;
        
        checkNoFurtherMessages();
        
      }
      with {
        extension "Preconditions: IUT is declared as supporting periodic registration and can behave as User Agent";
        extension "Description: Ensure that the IUT, having sent a REGISTER request, is able to  receive a Success (200 OK) response including headers set with values  preceded by several leading white space and properly extended over  multiple lines.";
        extension "Reference: 25.1 [1] ";
        extension "FailCause: Invalid REGISTER_Request reveived OR Any message received after valid Success (200 OK) response";
        extension "InconcCause: No REGISTER_Request received";
      } // end testcase SIP_MG_RT_V_006
      testcase SIP_MG_RT_V_007(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 25.1 [1] , 7.3.3[1]
      // Purpose : Ensure that the IUT, having sent a REGISTER request, is able to
      // receive a Success (200 OK) response including headers set with short
      // field names.
      {
        var REGISTER_Request vl_REGISTER_Request;
        var integer i := 0;
        var integer j, 
        vl_str_len;
        var charstring vl_Raw_CallId := "";
        var charstring vl_Raw_From := "";
        var charstring vl_Raw_To := "";
        var charstring vl_Raw_Via := "";
        var charstring vl_Raw_Contact := "";
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRT());
        
        havingSentARegister(vl_REGISTER_Request);
        
        // Update contact list to set expiration of each contact to SHORT_REGISTRATION delay
        updateContactAddress_List(
          v_Contact,
          int2str (float2int (SHORT_REGISTRATION)));
        // Get current Date in format rfc1123-Date
        v_date := getCurrentGMTDate();
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        vl_str_len := lengthof (v_Raw_CallId);
        vl_Raw_CallId[0] := "i";
        i := 1;
        for (j := 7; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_CallId[i] := v_Raw_CallId[j];
          i := i + 1;
        }
        
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        
        v_Raw_From := buildRaw_FromHeader(v_From);
        vl_str_len := lengthof (v_Raw_From);
        vl_Raw_From[0] := "f";
        i := 1;
        for (j := 4; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_From[i] := v_Raw_From[j];
          i := i + 1;
        }
        
        v_Raw_To := buildRaw_ToHeader(v_To);
        vl_str_len := lengthof (v_Raw_To);
        vl_Raw_To[0] := "t";
        i := 1;
        for (j := 2; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_To[i] := v_Raw_To[j];
          i := i + 1;
        }
        
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        vl_str_len := lengthof (v_Raw_Via);
        vl_Raw_Via[0] := "v";
        i := 1;
        for (j := 3; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_Via[i] := v_Raw_Via[j];
          i := i + 1;
        }
        
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        vl_str_len := lengthof (v_Raw_Contact);
        vl_Raw_Contact[0] := "m";
        i := 1;
        for (j := 7; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_Contact[i] := v_Raw_Contact[j];
          i := i + 1;
        }
        v_Raw_Date := buildRaw_DateHeader(v_date);
        
        //Send a  raw 200OK Answer to the UA with a Date field
        // and the updated contact list
        SIPP.send (
          Raw_Response_Register_200_s_1(
            vl_Raw_CallId,
            v_Raw_CSeq,
            vl_Raw_From,
            vl_Raw_To,
            vl_Raw_Via,
            vl_Raw_Contact,
            v_Raw_Date)) to v_sent_label;
        
        checkNoFurtherMessages();
        
      }
      with {
        extension "Preconditions: IUT is declared as supporting periodic registration and can behave as User Agent";
        extension "Description: Ensure that the IUT, having sent a REGISTER request, is able to  receive a Success (200 OK) response including headers set with short  field names.";
        extension "Reference: 25.1 [1] , 7.3.3[1]";
        extension "FailCause: Invalid REGISTER_Request reveived OR Any message received after valid Success (200 OK) response";
        extension "InconcCause: No REGISTER_Request received";
      } // end testcase SIP_MG_RT_V_007
      testcase SIP_MG_RT_V_008(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.5 [1]
      // Purpose : Ensure that the IUT, having sent a REGISTER request over a
      // stream-oriented (TCP) transport, on receipt of a Success (200 OK) response
      // with several CRLF before the start ignores them and considers to have received
      // a Success (200 OK).
      {
        var REGISTER_Request vl_REGISTER_Request;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRT());
        
        havingSentARegister(vl_REGISTER_Request);
        
        // Update contact list to set expiration of each contact to SHORT_REGISTRATION delay
        updateContactAddress_List(
          v_Contact,
          int2str (float2int (SHORT_REGISTRATION)));
        // Get current Date in format rfc1123-Date
        v_date := getCurrentGMTDate();
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_Date := buildRaw_DateHeader(v_date);
        
        //Send a  raw 200OK Answer to the UA with a Date field
        // and the updated contact list
        SIPP.send (
          Raw_Response_Register_200_s_2(
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            v_Raw_Contact,
            v_Raw_Date)) to v_sent_label;
        
        checkNoFurtherMessages();
        
      }
      with {
        extension "Preconditions: IUT is declared as supporting periodic registration and can behave as User Agent";
        extension "Description: Ensure that the IUT, having sent a REGISTER request over a  stream-oriented (TCP) transport, on receipt of a Success (200 OK) response  with several CRLF before the start ignores them and considers to have received  a Success (200 OK).";
        extension "Reference: 7.5 [1] ";
        extension "FailCause: Invalid REGISTER_Request reveived OR Any message received after valid Success (200 OK) response";
        extension "InconcCause: No REGISTER_Request received";
      } // end testcase SIP_MG_RT_V_008
    } // end group ValidBehaviour
    group InvalidBehaviour {
      testcase SIP_MG_RT_I_001(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, having sent a REGISTER request, on receipt of a
      // Success (200 OK) response with transport parameters in the From and To headers
      // considers to have received a Success (200 OK).
      {
        var REGISTER_Request vl_REGISTER_Request;
        var SemicolonParam_List vl_params;
        var integer i := 0;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRT());
        
        havingSentARegister(vl_REGISTER_Request);
        
        // Update contact list to set expiration of each contact to SHORT_REGISTRATION delay
        updateContactAddress_List(
          v_Contact,
          int2str (float2int (SHORT_REGISTRATION)));
        
        v_From.fromParams := {
          {
            "transport",
            "tcp"
          }
        };
        v_To.toParams := {
          {
            "transport",
            "tcp"
          }
        };
        
        // Get current Date in format rfc1123-Date
        v_date := getCurrentGMTDate();
        // Send an Answer to the UA with a Date field
        // and the updated contact list
        SIPP.send (
          Response_Register_200_s_2(
            v_CallId,
            v_CSeq,
            v_From,
            v_To,
            v_Via,
            v_Contact,
            v_date)) to v_sent_label;
        
        checkNoFurtherMessages();
        
      }
      with {
        extension "Preconditions: IUT is declared as supporting periodic registration and can behave as User Agent";
        extension "Description: Ensure that the IUT, having sent a REGISTER request, on receipt of a  Success (200 OK) response with transport parameters in the From and To headers  considers to have received a Success (200 OK).";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid REGISTER_Request reveived OR Any message received after valid Success (200 OK) response";
        extension "InconcCause: No REGISTER_Request received";
      } // end testcase SIP_MG_RT_I_001
      testcase SIP_MG_RT_I_002(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, having sent a REGISTER request, on receipt of a
      // Success (200 OK) response with a ttl parameter in the From and To headers
      // ignores them and considers to have received a Success (200 OK).
      {
        var REGISTER_Request vl_REGISTER_Request;
        var SemicolonParam_List vl_params;
        var integer i := 0;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRT());
        
        havingSentARegister(vl_REGISTER_Request);
        
        // Update contact list to set expiration of each contact to SHORT_REGISTRATION delay
        updateContactAddress_List(
          v_Contact,
          int2str (float2int (SHORT_REGISTRATION)));
        
        v_From.fromParams := {
          {
            "ttl",
            "0"
          }
        };
        v_To.toParams := {
          {
            "ttl",
            "0"
          }
        };
        
        // Get current Date in format rfc1123-Date
        v_date := getCurrentGMTDate();
        // Send an Answer to the UA with a Date field
        // and the updated contact list
        SIPP.send (
          Response_Register_200_s_2(
            v_CallId,
            v_CSeq,
            v_From,
            v_To,
            v_Via,
            v_Contact,
            v_date)) to v_sent_label;
        
        checkNoFurtherMessages();
        
      }
      with {
        extension "Preconditions: IUT is declared as supporting periodic registration and can behave as User Agent";
        extension "Description: Ensure that the IUT, having sent a REGISTER request, on receipt of a  Success (200 OK) response with a ttl parameter in the From and To headers  ignores them and considers to have received a Success (200 OK).";
        extension "Reference: 19.1.1 [1]";
        extension "FailCause: Invalid REGISTER_Request reveived OR Any message received after valid Success (200 OK) response";
        extension "InconcCause: No REGISTER_Request received";
      } // end testcase SIP_MG_RT_I_002
      testcase SIP_MG_RT_I_003(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, having sent a REGISTER request, on receipt of a
      // Success (200 OK) response with an URI including a header parameter in the To and
      //  From headers ignores them and considers to have received a Success (200 OK).
      {
        var REGISTER_Request vl_REGISTER_Request;
        var SemicolonParam_List vl_params;
        var integer i := 0;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRT());
        
        havingSentARegister(vl_REGISTER_Request);
        
        // Update contact list to set expiration of each contact to SHORT_REGISTRATION delay
        updateContactAddress_List(
          v_Contact,
          int2str (float2int (SHORT_REGISTRATION)));
        
        if (ischosen (v_From.addressField.nameAddr)) {
          if (ispresent (v_From
              .addressField
              .nameAddr
              .addrSpec
              .headers)) {
            vl_params :=
            valueof(
              v_From
              .addressField
              .nameAddr
              .addrSpec
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          v_From.addressField.nameAddr.addrSpec.headers :=
          vl_params
        } else {
          if (ispresent (v_From
              .addressField
              .addrSpecUnion
              .headers)) {
            vl_params :=
            valueof(
              v_From.addressField.addrSpecUnion.headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          v_From.addressField.addrSpecUnion.headers := vl_params
        };
        
        if (ischosen (v_To.addressField.nameAddr)) {
          if (ispresent (v_To
              .addressField
              .nameAddr
              .addrSpec
              .headers)) {
            vl_params :=
            valueof(
              v_To
              .addressField
              .nameAddr
              .addrSpec
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h2",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h2",
                paramValue := "$"
              }
            }
          };
          v_To.addressField.nameAddr.addrSpec.headers :=
          vl_params
        } else {
          if (ispresent (v_To
              .addressField
              .addrSpecUnion
              .headers)) {
            vl_params :=
            valueof(
              v_To.addressField.addrSpecUnion.headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h2",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h2",
                paramValue := "$"
              }
            }
          };
          v_To.addressField.addrSpecUnion.headers := vl_params
        };
        
        // Get current Date in format rfc1123-Date
        v_date := getCurrentGMTDate();
        // Send an Answer to the UA with a Date field
        // and the updated contact list
        SIPP.send (
          Response_Register_200_s_2(
            v_CallId,
            v_CSeq,
            v_From,
            v_To,
            v_Via,
            v_Contact,
            v_date)) to v_sent_label;
        
        checkNoFurtherMessages();
        
      }
      with {
        extension "Preconditions: IUT is declared as supporting periodic registration and can behave as User Agent";
        extension "Description: Ensure that the IUT, having sent a REGISTER request, on receipt of a  Success (200 OK) response with an URI including a header parameter in the To and  From headers ignores them and considers to have received a Success (200 OK).";
        extension "Reference: 19.1.1 [1]";
        extension "FailCause: Invalid REGISTER_Request reveived OR Any message received after valid Success (200 OK) response";
        extension "InconcCause: No REGISTER_Request received";
      } // end testcase SIP_MG_RT_I_003
      testcase SIP_MG_RT_I_004(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, having sent a REGISTER request, on receipt of a
      // Success (200 OK) response with a method parameters in the To and From headers
      // ignores them and considers to have received a Success (200 OK).
      {
        var REGISTER_Request vl_REGISTER_Request;
        var integer i := 0;
        var SemicolonParam_List vl_params;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRT());
        
        havingSentARegister(vl_REGISTER_Request);
        
        // Update contact list to set expiration of each contact to SHORT_REGISTRATION delay
        updateContactAddress_List(
          v_Contact,
          int2str (float2int (SHORT_REGISTRATION)));
        
        if (ischosen (v_From.addressField.nameAddr)) {
          if (ispresent (v_From
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              v_From
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "REGISTER"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "REGISTER"
              }
            }
          };
          v_From.addressField.nameAddr.addrSpec.urlParameters :=
          vl_params
        } else {
          if (ispresent (v_From
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              v_From
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "REGISTER"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "REGISTER"
              }
            }
          };
          v_From.addressField.addrSpecUnion.urlParameters :=
          vl_params
        };
        
        if (ischosen (v_To.addressField.nameAddr)) {
          if (ispresent (v_To
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              v_To
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "INVITE"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "INVITE"
              }
            }
          };
          v_To.addressField.nameAddr.addrSpec.urlParameters :=
          vl_params
        } else {
          if (ispresent (v_To
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              v_To
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "INVITE"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "INVITE"
              }
            }
          };
          v_To.addressField.addrSpecUnion.urlParameters :=
          vl_params
        };
        
        // Get current Date in format rfc1123-Date
        v_date := getCurrentGMTDate();
        // Send an Answer to the UA with a Date field
        // and the updated contact list
        SIPP.send (
          Response_Register_200_s_2(
            v_CallId,
            v_CSeq,
            v_From,
            v_To,
            v_Via,
            v_Contact,
            v_date)) to v_sent_label;
        
        checkNoFurtherMessages();
        
      }
      with {
        extension "Preconditions: IUT is declared as supporting periodic registration and can behave as User Agent";
        extension "Description: Ensure that the IUT, having sent a REGISTER request, on receipt of a  Success (200 OK) response with a method parameters in the To and From headers  ignores them and considers to have received a Success (200 OK).";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid REGISTER_Request reveived OR Any message received after valid Success (200 OK) response";
        extension "InconcCause: No REGISTER_Request received";
      } // end testcase SIP_MG_RT_I_004
      testcase SIP_MG_RT_I_005(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 20 [1], table 2  [1]
      // Purpose : Ensure that the IUT, having sent a REGISTER request, on receipt of a
      // Session Progress (183 Session Progress) response with a Contact header ignores
      // it and accepts the following Success (200 OK).
      {
        var REGISTER_Request vl_REGISTER_Request;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRT());
        
        havingSentARegister(vl_REGISTER_Request);
        
        // Update contact list to set expiration of each contact to SHORT_REGISTRATION delay
        updateContactAddress_List(
          v_Contact,
          int2str (float2int (SHORT_REGISTRATION)));
        // Get current Date in format rfc1123-Date
        v_date := getCurrentGMTDate();
        
        //Send an Answer to the UA 183 Session Progress including a contact
        SIPP.send (
          Response_183I_s_1(
            v_CallId,
            v_CSeq,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        // Send an Answer to the UA with a Date field
        // and the updated contact list
        SIPP.send (
          Response_Register_200_s_2(
            v_CallId,
            v_CSeq,
            v_From,
            v_To,
            v_Via,
            v_Contact,
            v_date)) to v_sent_label;
        
        checkNoFurtherMessages();
        
      }
      with {
        extension "Preconditions: IUT is declared as supporting periodic registration and can behave as User Agent";
        extension "Description: Ensure that the IUT, having sent a REGISTER request, on receipt of a  Session Progress (183 Session Progress) response with a Contact header ignores  it and accepts the following Success (200 OK).";
        extension "Reference: 20 [1], table 2 [1]";
        extension "FailCause: Invalid REGISTER_Request reveived OR Any message received after valid Success (200 OK) response";
        extension "InconcCause: No REGISTER_Request received";
      } // end testcase SIP_MG_RT_I_005
    } // end group InvalidBehaviour
  } // end group Registrant
  group Registrar {
    // GroupSelection: IUT is a proxy or a redirect server entity.
    //
    group ValidBehaviour {
      testcase SIP_MG_RR_V_001(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT on receipt of a REGISTER request including
      // escaped characters in the SIP-URI of the Contact header, sends a Success
      // (200 OK) response.
      {
        var Response vl_Response;
        var ContactAddress vl_ContactAddress;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRR());
        
        setHeadersForRegister(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        
        vl_ContactAddress :=
        v_Contact.contactBody.contactAddresses[0];
        if (ischosen (vl_ContactAddress.addressField.nameAddr)) {
          v_Contact
          .contactBody
          .contactAddresses[0]
          .addressField
          .nameAddr
          .addrSpec
          .userInfo
          .userOrTelephoneSubscriber :=
          encodeEscapeDelim(
            v_Contact
            .contactBody
            .contactAddresses[0]
            .addressField
            .nameAddr
            .addrSpec
            .userInfo
            .userOrTelephoneSubscriber);
        } else {
          v_Contact
          .contactBody
          .contactAddresses[0]
          .addressField
          .addrSpecUnion
          .userInfo
          .userOrTelephoneSubscriber :=
          encodeEscapeDelim(
            v_Contact
            .contactBody
            .contactAddresses[0]
            .addressField
            .addrSpecUnion
            .userInfo
            .userOrTelephoneSubscriber);
        }
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        
        SIPP.send (
          Raw_REGISTER_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via)) to v_sent_label;
        awaitingRegisterOkResponseRaw(
          v_CallIdReg,
          loc_CSeq_s,
          PX_RFC2617_USERNAME,
          PX_RFC2617_PASSWD);
        
        removeRegistration(loc_CSeq_s);
        
      }
      with {
        extension "Preconditions: IUT is a proxy or a redirect server entity";
        extension "Description: Ensure that the IUT on receipt of a REGISTER request including  escaped characters in the SIP-URI of the Contact header, sends a Success  (200 OK) response.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid Success (200 OK) received OR No Success (200 OK) received";
      } // end testcase SIP_MG_RR_V_001
      testcase SIP_MG_RR_V_002(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT on receipt of a REGISTER request including
      // escaped delimiters in SIP-URI of the Contact header, sends a Success
      // (200 OK) response.
      {
        var Response vl_Response;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRR());
        
        setHeadersForRegister(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Contact :=
        buildRaw_EscapedDelimiters_ContactHeader(v_Contact);
        //v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        
        SIPP.send (
          Raw_REGISTER_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via)) to v_sent_label;
        awaitingRegisterOkResponseRaw(
          v_CallIdReg,
          loc_CSeq_s,
          PX_RFC2617_USERNAME,
          PX_RFC2617_PASSWD);
        
        removeRegistration(loc_CSeq_s);
        
      }
      with {
        extension "Preconditions: IUT is a proxy or a redirect server entity";
        extension "Description: Ensure that the IUT on receipt of a REGISTER request including  escaped delimiters in SIP-URI of the Contact header, sends a Success  (200 OK) response.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid Success (200 OK) received OR No Success (200 OK) received";
      } // end testcase SIP_MG_RR_V_002
      testcase SIP_MG_RR_V_003(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT on receipt of a REGISTER request including
      // non-understood uri- parameters in SIP-URI of the Contact header, ignores
      // it and sendsa Success (200 OK) response.
      {
        var Response vl_Response;
        var SemicolonParam_List vl_params;
        var ContactAddress vl_ContactAddress;
        var integer i := 0;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRR());
        
        setHeadersForRegister(loc_CSeq_s);
        
        vl_ContactAddress :=
        v_Contact.contactBody.contactAddresses[0];
        
        if (ischosen (vl_ContactAddress.addressField.nameAddr)) {
          if (ispresent (vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "paramUnknown",
              paramValue := "nonunderstood"
            }
          } else {
            vl_params := {
              {
                id := "paramUnknown",
                paramValue := "nonunderstood"
              }
            }
          };
          vl_ContactAddress
          .addressField
          .nameAddr
          .addrSpec
          .urlParameters :=
          vl_params
        } else {
          if (ispresent (vl_ContactAddress
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "paramUnknown",
              paramValue := "nonunderstood"
            }
          } else {
            vl_params := {
              {
                id := "paramUnknown",
                paramValue := "nonunderstood"
              }
            }
          };
          vl_ContactAddress
          .addressField
          .addrSpecUnion
          .urlParameters :=
          vl_params
        }
        
        v_Contact.contactBody.contactAddresses[0] :=
        vl_ContactAddress;
        
        SIPP.send (
          REGISTER_Request_s_1(
            v_RequestUri,
            v_CallIdReg,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via)) to v_sent_label;
        
        awaitingRegisterOkResponse(
          REGISTER_Request_s_1(
            v_RequestUri,
            v_CallIdReg,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via),
          v_CallIdReg,
          loc_CSeq_s,
          vl_Response);
        removeRegistration(loc_CSeq_s);
        
      }
      with {
        extension "Preconditions: IUT is a proxy or a redirect server entity";
        extension "Description: Ensure that the IUT on receipt of a REGISTER request including  non-understood uri- parameters in SIP-URI of the Contact header, ignores   it and sendsa Success (200 OK) response.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid Success (200 OK) received OR No Success (200 OK) received";
      } // end testcase SIP_MG_RR_V_003
      testcase SIP_MG_RR_V_004(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT on receipt of a REGISTER request including a
      // header parameter in the SIP-URI of the Contact header, sends a Success
      // (200 OK) response.
      {
        var Response vl_Response;
        var SemicolonParam_List vl_params;
        var ContactAddress vl_ContactAddress;
        var integer i := 0;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRR());
        
        setHeadersForRegister(loc_CSeq_s);
        
        // append header parameter in SIP-URL of the contact header field
        vl_ContactAddress :=
        v_Contact.contactBody.contactAddresses[0];
        if (ischosen (vl_ContactAddress.addressField.nameAddr)) {
          if (ispresent (vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .headers)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          vl_ContactAddress.addressField.nameAddr.addrSpec.headers :=
          vl_params
        } else {
          if (ispresent (vl_ContactAddress
              .addressField
              .addrSpecUnion
              .headers)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .addrSpecUnion
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          vl_ContactAddress.addressField.addrSpecUnion.headers :=
          vl_params
        }
        
        v_Contact.contactBody.contactAddresses[0] :=
        vl_ContactAddress;
        
        SIPP.send (
          REGISTER_Request_s_1(
            v_RequestUri,
            v_CallIdReg,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via)) to v_sent_label;
        
        awaitingRegisterOkResponse(
          REGISTER_Request_s_1(
            v_RequestUri,
            v_CallIdReg,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via),
          v_CallIdReg,
          loc_CSeq_s,
          vl_Response);
        removeRegistration(loc_CSeq_s);
        
      }
      with {
        extension "Preconditions: IUT is a proxy or a redirect server entity";
        extension "Description: Ensure that the IUT on receipt of a REGISTER request including a  header parameter in the SIP-URI of the Contact header, sends a Success  (200 OK) response.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid Success (200 OK) received OR No Success (200 OK) received";
      } // end testcase SIP_MG_RR_V_004
      testcase SIP_MG_RR_V_005(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT on receipt of a REGISTER request including a
      // method parameter set to "REGISTER" in the SIP-URI of Contact header, sends
      // a Success (200 OK) response.
      {
        var Response vl_Response;
        var ContactAddress vl_ContactAddress;
        var SemicolonParam_List vl_params;
        var integer i := 0;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRR());
        
        setHeadersForRegister(loc_CSeq_s);
        
        vl_ContactAddress :=
        v_Contact.contactBody.contactAddresses[0];
        if (ischosen (vl_ContactAddress.addressField.nameAddr)) {
          if (ispresent (vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "REGISTER"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "REGISTER"
              }
            }
          };
          vl_ContactAddress
          .addressField
          .nameAddr
          .addrSpec
          .urlParameters :=
          vl_params
        } else {
          if (ispresent (vl_ContactAddress
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "REGISTER"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "REGISTER"
              }
            }
          };
          vl_ContactAddress
          .addressField
          .addrSpecUnion
          .urlParameters :=
          vl_params
        }
        
        v_Contact.contactBody.contactAddresses[0] :=
        vl_ContactAddress;
        
        SIPP.send (
          REGISTER_Request_s_1(
            v_RequestUri,
            v_CallIdReg,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via)) to v_sent_label;
        
        awaitingRegisterOkResponse(
          REGISTER_Request_s_1(
            v_RequestUri,
            v_CallIdReg,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via),
          v_CallIdReg,
          loc_CSeq_s,
          vl_Response);
        removeRegistration(loc_CSeq_s);
        
      }
      with {
        extension "Preconditions: IUT is a proxy or a redirect server entity";
        extension "Description: Ensure that the IUT on receipt of a REGISTER request including a  method parameter set to ""REGISTER"" in the SIP-URI of Contact header, sends  a Success (200 OK) response.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid Success (200 OK) received OR No Success (200 OK) received";
      } // end testcase SIP_MG_RR_V_005
      testcase SIP_MG_RR_V_006(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 8.2.2 [1]
      // Purpose : Ensure that the IUT on receipt of a REGISTER request including
      // an unknown header, ignores them and sends a Success (200 OK) response.
      {
        var Response vl_Response;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRR());
        
        setHeadersForRegister(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_Contact := v_Raw_Contact & CRLF & "UnknownHead: 0";
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        
        SIPP.send (
          Raw_REGISTER_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via)) to v_sent_label;
        awaitingRegisterOkResponseRaw(
          v_CallIdReg,
          loc_CSeq_s,
          PX_RFC2617_USERNAME,
          PX_RFC2617_PASSWD);
        removeRegistration(loc_CSeq_s);
        
      }
      with {
        extension "Preconditions: IUT is a proxy or a redirect server entity";
        extension "Description: Ensure that the IUT on receipt of a REGISTER request including  an unknown header, ignores them and sends a Success (200 OK) response.";
        extension "Reference: 8.2.2 [1] ";
        extension "FailCause: Invalid Success (200 OK) received OR No Success (200 OK) received";
      } // end testcase SIP_MG_RR_V_006
      testcase SIP_MG_RR_V_007(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1[1]
      // Purpose : Ensure that the IUT on receipt of a REGISTER request including
      // headers named with upper and lower cases, sends a Success (200 OK) response.
      {
        var Response vl_Response;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRR());
        
        setHeadersForRegister(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CallId[1] := "A";
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_CSeq[2] := "E";
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_From[1] := "R";
        v_Raw_From[2] := "O";
        v_Raw_From[3] := "M";
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Via[2] := "A";
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        
        SIPP.send (
          Raw_REGISTER_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via)) to v_sent_label;
        awaitingRegisterOkResponseRaw(
          v_CallIdReg,
          loc_CSeq_s,
          PX_RFC2617_USERNAME,
          PX_RFC2617_PASSWD);
        removeRegistration(loc_CSeq_s);
        
      }
      with {
        extension "Preconditions: IUT is a proxy or a redirect server entity";
        extension "Description: Ensure that the IUT on receipt of a REGISTER request including  headers named with upper and lower cases, sends a Success (200 OK) response.";
        extension "Reference: 7.3.1[1] ";
        extension "FailCause: Invalid Success (200 OK) received OR No Success (200 OK) received";
      } // end testcase SIP_MG_RR_V_007
      testcase SIP_MG_RR_V_008(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1]
      // Purpose : Ensure that the IUT on receipt of a REGISTER request including
      // headers set with values preceded by several leading white space and
      // properly extended over multiple lines, sends a Success (200 OK) response.;
      {
        var Response vl_Response;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRR());
        
        setHeadersForRegister(loc_CSeq_s);
        
        v_white_space := true;
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_white_space := false;
        
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        
        SIPP.send (
          Raw_REGISTER_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via)) to v_sent_label;
        awaitingRegisterOkResponseRaw(
          v_CallIdReg,
          loc_CSeq_s,
          PX_RFC2617_USERNAME,
          PX_RFC2617_PASSWD);
        removeRegistration(loc_CSeq_s);
        
      }
      with {
        extension "Preconditions: IUT is a proxy or a redirect server entity";
        extension "Description: Ensure that the IUT on receipt of a REGISTER request including  headers set with values preceded by several leading white space and  properly extended over multiple lines, sends a Success (200 OK) response.";
        extension "Reference: 7.3.1 [1]";
        extension "FailCause: Invalid Success (200 OK) received OR No Success (200 OK) received";
      } // end testcase SIP_MG_RR_V_008
      testcase SIP_MG_RR_V_009(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1]
      // Purpose : Ensure that the IUT on receipt of a REGISTER request including a
      // Contact header set with multiple values separated by a comma, sends a Success
      // (200 OK) response.
      {
        var Response vl_Response;
        var integer i,
        vl_str_len;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRR());
        
        setHeadersForRegister(loc_CSeq_s);
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        //Append a new address
        vl_str_len := lengthof (v_Raw_Contact);
        i := vl_str_len;
        v_Raw_Contact[i] := ",";
        v_Raw_Contact :=
        v_Raw_Contact & "sip:newcontact@etsi.org:5061";
        
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        
        SIPP.send (
          Raw_REGISTER_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via)) to v_sent_label;
        awaitingRegisterOkResponseRaw(
          v_CallIdReg,
          loc_CSeq_s,
          PX_RFC2617_USERNAME,
          PX_RFC2617_PASSWD);
        removeRegistration(loc_CSeq_s);
        
      }
      with {
        extension "Preconditions: IUT is a proxy or a redirect server entity";
        extension "Description: Ensure that the IUT on receipt of a REGISTER request including a  Contact header set with multiple values separated by a comma, sends a Success  (200 OK) response.";
        extension "Reference: 7.3.1 [1] ";
        extension "FailCause: Invalid Success (200 OK) received OR No Success (200 OK) received";
      } // end testcase SIP_MG_RR_V_009
      testcase SIP_MG_RR_V_010(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1]
      // Purpose : Ensure that the IUT on receipt of a REGISTER request including
      // multiple Contact headers, sends a Success (200 OK) response.
      {
        var Response vl_Response;
        var integer vl_str_len;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRR());
        
        setHeadersForRegister(loc_CSeq_s);
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        //Append a new address
        vl_str_len := lengthof (v_Raw_Contact);
        
        v_Raw_Contact :=
        v_Raw_Contact
        & CRLF
        & "Contact: sip:newcontact@etsi.org:5061";
        
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        
        SIPP.send (
          Raw_REGISTER_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via)) to v_sent_label;
        awaitingRegisterOkResponseRaw(
          v_CallIdReg,
          loc_CSeq_s,
          PX_RFC2617_USERNAME,
          PX_RFC2617_PASSWD);
        removeRegistration(loc_CSeq_s);
        
      }
      with {
        extension "Preconditions: IUT is a proxy or a redirect server entity";
        extension "Description: Ensure that the IUT on receipt of a REGISTER request including  multiple Contact headers, sends a Success (200 OK) response.";
        extension "Reference: 7.3.1 [1]";
        extension "FailCause: Invalid Success (200 OK) received OR No Success (200 OK) received";
      } // end testcase SIP_MG_RR_V_010
      testcase SIP_MG_RR_V_011(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1]
      // Purpose : Ensure that the IUT on receipt of a REGISTER request including an
      // expires header field named with upper and lower cases of  Contact header,
      // sends a Success (200 OK) response.
      {
        var Response vl_Response;
        initPort(mtc, system);
        v_Default := activate (defaultRGRR());
        
        setHeadersForRegister(loc_CSeq_s);
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        //Append a parameter expires named with upper and lower cases
        v_Raw_Contact :=
        v_Raw_Contact
        & CRLF
        & "EXpIrEs: "
        & int2str (float2int (SHORT_REGISTRATION));
        
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        
        SIPP.send (
          Raw_REGISTER_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via)) to v_sent_label;
        awaitingRegisterOkResponseRaw(
          v_CallIdReg,
          loc_CSeq_s,
          PX_RFC2617_USERNAME,
          PX_RFC2617_PASSWD);
        removeRegistration(loc_CSeq_s);
        
      }
      with {
        extension "Preconditions: IUT is a proxy or a redirect server entity";
        extension "Description: Ensure that the IUT on receipt of a REGISTER request including an  expires parameter named with upper and lower cases of  Contact header,  sends a Success (200 OK) response.";
        extension "Reference: 7.3.1 [1] ";
        extension "FailCause: Invalid Success (200 OK) received OR No Success (200 OK) received";
      } // end testcase SIP_MG_RR_V_011
      testcase SIP_MG_RR_V_012(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.3[1]
      // Purpose : Ensure that the IUT on receipt of a REGISTER request including
      // headers set with short names, sends a Success (200 OK) response.
      {
        var Response vl_Response;
        var integer i := 0;
        var integer j,
        vl_str_len;
        var charstring vl_Raw_CallId := "";
        var charstring vl_Raw_From := "";
        var charstring vl_Raw_To := "";
        var charstring vl_Raw_Via := "";
        var charstring vl_Raw_Contact := "";
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRR());
        
        setHeadersForRegister(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        vl_str_len := lengthof (v_Raw_CallId);
        vl_Raw_CallId[0] := "i";
        i := 1;
        for (j := 7; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_CallId[i] := v_Raw_CallId[j];
          i := i + 1;
        }
        
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        vl_str_len := lengthof (v_Raw_From);
        vl_Raw_From[0] := "f";
        i := 1;
        for (j := 4; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_From[i] := v_Raw_From[j];
          i := i + 1;
        }
        
        v_Raw_To := buildRaw_ToHeader(v_To);
        vl_str_len := lengthof (v_Raw_To);
        vl_Raw_To[0] := "t";
        i := 1;
        for (j := 2; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_To[i] := v_Raw_To[j];
          i := i + 1;
        }
        
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        vl_str_len := lengthof (v_Raw_Via);
        vl_Raw_Via[0] := "v";
        i := 1;
        for (j := 3; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_Via[i] := v_Raw_Via[j];
          i := i + 1;
        }
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        vl_str_len := lengthof (v_Raw_Contact);
        vl_Raw_Contact[0] := "m";
        i := 1;
        for (j := 7; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_Contact[i] := v_Raw_Contact[j];
          i := i + 1;
        }
        
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        
        SIPP.send (
          Raw_REGISTER_Request_s_1(
            v_Raw_RequestUri,
            vl_Raw_CallId,
            v_Raw_CSeq,
            vl_Raw_Contact,
            vl_Raw_From,
            vl_Raw_To,
            vl_Raw_Via)) to v_sent_label;
        awaitingRegisterOkResponseRaw(
          v_CallIdReg,
          loc_CSeq_s,
          PX_RFC2617_USERNAME,
          PX_RFC2617_PASSWD);
        removeRegistration(loc_CSeq_s);
        
      }
      with {
        extension "Preconditions: IUT is a proxy or a redirect server entity";
        extension "Description: Ensure that the IUT on receipt of a REGISTER request including  headers set with short names, sends a Success (200 OK) response.";
        extension "Reference: 7.3.3[1]";
        extension "FailCause: Invalid Success (200 OK) received OR No Success (200 OK) received";
      } // end testcase SIP_MG_RR_V_012
      testcase SIP_MG_RR_V_013(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.5 [1]
      // Purpose : Ensure that the IUT, on receipt of a REGISTER request over a
      // stream-oriented (TCP) transport with several CRLF before the start-line,
      // sends a Success (200 OK) response.
      {
        var Response vl_Response;
        initPort(mtc, system);
        v_Default := activate (defaultRGRR());
        
        setHeadersForRegister(loc_CSeq_s);
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        
        SIPP.send (
          Raw_REGISTER_Request_s_2(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via)) to v_sent_label;
        
        awaitingRegisterOkResponseRaw(
          v_CallIdReg,
          loc_CSeq_s,
          PX_RFC2617_USERNAME,
          PX_RFC2617_PASSWD);
        removeRegistration(loc_CSeq_s);
        
      }
      with {
        extension "Preconditions: IUT is a proxy or a redirect server entity";
        extension "Description: Ensure that the IUT, on receipt of a REGISTER request over a  stream-oriented (TCP) transport with several CRLF before the start-line,  sends a Success (200 OK) response.";
        extension "Reference: 7.5 [1] ";
        extension "FailCause: Invalid Success (200 OK) received OR No Success (200 OK) received";
      } // end testcase SIP_MG_RR_V_013
    } // end group ValidBehaviour
    group InvalidBehaviour {
      testcase SIP_MG_RR_I_001(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.1[1]
      // Purpose : Ensure that the IUT on receipt of a REGISTER request including a
      // Request line SIP-Version in lower cases ignores it and sends a Success
      // (200 OK) response.
      {
        var Response vl_Response;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRR());
        
        setHeadersForRegister(loc_CSeq_s);
        SIPP.send (
          REGISTER_Request_s_7(
            v_RequestUri,
            v_CallIdReg,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via)) to v_sent_label;
        
        awaitingRegisterOkResponse(
          REGISTER_Request_s_7(
            v_RequestUri,
            v_CallIdReg,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via),
          v_CallIdReg,
          loc_CSeq_s,
          vl_Response);
        removeRegistration(loc_CSeq_s);
      }
      with {
        extension "Preconditions: IUT is a proxy or a redirect server entity";
        extension "Description: Ensure that the IUT on receipt of a REGISTER request including a  Request line SIP-Version in lower cases ignores it and sends a Success  (200 OK) response.";
        extension "Reference: 7.1[1] ";
        extension "FailCause: Invalid Success (200 OK) received OR No Success (200 OK) received";
      } // end testcase SIP_MG_RR_I_001
      testcase SIP_MG_RR_I_002(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT on receipt of a REGISTER request including ttl
      // parameter in the From and To headers ignores them and sends a Success (200 OK)
      // response.
      {
        var Response vl_Response;
        var SemicolonParam_List vl_params;
        var integer i;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRR());
        
        setHeadersForRegister(loc_CSeq_s);
        
        v_From.fromParams := {
          {
            "ttl",
            "0"
          }
        };
        v_To.toParams := {
          {
            "ttl",
            "0"
          }
        };
        
        SIPP.send (
          REGISTER_Request_s_1(
            v_RequestUri,
            v_CallIdReg,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via)) to v_sent_label;
        
        awaitingRegisterOkResponse(
          REGISTER_Request_s_1(
            v_RequestUri,
            v_CallIdReg,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via),
          v_CallIdReg,
          loc_CSeq_s,
          vl_Response);
        removeRegistration(loc_CSeq_s);
      }
      with {
        extension "Preconditions: IUT is a proxy or a redirect server entity";
        extension "Description: Ensure that the IUT on receipt of a REGISTER request including ttl  parameter in the From and To headers ignores them and sends a Success (200 OK)  response.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid Success (200 OK) received OR No Success (200 OK) received";
      } // end testcase SIP_MG_RR_I_002
      testcase SIP_MG_RR_I_003(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT on receipt of a REGISTER request including header
      // parameters in the SIP-URI of the From and To headers ignores them and sends
      // a Success (200 OK) response.
      {
        var Response vl_Response;
        var SemicolonParam_List vl_params;
        var integer i;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRR());
        
        setHeadersForRegister(loc_CSeq_s);
        if (ischosen (v_From.addressField.nameAddr)) {
          if (ispresent (v_From
              .addressField
              .nameAddr
              .addrSpec
              .headers)) {
            vl_params :=
            valueof(
              v_From
              .addressField
              .nameAddr
              .addrSpec
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          v_From.addressField.nameAddr.addrSpec.headers :=
          vl_params
        } else {
          if (ispresent (v_From
              .addressField
              .addrSpecUnion
              .headers)) {
            vl_params :=
            valueof(
              v_From.addressField.addrSpecUnion.headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          v_From.addressField.addrSpecUnion.headers := vl_params
        };
        
        if (ischosen (v_To.addressField.nameAddr)) {
          if (ispresent (v_To
              .addressField
              .nameAddr
              .addrSpec
              .headers)) {
            vl_params :=
            valueof(
              v_To
              .addressField
              .nameAddr
              .addrSpec
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h2",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h2",
                paramValue := "$"
              }
            }
          };
          v_To.addressField.nameAddr.addrSpec.headers :=
          vl_params
        } else {
          if (ispresent (v_To
              .addressField
              .addrSpecUnion
              .headers)) {
            vl_params :=
            valueof(
              v_To.addressField.addrSpecUnion.headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h2",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h2",
                paramValue := "$"
              }
            }
          };
          v_To.addressField.addrSpecUnion.headers := vl_params
        };
        
        SIPP.send (
          REGISTER_Request_s_1(
            v_RequestUri,
            v_CallIdReg,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via)) to v_sent_label;
        
        awaitingRegisterOkResponse(
          REGISTER_Request_s_1(
            v_RequestUri,
            v_CallIdReg,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via),
          v_CallIdReg,
          loc_CSeq_s,
          vl_Response);
        removeRegistration(loc_CSeq_s);
      }
      with {
        extension "Preconditions: IUT is a proxy or a redirect server entity";
        extension "Description: Ensure that the IUT on receipt of a REGISTER request including header parameters in the SIP-URI of the From and To headers ignores them and sends  a Success (200 OK) response.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid Success (200 OK) received OR No Success (200 OK) received";
      } // end testcase SIP_MG_RR_I_003
      testcase SIP_MG_RR_I_004(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT on receipt of a REGISTER request including method
      //  parameters set to "INVITE" in the SIP-URI of the From and To headers ignores
      // them and sends a Success (200 OK) response.
      {
        var Response vl_Response;
        var SemicolonParam_List vl_params;
        var integer i;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRR());
        
        setHeadersForRegister(loc_CSeq_s);
        if (ischosen (v_From.addressField.nameAddr)) {
          if (ispresent (v_From
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              v_From
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "INVITE"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "INVITE"
              }
            }
          };
          v_From.addressField.nameAddr.addrSpec.urlParameters :=
          vl_params
        } else {
          if (ispresent (v_From
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              v_From
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "INVITE"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "INVITE"
              }
            }
          };
          v_From.addressField.addrSpecUnion.urlParameters :=
          vl_params
        };
        
        if (ischosen (v_To.addressField.nameAddr)) {
          if (ispresent (v_To
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              v_To
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "INVITE"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "INVITE"
              }
            }
          };
          v_To.addressField.nameAddr.addrSpec.urlParameters :=
          vl_params
        } else {
          if (ispresent (v_To
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              v_To
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "INVITE"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "INVITE"
              }
            }
          };
          v_To.addressField.addrSpecUnion.urlParameters :=
          vl_params
        };
        
        SIPP.send (
          REGISTER_Request_s_1(
            v_RequestUri,
            v_CallIdReg,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via)) to v_sent_label;
        
        awaitingRegisterOkResponse(
          REGISTER_Request_s_1(
            v_RequestUri,
            v_CallIdReg,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via),
          v_CallIdReg,
          loc_CSeq_s,
          vl_Response);
        removeRegistration(loc_CSeq_s);
        
      }
      with {
        extension "Preconditions: IUT is a proxy or a redirect server entity";
        extension "Description: Ensure that the IUT on receipt of a REGISTER request including method  parameters set to ""INVITE"" in the SIP-URI of the From and To headers ignores  them and sends a Success (200 OK) response.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid Success (200 OK) received OR No Success (200 OK) received";
      } // end testcase SIP_MG_RR_I_004
      testcase SIP_MG_RR_I_005(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.2 [1],  20 [1], table 2  [1]
      // Purpose : Ensure that the IUT on receipt of a REGISTER request including an
      // Alert-Info header ignores it and sends a Success (200 OK) response
      {
        var Response vl_Response;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRR());
        
        setHeadersForRegister(loc_CSeq_s);
        SIPP.send (
          REGISTER_Request_s_5(
            v_RequestUri,
            v_CallIdReg,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via)) to v_sent_label;
        
        awaitingRegisterOkResponse(
          REGISTER_Request_s_5(
            v_RequestUri,
            v_CallIdReg,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via),
          v_CallIdReg,
          loc_CSeq_s,
          vl_Response);
        removeRegistration(loc_CSeq_s);
        
      }
      with {
        extension "Preconditions: IUT is a proxy or a redirect server entity";
        extension "Description: Ensure that the IUT on receipt of a REGISTER request including an  Alert-Info header ignores it and sends a Success (200 OK) response";
        extension "Reference: 7.3.2 [1],  20 [1], table 2  [1]";
        extension "FailCause: Invalid Success (200 OK) received OR No Success (200 OK) received";
      } // end testcase SIP_MG_RR_I_005
      testcase SIP_MG_RR_I_006(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 21.4.1 [1]
      // Purpose : Ensure that the IUT on receipt of a REGISTER request without CSeq
      // header sends a Bad Request (400 Bad Request) response
      {
        var Response vl_Response;
        
        initPort(mtc, system);
        v_Default := activate (defaultRGRR());
        
        setHeadersForRegister(loc_CSeq_s);
        SIPP.send (
          REGISTER_Request_s_6(
            v_RequestUri,
            v_CallIdReg,
            v_Contact,
            v_From,
            v_To,
            v_Via)) to v_sent_label;
        
        if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
          var CommaParam_List vl_challenge;
          // var charstring vl_Credentials;
          var Credentials vl_Credentials;
          
          var Request vl_Request :=
          valueof(
            REGISTER_Request_s_6(
              v_RequestUri,
              v_CallIdReg,
              v_Contact,
              v_From,
              v_To,
              v_Via));
          
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              Response_401_r_1(
                v_CallId,
              *)) -> value vl_Response {
              TAck.stop;
              // resent the REGISTER message with Authorization header include
              // Extract challenge and calculate credentials for a response.
              if (ischosen (vl_Response
                  .msgHeader
                  .wwwAuthenticate
                  .challenge[0]
                  .digestCln)) {
                vl_challenge :=
                vl_Response
                .msgHeader
                .wwwAuthenticate
                .challenge[0]
                .digestCln;
                vl_Credentials :=
                calculateCredentials(
                  "REGISTER",
                  vl_challenge,
                  PX_RFC2617_USERNAME,
                  PX_RFC2617_PASSWD);
                
              } else {
                log ("No scheme in www-Authenticate header !!");
                setverdict (inconc);
                stop;
              }
              
              vl_Request.msgHeader.authorization.fieldName :=
              AUTHORIZATION_E;
              vl_Request.msgHeader.authorization.body :=
              vl_Credentials;
              
              // Re-send the saved REGISTER with Authorization header
              // included.
              SIPP.send (vl_Request) to v_sent_label;
            }
            [] SIPP.receive (
              Response_407_r_1(
                v_CallId,
              *)) -> value vl_Response {
              TAck.stop;
              // resent the REGISTER message with Proxyauthorization header include
              // Extract challenge and calculate credentials for a response.
              if (ischosen (vl_Response
                  .msgHeader
                  .proxyAuthenticate
                  .challenge[0]
                  .digestCln)) {
                vl_challenge :=
                vl_Response
                .msgHeader
                .proxyAuthenticate
                .challenge[0]
                .digestCln;
                vl_Credentials :=
                calculateCredentials(
                  "REGISTER",
                  vl_challenge,
                  PX_RFC2617_USERNAME,
                  PX_RFC2617_PASSWD);
              } else {
                log ("No scheme in Proxy Authenticate header!!");
                setverdict (inconc);
                stop;
              }
              
              vl_Request
              .msgHeader
              .proxyAuthorization
              .fieldName :=
              PROXY_AUTHORIZATION_E;
              vl_Request
              .msgHeader
              .proxyAuthorization
              .credentials :=
              vl_Credentials;
              
              // Re-send the saved REGISTER with Authorization header
              // included.
              SIPP.send (vl_Request) to v_sent_label;
            }
            [(not (PC_STATELESS))
              and mandatory] SIPP.receive (
              Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive (
              Response_200_r_1(v_CallId, loc_CSeq_s)) {
              TAck.stop;
              log ("Authorization was not requested as expected");
              setverdict (inconc);
              stop
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (inconc);
              stop
            }
            [] TAck.timeout {
              setverdict (inconc);
              stop
            }
          }
        };
        
        TAck.start (PX_TACK);
        alt {
          [] SIPP.receive (
            Response_400_r_3(v_CallIdReg, loc_CSeq_s)) {
            TAck.stop;
            setverdict (pass);
          }
          [] SIPP.receive {
            all timer.stop;
            setverdict (fail);
            stop
          }
          [] TAck.timeout {
            setverdict (fail);
            stop
          }
        }
        removeRegistration(loc_CSeq_s);
        
      }
      with {
        extension "Preconditions: IUT is a proxy or a redirect server entity";
        extension "Description: Ensure that the IUT on receipt of a REGISTER request without CSeq  header sends a Bad Request (400 Bad Request) response";
        extension "Reference: 21.4.1 [1] ";
        extension "FailCause: Invalid Bad Request (400 Bad Request) received OR No Bad Request (400 Bad Request) received";
      } // end testcase SIP_MG_RR_I_006
    } // end group InvalidBehaviour
  } // end group Registrar
  group OriginatingEndpoint {
    // Group Selection: IUT can behave as User Agent client.
    //
    group ValidBehaviour {
      testcase SIP_MG_OE_V_001(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, when an INVITE client transaction is in the
      // Calling state, on receipt of a Success (200 OK) response including
      // non-understood uri-parameters in SIP-URI of the From header, ignores it and
      // sends an ACK request.
      //
      {
        var integer i;
        var SemicolonParam_List vl_params;
        
        initPort(mtc, system); // Init test Configuration
        v_Default := activate (defaultCCOE());
        uACallingState(); // SIP preamble
        if (ischosen (v_From.addressField.nameAddr)) {
          if (ispresent (v_From
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              v_From
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "paramUnknown",
              paramValue := "nonunderstood"
            }
          } else {
            vl_params := {
              {
                id := "paramUnknown",
                paramValue := "nonunderstood"
              }
            }
          };
          v_From.addressField.nameAddr.addrSpec.urlParameters :=
          vl_params
        } else {
          if (ispresent (v_From
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              v_From
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "paramUnknown",
              paramValue := "nonunderstood"
            }
          } else {
            vl_params := {
              {
                id := "paramUnknown",
                paramValue := "nonunderstood"
              }
            }
          };
          v_From.addressField.addrSpecUnion.urlParameters :=
          vl_params
        };
        
        send200OKInviteParam();
        
        awaiting200OKAckRequest(loc_CSeq_s);
        terminateCall(
          v_CallId,
          v_CSeq,
          v_callee_From,
          v_callee_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, when an INVITE client transaction is in the  Calling state, on receipt of a Success (200 OK) response including  non-understood uri-parameters in SIP-URI of the From header, ignores it and sends an ACK request. ";
        extension "Reference: 19.1.1 [1]";
        extension "FailCause: Invalid Ack_Request received OR No Ack_Request received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_OE_V_001
      testcase SIP_MG_OE_V_002(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, when an INVITE client transaction is in the
      // Calling state, on receipt of a Success (200 OK) response including header
      // parameters in the SIP-URI of the Contact header, sends an ACK request.
      {
        var ContactAddress vl_ContactAddress;
        var SemicolonParam_List vl_params;
        var integer i;
        
        initPort(mtc, system); // Init test Configuration
        v_Default := activate (defaultCCOE());
        uACallingState2(); // SIP preamble
        vl_ContactAddress :=
        v_Contact.contactBody.contactAddresses[0];
        if (ischosen (vl_ContactAddress.addressField.nameAddr)) {
          if (ispresent (vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .headers)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          vl_ContactAddress.addressField.nameAddr.addrSpec.headers :=
          vl_params
        } else {
          if (ispresent (vl_ContactAddress
              .addressField
              .addrSpecUnion
              .headers)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .addrSpecUnion
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          vl_ContactAddress.addressField.addrSpecUnion.headers :=
          vl_params
        }
        
        v_Contact.contactBody.contactAddresses[0] :=
        vl_ContactAddress;
        
        send200OKInviteContact();
        
        awaiting200OKAckRequest(loc_CSeq_s);
        terminateCall(
          v_CallId,
          v_CSeq,
          v_callee_From,
          v_callee_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, when an INVITE client transaction is in the  Calling state, on receipt of a Success (200 OK) response including header  parameters in the SIP-URI of the Contact header, sends an ACK request.";
        extension "Reference: 19.1.1 [1]";
        extension "FailCause: Invalid Ack_Request received OR No Ack_Request received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_OE_V_002
      testcase SIP_MG_OE_V_003(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.2 [1]
      // Purpose : Ensure that the IUT, when an INVITE client transaction is in the
      // Calling state, on receipt of a Success (299 OK) response with non-defined
      // last two digits, sends an ACK request.
      {
        initPort(mtc, system); // Init test Configuration
        v_Default := activate (defaultCCOE());
        uACallingState(); // SIP preamble
        if (v_BOO_RecordRoute) {
          SIPP.send (
            Response_2XX_Invite_WithRoute_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via,
              v_RecordRoute,
              299,
              "OK")) to v_sent_label;
        } else {
          SIPP.send (
            Response_2XX_Invite_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via,
              299,
              "OK")) to v_sent_label;
        };
        
        awaiting200OKAckRequest(loc_CSeq_s);
        terminateCall(
          v_CallId,
          v_CSeq,
          v_callee_From,
          v_callee_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, when an INVITE client transaction is in the  Calling state, on receipt of a Success (299 OK) response with non-defined  last two digits, sends an ACK request.";
        extension "Reference: 7.2 [1]";
        extension "FailCause: Invalid Ack_Request received OR No Ack_Request received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_OE_V_003
      testcase SIP_MG_OE_V_004(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.2 [1]
      // Purpose : Ensure that the IUT, when an INVITE client transaction is in the
      // Calling state, on receipt of a Success (200 PERFECT) response with an
      // unknown reason phrase, sends an ACK request.
      {
        initPort(mtc, system); // Init test Configuration
        v_Default := activate (defaultCCOE());
        uACallingState(); // SIP preamble
        if (v_BOO_RecordRoute) {
          SIPP.send (
            Response_2XX_Invite_WithRoute_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via,
              v_RecordRoute,
              200,
              "PERFECT")) to v_sent_label;
        } else {
          SIPP.send (
            Response_2XX_Invite_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via,
              200,
              "PERFECT")) to v_sent_label;
        };
        
        awaiting200OKAckRequest(loc_CSeq_s);
        terminateCall(
          v_CallId,
          v_CSeq,
          v_callee_From,
          v_callee_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, when an INVITE client transaction is in the  Calling state, on receipt of a Success (200 PERFECT) response with an  unknown reason phrase, sends an ACK request.";
        extension "Reference: 7.2 [1]";
        extension "FailCause: Invalid Ack_Request received OR No Ack_Request received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_OE_V_004
      testcase SIP_MG_OE_V_005(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1]
      // Purpose : Ensure that the IUT, when an INVITE client transaction is in the
      // Calling state, on receipt of a Success (200 OK) response including headers
      // named with upper and lower cases, sends an ACK request.
      {
        initPort(mtc, system); // Init test Configuration
        v_Default := activate (defaultCCOE());
        uACallingState2();
        // SIP preamble
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CallId[1] := "A";
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_CSeq[2] := "E";
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_From[1] := "R";
        v_Raw_From[2] := "O";
        v_Raw_From[3] := "M";
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Via[2] := "A";
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        
        if (v_BOO_RecordRoute) {
          v_Raw_RecordRoute := buildRaw_RecordRoute(v_RecordRoute);
          SIPP.send (
            Raw_Response_Invite_200_WithRoute_s_1(
              v_Raw_CallId,
              v_Raw_CSeq,
              v_Raw_From,
              v_Raw_To,
              v_Raw_Via,
              v_Raw_Contact,
              v_Raw_RecordRoute)) to v_sent_label;
        } else {
          SIPP.send (
            Raw_Response_Invite_200_s_1(
              v_Raw_CallId,
              v_Raw_CSeq,
              v_Raw_From,
              v_Raw_To,
              v_Raw_Via,
              v_Raw_Contact)) to v_sent_label;
        };
        
        awaiting200OKAckRequest(loc_CSeq_s);
        terminateCall(
          v_CallId,
          v_CSeq,
          v_callee_From,
          v_callee_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, when an INVITE client transaction is in the  Calling state, on receipt of a Success (200 OK) response including headers  named with upper and lower cases, sends an ACK request.";
        extension "Reference: 7.3.1 [1]";
        extension "FailCause: Invalid Ack_Request received OR No Ack_Request received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_OE_V_005
      testcase SIP_MG_OE_V_006(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1]
      // Purpose : Ensure that the IUT, when an INVITE client transaction is in the
      // Calling state, on receipt of a Success (200 OK) response including headers
      // set with values preceded by several leading white space and properly
      // extended over multiple lines, sends an ACK request.;
      {
        initPort(mtc, system); // Init test Configuration
        v_Default := activate (defaultCCOE());
        uACallingState2();
        // SIP preamble
        // raw headers are built
        v_white_space := true;
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_white_space := false;
        
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        
        if (v_BOO_RecordRoute) {
          v_Raw_RecordRoute := buildRaw_RecordRoute(v_RecordRoute);
          SIPP.send (
            Raw_Response_Invite_200_WithRoute_s_1(
              v_Raw_CallId,
              v_Raw_CSeq,
              v_Raw_From,
              v_Raw_To,
              v_Raw_Via,
              v_Raw_Contact,
              v_Raw_RecordRoute)) to v_sent_label;
        } else {
          SIPP.send (
            Raw_Response_Invite_200_s_1(
              v_Raw_CallId,
              v_Raw_CSeq,
              v_Raw_From,
              v_Raw_To,
              v_Raw_Via,
              v_Raw_Contact)) to v_sent_label;
        };
        
        awaiting200OKAckRequest(loc_CSeq_s);
        terminateCall(
          v_CallId,
          v_CSeq,
          v_callee_From,
          v_callee_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, when an INVITE client transaction is in the  Calling state, on receipt of a Success (200 OK) response including headers  set with values preceded by several leading white space and properly  extended over multiple lines, sends an ACK request.";
        extension "Reference: 7.3.1 [1]";
        extension "FailCause: Invalid Ack_Request received OR No Ack_Request received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_OE_V_006
      testcase SIP_MG_OE_V_007(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1]
      // Purpose :     Ensure that the IUT, when an INVITE client transaction is in the
      // Calling state, on receipt of a Success (200 OK) response including a headers set
      // with short names, sends an ACK request.
      {
        var integer i := 0;
        var integer j,
        vl_str_len;
        var charstring vl_Raw_CallId := "";
        var charstring vl_Raw_From := "";
        var charstring vl_Raw_To := "";
        var charstring vl_Raw_Via := "";
        var charstring vl_Raw_Contact := "";
        
        initPort(mtc, system); // Init test Configuration
        v_Default := activate (defaultCCOE());
        uACallingState();
        // SIP preamble
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        vl_str_len := lengthof (v_Raw_CallId);
        vl_Raw_CallId[0] := "i";
        i := 1;
        for (j := 7; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_CallId[i] := v_Raw_CallId[j];
          i := i + 1;
        }
        
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        vl_str_len := lengthof (v_Raw_From);
        vl_Raw_From[0] := "f";
        i := 1;
        for (j := 4; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_From[i] := v_Raw_From[j];
          i := i + 1;
        }
        
        v_Raw_To := buildRaw_ToHeader(v_To);
        vl_str_len := lengthof (v_Raw_To);
        vl_Raw_To[0] := "t";
        i := 1;
        for (j := 2; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_To[i] := v_Raw_To[j];
          i := i + 1;
        }
        
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        vl_str_len := lengthof (v_Raw_Via);
        vl_Raw_Via[0] := "v";
        i := 1;
        for (j := 3; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_Via[i] := v_Raw_Via[j];
          i := i + 1;
        }
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        vl_str_len := lengthof (v_Raw_Contact);
        vl_Raw_Contact[0] := "m";
        i := 1;
        for (j := 7; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_Contact[i] := v_Raw_Contact[j];
          i := i + 1;
        }
        
        if (v_BOO_RecordRoute) {
          v_Raw_RecordRoute := buildRaw_RecordRoute(v_RecordRoute);
          SIPP.send (
            Raw_Response_Invite_200_WithRoute_s_1(
              vl_Raw_CallId,
              v_Raw_CSeq,
              vl_Raw_From,
              vl_Raw_To,
              vl_Raw_Via,
              vl_Raw_Contact,
              v_Raw_RecordRoute)) to v_sent_label;
        } else {
          SIPP.send (
            Raw_Response_Invite_200_s_1(
              vl_Raw_CallId,
              v_Raw_CSeq,
              vl_Raw_From,
              vl_Raw_To,
              vl_Raw_Via,
              vl_Raw_Contact)) to v_sent_label;
        };
        
        awaiting200OKAckRequest(loc_CSeq_s);
        terminateCall(
          v_CallId,
          v_CSeq,
          v_callee_From,
          v_callee_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description:     Ensure that the IUT, when an INVITE client transaction is in the  Calling state, on receipt of a Success (200 OK) response including a headers set  with short names, sends an ACK request.";
        extension "Reference: 7.3.1 [1] ";
        extension "FailCause: Invalid Ack_Request received OR No Ack_Request received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_OE_V_007
      testcase SIP_MG_OE_V_008(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1  [1]
      // Purpose : Ensure that the IUT, once a dialog has been established, on receipt
      // of a BYE request including escaped characters in the SIP-URI of the From
      // header, sends a Success (200 OK) response.
      {
        v_Default := activate (defaultCCOE());
        initPort(mtc, system); // Init test Configuration
        uACCallEstablished(v_CSeq); // SIP preamble
        v_To := v_callee_To;
        setHeadersForBYE(v_CSeq);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_From := v_callee_From;
        if (ischosen (v_From.addressField.nameAddr)) {
          v_From
          .addressField
          .nameAddr
          .addrSpec
          .userInfo
          .userOrTelephoneSubscriber :=
          encodeEscapeDelim(
            v_From
            .addressField
            .nameAddr
            .addrSpec
            .userInfo
            .userOrTelephoneSubscriber);
        } else {
          v_From
          .addressField
          .addrSpecUnion
          .userInfo
          .userOrTelephoneSubscriber :=
          encodeEscapeDelim(
            v_From
            .addressField
            .addrSpecUnion
            .userInfo
            .userOrTelephoneSubscriber);
        }
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Route := buildRaw_Route(v_Route);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        
        SIPP.send (
          Raw_BYE_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            v_Raw_Route)) to v_sent_label;
        
        awaitingOkResponse(v_CSeq);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, once a dialog has been established, on receipt  of a BYE request including escaped characters in the SIP-URI of the From  header, sends a Success (200 OK) response.";
        extension "Reference: 19.1.1 [1]";
        extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Ack_Request (Invite) received OR  No Ack_Request (Invite) received ";
      } // end testcase SIP_MG_OE_V_008
      testcase SIP_MG_OE_V_009(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1  [1]
      // Purpose : Ensure that the IUT, once a dialog has been established, on receipt
      // of a BYE request including escaped delimiters in the SIP-URI of the From
      // header, sends a Success (200 OK) response.
      {
        v_Default := activate (defaultCCOE());
        initPort(mtc, system); // Init test Configuration
        uACCallEstablished(v_CSeq); // SIP preamble
        v_To := v_callee_To;
        setHeadersForBYE(v_CSeq);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From :=
        buildRaw_EscapedDelimiters_FromHeader(v_callee_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Route := buildRaw_Route(v_Route);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        
        SIPP.send (
          Raw_BYE_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            v_Raw_Route)) to v_sent_label;
        
        awaitingOkResponse(v_CSeq);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, once a dialog has been established, on receipt  of a BYE request including escaped delimiters in the SIP-URI of the From  header, sends a Success (200 OK) response.";
        extension "Reference: 19.1.1  [1] ";
        extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Ack_Request (Invite) received OR  No Ack_Request (Invite) received ";
      } // end testcase SIP_MG_OE_V_009
      testcase SIP_MG_OE_V_010(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, once a dialog has been established, on receipt
      // of a BYE request including non-understood uri-parameters in the SIP-URI of
      // the BYE Request-URI, sends a Success (200 OK) response.
      {
        var integer i;
        var SemicolonParam_List vl_params;
        
        v_Default := activate (defaultCCOE());
        initPort(mtc, system); // Init test Configuration
        uACCallEstablished(v_CSeq); // SIP preamble
        v_To := v_callee_To;
        setHeadersForBYE(v_CSeq);
        
        v_RequestUri.urlParameters := {
          {
            "paramUnknown",
            "nonunderstood"
          }
        }
        
        if (v_BOO_Route) {
          SIPP.send (
            BYE_Request_WithRoute_s_5(
              v_RequestUri,
              v_CallId,
              v_CSeq,
              v_callee_From,
              v_To,
              v_Via,
              v_Route)) to v_sent_label;
        } else {
          SIPP.send (
            BYE_Request_s_5(
              v_RequestUri,
              v_CallId,
              v_CSeq,
              v_callee_From,
              v_To,
              v_Via)) to v_sent_label;
        }
        
        awaitingOkResponse(v_CSeq);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, once a dialog has been established, on receipt  of a BYE request including non-understood uri-parameters in the SIP-URI of  the BYE Request-URI, sends a Success (200 OK) response.";
        extension "Reference: 19.1.1 [1]";
        extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Ack_Request (Invite) received OR  No Ack_Request (Invite) received ";
      } // end testcase SIP_MG_OE_V_010
      testcase SIP_MG_OE_V_011(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 8.2.2  [1]
      // Purpose : Ensure that the IUT, once a dialog has been established, on receipt
      // of a BYE request including an unknown header, ignores it and
      //  sends a Success (200 OK) response.
      {
        v_Default := activate (defaultCCOE());
        initPort(mtc, system); // Init test Configuration
        uACCallEstablished(v_CSeq); // SIP preamble
        v_To := v_callee_To;
        setHeadersForBYE(v_CSeq);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_callee_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Via := v_Raw_Via & CRLF & "UnknownHead: 0";
        v_Raw_Route := buildRaw_Route(v_Route);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        
        SIPP.send (
          Raw_BYE_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            v_Raw_Route)) to v_sent_label;
        
        awaitingOkResponse(v_CSeq);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, once a dialog has been established, on receipt  of a BYE request including an unknown header, ignores it and  sends a Success (200 OK) response.";
        extension "Reference: 8.2.2  [1] ";
        extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Ack_Request (Invite) received OR  No Ack_Request (Invite) received ";
      } // end testcase SIP_MG_OE_V_011
      testcase SIP_MG_OE_V_012(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1]
      // Purpose : Ensure that the IUT, once a dialog has been established, on receipt
      // of a BYE request including headers named with upper and
      // lower cases sends a Success (200 OK) response.
      {
        v_Default := activate (defaultCCOE());
        initPort(mtc, system); // Init test Configuration
        uACCallEstablished(v_CSeq); // SIP preamble
        v_To := v_callee_To;
        setHeadersForBYE(v_CSeq);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CallId[1] := "A";
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_CSeq[2] := "E";
        v_Raw_From := buildRaw_FromHeader(v_callee_From);
        v_Raw_From[1] := "R";
        v_Raw_From[2] := "O";
        v_Raw_From[3] := "M";
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Via[2] := "A";
        
        v_Raw_Route := buildRaw_Route(v_Route);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        
        SIPP.send (
          Raw_BYE_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            v_Raw_Route)) to v_sent_label;
        
        awaitingOkResponse(v_CSeq);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, once a dialog has been established, on receipt of a BYE request including headers named with upper and  lower cases sends a Success (200 OK) response.";
        extension "Reference: 7.3.1 [1] ";
        extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Ack_Request (Invite) received OR  No Ack_Request (Invite) received ";
      } // end testcase SIP_MG_OE_V_012
      testcase SIP_MG_OE_V_013(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1]
      // Purpose : Ensure that the IUT, once a dialog has been established,
      // on receipt of a BYE request including headers set with values preceded
      //  by several leading white space and properly extended over multiple lines,
      // sends a Success (200 OK) response.
      {
        v_Default := activate (defaultCCOE());
        initPort(mtc, system); // Init test Configuration
        uACCallEstablished(v_CSeq); // SIP preamble
        v_To := v_callee_To;
        setHeadersForBYE(v_CSeq);
        
        // raw headers are built
        v_white_space := true;
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_callee_From);
        v_white_space := false;
        
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Route := buildRaw_Route(v_Route);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        
        SIPP.send (
          Raw_BYE_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            v_Raw_Route)) to v_sent_label;
        
        awaitingOkResponse(v_CSeq);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, once a dialog has been established,  on receipt of a BYE request including headers set with values preceded  by several leading white space and properly extended over multiple lines,  sends a Success (200 OK) response.";
        extension "Reference: 7.3.1 [1] ";
        extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Ack_Request (Invite) received OR  No Ack_Request (Invite) received ";
      } // end testcase SIP_MG_OE_V_013
      testcase SIP_MG_OE_V_014(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.3[1] [1]
      // Purpose : Ensure that the IUT, once a dialog has been established,
      // on receipt of a BYE request including headers set with short names,
      //  sends a Success (200 OK) response.
      {
        var integer i := 0;
        var integer j,
        vl_str_len;
        var charstring vl_Raw_CallId := "";
        var charstring vl_Raw_From := "";
        var charstring vl_Raw_To := "";
        var charstring vl_Raw_Via := "";
        
        v_Default := activate (defaultCCOE());
        initPort(mtc, system); // Init test Configuration
        uACCallEstablished(v_CSeq); // SIP preamble
        v_To := v_callee_To;
        setHeadersForBYE(v_CSeq);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        vl_str_len := lengthof (v_Raw_CallId);
        vl_Raw_CallId[0] := "i";
        i := 1;
        for (j := 7; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_CallId[i] := v_Raw_CallId[j];
          i := i + 1;
        }
        
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_callee_From);
        vl_str_len := lengthof (v_Raw_From);
        vl_Raw_From[0] := "f";
        i := 1;
        for (j := 4; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_From[i] := v_Raw_From[j];
          i := i + 1;
        }
        
        v_Raw_To := buildRaw_ToHeader(v_To);
        vl_str_len := lengthof (v_Raw_To);
        vl_Raw_To[0] := "t";
        i := 1;
        for (j := 2; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_To[i] := v_Raw_To[j];
          i := i + 1;
        }
        
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        vl_str_len := lengthof (v_Raw_Via);
        vl_Raw_Via[0] := "v";
        i := 1;
        for (j := 3; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_Via[i] := v_Raw_Via[j];
          i := i + 1;
        }
        v_Raw_Route := buildRaw_Route(v_Route);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        
        SIPP.send (
          Raw_BYE_Request_s_1(
            v_Raw_RequestUri,
            vl_Raw_CallId,
            v_Raw_CSeq,
            vl_Raw_From,
            vl_Raw_To,
            vl_Raw_Via,
            v_Raw_Route)) to v_sent_label;
        
        awaitingOkResponse(v_CSeq);
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, once a dialog has been established,  on receipt of a BYE request including headers set with short names,  sends a Success (200 OK) response.";
        extension "Reference: 7.3.3[1] [1] ";
        extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Ack_Request (Invite) received OR  No Ack_Request (Invite) received ";
      } // end testcase SIP_MG_OE_V_014
      testcase SIP_MG_OE_V_015(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 18.1.1 [1]
      // Purpose : Ensure that the IUT, once a dialog has been established,
      // on receipt of a 65.535 bytes long Success (200 OK) response including
      //  session description parameters that it can accept, transported by UDP,
      // sends an ACK request.
      {
        initPort(mtc, system); // Init test Configuration
        v_Default := activate (defaultCCOE());
        uACallingState(); // SIP preamble
        if (v_BOO_RecordRoute) {
          SIPP.send (
            Response_200_Invite_s_3(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via,
              px_sdpBody_65535,
              v_RecordRoute)) to v_sent_label;
        } else {
          SIPP.send (
            Response_200_Invite_s_3a(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via,
              px_sdpBody_65535)) to v_sent_label;
        }
        
        awaiting200OKAckRequest(v_CSeq);
        terminateCall(
          v_CallId,
          v_CSeq,
          v_callee_From,
          v_callee_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, once a dialog has been established,  on receipt of a 65.535 bytes long Success (200 OK) response including  session description parameters that it can accept, transported by UDP, sends an ACK request.";
        extension "Reference: 18.1.1 [1] ";
        extension "FailCause: Invalid Ack_Request received OR No Ack_Request received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_OE_V_015
    } // end group ValidBehaviour
    group InvalidBehaviour {
      testcase SIP_MG_OE_I_001(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, when an INVITE client transaction is in the
      // Calling state, on receipt of a Success (200 OK) response including transport
      // parameters in the From and To headers, ignores them and sends an ACK request.
      {
        var integer i;
        var SemicolonParam_List vl_params;
        
        initPort(mtc, system); // Init test Configuration
        v_Default := activate (defaultCCOE());
        uACallingState(); // SIP preamble
        v_From.fromParams := {
          {
            "transport",
            "tcp"
          }
        };
        v_To.toParams := {
          {
            "transport",
            "tcp"
          }
        };
        
        send200OKInviteParam();
        
        awaiting200OKAckRequest(v_CSeq);
        terminateCall(
          v_CallId,
          v_CSeq,
          v_callee_From,
          v_callee_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, when an INVITE client transaction is in the  Calling state, on receipt of a Success (200 OK) response including transport  parameters in the From and To headers, ignores them and sends an ACK request.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid Ack_Request received OR No Ack_Request received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_OE_I_001
      testcase SIP_MG_OE_I_002(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, when an INVITE client transaction is in the
      // Calling state, on receipt of a Success (200 OK) response with a ttl parameter
      // in the From and To headers, ignores them and sends an ACK request.
      {
        var integer i;
        var SemicolonParam_List vl_params;
        
        initPort(mtc, system); // Init test Configuration
        v_Default := activate (defaultCCOE());
        uACallingState(); // SIP preamble
        v_From.fromParams := {
          {
            "ttl",
            "0"
          }
        };
        v_To.toParams := {
          {
            "ttl",
            "0"
          }
        };
        
        send200OKInviteParam();
        
        awaiting200OKAckRequest(v_CSeq);
        terminateCall(
          v_CallId,
          v_CSeq,
          v_callee_From,
          v_callee_To,
          v_reqHostPort,
          v_Route);
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, when an INVITE client transaction is in the  Calling state, on receipt of a Success (200 OK) response with a ttl parameter  in the From and To headers, ignores them and sends an ACK request.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid Ack_Request received OR No Ack_Request received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_OE_I_002
      testcase SIP_MG_OE_I_003(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, when an INVITE client transaction is in the
      // Calling state, on receipt of a Success (200 OK) response with an URI including
      // a header parameter in the To and From headers ignores them and sends an ACK request.
      {
        var SemicolonParam_List vl_params;
        var integer i;
        
        initPort(mtc, system); // Init test Configuration
        v_Default := activate (defaultCCOE());
        uACallingState(); // SIP preamble
        if (ischosen (v_From.addressField.nameAddr)) {
          if (ispresent (v_From
              .addressField
              .nameAddr
              .addrSpec
              .headers)) {
            vl_params :=
            valueof(
              v_From
              .addressField
              .nameAddr
              .addrSpec
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          v_From.addressField.nameAddr.addrSpec.headers :=
          vl_params
        } else {
          if (ispresent (v_From
              .addressField
              .addrSpecUnion
              .headers)) {
            vl_params :=
            valueof(
              v_From.addressField.addrSpecUnion.headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          v_From.addressField.addrSpecUnion.headers := vl_params
        };
        
        if (ischosen (v_To.addressField.nameAddr)) {
          if (ispresent (v_To
              .addressField
              .nameAddr
              .addrSpec
              .headers)) {
            vl_params :=
            valueof(
              v_To
              .addressField
              .nameAddr
              .addrSpec
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h2",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h2",
                paramValue := "$"
              }
            }
          };
          v_To.addressField.nameAddr.addrSpec.headers :=
          vl_params
        } else {
          if (ispresent (v_To
              .addressField
              .addrSpecUnion
              .headers)) {
            vl_params :=
            valueof(
              v_To.addressField.addrSpecUnion.headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h2",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h2",
                paramValue := "$"
              }
            }
          };
          v_To.addressField.addrSpecUnion.headers := vl_params
        };
        
        send200OKInviteParam();
        
        awaiting200OKAckRequest(v_CSeq);
        terminateCall(
          v_CallId,
          v_CSeq,
          v_callee_From,
          v_callee_To,
          v_reqHostPort,
          v_Route);
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, when an INVITE client transaction is in the  Calling state, on receipt of a Success (200 OK) response with an URI including  a header parameter in the To and From headers ignores them and sends an ACK request.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid Ack_Request received OR No Ack_Request received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_OE_I_003
      testcase SIP_MG_OE_I_004(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, when an INVITE client transaction is in the
      // Calling state, on receipt of a Success (200 OK) response with a method
      // parameter in  the To and From headers ignores them and sends an ACK request.
      {
        var integer i;
        var SemicolonParam_List vl_params;
        
        initPort(mtc, system); // Init test Configuration
        v_Default := activate (defaultCCOE());
        uACallingState(); // SIP preamble
        if (ischosen (v_From.addressField.nameAddr)) {
          if (ispresent (v_From
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              v_From
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "REGISTER"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "REGISTER"
              }
            }
          };
          v_From.addressField.nameAddr.addrSpec.urlParameters :=
          vl_params
        } else {
          if (ispresent (v_From
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              v_From
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "REGISTER"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "REGISTER"
              }
            }
          };
          v_From.addressField.addrSpecUnion.urlParameters :=
          vl_params
        };
        
        if (ischosen (v_To.addressField.nameAddr)) {
          if (ispresent (v_To
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              v_To
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "INVITE"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "INVITE"
              }
            }
          };
          v_To.addressField.nameAddr.addrSpec.urlParameters :=
          vl_params
        } else {
          if (ispresent (v_To
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              v_To
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "INVITE"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "INVITE"
              }
            }
          };
          v_To.addressField.addrSpecUnion.urlParameters :=
          vl_params
        };
        
        send200OKInviteParam();
        
        awaiting200OKAckRequest(v_CSeq);
        terminateCall(
          v_CallId,
          v_CSeq,
          v_callee_From,
          v_callee_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, when an INVITE client transaction is in the  Calling state, on receipt of a Success (200 OK) response with a method  parameter in  the To and From headers ignores them and sends an ACK request.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid Ack_Request received OR No Ack_Request received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_OE_I_004
      testcase SIP_MG_OE_I_005(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, once a dialog has been established,
      //  on receipt of a BYE request including maddr parameters in
      // the From and To headers ignores them and sends a Success (200 OK)
      // response without maddr parameter.
      {
        var integer i;
        var SemicolonParam_List vl_params;
        var charstring vl_id;
        var charstring vl_paramValue;
        
        v_Default := activate (defaultCCOE());
        initPort(mtc, system); // Init test Configuration
        uACCallEstablished(loc_CSeq_s); // SIP preamble
        v_To := v_callee_To;
        v_From := v_callee_From;
        setHeadersForBYE(v_CSeq);
        
        if (ispresent (v_From.fromParams[0].id)) {
          vl_id := valueof(v_From.fromParams[0].id);
          vl_paramValue := valueof(v_From.fromParams[0].paramValue);
          v_From.fromParams := {
            {
              vl_id,
              vl_paramValue
            },
            
            {
              "maddr",
              "192.0.0.1"
            }
          };
        } else {
          v_From.fromParams := {
            {
              "maddr",
              "192.0.0.1"
            }
          };
        }
        
        if (ispresent (v_To.toParams[0].id)) {
          vl_id := v_To.toParams[0].id;
          vl_paramValue := v_To.toParams[0].paramValue;
          
          v_To.toParams := {
            {
              vl_id,
              vl_paramValue
            },
            
            {
              "maddr",
              "192.0.0.2"
            }
          };
        } else {
          v_To.toParams := {
            {
              "maddr",
              "192.0.0.2"
            }
          };
        }
        if (v_BOO_Route) {
          SIPP.send (
            BYE_Request_WithRoute_s_5(
              v_RequestUri,
              v_CallId,
              v_CSeq,
              v_From,
              v_To,
              v_Via,
              v_Route)) to v_sent_label;
        } else {
          SIPP.send (
            BYE_Request_s_5(
              v_RequestUri,
              v_CallId,
              v_CSeq,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
        }
        
        awaitingOkResponse3(v_CSeq);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, once a dialog has been established,   on receipt of a BYE request including maddr parameters in  the From and To headers ignores them and sends a Success (200 OK)  response without maddr parameter.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Ack_Request (Invite) received OR  No Ack_Request (Invite) received ";
      } // end testcase SIP_MG_OE_I_005
      testcase SIP_MG_OE_I_006(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, once a dialog has been established,
      // on receipt of a BYE request including header parameters in the SIP-URI
      // of the From and To headers ignores them and sends a Success (200 OK) response
      {
        var SemicolonParam_List vl_params;
        var integer i;
        
        v_Default := activate (defaultCCOE());
        initPort(mtc, system); // Init test Configuration
        uACCallEstablished(v_CSeq); // SIP preamble
        v_To := v_callee_To;
        setHeadersForBYE(v_CSeq);
        
        if (ischosen (v_callee_From.addressField.nameAddr)) {
          if (ispresent (v_callee_From
              .addressField
              .nameAddr
              .addrSpec
              .headers)) {
            vl_params :=
            valueof(
              v_callee_From
              .addressField
              .nameAddr
              .addrSpec
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          v_callee_From.addressField.nameAddr.addrSpec.headers :=
          vl_params
        } else {
          if (ispresent (v_callee_From
              .addressField
              .addrSpecUnion
              .headers)) {
            vl_params :=
            valueof(
              v_callee_From
              .addressField
              .addrSpecUnion
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          v_callee_From.addressField.addrSpecUnion.headers :=
          vl_params
        };
        
        if (ischosen (v_To.addressField.nameAddr)) {
          if (ispresent (v_To
              .addressField
              .nameAddr
              .addrSpec
              .headers)) {
            vl_params :=
            valueof(
              v_To
              .addressField
              .nameAddr
              .addrSpec
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h2",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h2",
                paramValue := "$"
              }
            }
          };
          v_To.addressField.nameAddr.addrSpec.headers :=
          vl_params
        } else {
          if (ispresent (v_To
              .addressField
              .addrSpecUnion
              .headers)) {
            vl_params :=
            valueof(
              v_To.addressField.addrSpecUnion.headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h2",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h2",
                paramValue := "$"
              }
            }
          };
          v_To.addressField.addrSpecUnion.headers := vl_params
        };
        
        if (v_BOO_Route) {
          SIPP.send (
            BYE_Request_WithRoute_s_5(
              v_RequestUri,
              v_CallId,
              v_CSeq,
              v_callee_From,
              v_To,
              v_Via,
              v_Route)) to v_sent_label;
        } else {
          SIPP.send (
            BYE_Request_s_5(
              v_RequestUri,
              v_CallId,
              v_CSeq,
              v_callee_From,
              v_To,
              v_Via)) to v_sent_label;
        }
        
        awaitingOkResponse4(v_CSeq);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, once a dialog has been established,  on receipt of a BYE request including header parameters in the SIP-URI of the From and To headers ignores them and sends a Success (200 OK) response";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Ack_Request (Invite) received OR  No Ack_Request (Invite) received ";
      } // end testcase SIP_MG_OE_I_006
      testcase SIP_MG_OE_I_007(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, once a dialog has been established,
      // on receipt of a BYE request including method parameters set to "CANCEL"
      // parameter in the SIP-URI of the From and To headers ignores them and sends
      // a Success (200 OK) response.
      {
        var integer i;
        var SemicolonParam_List vl_params;
        
        v_Default := activate (defaultCCOE());
        initPort(mtc, system); // Init test Configuration
        uACCallEstablished(v_CSeq); // SIP preamble
        v_To := v_callee_To;
        setHeadersForBYE(v_CSeq);
        
        if (ischosen (v_callee_From.addressField.nameAddr)) {
          if (ispresent (v_callee_From
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              v_callee_From
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "CANCEL"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "CANCEL"
              }
            }
          };
          v_callee_From
          .addressField
          .nameAddr
          .addrSpec
          .urlParameters :=
          vl_params
        } else {
          if (ispresent (v_callee_From
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              v_callee_From
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "CANCEL"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "CANCEL"
              }
            }
          };
          v_callee_From.addressField.addrSpecUnion.urlParameters :=
          vl_params
        };
        
        if (ischosen (v_To.addressField.nameAddr)) {
          if (ispresent (v_To
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              v_To
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "CANCEL"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "CANCEL"
              }
            }
          };
          v_To.addressField.nameAddr.addrSpec.urlParameters :=
          vl_params
        } else {
          if (ispresent (v_To
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              v_To
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "CANCEL"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "CANCEL"
              }
            }
          };
          v_To.addressField.addrSpecUnion.urlParameters :=
          vl_params
        };
        
        if (v_BOO_Route) {
          SIPP.send (
            BYE_Request_WithRoute_s_5(
              v_RequestUri,
              v_CallId,
              v_CSeq,
              v_callee_From,
              v_To,
              v_Via,
              v_Route)) to v_sent_label;
        } else {
          SIPP.send (
            BYE_Request_s_5(
              v_RequestUri,
              v_CallId,
              v_CSeq,
              v_callee_From,
              v_To,
              v_Via)) to v_sent_label;
        }
        
        awaitingOkResponse(v_CSeq);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, once a dialog has been established,  on receipt of a BYE request including method parameters set to ""CANCEL"" parameter in the SIP-URI of the From and To headers ignores them and sends  a Success (200 OK) response.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Ack_Request (Invite) received OR  No Ack_Request (Invite) received ";
      } // end testcase SIP_MG_OE_I_007
      testcase SIP_MG_OE_I_008(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.2 [1], 20 [1], table 2  [1]
      // Purpose : Ensure that the IUT, once a dialog has been established,
      // on receipt of a BYE request including an In-Reply-To header ignores
      //  it and sends a Success (200 OK) response.
      {
        v_Default := activate (defaultCCOE());
        initPort(mtc, system); // Init test Configuration
        uACCallEstablished(v_CSeq); // SIP preamble
        v_To := v_callee_To;
        setHeadersForBYE(v_CSeq);
        
        if (v_BOO_Route) {
          SIPP.send (
            BYE_Request_WithRoute_s_10(
              v_RequestUri,
              v_CallId,
              v_CSeq,
              v_callee_From,
              v_To,
              v_Via,
              v_Route)) to v_sent_label;
        } else {
          SIPP.send (
            BYE_Request_s_10(
              v_RequestUri,
              v_CallId,
              v_CSeq,
              v_callee_From,
              v_To,
              v_Via)) to v_sent_label;
        }
        
        awaitingOkResponse(v_CSeq);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, once a dialog has been established,  on receipt of a BYE request including an In-Reply-To header ignores  it and sends a Success (200 OK) response.";
        extension "Reference: 7.3.2 [1], 20 [1], table 2  [1]";
        extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Ack_Request (Invite) received OR  No Ack_Request (Invite) received ";
      } // end testcase SIP_MG_OE_I_008
      testcase SIP_MG_OE_I_009(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 18.3 [1]
      // Purpose : Ensure that the IUT, when an INVITE client transaction is in the
      // Calling state while a message-oriented (UDP) transport is used, on receipt of a
      // Success (200 OK) response including a body part shorter than the length indicated
      // in the Content-Length header field, discards it and does not send an ACK request.
      {
        var integer vl_len;
        initPort(mtc, system); // Init test Configuration
        v_Default := activate (defaultCCOE());
        uACallingState(); // SIP preamble
        vl_len := lengthof (px_sdpBody) + 10;
        if (v_BOO_RecordRoute) {
          SIPP.send (
            Response_200_Invite_s_4(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via,
              vl_len,
              v_RecordRoute)) to v_sent_label;
        } else {
          SIPP.send (
            Response_200_Invite_s_4a(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via,
              vl_len)) to v_sent_label;
        }
        
        awaitingNoAckRequest(v_CSeq);
        
        rejectInvite(v_CSeq);
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, when an INVITE client transaction is in the  Calling state while a message-oriented (UDP) transport is used, on receipt of a  Success (200 OK) response including a body part shorter than the length indicated  in the Content-Length header field, discards it and does not send an ACK request.";
        extension "Reference: 18.3 [1]";
        extension "FailCause: An Ack_Request received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received";
      } // end testcase SIP_MG_OE_I_009
      testcase SIP_MG_OE_I_010(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 18.3 [1]
      // Purpose : Ensure that the IUT, when an INVITE client transaction is in the
      // Calling state while a message-oriented (UDP) transport is used, on receipt
      // of a Success (200 OK) response including a body part longer than the length
      // indicated in the Content-Length header field, ignores extra bytes and sends
      // a ACK request.
      {
        var integer vl_len;
        initPort(mtc, system); // Init test Configuration
        v_Default := activate (defaultCCOE());
        uACallingState(); // SIP preamble
        vl_len := lengthof (px_sdpBody) - 1;
        if (v_BOO_RecordRoute) {
          SIPP.send (
            Response_200_Invite_s_4(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via,
              vl_len,
              v_RecordRoute)) to v_sent_label;
        } else {
          SIPP.send (
            Response_200_Invite_s_4a(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via,
              vl_len)) to v_sent_label;
        }
        
        awaiting200OKAckRequest(v_CSeq);
        terminateCall(
          v_CallId,
          v_CSeq,
          v_callee_From,
          v_callee_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent client";
        extension "Description: Ensure that the IUT, when an INVITE client transaction is in the  Calling state while a message-oriented (UDP) transport is used, on receipt  of a Success (200 OK) response including a body part longer than the length  indicated in the Content-Length header field, ignores extra bytes and sends  a ACK request.";
        extension "Reference: 18.3 [1]";
        extension "FailCause: Invalid Ack_Request received OR No Ack_Request received";
        extension "InconcCause: Invalid INVITE_Request reveived OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_OE_I_010
    } // end group InvalidBehaviour
  } // end group OriginatingEndpoint
  group TerminatingEndpoint {
    // GroupSelection:  IUT can behave as User Agent server.
    //
    group ValidBehaviour {
      testcase SIP_MG_TE_V_001(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1  [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including escaped
      //  characters in the SIP-URI of the Contact header, sends a Success (200 OK)
      // response preceeded optionally by informational (1XX) response.
      {
        var ContactAddress vl_ContactAddress;
        v_Default := activate (defaultCCTE());
        initPort(mtc, system); // Init test Configuration
        iUTRegistration(); // SIP preamble
        setHeadersIUTInvite(loc_CSeq_s);
        
        vl_ContactAddress :=
        v_Contact.contactBody.contactAddresses[0];
        if (ischosen (vl_ContactAddress.addressField.nameAddr)) {
          v_Contact
          .contactBody
          .contactAddresses[0]
          .addressField
          .nameAddr
          .addrSpec
          .userInfo
          .userOrTelephoneSubscriber :=
          encodeEscapeDelim(
            v_Contact
            .contactBody
            .contactAddresses[0]
            .addressField
            .nameAddr
            .addrSpec
            .userInfo
            .userOrTelephoneSubscriber);
        } else {
          v_Contact
          .contactBody
          .contactAddresses[0]
          .addressField
          .addrSpecUnion
          .userInfo
          .userOrTelephoneSubscriber :=
          encodeEscapeDelim(
            v_Contact
            .contactBody
            .contactAddresses[0]
            .addressField
            .addrSpecUnion
            .userInfo
            .userOrTelephoneSubscriber);
        }
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        awaitingWithOpt1XX(
          Response_200_r_1(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        send200OKACK(loc_CSeq_s);
        
        terminateCall(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent server";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including escaped  characters in the SIP-URI of the Contact header, sends a Success (200 OK)  response preceeded optionally by informational (1XX) response.";
        extension "Reference: 19.1.1  [1] ";
        extension "FailCause: Invalid Success (200 OK) resp. informational (1XX) response received OR No Success (200 OK) resp. informational(1XX) response received";
        extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_TE_V_001
      testcase SIP_MG_TE_V_002(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1  [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including escaped
      //  delimiters in the SIP-URI of the Contact header, sends a Success (200 OK)
      // response preceded optionally by informational (1XX) response.
      {
        var charstring vl_len_sdp;
        v_Default := activate (defaultCCTE());
        initPort(mtc, system); // Init test Configuration
        iUTRegistration(); // SIP preamble
        setHeadersIUTInvite(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Contact :=
        buildRaw_EscapedDelimiters_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        awaitingWithOpt1XX(
          Response_200_r_1(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        send200OKACK(loc_CSeq_s);
        
        terminateCall(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent server";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including escaped  delimiters in the SIP-URI of the Contact header, sends a Success (200 OK)  response preceded optionally by informational (1XX) response.";
        extension "Reference: 19.1.1  [1] ";
        extension "FailCause: Invalid Success (200 OK) resp. informational (1XX) response received OR No Success (200 OK) resp. informational(1XX) response received";
        extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_TE_V_002
      testcase SIP_MG_TE_V_003(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including
      // non-understood uri-parameters in the SIP-URI of the Contact header, sends a
      // Success (200 OK) response preceded optionally by informational (1XX) response.
      {
        var ContactAddress vl_ContactAddress;
        var SemicolonParam_List vl_params;
        var integer i;
        
        v_Default := activate (defaultCCTE());
        initPort(mtc, system); // Init test Configuration
        iUTRegistration(); // SIP preamble
        setHeadersIUTInvite(loc_CSeq_s);
        
        vl_ContactAddress :=
        v_Contact.contactBody.contactAddresses[0];
        if (ischosen (vl_ContactAddress.addressField.nameAddr)) {
          if (ispresent (vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "paramUnknown",
              paramValue := "nonunderstood"
            }
          } else {
            vl_params := {
              {
                id := "paramUnknown",
                paramValue := "nonunderstood"
              }
            }
          };
          vl_ContactAddress
          .addressField
          .nameAddr
          .addrSpec
          .urlParameters :=
          vl_params
        } else {
          if (ispresent (vl_ContactAddress
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "paramUnknown",
              paramValue := "nonunderstood"
            }
          } else {
            vl_params := {
              {
                id := "paramUnknown",
                paramValue := "nonunderstood"
              }
            }
          };
          vl_ContactAddress
          .addressField
          .addrSpecUnion
          .urlParameters :=
          vl_params
        }
        
        v_Contact.contactBody.contactAddresses[0] :=
        vl_ContactAddress;
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        awaitingWithOpt1XX(
          Response_200_r_1(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        send200OKACK(loc_CSeq_s);
        
        terminateCall(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent server";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including  non-understood uri-parameters in the SIP-URI of the Contact header, sends a  Success (200 OK) response preceded optionally by informational (1XX) response.";
        extension "Reference: 19.1.1 [1]  ";
        extension "FailCause: Invalid Success (200 OK) resp. informational (1XX) response received OR No Success (200 OK) resp. informational(1XX) response received";
        extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_TE_V_003
      testcase SIP_MG_TE_V_004(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including a
      // header parameter in the SIP-URI of the Contact header, sends a Success
      // (200 OK) response preceded optionally by informational (1XX) response.
      {
        var ContactAddress vl_ContactAddress;
        var SemicolonParam_List vl_params;
        var integer i;
        
        v_Default := activate (defaultCCTE());
        initPort(mtc, system); // Init test Configuration
        iUTRegistration(); // SIP preamble
        setHeadersIUTInvite(loc_CSeq_s);
        
        // append header parameter in SIP-URL of the contact header field
        vl_ContactAddress :=
        valueof(v_Contact.contactBody.contactAddresses[0]);
        if (ischosen (vl_ContactAddress.addressField.nameAddr)) {
          if (ispresent (vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .headers)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          vl_ContactAddress.addressField.nameAddr.addrSpec.headers :=
          vl_params
        } else {
          if (ispresent (vl_ContactAddress
              .addressField
              .addrSpecUnion
              .headers)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .addrSpecUnion
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          vl_ContactAddress.addressField.addrSpecUnion.headers :=
          vl_params
        }
        
        v_Contact.contactBody.contactAddresses[0] :=
        vl_ContactAddress;
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        awaitingWithOpt1XX(
          Response_200_r_1(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        send200OKACK(loc_CSeq_s);
        
        terminateCall(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent server";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including a  header parameter in the SIP-URI of the Contact header, sends a Success  (200 OK) response preceded optionally by informational (1XX) response.";
        extension "Reference: 19.1.1 [1]";
        extension "FailCause: Invalid Success (200 OK) resp. informational (1XX) response received OR No Success (200 OK) resp. informational(1XX) response received";
        extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_TE_V_004
      testcase SIP_MG_TE_V_005(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including a
      // method parameter set to "INVITE" in the SIP-URI of the Contact header,
      // sends a Success (200 OK) response preceded optionally by informational
      // (1XX) response.
      {
        var ContactAddress vl_ContactAddress;
        var SemicolonParam_List vl_params;
        var integer i;
        
        v_Default := activate (defaultCCTE());
        initPort(mtc, system); // Init test Configuration
        iUTRegistration(); // SIP preamble
        setHeadersIUTInvite(loc_CSeq_s);
        
        vl_ContactAddress :=
        v_Contact.contactBody.contactAddresses[0];
        if (ischosen (vl_ContactAddress.addressField.nameAddr)) {
          if (ispresent (vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "INVITE"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "INVITE"
              }
            }
          };
          vl_ContactAddress
          .addressField
          .nameAddr
          .addrSpec
          .urlParameters :=
          vl_params
        } else {
          if (ispresent (vl_ContactAddress
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "INVITE"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "INVITE"
              }
            }
          };
          vl_ContactAddress
          .addressField
          .addrSpecUnion
          .urlParameters :=
          vl_params
        }
        
        v_Contact.contactBody.contactAddresses[0] :=
        vl_ContactAddress;
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        awaitingWithOpt1XX(
          Response_200_r_1(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        send200OKACK(loc_CSeq_s);
        
        terminateCall(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent server";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including a  method parameter set to ""INVITE"" in the SIP-URI of the Contact header,  sends a Success (200 OK) response preceded optionally by informational  (1XX) response.";
        extension "Reference: 19.1.1 [1]";
        extension "FailCause: Invalid Success (200 OK) resp. informational (1XX) response received OR No Success (200 OK) resp. informational(1XX) response received";
        extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_TE_V_005
      testcase SIP_MG_TE_V_006(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 8.2.1 [1]
      // Purpose : Ensure that the IUT on receipt of a request including a non-supported
      //  Method, sends a Method not allowed (405 Method Not Allowed) response including
      // an Allow header that lists the set of method supported.
      {
        var charstring vl_len_sdp;
        v_Default := activate (defaultCCTE());
        initPort(mtc, system); // Init test Configuration
        iUTRegistration(); // SIP preamble
        setHeadersIUTInvite(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        
        SIPP.send (
          Raw_Unknown_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via)) to v_sent_label;
        
        awaitingWithOpt1XX(
          Response_405_r_1(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        sendACK(loc_CSeq_s);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent server";
        extension "Description: Ensure that the IUT on receipt of a request including a non-supported  Method, sends a Method not allowed (405 Method Not Allowed) response including  an Allow header that lists the set of method supported.";
        extension "Reference: 8.2.1 [1]";
        extension "FailCause: Invalid Method not allowed (405 Method Not Allowed) response received OR No Method not allowed (405 Method Not Allowed) received";
      } // end testcase SIP_MG_TE_V_006
      testcase SIP_MG_TE_V_007(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 8.2.2 [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including unknown
      //  header, ignores them and sends a Success (200 OK) response preceded optionally
      //  by informational (1XX) response.
      {
        var charstring vl_len_sdp;
        var ContactAddress vl_ContactAddress;
        v_Default := activate (defaultCCTE());
        initPort(mtc, system); // Init test Configuration
        iUTRegistration(); // SIP preamble
        setHeadersIUTInvite(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Contact :=
        buildRaw_ContactHeader(v_Contact)
        & CRLF
        & "UnknownHead: 0";
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        awaitingWithOpt1XX(
          Response_200_r_1(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        send200OKACK(loc_CSeq_s);
        
        terminateCall(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent server";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including unknown  header, ignores them and sends a Success (200 OK) response preceded optionally  by informational (1XX) response.";
        extension "Reference: 8.2.2 [1] ";
        extension "FailCause: Invalid Success (200 OK) resp. informational (1XX) response received OR No Success (200 OK) resp. informational(1XX) response received";
        extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_TE_V_007
      testcase SIP_MG_TE_V_008(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including headers
      //  named with upper and lower cases, sends a Success (200 OK) response preceded op
      // tionally by informational (1XX) response.
      {
        var charstring vl_len_sdp;
        v_Default := activate (defaultCCTE());
        initPort(mtc, system); // Init test Configuration
        iUTRegistration(); // SIP preamble
        setHeadersIUTInvite(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CallId[1] := "A";
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_CSeq[2] := "E";
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_From[1] := "R";
        v_Raw_From[2] := "O";
        v_Raw_From[3] := "M";
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Via[2] := "A";
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        awaitingWithOpt1XX(
          Response_200_r_1(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        send200OKACK(loc_CSeq_s);
        
        terminateCall(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent server";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including headers  named with upper and lower cases, sends a Success (200 OK) response preceded op tionally by informational (1XX) response.";
        extension "Reference: 7.3.1 [1] ";
        extension "FailCause: Invalid Success (200 OK) resp. informational (1XX) response received OR No Success (200 OK) resp. informational(1XX) response received";
        extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_TE_V_008
      testcase SIP_MG_TE_V_009(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including headers
      //  set with values preceded by several leading white space and properly extended ;
      // over multiple lines, sends a Success (200 OK) response preceded optionally by
      // informational (1XX) response.
      {
        var charstring vl_len_sdp;
        
        v_Default := activate (defaultCCTE());
        initPort(mtc, system); // Init test Configuration
        iUTRegistration(); // SIP preamble
        setHeadersIUTInvite(loc_CSeq_s);
        
        v_white_space := true;
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_white_space := false;
        
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        awaitingWithOpt1XX(
          Response_200_r_1(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        send200OKACK(loc_CSeq_s);
        
        terminateCall(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent server";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including headers  set with values preceded by several leading white space and properly extended  over multiple lines, sends a Success (200 OK) response preceded optionally by  informational (1XX) response.";
        extension "Reference: 7.3.1 [1]";
        extension "FailCause: Invalid Success (200 OK) resp. informational (1XX) response received OR No Success (200 OK) resp. informational(1XX) response received";
        extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_TE_V_009
      testcase SIP_MG_TE_V_010(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including a Via
      // header set with multiple values separated by a comma, sends a Success (200 OK)
      // response preceded optionally by informational (1XX) response.
      {
        var charstring vl_len_sdp;
        var integer i := 0;
        var integer j,
        vl_str_len;
        
        v_Default := activate (defaultCCTE());
        initPort(mtc, system); // Init test Configuration
        iUTRegistration(); // SIP preamble
        setHeadersIUTInvite(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        vl_str_len := lengthof (v_Raw_Via);
        i := vl_str_len;
        v_Raw_Via[i] := ",";
        v_Raw_Via := v_Raw_Via & "SIP/2.0/" & PX_TRANSPORT &  " newvia.org:5061";
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        awaitingWithOpt1XX(
          Response_200_r_1(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        send200OKACK(loc_CSeq_s);
        
        terminateCall(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
      }
      with {
        extension "Preconditions: IUT can behave as User Agent server";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including a Via  header set with multiple values separated by a comma, sends a Success (200 OK)  response preceded optionally by informational (1XX) response.";
        extension "Reference: 7.3.1 [1] ";
        extension "FailCause: Invalid Success (200 OK) resp. informational (1XX) response received OR No Success (200 OK) resp. informational(1XX) response received";
        extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_TE_V_010
      testcase SIP_MG_TE_V_011(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including
      // multiple Via headers, sends a Success (200 OK) response preceded optionally
      // by informational (1XX) response.
      {
        var charstring vl_len_sdp;
        var integer i := 0;
        var integer j,
        vl_str_len;
        
        v_Default := activate (defaultCCTE());
        initPort(mtc, system); // Init test Configuration
        iUTRegistration(); // SIP preamble
        setHeadersIUTInvite(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        vl_str_len := lengthof (v_Raw_Via);
        v_Raw_Via :=
        v_Raw_Via & CRLF & "Via: SIP/2.0/" & PX_TRANSPORT & " newvia.org:5061";
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        awaitingWithOpt1XX(
          Response_200_r_1(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        send200OKACK(loc_CSeq_s);
        
        terminateCall(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent server";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including  multiple Via headers, sends a Success (200 OK) response preceded optionally  by informational (1XX) response.";
        extension "Reference: 7.3.1 [1] ";
        extension "FailCause: Invalid Success (200 OK) resp. informational (1XX) response received OR No Success (200 OK) resp. informational(1XX) response received";
        extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_TE_V_011
      testcase SIP_MG_TE_V_012(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including a
      // branch parameter named with upper and lower cases of Via header, sends
      // a Success (200 OK) response preceded optionally by informational (1XX) response.
      {
        var SemicolonParam_List vl_params;
        v_Default := activate (defaultCCTE());
        initPort(mtc, system); // Init test Configuration
        iUTRegistration(); // SIP preamble
        setHeadersIUTInvite(loc_CSeq_s);
        
        vl_params := valueof(v_Via.viaBody[0].viaParams);
        vl_params[0].id := "BrAnCH";
        v_Via.viaBody[0].viaParams := vl_params;
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        awaitingWithOpt1XX(
          Response_200_r_1(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        send200OKACK(loc_CSeq_s);
        
        terminateCall(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent server";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including a  branch parameter named with upper and lower cases of Via header, sends  a Success (200 OK) response preceded optionally by informational (1XX) response.";
        extension "Reference: 7.3.1 [1] ";
        extension "FailCause: Invalid Success (200 OK) resp. informational (1XX) response received OR No Success (200 OK) resp. informational(1XX) response received";
        extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_TE_V_012
      testcase SIP_MG_TE_V_013(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.3[1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including headers
      //  set with short names, sends a Success (200 OK) response preceded optionally by
      // informational (1XX) response.
      {
        var charstring vl_len_sdp;
        var integer i := 0;
        var integer j,
        vl_str_len;
        var charstring vl_Raw_CallId := "";
        var charstring vl_Raw_From := "";
        var charstring vl_Raw_To := "";
        var charstring vl_Raw_Via := "";
        var charstring vl_Raw_Contact := "";
        
        v_Default := activate (defaultCCTE());
        initPort(mtc, system); // Init test Configuration
        iUTRegistration(); // SIP preamble
        setHeadersIUTInvite(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        vl_str_len := lengthof (v_Raw_CallId);
        vl_Raw_CallId[0] := "i";
        i := 1;
        for (j := 7; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_CallId[i] := v_Raw_CallId[j];
          i := i + 1;
        }
        
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        vl_str_len := lengthof (v_Raw_From);
        vl_Raw_From[0] := "f";
        i := 1;
        for (j := 4; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_From[i] := v_Raw_From[j];
          i := i + 1;
        }
        
        v_Raw_To := buildRaw_ToHeader(v_To);
        vl_str_len := lengthof (v_Raw_To);
        vl_Raw_To[0] := "t";
        i := 1;
        for (j := 2; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_To[i] := v_Raw_To[j];
          i := i + 1;
        }
        
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        vl_str_len := lengthof (v_Raw_Via);
        vl_Raw_Via[0] := "v";
        i := 1;
        for (j := 3; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_Via[i] := v_Raw_Via[j];
          i := i + 1;
        }
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        vl_str_len := lengthof (v_Raw_Contact);
        vl_Raw_Contact[0] := "m";
        i := 1;
        for (j := 7; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_Contact[i] := v_Raw_Contact[j];
          i := i + 1;
        }
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_1(
            v_Raw_RequestUri,
            vl_Raw_CallId,
            v_Raw_CSeq,
            vl_Raw_Contact,
            vl_Raw_From,
            vl_Raw_To,
            vl_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        awaitingWithOpt1XX(
          Response_200_r_1(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        send200OKACK(loc_CSeq_s);
        
        terminateCall(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent server";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including headers  set with short names, sends a Success (200 OK) response preceded optionally by  informational (1XX) response.";
        extension "Reference: 7.3.3[1] ";
        extension "FailCause: Invalid Success (200 OK) resp. informational (1XX) response received OR No Success (200 OK) resp. informational(1XX) response received";
        extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_TE_V_013
      testcase SIP_MG_TE_V_014(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 18.1.1 [1]
      // Purpose : Ensure that the IUT on receipt of a 65.535 bytes long INVITE request
      // including session description parameters that it can accept, transported by UDP,
      //  sends a Success (200 OK) response, preceded optionally by informational (1XX)
      // response.
      {
        var integer vl_len_sdp;
        
        v_Default := activate (defaultCCTE());
        initPort(mtc, system); // Init test Configuration
        iUTRegistration(); // SIP preamble
        setHeadersIUTInvite(loc_CSeq_s);
        
        vl_len_sdp := lengthof (px_sdpBody_65535);
        
        SIPP.send (
          INVITE_Request_s_5(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact,
            vl_len_sdp,
            px_sdpBody_65535)) to v_sent_label;
        
        awaitingWithOpt1XX(
          Response_200_r_1(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        send200OKACK(loc_CSeq_s);
        
        terminateCall(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent server";
        extension "Description: Ensure that the IUT on receipt of a 65.535 bytes long INVITE request  including session description parameters that it can accept, transported by UDP,  sends a Success (200 OK) response, preceded optionally by informational (1XX)  response.";
        extension "Reference: 18.1.1 [1]";
        extension "FailCause: Invalid Success (200 OK) resp. informational (1XX) response received OR No Success (200 OK) resp. informational(1XX) response received";
        extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_TE_V_014
      testcase SIP_MG_TE_V_015(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.5 [1]
      // Purpose : Ensure that the IUT, on receipt of a INVITE request over a
      // stream-oriented (TCP) transport with several CRLF before the start-line,
      // sends a Success (200 OK) response preceded optionally by informational (1XX) response.
      {
        var charstring vl_len_sdp;
        var integer i := 0;
        var integer j,
        vl_str_len;
        
        v_Default := activate (defaultCCTE());
        initPort(mtc, system); // Init test Configuration
        iUTRegistration(); // SIP preamble
        setHeadersIUTInvite(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_2(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        awaitingWithOpt1XX(
          Response_200_r_1(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        send200OKACK(loc_CSeq_s);
        
        terminateCall(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent server";
        extension "Description: Ensure that the IUT, on receipt of a INVITE request over a  stream-oriented (TCP) transport with several CRLF before the start-line,  sends a Success (200 OK) response preceded optionally by informational (1XX) response.";
        extension "Reference: 7.5 [1] ";
        extension "FailCause: Invalid Success (200 OK) resp. informational (1XX) response received OR No Success (200 OK) resp. informational(1XX) response received";
        extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_TE_V_015
    } // end group ValidBehaviour
    group InvalidBehaviour {
      testcase SIP_MG_TE_I_001(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.1[1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request with SIP-version
      // in lower case, sends a Success (200 OK) response preceded optionally by
      // informational (1XX) response.
      {
        v_Default := activate (defaultCCTE());
        initPort(mtc, system); // Init test Configuration
        iUTRegistration(); // SIP preamble
        setHeadersIUTInvite(loc_CSeq_s);
        
        SIPP.send (
          INVITE_Request_s_16(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        awaitingWithOpt1XX(
          Response_200_r_1(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        send200OKACK(loc_CSeq_s);
        
        terminateCall(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent server";
        extension "Description: Ensure that the IUT on receipt of an INVITE request with SIP-version  in lower case, sends a Success (200 OK) response preceded optionally by  informational (1XX) response.";
        extension "Reference: 7.1[1]";
        extension "FailCause: Invalid Success (200 OK) resp. informational (1XX) response received OR No Success (200 OK) resp. informational(1XX) response received";
        extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_TE_I_001
      testcase SIP_MG_TE_I_002(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including a maddr
      //  parameter in the From and To headers, ignores them and sends a Success (200 OK)
      //  response without maddr parameter, preceded optionally by informational (1XX) re
      // sponse.
      {
        var integer i;
        var SemicolonParam_List vl_params;
        
        v_Default := activate (defaultCCTE());
        initPort(mtc, system); // Init test Configuration
        iUTRegistration(); // SIP preamble
        setHeadersIUTInvite(loc_CSeq_s);
        
        v_From.fromParams := {
          {
            "maddr",
            "192.0.0.1"
          }
        };
        v_To.toParams := {
          {
            "maddr",
            "192.0.0.2"
          }
        };
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        awaitingWithOpt1XX(
          Response_200_r_1(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        send200OKACK(loc_CSeq_s);
        
        terminateCall(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent server";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including a maddr  parameter in the From and To headers, ignores them and sends a Success (200 OK)  response without maddr parameter, preceded optionally by informational (1XX) re sponse.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid Success (200 OK) resp. informational (1XX) response received OR No Success (200 OK) resp. informational(1XX) response received";
        extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_TE_I_002
      testcase SIP_MG_TE_I_003(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including header
      // parameters in the SIP-URI of the From and To headers, ignores them and sends a
      // Success (200 OK) response, preceded optionally by informational (1XX) response.
      {
        var SemicolonParam_List vl_params;
        var integer i;
        
        v_Default := activate (defaultCCTE());
        initPort(mtc, system); // Init test Configuration
        iUTRegistration(); // SIP preamble
        setHeadersIUTInvite(loc_CSeq_s);
        if (ischosen (v_From.addressField.nameAddr)) {
          if (ispresent (v_From
              .addressField
              .nameAddr
              .addrSpec
              .headers)) {
            vl_params :=
            valueof(
              v_From
              .addressField
              .nameAddr
              .addrSpec
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          v_From.addressField.nameAddr.addrSpec.headers :=
          vl_params
        } else {
          if (ispresent (v_From
              .addressField
              .addrSpecUnion
              .headers)) {
            vl_params :=
            valueof(
              v_From.addressField.addrSpecUnion.headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          v_From.addressField.addrSpecUnion.headers := vl_params
        };
        
        if (ischosen (v_To.addressField.nameAddr)) {
          if (ispresent (v_To
              .addressField
              .nameAddr
              .addrSpec
              .headers)) {
            vl_params :=
            valueof(
              v_To
              .addressField
              .nameAddr
              .addrSpec
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h2",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h2",
                paramValue := "$"
              }
            }
          };
          v_To.addressField.nameAddr.addrSpec.headers :=
          vl_params
        } else {
          if (ispresent (v_To
              .addressField
              .addrSpecUnion
              .headers)) {
            vl_params :=
            valueof(
              v_To.addressField.addrSpecUnion.headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h2",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h2",
                paramValue := "$"
              }
            }
          };
          v_To.addressField.addrSpecUnion.headers := vl_params
        };
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        awaitingWithOpt1XX(
          Response_200_r_1(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        send200OKACK(loc_CSeq_s);
        
        terminateCall(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent server";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including header  parameters in the SIP-URI of the From and To headers, ignores them and sends a  Success (200 OK) response, preceded optionally by informational (1XX) response.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid Success (200 OK) resp. informational (1XX) response received OR No Success (200 OK) resp. informational(1XX) response received";
        extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_TE_I_003
      testcase SIP_MG_TE_I_004(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including method
      // parameters set to "CANCEL" in the SIP-URI of the From and To headers, ignores
      // them and sends a Success (200 OK) response, preceded optionally by informational
      // (1XX) response.
      {
        var integer i;
        var SemicolonParam_List vl_params;
        
        v_Default := activate (defaultCCTE());
        initPort(mtc, system); // Init test Configuration
        iUTRegistration(); // SIP preamble
        setHeadersIUTInvite(loc_CSeq_s);
        if (ischosen (v_From.addressField.nameAddr)) {
          if (ispresent (v_From
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              v_From
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "CANCEL"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "CANCEL"
              }
            }
          };
          v_From.addressField.nameAddr.addrSpec.urlParameters :=
          vl_params
        } else {
          if (ispresent (v_From
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              v_From
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "CANCEL"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "CANCEL"
              }
            }
          };
          v_From.addressField.addrSpecUnion.urlParameters :=
          vl_params
        };
        
        if (ischosen (v_To.addressField.nameAddr)) {
          if (ispresent (v_To
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              v_To
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "CANCEL"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "CANCEL"
              }
            }
          };
          v_To.addressField.nameAddr.addrSpec.urlParameters :=
          vl_params
        } else {
          if (ispresent (v_To
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              v_To
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "CANCEL"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "CANCEL"
              }
            }
          };
          v_To.addressField.addrSpecUnion.urlParameters :=
          vl_params
        };
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        awaitingWithOpt1XX(
          Response_200_r_1(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        send200OKACK(loc_CSeq_s);
        
        terminateCall(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent server";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including method  parameters set to ""CANCEL"" in the SIP-URI of the From and To headers, ignores  them and sends a Success (200 OK) response, preceded optionally by informational  (1XX) response.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid Success (200 OK) resp. informational (1XX) response received OR No Success (200 OK) resp. informational(1XX) response received";
        extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_TE_I_004
      testcase SIP_MG_TE_I_005(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 21.4.1 [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request without Call-ID
      // header sends a Bad Request (400 Bad Request) response.
      {
        var Response vl_Response;
        
        v_Default := activate (defaultCCTE());
        initPort(mtc, system); // Init test Configuration
        iUTRegistration(); // SIP preamble
        setHeadersIUTInvite(loc_CSeq_s);
        SIPP.send (
          INVITE_Request_Inv_s_1(
            v_RequestUri,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        TResp.start (PX_TRESP);
        alt {
          [] SIPP.receive (
            Response_400_r_2(
              v_CallId,
              loc_CSeq_s)) -> value vl_Response sender v_sent_label {
            TResp.stop;
            setverdict (pass);
            if (ispresent (vl_Response.msgHeader.callId)) {
              v_CallId := vl_Response.msgHeader.callId;
            } else {
              /*    v_CallId := {
              fieldName := omit,
              callid := omit
              };*/
              v_CallId := {
                fieldName := CALL_ID_E,
                callid := ""
              }; 

              
            }
            setHeadersOnReceiptOfResponse(
              loc_CSeq_s,
              vl_Response);
            sendACK(loc_CSeq_s);
          }
          [] SIPP.receive (
            Response_1XX_r_2(v_CallId, loc_CSeq_s)) {
            repeat;
          }
          // Invalid Response
          [] SIPP.receive (
            Response_Any_r_1) -> value vl_Response sender v_sent_label {
            all timer.stop;
            setverdict (fail);
            if (ispresent (vl_Response.msgHeader.callId)) {
              v_CallId := vl_Response.msgHeader.callId;
            } else {
              /*   v_CallId := {
              fieldName := omit,
              callid := omit
              };*/

              v_CallId := {
                fieldName := CALL_ID_E,
                callid := ""
              }; 



              
            }
            setHeadersOnReceiptOfResponse(
              loc_CSeq_s,
              vl_Response);
            terminateUASCall(vl_Response, loc_CSeq_s);
            stop
          }
          [] TResp.timeout {
            setverdict (fail);
            cancelCall(
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_Cancel_To,
              v_reqHostPort,
              v_Via);
            stop
          }
        }
      }
      with {
        extension "Preconditions: IUT can behave as User Agent server";
        extension "Description: Ensure that the IUT on receipt of an INVITE request without Call-ID  header sends a Bad Request (400 Bad Request) response.";
        extension "Reference: 21.4.1 [1]";
        extension "FailCause: Invalid Bad Request (400 Bad Request) received OR No Bad Request (400 Bad Request) received";
        extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_TE_I_005
      testcase SIP_MG_TE_I_006(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.2 [1], 20 [1], table 2  [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including header
      // field Retry-After, ignores it and sends a Success (200 OK) response, preceded
      // optionally by informational (1XX) response.
      {
        v_Default := activate (defaultCCTE());
        initPort(mtc, system); // Init test Configuration
        iUTRegistration(); // SIP preamble
        setHeadersIUTInvite(loc_CSeq_s);
        
        SIPP.send (
          INVITE_Request_Inv_s_2(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        awaitingWithOpt1XX(
          Response_200_r_1(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        send200OKACK(loc_CSeq_s);
        
        terminateCall(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent server";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including header  field Retry-After, ignores it and sends a Success (200 OK) response, preceded  optionally by informational (1XX) response.";
        extension "Reference: 7.3.2 [1], 20 [1], table 2  [1]";
        extension "FailCause: Invalid Success (200 OK) resp. informational (1XX) response received OR No Success (200 OK) resp. informational(1XX) response received";
        extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_TE_I_006
      testcase SIP_MG_TE_I_007(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 18.3 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request, while a
      // message-oriented (UDP) transport is used, including a body part shorter
      // than the length indicated in the Content-Length header field, sends a
      // Bad Request (400 Bad Request) response..
      {
        var Response vl_Response;
        var integer vl_len_sdp;
        
        v_Default := activate (defaultCCTE());
        initPort(mtc, system); // Init test Configuration
        iUTRegistration(); // SIP preamble
        setHeadersIUTInvite(loc_CSeq_s);
        
        vl_len_sdp := lengthof (px_sdpBody) + 10;
        
        SIPP.send (
          INVITE_Request_s_5(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        TResp.start (PX_TRESP);
        alt {
          [] SIPP.receive (
            Response_400_r_1(
              v_CallId,
              loc_CSeq_s)) -> value vl_Response sender v_sent_label {
            TResp.stop;
            setverdict (pass);
            setHeadersOnReceiptOfResponse(
              loc_CSeq_s,
              vl_Response);
            sendACK(loc_CSeq_s);
          }
          [] SIPP.receive (
            Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
            repeat;
          }
          // Invalid Response
          [] SIPP.receive (
            Response_Any_r_1) -> value vl_Response sender v_sent_label {
            all timer.stop;
            setverdict (fail);
            setHeadersOnReceiptOfResponse(
              loc_CSeq_s,
              vl_Response);
            terminateUASCall(vl_Response, loc_CSeq_s);
            stop
          }
          [] TResp.timeout {
            setverdict (fail);
            cancelCall(
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_Cancel_To,
              v_reqHostPort,
              v_Via);
            stop
          }
        }
      }
      with {
        extension "Preconditions: IUT can behave as User Agent server";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request, while a  message-oriented (UDP) transport is used, including a body part shorter  than the length indicated in the Content-Length header field, sends a  Bad Request (400 Bad Request) response..";
        extension "Reference: 18.3 [1]";
        extension "FailCause: Invalid Bad Request (400 Bad Request) received OR No Bad Request (400 Bad Request) received";
        extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_TE_I_007
      testcase SIP_MG_TE_I_008(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
      // Ref: 18.3 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request, while a
      // message-oriented (UDP) transport is used, including a body part longer
      // than the length indicated in the Content-Length header field, ignores
      // extra bytes and sends a Success (200 OK) response, preceded optionally
      // by informational (1XX) response.
      {
        var integer vl_len_sdp;
        
        v_Default := activate (defaultCCTE());
        initPort(mtc, system); // Init test Configuration
        iUTRegistration(); // SIP preamble
        setHeadersIUTInvite(loc_CSeq_s);
        
        vl_len_sdp := lengthof (px_sdpBody) - 1;
        
        SIPP.send (
          INVITE_Request_s_5(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        awaitingWithOpt1XX(
          Response_200_r_1(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        send200OKACK(loc_CSeq_s);
        
        terminateCall(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        
      }
      with {
        extension "Preconditions: IUT can behave as User Agent server";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request, while a  message-oriented (UDP) transport is used, including a body part longer  than the length indicated in the Content-Length header field, ignores  extra bytes and sends a Success (200 OK) response, preceded optionally  by informational (1XX) response.";
        extension "Reference: 18.3 [1]";
        extension "FailCause: Invalid Success (200 OK) resp. informational (1XX) response received OR No Success (200 OK) resp. informational(1XX) response received";
        extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
      } // end testcase SIP_MG_TE_I_008
    } // end group InvalidBehaviour
  } // end group TerminatingEndpoint
  group Proxy {
    // GroupSelection:  IUT is a Proxy.
    //
    group ValidBehaviour {
      testcase SIP_MG_PR_V_001(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1  [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including
      // escaped characters in the SIP-URI of the Contact header forwards
      // the message.
      {
        var SipComponent vl_ptc;
        var SemicolonParam_List vl_params;
        var ContactAddress vl_ContactAddress;
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        vl_ptc.start (
          ptc_INVITE_Forwarded(
            INVITE_Request_r_1,
            v_CallId,
            loc_CSeq_ptc_s,
            v_cancel_sent,
            v_bye_sent));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        
        vl_ContactAddress :=
        v_Contact.contactBody.contactAddresses[0];
        if (ischosen (vl_ContactAddress.addressField.nameAddr)) {
          v_Contact
          .contactBody
          .contactAddresses[0]
          .addressField
          .nameAddr
          .addrSpec
          .userInfo
          .userOrTelephoneSubscriber :=
          encodeEscapeDelim(
            v_Contact
            .contactBody
            .contactAddresses[0]
            .addressField
            .nameAddr
            .addrSpec
            .userInfo
            .userOrTelephoneSubscriber);
        } else {
          v_Contact
          .contactBody
          .contactAddresses[0]
          .addressField
          .addrSpecUnion
          .userInfo
          .userOrTelephoneSubscriber :=
          encodeEscapeDelim(
            v_Contact
            .contactBody
            .contactAddresses[0]
            .addressField
            .addrSpecUnion
            .userInfo
            .userOrTelephoneSubscriber);
        }
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        v_RequestFor407 :=
        valueof(INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact));
        
        // Wait PTC Check done
        awaitingPRPtcCheck(loc_CSeq_s);
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including  escaped characters in the SIP-URI of the Contact header forwards  the message.";
        extension "Reference: 19.1.1  [1] ";
        extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received";
      } // end testcase SIP_MG_PR_V_001
      testcase SIP_MG_PR_V_002(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including
      // escaped delimiters in the SIP-URI of the Contact header forwards the message.
      {
        var SipComponent vl_ptc;
        var charstring vl_len_sdp;
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        vl_ptc.start (
          ptc_INVITE_Forwarded(
            INVITE_Request_r_1,
            v_CallId,
            loc_CSeq_ptc_s,
            v_cancel_sent,
            v_bye_sent));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Contact :=
        buildRaw_EscapedDelimiters_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        // Wait PTC Check done
        awaitingPRPtcCheck2(loc_CSeq_s);
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including  escaped delimiters in the SIP-URI of the Contact header forwards the message.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received";
      } // end testcase SIP_MG_PR_V_002
      testcase SIP_MG_PR_V_003(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including
      // non-understood uri-parameters in the SIP-URI of the Contact header forwards
      // the message.
      {
        var SipComponent vl_ptc;
        var ContactAddress vl_ContactAddress;
        var SemicolonParam_List vl_params;
        var integer i;
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        vl_ptc.start (
          ptc_INVITE_Forwarded(
            INVITE_Request_r_1,
            v_CallId,
            loc_CSeq_ptc_s,
            v_cancel_sent,
            v_bye_sent));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        
        vl_ContactAddress :=
        v_Contact.contactBody.contactAddresses[0];
        
        if (ischosen (vl_ContactAddress.addressField.nameAddr)) {
          if (ispresent (vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "paramUnknown",
              paramValue := "nonunderstood"
            }
          } else {
            vl_params := {
              {
                id := "paramUnknown",
                paramValue := "nonunderstood"
              }
            }
          };
          vl_ContactAddress
          .addressField
          .nameAddr
          .addrSpec
          .urlParameters :=
          vl_params
        } else {
          if (ispresent (vl_ContactAddress
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "paramUnknown",
              paramValue := "nonunderstood"
            }
          } else {
            vl_params := {
              {
                id := "paramUnknown",
                paramValue := "nonunderstood"
              }
            }
          };
          vl_ContactAddress
          .addressField
          .addrSpecUnion
          .urlParameters :=
          vl_params
        }
        
        v_Contact.contactBody.contactAddresses[0] :=
        vl_ContactAddress;
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        v_RequestFor407 :=
        valueof(INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact));
        
        // Wait PTC Check done
        awaitingPRPtcCheck(loc_CSeq_s);
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including  non-understood uri-parameters in the SIP-URI of the Contact header forwards  the message.";
        extension "Reference: 19.1.1 [1]  ";
        extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received";
      } // end testcase SIP_MG_PR_V_003
      testcase SIP_MG_PR_V_004(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including a
      // header parameter in the SIP-URI of the Contact header forwards the message.
      {
        var SipComponent vl_ptc;
        var ContactAddress vl_ContactAddress;
        var SemicolonParam_List vl_params;
        var integer i;
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        vl_ptc.start (
          ptc_INVITE_Forwarded(
            INVITE_Request_r_1,
            v_CallId,
            loc_CSeq_ptc_s,
            v_cancel_sent,
            v_bye_sent));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        
        // append header parameter in SIP-URL of the contact header field
        vl_ContactAddress :=
        v_Contact.contactBody.contactAddresses[0];
        if (ischosen (vl_ContactAddress.addressField.nameAddr)) {
          if (ispresent (vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .headers)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          vl_ContactAddress.addressField.nameAddr.addrSpec.headers :=
          vl_params
        } else {
          if (ispresent (vl_ContactAddress
              .addressField
              .addrSpecUnion
              .headers)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .addrSpecUnion
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          vl_ContactAddress.addressField.addrSpecUnion.headers :=
          vl_params
        }
        
        v_Contact.contactBody.contactAddresses[0] :=
        vl_ContactAddress;
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        v_RequestFor407 :=
        valueof(INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact));
        // Wait PTC Check done
        awaitingPRPtcCheck(loc_CSeq_s);
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including a  header parameter in the SIP-URI of the Contact header forwards the message.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received";
      } // end testcase SIP_MG_PR_V_004
      testcase SIP_MG_PR_V_005(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including a
      // method parameter set to "INVITE" in the SIP-URI of the Contact header
      // forwards the message.
      {
        var SipComponent vl_ptc;
        var ContactAddress vl_ContactAddress;
        var SemicolonParam_List vl_params;
        var integer i;
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        vl_ptc.start (
          ptc_INVITE_Forwarded(
            INVITE_Request_r_1,
            v_CallId,
            loc_CSeq_ptc_s,
            v_cancel_sent,
            v_bye_sent));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        
        vl_ContactAddress :=
        v_Contact.contactBody.contactAddresses[0];
        if (ischosen (vl_ContactAddress.addressField.nameAddr)) {
          if (ispresent (vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "INVITE"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "INVITE"
              }
            }
          };
          vl_ContactAddress
          .addressField
          .nameAddr
          .addrSpec
          .urlParameters :=
          vl_params
        } else {
          if (ispresent (vl_ContactAddress
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "INVITE"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "INVITE"
              }
            }
          };
          vl_ContactAddress
          .addressField
          .addrSpecUnion
          .urlParameters :=
          vl_params
        }
        
        v_Contact.contactBody.contactAddresses[0] :=
        vl_ContactAddress;
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        v_RequestFor407 :=
        valueof(INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact));
        
        // Wait PTC Check done
        awaitingPRPtcCheck(loc_CSeq_s);
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including a  method parameter set to ""INVITE"" in the SIP-URI of the Contact header  forwards the message.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received";
      } // end testcase SIP_MG_PR_V_005
      testcase SIP_MG_PR_V_006(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 8.2.2  [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including
      // unknown header forwards the message without removing or modifying those
      // fields.
      {
        var SipComponent vl_ptc;
        var charstring vl_len_sdp;
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        vl_ptc.start (
          ptc_INVITE_Forwarded(
            INVITE_Request_r_14,
            v_CallId,
            loc_CSeq_ptc_s,
            v_cancel_sent,
            v_bye_sent));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Contact :=
        buildRaw_ContactHeader(v_Contact)
        & CRLF
        & "UnknownHead: 0";
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        // Wait PTC Check done
        awaitingPRPtcCheck2(loc_CSeq_s);
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including  unknown header forwards the message without removing or modifying those  fields.";
        extension "Reference: 8.2.2  [1] ";
        extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received";
      } // end testcase SIP_MG_PR_V_006
      testcase SIP_MG_PR_V_007(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including
      // headers named with upper and lower cases forwards the message.
      {
        var SipComponent vl_ptc;
        var charstring vl_len_sdp;
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        vl_ptc.start (
          ptc_INVITE_Forwarded(
            INVITE_Request_r_1,
            v_CallId,
            loc_CSeq_ptc_s,
            v_cancel_sent,
            v_bye_sent));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CallId[1] := "A";
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_CSeq[2] := "E";
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_From[1] := "R";
        v_Raw_From[2] := "O";
        v_Raw_From[3] := "M";
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Via[2] := "A";
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        // Wait PTC Check done
        awaitingPRPtcCheck2(loc_CSeq_s);
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including  headers named with upper and lower cases forwards the message.";
        extension "Reference: 7.3.1 [1] ";
        extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received";
      } // end testcase SIP_MG_PR_V_007
      testcase SIP_MG_PR_V_008(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including headers
      //  set with values preceded by several leading white space and properly
      // extended over multiple lines forwards the message.;
      {
        var SipComponent vl_ptc;
        var charstring vl_len_sdp;
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        vl_ptc.start (
          ptc_INVITE_Forwarded(
            INVITE_Request_r_1,
            v_CallId,
            loc_CSeq_ptc_s,
            v_cancel_sent,
            v_bye_sent));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        
        v_white_space := true;
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_white_space := false;
        
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        // Wait PTC Check done
        awaitingPRPtcCheck2(loc_CSeq_s);
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including headers  set with values preceded by several leading white space and properly  extended over multiple lines forwards the message.";
        extension "Reference: 7.3.1 [1] ";
        extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received";
      } // end testcase SIP_MG_PR_V_008
      testcase SIP_MG_PR_V_009(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1], 10.46.4 [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including a Via
      // header set with multiple values separated by a comma forwards the message
      // having inserted its own Via header value without changing the order of
      // these field values.
      {
        var SipComponent vl_ptc;
        var charstring vl_len_sdp;
        var integer i := 0;
        var integer j,
        vl_str_len;
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        vl_ptc.start (
          ptc_INVITE_Forwarded(
            INVITE_Request_r_7_1,
            v_CallId,
            loc_CSeq_ptc_s,
            v_cancel_sent,
            v_bye_sent));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        vl_str_len := lengthof (v_Raw_Via);
        i := vl_str_len;
        v_Raw_Via[i] := ",";
        v_Raw_Via := v_Raw_Via & "SIP/2.0/" & PX_TRANSPORT & " newvia.org:5061";
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        // Wait PTC Check done
        awaitingPRPtcCheck2(loc_CSeq_s);
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including a Via  header set with multiple values separated by a comma forwards the message  having inserted its own Via header value without changing the order of  these field values.";
        extension "Reference: 7.3.1 [1], 10.46.4 [1]";
        extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received";
      } // end testcase SIP_MG_PR_V_009
      testcase SIP_MG_PR_V_010(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1], 10.46.4 [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including
      // multiple Via headers forwards the message after having inserted its own
      // Via header value but without changing the order of these fields.
      {
        var SipComponent vl_ptc;
        var charstring vl_len_sdp;
        var integer i := 0;
        var integer j,
        vl_str_len;
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        vl_ptc.start (
          ptc_INVITE_Forwarded(
            INVITE_Request_r_7_1,
            v_CallId,
            loc_CSeq_ptc_s,
            v_cancel_sent,
            v_bye_sent));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        vl_str_len := lengthof (v_Raw_Via);
        v_Raw_Via :=
        v_Raw_Via & CRLF & "Via: SIP/2.0/" & PX_TRANSPORT & " newvia.org:5061";
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        // Wait PTC Check done
        awaitingPRPtcCheck2(loc_CSeq_s);
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including  multiple Via headers forwards the message after having inserted its own  Via header value but without changing the order of these fields.";
        extension "Reference: 7.3.1 [1], 10.46.4 [1]";
        extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received";
      } // end testcase SIP_MG_PR_V_010
      testcase SIP_MG_PR_V_011(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including
      // a branch parameter named with upper and lower cases in Via header
      // forwards the message.
      //
      {
        var SipComponent vl_ptc;
        var SemicolonParam_List vl_params;
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        vl_ptc.start (
          ptc_INVITE_Forwarded(
            INVITE_Request_r_1,
            v_CallId,
            loc_CSeq_ptc_s,
            v_cancel_sent,
            v_bye_sent));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        
        vl_params := valueof(v_Via.viaBody[0].viaParams);
        vl_params[0].id := "BrAnCH";
        v_Via.viaBody[0].viaParams := vl_params;
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        v_RequestFor407 :=
        valueof(INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact));
        // Wait PTC Check done
        awaitingPRPtcCheck(loc_CSeq_s);
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including  a branch parameter named with upper and lower cases in Via header  forwards the message. ";
        extension "Reference: 7.3.1 [1]";
        extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received";
      } // end testcase SIP_MG_PR_V_011
      testcase SIP_MG_PR_V_012(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 7.2 [1]
      // Purpose : Ensure that the IUT after having forwarded an INVITE request,
      // on receipt of a Success (299 OK) response with non-defined last two
      // digits forwards the message.
      {
        var SipComponent vl_ptc;
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        setHeadersPtcInvite(loc_CSeq_s);
        vl_ptc.start (
          ptc_Answer_the_Call_with_2XX(
            299,
            "OK",
            loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        SIPP.send (
          INVITE_Request_s_2(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via)) to v_sent_label;
        
        v_CSeq := loc_CSeq_s;
        
        if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
          v_RequestFor407 :=
          valueof(INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via));
          v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
        }
        awaitingPRInvite200OK(
          Response_2XX_r_1(v_CallId, v_CSeq),
          loc_CSeq_s);
        
        send200OKACK(loc_CSeq_s);
        
        // Sending of a BYE request to release the call
        sendBYE(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT after having forwarded an INVITE request,  on receipt of a Success (299 OK) response with non-defined last two  digits forwards the message.";
        extension "Reference: 7.2 [1]";
        extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid Success (2xx OK) response received OR No Success (2xx OK) response received";
      } // end testcase SIP_MG_PR_V_012
      testcase SIP_MG_PR_V_013(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 7.2[1]
      // Purpose : Ensure that the IUT after having forwarded an INVITE request,
      // on receipt of a Success (200 PERFECT) response with an unknown reason
      // phrase forwards the message.
      {
        var SipComponent vl_ptc;
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        setHeadersPtcInvite(loc_CSeq_s);
        vl_ptc.start (
          ptc_Answer_the_Call_with_2XX(
            200,
            "Perfect",
            loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        
        SIPP.send (
          INVITE_Request_s_2(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via)) to v_sent_label;
        
        v_CSeq := loc_CSeq_s;
        
        if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
          v_RequestFor407 :=
          valueof(INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via));
          v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
        }
        awaitingPRInvite200OK(
          Response_2XX_r_1(v_CallId, v_CSeq),
          loc_CSeq_s);
        
        send200OKACK(loc_CSeq_s);
        
        // Sending of a BYE request to release the call
        sendBYE(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT after having forwarded an INVITE request,  on receipt of a Success (200 PERFECT) response with an unknown reason  phrase forwards the message.";
        extension "Reference: 7.2[1]";
        extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid Success (200 PERFECT) response received OR No Success (200 PERFECT) response received";
      } // end testcase SIP_MG_PR_V_013
      testcase SIP_MG_PR_V_014(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.3[1] [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including
      // headers set with short names forwards the message.
      {
        var SipComponent vl_ptc;
        var charstring vl_len_sdp;
        var integer i := 0;
        var integer j,
        vl_str_len;
        var charstring vl_Raw_CallId := "";
        var charstring vl_Raw_From := "";
        var charstring vl_Raw_To := "";
        var charstring vl_Raw_Via := "";
        var charstring vl_Raw_Contact := "";
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        vl_ptc.start (
          ptc_INVITE_Forwarded(
            INVITE_Request_r_7,
            v_CallId,
            loc_CSeq_ptc_s,
            v_cancel_sent,
            v_bye_sent));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        vl_str_len := lengthof (v_Raw_CallId);
        vl_Raw_CallId[0] := "i";
        i := 1;
        for (j := 7; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_CallId[i] := v_Raw_CallId[j];
          i := i + 1;
        }
        
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        vl_str_len := lengthof (v_Raw_From);
        vl_Raw_From[0] := "f";
        i := 1;
        for (j := 4; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_From[i] := v_Raw_From[j];
          i := i + 1;
        }
        
        v_Raw_To := buildRaw_ToHeader(v_To);
        vl_str_len := lengthof (v_Raw_To);
        vl_Raw_To[0] := "t";
        i := 1;
        for (j := 2; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_To[i] := v_Raw_To[j];
          i := i + 1;
        }
        
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        vl_str_len := lengthof (v_Raw_Via);
        vl_Raw_Via[0] := "v";
        i := 1;
        for (j := 3; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_Via[i] := v_Raw_Via[j];
          i := i + 1;
        }
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        vl_str_len := lengthof (v_Raw_Contact);
        vl_Raw_Contact[0] := "m";
        i := 1;
        for (j := 7; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_Contact[i] := v_Raw_Contact[j];
          i := i + 1;
        }
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_1(
            v_Raw_RequestUri,
            vl_Raw_CallId,
            v_Raw_CSeq,
            vl_Raw_Contact,
            vl_Raw_From,
            vl_Raw_To,
            v_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        // Wait PTC Check done
        awaitingPRPtcCheck2(loc_CSeq_s);
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including  headers set with short names forwards the message.";
        extension "Reference: 7.3.3[1] [1] ";
        extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received";
      } // end testcase SIP_MG_PR_V_014
      testcase SIP_MG_PR_V_015(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 18.1.1 [1]
      // Purpose : Ensure that the IUT on receipt of a 65.535 bytes long INVITE request
      // forwards the message.
      {
        var SipComponent vl_ptc;
        var integer vl_len_sdp;
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        vl_ptc.start (
          ptc_INVITE_Forwarded(
            INVITE_Request_r_1,
            v_CallId,
            loc_CSeq_ptc_s,
            v_cancel_sent,
            v_bye_sent));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        vl_len_sdp := lengthof (px_sdpBody_65535);
        
        SIPP.send (
          INVITE_Request_s_5(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact,
            vl_len_sdp,
            px_sdpBody_65535)) to v_sent_label;
        
        v_RequestFor407 :=
        valueof(INVITE_Request_s_5(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact,
            vl_len_sdp,
            px_sdpBody_65535));
        // Wait PTC Check done
        awaitingPRPtcCheck(loc_CSeq_s);
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT on receipt of a 65.535 bytes long INVITE request  forwards the message.";
        extension "Reference: 18.1.1 [1] ";
        extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received";
      } // end testcase SIP_MG_PR_V_015
      testcase SIP_MG_PR_V_016(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 7.5 [1]
      // Purpose : Ensure that the IUT, on receipt of a INVITE request over a
      // stream-oriented (TCP) transport with several CRLF before the start-line,
      // forwards the message.
      {
        var SipComponent vl_ptc;
        var charstring vl_len_sdp;
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        vl_ptc.start (
          ptc_INVITE_Forwarded(
            INVITE_Request_r_1,
            v_CallId,
            loc_CSeq_ptc_s,
            v_cancel_sent,
            v_bye_sent));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_2(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        // Wait PTC Check done
        awaitingPRPtcCheck2(loc_CSeq_s);
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT, on receipt of a INVITE request over a  stream-oriented (TCP) transport with several CRLF before the start-line,  forwards the message.";
        extension "Reference: 7.5 [1] ";
        extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received";
      } // end testcase SIP_MG_PR_V_016
    } // end group ValidBehaviour
    group InvalidBehaviour {
      testcase SIP_MG_PR_I_001(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 7.1[1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request with SIP version
      // in lower case forwards the message.
      {
        var SipComponent vl_ptc;
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        vl_ptc.start (
          ptc_INVITE_Forwarded(
            INVITE_Request_r_1,
            v_CallId,
            loc_CSeq_ptc_s,
            v_cancel_sent,
            v_bye_sent));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        
        SIPP.send (
          INVITE_Request_s_16(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        v_RequestFor407 :=
        valueof(INVITE_Request_s_16(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact));
        
        // Wait PTC Check done
        awaitingPRPtcCheck(loc_CSeq_s);
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT on receipt of an INVITE request with SIP version  in lower case forwards the message.";
        extension "Reference: 7.1[1]";
        extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received";
      } // end testcase SIP_MG_PR_I_001
      testcase SIP_MG_PR_I_002(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request including a
      // transport parameter in the From and To headers, ignores them and forwards
      // the message.
      {
        var SipComponent vl_ptc;
        var SemicolonParam_List vl_params;
        var integer i;
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        vl_ptc.start (
          ptc_INVITE_Forwarded(
            INVITE_Request_r_1,
            v_CallId,
            loc_CSeq_ptc_s,
            v_cancel_sent,
            v_bye_sent));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        
        v_From.fromParams := {
          {
            "transport",
            "tcp"
          }
        };
        v_To.toParams := {
          {
            "transport",
            "tcp"
          }
        };
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        v_RequestFor407 :=
        valueof(INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact));
        
        // Wait PTC Check done
        awaitingPRPtcCheck(loc_CSeq_s);
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request including a  transport parameter in the From and To headers, ignores them and forwards  the message.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received";
      } // end testcase SIP_MG_PR_I_002;
      testcase SIP_MG_PR_I_003(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request including header
      //  parameters in the SIP-URI of the From and To headers, ignores them and forwards
      //  the message.
      {
        var SipComponent vl_ptc;
        var SemicolonParam_List vl_params;
        var integer i;
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        vl_ptc.start (
          ptc_INVITE_Forwarded(
            INVITE_Request_r_1,
            v_CallId,
            loc_CSeq_ptc_s,
            v_cancel_sent,
            v_bye_sent));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        
        if (ischosen (v_From.addressField.nameAddr)) {
          if (ispresent (v_From
              .addressField
              .nameAddr
              .addrSpec
              .headers)) {
            vl_params :=
            valueof(
              v_From
              .addressField
              .nameAddr
              .addrSpec
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          v_From.addressField.nameAddr.addrSpec.headers :=
          vl_params
        } else {
          if (ispresent (v_From
              .addressField
              .addrSpecUnion
              .headers)) {
            vl_params :=
            valueof(
              v_From.addressField.addrSpecUnion.headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          v_From.addressField.addrSpecUnion.headers := vl_params
        };
        
        if (ischosen (v_To.addressField.nameAddr)) {
          if (ispresent (v_To
              .addressField
              .nameAddr
              .addrSpec
              .headers)) {
            vl_params :=
            valueof(
              v_To
              .addressField
              .nameAddr
              .addrSpec
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h2",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h2",
                paramValue := "$"
              }
            }
          };
          v_To.addressField.nameAddr.addrSpec.headers :=
          vl_params
        } else {
          if (ispresent (v_To
              .addressField
              .addrSpecUnion
              .headers)) {
            vl_params :=
            valueof(
              v_To.addressField.addrSpecUnion.headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h2",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h2",
                paramValue := "$"
              }
            }
          };
          v_To.addressField.addrSpecUnion.headers := vl_params
        };
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        v_RequestFor407 :=
        valueof(INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact));
        
        // Wait PTC Check done
        awaitingPRPtcCheck(loc_CSeq_s);
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request including header  parameters in the SIP-URI of the From and To headers, ignores them and forwards  the message.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received";
      } // end testcase SIP_MG_PR_I_003;
      testcase SIP_MG_PR_I_004(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request including method
      // parameters set to "CANCEL" in the SIP-URI of the From and To headers, ignores
      // them and forwards the message.
      {
        var SipComponent vl_ptc;
        var integer i;
        var SemicolonParam_List vl_params;
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        vl_ptc.start (
          ptc_INVITE_Forwarded(
            INVITE_Request_r_1,
            v_CallId,
            loc_CSeq_ptc_s,
            v_cancel_sent,
            v_bye_sent));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        
        if (ischosen (v_From.addressField.nameAddr)) {
          if (ispresent (v_From
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              v_From
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "CANCEL"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "CANCEL"
              }
            }
          };
          v_From.addressField.nameAddr.addrSpec.urlParameters :=
          vl_params
        } else {
          if (ispresent (v_From
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              v_From
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "CANCEL"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "CANCEL"
              }
            }
          };
          v_From.addressField.addrSpecUnion.urlParameters :=
          vl_params
        };
        
        if (ischosen (v_To.addressField.nameAddr)) {
          if (ispresent (v_To
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              v_To
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "CANCEL"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "CANCEL"
              }
            }
          };
          v_To.addressField.nameAddr.addrSpec.urlParameters :=
          vl_params
        } else {
          if (ispresent (v_To
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              v_To
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "CANCEL"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "CANCEL"
              }
            }
          };
          v_To.addressField.addrSpecUnion.urlParameters :=
          vl_params
        };
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        v_RequestFor407 :=
        valueof(INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact));
        
        // Wait PTC Check done
        awaitingPRPtcCheck(loc_CSeq_s);
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request including method parameters set to ""CANCEL"" in the SIP-URI of the From and To headers, ignores  them and forwards the message.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received";
      } // end testcase SIP_MG_PR_I_004;
      testcase SIP_MG_PR_I_005(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 21.4.1 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request without Call-Id
      // header sends a Bad Request (400 Bad Request) response.
      {
        var SipComponent vl_ptc;
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        vl_ptc.start (
          ptc_INVITE_Not_Forwarded_noAck(
            v_CallId,
            loc_CSeq_ptc_s,
            v_cancel_sent));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        
        SIPP.send (
          INVITE_Request_Inv_s_1(
            v_RequestUri,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        synchroniseInitPtc();
        
        if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
          v_RequestFor407 :=
          valueof(INVITE_Request_Inv_s_1(
              v_RequestUri,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via,
              v_Contact));
          v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
        }
        
        awaitingPRInviteNon200OK_1(
          Response_400_r_2(*, v_CSeq),
          loc_CSeq_s);
        
        // Wait PTC Check done
        awaitingPRPtcCheck_NoForward(loc_CSeq_s);
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request without Call-Id  header sends a Bad Request (400 Bad Request) response.";
        extension "Reference: 21.4.1 [1] ";
        extension "FailCause: Invalid 400 Bad Request received OR No 400 Bad Request received";
      } // end testcase SIP_MG_PR_I_005;
      testcase SIP_MG_PR_I_006(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.2 [1], 20 [1], table 2  [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including
      // header field Retry-After, ignores it and forwards the message.
      {
        var SipComponent vl_ptc;
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        vl_ptc.start (
          ptc_INVITE_Forwarded(
            INVITE_Request_r_1,
            v_CallId,
            loc_CSeq_ptc_s,
            v_cancel_sent,
            v_bye_sent));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        
        SIPP.send (
          INVITE_Request_Inv_s_2(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        v_RequestFor407 :=
        valueof(INVITE_Request_Inv_s_2(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact));
        
        // Wait PTC Check done
        awaitingPRPtcCheck(loc_CSeq_s);
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including  header field Retry-After, ignores it and forwards the message.";
        extension "Reference: 7.3.2 [1], 20 [1], table 2  [1]";
        extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received";
      } // end testcase SIP_MG_PR_I_006;
      testcase SIP_MG_PR_I_007(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 18.3 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request, while a
      // message-oriented (UDP) transport is used, including a body part shorter
      // than the length indicated in the Content-Length header field, sends a
      // Bad Request (400 Bad Request) response.
      {
        var SipComponent vl_ptc;
        var integer vl_len_sdp;
        
        v_Default := activate (defaultCCPR());
        
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (
          ptc_INVITE_Not_Forwarded(
            v_CallId,
            loc_CSeq_ptc_s,
            v_cancel_sent));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        
        vl_len_sdp := lengthof (px_sdpBody) + 10;
        
        SIPP.send (
          INVITE_Request_s_5(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        synchroniseInitPtc();
        
        v_RequestFor407 :=
        valueof(INVITE_Request_s_5(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact,
            vl_len_sdp,
            px_sdpBody));
        
        awaitingPRInviteNon200OK(
          Response_400_r_1(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        // Wait PTC Check done
        awaitingPRPtcCheck_NoForward(loc_CSeq_s);
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request, while a  message-oriented (UDP) transport is used, including a body part shorter  than the length indicated in the Content-Length header field, sends a  Bad Request (400 Bad Request) response.";
        extension "Reference: 18.3 [1]";
        extension "FailCause: Invalid 400 Bad Request received OR No 400 Bad Request received";
      } // end testcase SIP_MG_PR_I_007;
      testcase SIP_MG_PR_I_008(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 18.3 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request, while a
      // message-oriented (UDP) transport is used, including a body part longer
      // than the length indicated in the Content-Length header field, ignores
      // extra bytes  and forwards the message.
      {
        var SipComponent vl_ptc;
        var integer vl_len_sdp;
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        vl_ptc.start (
          ptc_INVITE_Forwarded(
            INVITE_Request_r_1,
            v_CallId,
            loc_CSeq_ptc_s,
            v_cancel_sent,
            v_bye_sent));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        
        vl_len_sdp := lengthof (px_sdpBody) - 1;
        
        SIPP.send (
          INVITE_Request_s_5(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        v_RequestFor407 :=
        valueof(INVITE_Request_s_5(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact,
            vl_len_sdp,
            px_sdpBody));
        
        // Wait PTC Check done
        awaitingPRPtcCheck(loc_CSeq_s);
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request, while a  message-oriented (UDP) transport is used, including a body part longer  than the length indicated in the Content-Length header field, ignores  extra bytes  and forwards the message.";
        extension "Reference: 18.3 [1]";
        extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received";
      } // end testcase SIP_MG_PR_I_008;
      
      testcase SIP_MG_PR_I_009(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 18.3 [1]
      // Purpose : Ensure that the IUT, while a message-oriented (UDP) transport is used
      // , on receipt of a Success (200 OK) response including a body part shorter than
      // the length indicated in the Content-Length header field, discards it and does
      // not forward it.
      {
        var SipComponent vl_ptc;
        var Response vl_Response;
        var boolean vl_Enabled := true;
        var SipUrl vl_RequestUri := valueof(SipUrl_ofPTC);
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        
        vl_ptc.start (
          ptc_MG_PR_I_009(
            loc_CSeq_ptc_s,
            v_CallId));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        
        SIPP.send (
          INVITE_Request_s_12(
            vl_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        synchroniseInitPtc();
        
        v_RequestFor407 :=
        valueof(INVITE_Request_s_12(
            vl_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact));
        
        //2XX Message is not forwarded
        TNoAct.start (PX_TNOACT);
        alt {
          [] SIPP.receive (
            Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
            repeat;
          }
          [PX_REGISTRATION_AUTHENTICATION_ENABLED
            and vl_Enabled] ALTSTEP_407(loc_CSeq_s) {
            TResp.stop;
            TResp.start (PX_TRESP);
            vl_Enabled := false;
            repeat;
          }
          [] SIPP.receive (Response: ?) -> value vl_Response {
            log ("BEGIN_TRACE_INFO 2xx Message should not be forwarded. END_TRACE_INFO");
            terminatePRMtcCall(vl_Response, loc_CSeq_s);
            setverdict (fail);
          }
          [] TNoAct.timeout {
            setverdict (pass);
            cancelCall(
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_Cancel_To,
              v_reqHostPort,
              v_Via);
          }
        }
        awaitingPRPtcCheck_NoForward(loc_CSeq_s);
        
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT, while a message-oriented (UDP) transport is used , on receipt of a Success (200 OK) response including a body part shorter than  the length indicated in the Content-Length header field, discards it and does  not forward it.";
        extension "Reference: 18.3 [1]";
        extension "FailCause: Any INVITE_Request received OR Any SIP Message Received";
      } // end testcase SIP_MG_PR_I_009;
      testcase SIP_MG_PR_I_010(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 18.3 [1]
      // Purpose : Ensure that the IUT, when an INVITE client transaction is in the
      // Calling state while a message-oriented (UDP) transport is used, on receipt
      // of a Success (200 OK) response including a body part longer than the
      // length indicated in the Content-Length header field, ignores extra bytes
      // and forwards it.
      {
        var SipComponent vl_ptc;
        var SipUrl vl_RequestUri := valueof(SipUrl_ofPTC);
        
        v_Default := activate (defaultCCPR());
        vl_ptc := SipComponent.create;
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (
          ptc_MG_PR_I_010(
            loc_CSeq_ptc_s,
            v_CallId));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersPtcInvite(loc_CSeq_s);
        SIPP.send (
          INVITE_Request_s_2(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via)) to v_sent_label;
        
        v_CSeq := loc_CSeq_s;
        
        synchroniseInitPtc();
        
        if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
          v_RequestFor407 :=
          valueof(INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via));
          v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
        }
        awaitingPRInvite200OK(
          Response_200_r_1(v_CallId, v_CSeq),
          loc_CSeq_s);
        
        v_ack_sent := true;
        send200OKACK(loc_CSeq_s);
        
        // Sending of a BYE request to release the call
        sendBYE(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        v_bye_sent := true;
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as Proxy";
        extension "Description: Ensure that the IUT, when an INVITE client transaction is in the  Calling state while a message-oriented (UDP) transport is used, on receipt  of a Success (200 OK) response including a body part longer than the  length indicated in the Content-Length header field, ignores extra bytes  and forwards it.";
        extension "Reference: 18.3 [1]";
        extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received";
      } // end testcase SIP_MG_PR_I_010;
    } // end group InvalidBehaviour
  } // end group Proxy
  group Redirectserver {
    // GroupSelection:  IUT is a Redirect Server.
    //
    group ValidBehaviour {
      testcase SIP_MG_RD_V_001(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request including
      // escaped characters in the SIP-URI of the Contact header, sends a 3XX
      // redirection response to the caller.
      {
        var SipComponent vl_ptc;
        var SemicolonParam_List vl_params;
        var ContactAddress vl_ContactAddress;
        
        v_Default := activate (defaultCCRD());
        
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersRDPtcInvite(loc_CSeq_s);
        
        vl_ContactAddress :=
        v_Contact.contactBody.contactAddresses[0];
        if (ischosen (vl_ContactAddress.addressField.nameAddr)) {
          v_Contact
          .contactBody
          .contactAddresses[0]
          .addressField
          .nameAddr
          .addrSpec
          .userInfo
          .userOrTelephoneSubscriber :=
          encodeEscapeDelim(
            v_Contact
            .contactBody
            .contactAddresses[0]
            .addressField
            .nameAddr
            .addrSpec
            .userInfo
            .userOrTelephoneSubscriber);
        } else {
          v_Contact
          .contactBody
          .contactAddresses[0]
          .addressField
          .addrSpecUnion
          .userInfo
          .userOrTelephoneSubscriber :=
          encodeEscapeDelim(
            v_Contact
            .contactBody
            .contactAddresses[0]
            .addressField
            .addrSpecUnion
            .userInfo
            .userOrTelephoneSubscriber);
        }
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        awaitingPRInviteNon200OK(
          Response_3XX_r_3(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as a Redirect Server";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request including  escaped characters in the SIP-URI of the Contact header, sends a 3XX  redirection response to the caller.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid 3XX redirection response received OR No 3XX redirection response received";
      } // end testcase SIP_MG_RD_V_001;
      testcase SIP_MG_RD_V_002(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request including
      // escaped delimiters in the SIP-URI of the Contact header, sends a 3XX
      // redirection response to the caller.
      {
        var SipComponent vl_ptc;
        var charstring vl_len_sdp;
        
        v_Default := activate (defaultCCRD());
        
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersRDPtcInvite(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Contact :=
        buildRaw_EscapedDelimiters_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        awaitingPRInviteNon200OK(
          Response_3XX_r_3(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
      }
      with {
        extension "Preconditions: IUT can behave as a Redirect Server";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request including  escaped delimiters in the SIP-URI of the Contact header, sends a 3XX  redirection response to the caller.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid 3XX redirection response received OR No 3XX redirection response received";
      } // end testcase SIP_MG_RD_V_002;
      testcase SIP_MG_RD_V_003(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request including
      // non-understood uri-parameters in the SIP-URI of the Contact header,
      // sends a 3XX redirection response to the caller.
      {
        var SipComponent vl_ptc;
        var SemicolonParam_List vl_params;
        var ContactAddress vl_ContactAddress;
        var integer i;
        
        v_Default := activate (defaultCCRD());
        
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersRDPtcInvite(loc_CSeq_s);
        
        vl_ContactAddress :=
        v_Contact.contactBody.contactAddresses[0];
        
        if (ischosen (vl_ContactAddress.addressField.nameAddr)) {
          if (ispresent (vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "paramUnknown",
              paramValue := "nonunderstood"
            }
          } else {
            vl_params := {
              {
                id := "paramUnknown",
                paramValue := "nonunderstood"
              }
            }
          };
          vl_ContactAddress
          .addressField
          .nameAddr
          .addrSpec
          .urlParameters :=
          vl_params
        } else {
          if (ispresent (vl_ContactAddress
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "paramUnknown",
              paramValue := "nonunderstood"
            }
          } else {
            vl_params := {
              {
                id := "paramUnknown",
                paramValue := "nonunderstood"
              }
            }
          };
          vl_ContactAddress
          .addressField
          .addrSpecUnion
          .urlParameters :=
          vl_params
        }
        
        v_Contact.contactBody.contactAddresses[0] :=
        vl_ContactAddress;
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        awaitingPRInviteNon200OK(
          Response_3XX_r_3(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as a Redirect Server";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request including  non-understood uri-parameters in the SIP-URI of the Contact header,  sends a 3XX redirection response to the caller.";
        extension "Reference: 19.1.1 [1]  ";
        extension "FailCause: Invalid 3XX redirection response received OR No 3XX redirection response received";
      } // end testcase SIP_MG_RD_V_003;
      testcase SIP_MG_RD_V_004(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request including
      // a header parameter in the SIP-URI of the Contact header, sends a 3XX
      // redirection response to the caller.
      {
        var SipComponent vl_ptc;
        var ContactAddress vl_ContactAddress;
        var SemicolonParam_List vl_params;
        var integer i;
        
        v_Default := activate (defaultCCRD());
        
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersRDPtcInvite(loc_CSeq_s);
        
        // append header parameter in SIP-URL of the contact header field
        vl_ContactAddress :=
        v_Contact.contactBody.contactAddresses[0];
        if (ischosen (vl_ContactAddress.addressField.nameAddr)) {
          if (ispresent (vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .headers)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          vl_ContactAddress.addressField.nameAddr.addrSpec.headers :=
          vl_params
        } else {
          if (ispresent (vl_ContactAddress
              .addressField
              .addrSpecUnion
              .headers)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .addrSpecUnion
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          vl_ContactAddress.addressField.addrSpecUnion.headers :=
          vl_params
        }
        
        v_Contact.contactBody.contactAddresses[0] :=
        vl_ContactAddress;
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        awaitingPRInviteNon200OK(
          Response_3XX_r_3(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as a Redirect Server";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request including  a header parameter in the SIP-URI of the Contact header, sends a 3XX  redirection response to the caller.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid 3XX redirection response received OR No 3XX redirection response received";
      } // end testcase SIP_MG_RD_V_004;
      testcase SIP_MG_RD_V_005(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request including
      // a method parameter set to "INVITE" in the SIP-URI of the Contact header,
      //  sends a 3XX redirection response to the caller.
      {
        var SipComponent vl_ptc;
        var SemicolonParam_List vl_params;
        var ContactAddress vl_ContactAddress;
        var integer i;
        
        v_Default := activate (defaultCCRD());
        
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersRDPtcInvite(loc_CSeq_s);
        
        vl_ContactAddress :=
        v_Contact.contactBody.contactAddresses[0];
        if (ischosen (vl_ContactAddress.addressField.nameAddr)) {
          if (ispresent (vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "INVITE"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "INVITE"
              }
            }
          };
          vl_ContactAddress
          .addressField
          .nameAddr
          .addrSpec
          .urlParameters :=
          vl_params
        } else {
          if (ispresent (vl_ContactAddress
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              vl_ContactAddress
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "INVITE"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "INVITE"
              }
            }
          };
          vl_ContactAddress
          .addressField
          .addrSpecUnion
          .urlParameters :=
          vl_params
        }
        
        v_Contact.contactBody.contactAddresses[0] :=
        vl_ContactAddress;
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        awaitingPRInviteNon200OK(
          Response_3XX_r_3(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as a Redirect Server";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request including  a method parameter set to ""INVITE"" in the SIP-URI of the Contact header,  sends a 3XX redirection response to the caller.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid 3XX redirection response received OR No 3XX redirection response received";
      } // end testcase SIP_MG_RD_V_005;
      testcase SIP_MG_RD_V_006(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 8.2.2 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request including
      // unknown headers, sends a 3XX redirection response to the caller.
      {
        var SipComponent vl_ptc;
        var charstring vl_len_sdp;
        
        v_Default := activate (defaultCCRD());
        
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersRDPtcInvite(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Contact :=
        buildRaw_ContactHeader(v_Contact)
        & CRLF
        & "UnknownHead: 0";
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        awaitingPRInviteNon200OK(
          Response_3XX_r_3(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as a Redirect Server";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request including  unknown headers, sends a 3XX redirection response to the caller.";
        extension "Reference: 8.2.2 [1] ";
        extension "FailCause: Invalid 3XX redirection response received OR No 3XX redirection response received";
      } // end testcase SIP_MG_RD_V_006;
      testcase SIP_MG_RD_V_007(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request including
      // headers named with upper and lower cases, sends a 3XX redirection response
      // to the caller.
      {
        var SipComponent vl_ptc;
        var charstring vl_len_sdp;
        
        v_Default := activate (defaultCCRD());
        
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersRDPtcInvite(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CallId[1] := "A";
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_CSeq[2] := "E";
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_From[1] := "R";
        v_Raw_From[2] := "O";
        v_Raw_From[3] := "M";
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Via[2] := "A";
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        awaitingPRInviteNon200OK(
          Response_3XX_r_3(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
      }
      with {
        extension "Preconditions: IUT can behave as a Redirect Server";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request including  headers named with upper and lower cases, sends a 3XX redirection response  to the caller.";
        extension "Reference: 7.3.1 [1] ";
        extension "FailCause: Invalid 3XX redirection response received OR No 3XX redirection response received";
      } // end testcase SIP_MG_RD_V_007;
      testcase SIP_MG_RD_V_008(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request including
      // headers set with values preceded by several leading white space and
      // properly extended over multiple lines, sends a 3XX redirection
      // response to the caller.
      {
        var SipComponent vl_ptc;
        var charstring vl_len_sdp;
        
        v_Default := activate (defaultCCRD());
        
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersRDPtcInvite(loc_CSeq_s);
        
        v_white_space := true;
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_white_space := false;
        
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        awaitingPRInviteNon200OK(
          Response_3XX_r_3(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as a Redirect Server";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request including  headers set with values preceded by several leading white space and  properly extended over multiple lines, sends a 3XX redirection  response to the caller.";
        extension "Reference: 7.3.1 [1] ";
        extension "FailCause: Invalid 3XX redirection response received OR No 3XX redirection response received";
      } // end testcase SIP_MG_RD_V_008
      testcase SIP_MG_RD_V_009(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1], 10.46.4 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request including a Via
      // header set with multiple values separated by a comma, sends a 3XX redirection
      // response including the received Via header values, without changing their order,
      //  to the caller.
      {
        var SipComponent vl_ptc;
        var charstring vl_len_sdp;
        var integer i := 0;
        var integer j,
        vl_str_len;
        
        v_Default := activate (defaultCCRD());
        
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersRDPtcInvite(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        vl_str_len := lengthof (v_Raw_Via);
        i := vl_str_len;
        v_Raw_Via[i] := ",";
        v_Raw_Via := v_Raw_Via & "SIP/2.0/" & PX_TRANSPORT & " newvia.org:5061";
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        awaitingPRInviteNon200OK(
          Response_3XX_r_3(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as a Redirect Server";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request including a Via  header set with multiple values separated by a comma, sends a 3XX redirection  response including the received Via header values, without changing their order,  to the caller.";
        extension "Reference: 7.3.1 [1], 10.46.4 [1]";
        extension "FailCause: Invalid 3XX redirection response received OR No 3XX redirection response received";
      } // end testcase SIP_MG_RD_V_009
      testcase SIP_MG_RD_V_010(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1], 10.46.4 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request including
      // multiple Via headers, sends a 3XX redirection response including the received
      // Via header values, without changing their order, to the caller.
      {
        var SipComponent vl_ptc;
        var charstring vl_len_sdp;
        var integer i := 0;
        var integer j,
        vl_str_len;
        
        v_Default := activate (defaultCCRD());
        
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersRDPtcInvite(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        vl_str_len := lengthof (v_Raw_Via);
        v_Raw_Via :=
        v_Raw_Via & CRLF & "Via: SIP/2.0/" & PX_TRANSPORT & " newvia.org:5061";
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_1(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        awaitingPRInviteNon200OK(
          Response_3XX_r_3(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as a Redirect Server";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request including  multiple Via headers, sends a 3XX redirection response including the received  Via header values, without changing their order, to the caller.";
        extension "Reference: 7.3.1 [1], 10.46.4 [1]";
        extension "FailCause: Invalid 3XX redirection response received OR No 3XX redirection response received";
      } // end testcase SIP_MG_RD_V_010
      testcase SIP_MG_RD_V_011(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.1 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request including a
      // branch parameter named with upper and lower cases in Via header, sends a
      // 3XX redirection to the caller.
      {
        var SipComponent vl_ptc;
        var SemicolonParam_List vl_params;
        
        v_Default := activate (defaultCCRD());
        
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersRDPtcInvite(loc_CSeq_s);
        
        vl_params := valueof(v_Via.viaBody[0].viaParams);
        vl_params[0].id := "BrAnCH";
        v_Via.viaBody[0].viaParams := vl_params;
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        awaitingPRInviteNon200OK(
          Response_3XX_r_3(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as a Redirect Server";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request including a  branch parameter named with upper and lower cases in Via header, sends a  3XX redirection to the caller.";
        extension "Reference: 7.3.1 [1]";
        extension "FailCause: Invalid 3XX redirection response received OR No 3XX redirection response received";
      } // end testcase SIP_MG_RD_V_011
      testcase SIP_MG_RD_V_012(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.3[1][1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request including
      // headers set with short names, sends a 3XX redirection to the caller.
      {
        var SipComponent vl_ptc;
        var charstring vl_len_sdp;
        var integer i := 0;
        var integer j,
        vl_str_len;
        var charstring vl_Raw_CallId := "";
        var charstring vl_Raw_From := "";
        var charstring vl_Raw_To := "";
        var charstring vl_Raw_Via := "";
        var charstring vl_Raw_Contact := "";
        
        v_Default := activate (defaultCCRD());
        
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersRDPtcInvite(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        vl_str_len := lengthof (v_Raw_CallId);
        vl_Raw_CallId[0] := "i";
        i := 1;
        for (j := 7; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_CallId[i] := v_Raw_CallId[j];
          i := i + 1;
        }
        
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        vl_str_len := lengthof (v_Raw_From);
        vl_Raw_From[0] := "f";
        i := 1;
        for (j := 4; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_From[i] := v_Raw_From[j];
          i := i + 1;
        }
        
        v_Raw_To := buildRaw_ToHeader(v_To);
        vl_str_len := lengthof (v_Raw_To);
        vl_Raw_To[0] := "t";
        i := 1;
        for (j := 2; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_To[i] := v_Raw_To[j];
          i := i + 1;
        }
        
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        vl_str_len := lengthof (v_Raw_Via);
        vl_Raw_Via[0] := "v";
        i := 1;
        for (j := 3; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_Via[i] := v_Raw_Via[j];
          i := i + 1;
        }
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        vl_str_len := lengthof (v_Raw_Contact);
        vl_Raw_Contact[0] := "m";
        i := 1;
        for (j := 7; j <= (vl_str_len - 1); j := j + 1) {
          vl_Raw_Contact[i] := v_Raw_Contact[j];
          i := i + 1;
        }
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_1(
            v_Raw_RequestUri,
            vl_Raw_CallId,
            v_Raw_CSeq,
            vl_Raw_Contact,
            vl_Raw_From,
            vl_Raw_To,
            v_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        awaitingPRInviteNon200OK(
          Response_3XX_r_3(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as a Redirect Server";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request including  headers set with short names, sends a 3XX redirection to the caller.";
        extension "Reference: 7.3.3[1][1] ";
        extension "FailCause: Invalid 3XX redirection response received OR No 3XX redirection response received";
      } // end testcase SIP_MG_RD_V_012
      testcase SIP_MG_RD_V_013(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 18.1.1 [1]
      // Purpose : Ensure that the IUT on receipt of a 65.535 bytes long INVITE request
      // sends a 3XX redirection to the caller.
      {
        var SipComponent vl_ptc;
        var integer vl_len_sdp;
        
        v_Default := activate (defaultCCRD());
        
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersRDPtcInvite(loc_CSeq_s);
        
        vl_len_sdp := lengthof (px_sdpBody_65535);
        
        SIPP.send (
          INVITE_Request_s_5(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact,
            vl_len_sdp,
            px_sdpBody_65535)) to v_sent_label;
        
        awaitingPRInviteNon200OK(
          Response_3XX_r_3(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as a Redirect Server";
        extension "Description: Ensure that the IUT on receipt of a 65.535 bytes long INVITE request  sends a 3XX redirection to the caller.";
        extension "Reference: 18.1.1 [1] ";
        extension "FailCause: Invalid 3XX redirection response received OR No 3XX redirection response received";
      } // end testcase SIP_MG_RD_V_013
      testcase SIP_MG_RD_V_014(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 7.5 [1]
      // Purpose : Ensure that the IUT, on receipt of a INVITE request over a
      // stream-oriented (TCP) transport with several CRLF before the start-line,
      // sends a 3XX redirection to the caller.
      {
        var SipComponent vl_ptc;
        var charstring vl_len_sdp;
        
        v_Default := activate (defaultCCRD());
        
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersRDPtcInvite(loc_CSeq_s);
        
        // raw headers are built
        v_Raw_CallId := buildRaw_CallIdHeader(v_CallId);
        v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
        v_Raw_From := buildRaw_FromHeader(v_From);
        v_Raw_To := buildRaw_ToHeader(v_To);
        v_Raw_Via := buildRaw_ViaHeader(v_Via);
        v_Raw_Contact := buildRaw_ContactHeader(v_Contact);
        v_Raw_RequestUri := buildRaw_SipURL(v_RequestUri);
        vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        SIPP.send (
          Raw_INVITE_Request_s_2(
            v_Raw_RequestUri,
            v_Raw_CallId,
            v_Raw_CSeq,
            v_Raw_Contact,
            v_Raw_From,
            v_Raw_To,
            v_Raw_Via,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        awaitingPRInviteNon200OK(
          Response_3XX_r_3(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as a Redirect Server";
        extension "Description: Ensure that the IUT, on receipt of a INVITE request over a  stream-oriented (TCP) transport with several CRLF before the start-line,  sends a 3XX redirection to the caller.";
        extension "Reference: 7.5 [1] ";
        extension "FailCause: Invalid 3XX redirection response received OR No 3XX redirection response received";
      } // end testcase SIP_MG_RD_V_014
    } // end group ValidBehaviour
    group InvalidBehaviour {
      testcase SIP_MG_RD_I_001(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 7.1[1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request with SIP version
      //  in lower case, sends a 3XX redirection response to the caller.
      {
        var SipComponent vl_ptc;
        
        v_Default := activate (defaultCCRD());
        
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersRDPtcInvite(loc_CSeq_s);
        
        SIPP.send (
          INVITE_Request_s_16(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        awaitingPRInviteNon200OK(
          Response_3XX_r_3(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as a Redirect Server";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request with SIP version  in lower case, sends a 3XX redirection response to the caller.";
        extension "Reference: 7.1[1]";
        extension "FailCause: Invalid 3XX redirection response received OR No 3XX redirection response received";
      } // end testcase SIP_MG_RD_I_001
      testcase SIP_MG_RD_I_002(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request including a
      // transport parameter in the From and To headers, ignores them and sends a
      // 3XX redirection to the caller.
      {
        var SipComponent vl_ptc;
        var SemicolonParam_List vl_params;
        var integer i;
        
        v_Default := activate (defaultCCRD());
        
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersRDPtcInvite(loc_CSeq_s);
        
        v_From.fromParams := {
          {
            "transport",
            "tcp"
          }
        };
        v_To.toParams := {
          {
            "transport",
            "tcp"
          }
        };
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        awaitingPRInviteNon200OK(
          Response_3XX_r_3(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as a Redirect Server";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request including a  transport parameter in the From and To headers, ignores them and sends a  3XX redirection to the caller.";
        extension "Reference: 19.1.1 [1]";
        extension "FailCause: Invalid 3XX redirection response received OR No 3XX redirection response received";
      } // end testcase SIP_MG_RD_I_002
      testcase SIP_MG_RD_I_003(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request including
      // header parameters in the SIP-URI of the From and To headers, ignores them
      // and sends a 3XX redirection to the caller.
      {
        var SipComponent vl_ptc;
        var integer i;
        var SemicolonParam_List vl_params;
        
        v_Default := activate (defaultCCRD());
        
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersRDPtcInvite(loc_CSeq_s);
        
        if (ischosen (v_From.addressField.nameAddr)) {
          if (ispresent (v_From
              .addressField
              .nameAddr
              .addrSpec
              .headers)) {
            vl_params :=
            valueof(
              v_From
              .addressField
              .nameAddr
              .addrSpec
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          v_From.addressField.nameAddr.addrSpec.headers :=
          vl_params
        } else {
          if (ispresent (v_From
              .addressField
              .addrSpecUnion
              .headers)) {
            vl_params :=
            valueof(
              v_From.addressField.addrSpecUnion.headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h1",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h1",
                paramValue := "$"
              }
            }
          };
          v_From.addressField.addrSpecUnion.headers := vl_params
        };
        
        if (ischosen (v_To.addressField.nameAddr)) {
          if (ispresent (v_To
              .addressField
              .nameAddr
              .addrSpec
              .headers)) {
            vl_params :=
            valueof(
              v_To
              .addressField
              .nameAddr
              .addrSpec
              .headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h2",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h2",
                paramValue := "$"
              }
            }
          };
          v_To.addressField.nameAddr.addrSpec.headers :=
          vl_params
        } else {
          if (ispresent (v_To
              .addressField
              .addrSpecUnion
              .headers)) {
            vl_params :=
            valueof(
              v_To.addressField.addrSpecUnion.headers);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "h2",
              paramValue := "$"
            }
          } else {
            vl_params := {
              {
                id := "h2",
                paramValue := "$"
              }
            }
          };
          v_To.addressField.addrSpecUnion.headers := vl_params
        };
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        awaitingPRInviteNon200OK(
          Response_3XX_r_3(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as a Redirect Server";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request including  header parameters in the SIP-URI of the From and To headers, ignores them  and sends a 3XX redirection to the caller.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid 3XX redirection response received OR No 3XX redirection response received";
      } // end testcase SIP_MG_RD_I_003
      testcase SIP_MG_RD_I_004(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 19.1.1 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request including method
      //  parameters set to "CANCEL" in the SIP-URI of the From and To headers,
      // ignores them and sends a 3XX redirection to the caller.
      {
        var SipComponent vl_ptc;
        var SemicolonParam_List vl_params;
        var integer i;
        
        v_Default := activate (defaultCCRD());
        
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersRDPtcInvite(loc_CSeq_s);
        
        if (ischosen (v_From.addressField.nameAddr)) {
          if (ispresent (v_From
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              v_From
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "CANCEL"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "CANCEL"
              }
            }
          };
          v_From.addressField.nameAddr.addrSpec.urlParameters :=
          vl_params
        } else {
          if (ispresent (v_From
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              v_From
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "CANCEL"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "CANCEL"
              }
            }
          };
          v_From.addressField.addrSpecUnion.urlParameters :=
          vl_params
        };
        
        if (ischosen (v_To.addressField.nameAddr)) {
          if (ispresent (v_To
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters)) {
            vl_params :=
            valueof(
              v_To
              .addressField
              .nameAddr
              .addrSpec
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "CANCEL"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "CANCEL"
              }
            }
          };
          v_To.addressField.nameAddr.addrSpec.urlParameters :=
          vl_params
        } else {
          if (ispresent (v_To
              .addressField
              .addrSpecUnion
              .urlParameters)) {
            vl_params :=
            valueof(
              v_To
              .addressField
              .addrSpecUnion
              .urlParameters);
            i := sizeof (vl_params);
            vl_params[i] := {
              id := "method",
              paramValue := "CANCEL"
            }
          } else {
            vl_params := {
              {
                id := "method",
                paramValue := "CANCEL"
              }
            }
          };
          v_To.addressField.addrSpecUnion.urlParameters :=
          vl_params
        };
        
        SIPP.send (
          INVITE_Request_s_12(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        awaitingPRInviteNon200OK(
          Response_3XX_r_3(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as a Redirect Server";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request including method  parameters set to ""CANCEL"" in the SIP-URI of the From and To headers,  ignores them and sends a 3XX redirection to the caller.";
        extension "Reference: 19.1.1 [1] ";
        extension "FailCause: Invalid 3XX redirection response received OR No 3XX redirection response received";
      } // end testcase SIP_MG_RD_I_004
      testcase SIP_MG_RD_I_005(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 21.4.1 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request without Call-Id
      // header sends a Bad Request (400 Bad Request) response.
      {
        var SipComponent vl_ptc;
        
        v_Default := activate (defaultCCRD());
        
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersRDPtcInvite(loc_CSeq_s);
        
        SIPP.send (
          INVITE_Request_Inv_s_1(
            v_RequestUri,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        awaitingPRInviteNon200OK_1(
          Response_400_r_2(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as a Redirect Server";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request without Call-Id  header sends a Bad Request (400 Bad Request) response.";
        extension "Reference: 21.4.1 [1] ";
        extension "FailCause: Invalid Bad Request (400 Bad Request) response received OR No Bad Request (400 Bad Request) response received";
      } // end testcase SIP_MG_RD_I_005
      testcase SIP_MG_RD_I_006(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 7.3.2 [1], 20 [1], table 2  [1]
      // Purpose : Ensure that the IUT on receipt of an INVITE request including header
      // field Retry-After, ignores it and sends a 3XX redirection to the caller.
      {
        var SipComponent vl_ptc;
        
        v_Default := activate (defaultCCRD());
        
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersRDPtcInvite(loc_CSeq_s);
        
        SIPP.send (
          INVITE_Request_Inv_s_2(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact)) to v_sent_label;
        
        awaitingPRInviteNon200OK(
          Response_3XX_r_3(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as a Redirect Server";
        extension "Description: Ensure that the IUT on receipt of an INVITE request including header field Retry-After, ignores it and sends a 3XX redirection to the caller.";
        extension "Reference: 7.3.2 [1], 20 [1], table 2  [1]";
        extension "FailCause: Invalid 3XX redirection response received OR No 3XX redirection response received";
      } // end testcase SIP_MG_RD_I_006
      testcase SIP_MG_RD_I_007(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 18.3 [1]
      // Purpose : Ensure that the IUT, on receipt of an INVITE request, while a
      // message-oriented (UDP) transport is used, including a body part shorter
      // than the length indicated in the Content-Length header field, sends a
      // Bad Request (400 Bad Request) response.
      {
        var SipComponent vl_ptc;
        var integer vl_len_sdp;
        
        v_Default := activate (defaultCCRD());
        
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersRDPtcInvite(loc_CSeq_s);
        
        vl_len_sdp := lengthof (px_sdpBody) + 10;
        
        SIPP.send (
          INVITE_Request_s_5(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        awaitingPRInviteNon200OK(
          Response_400_r_1(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
        
      }
      with {
        extension "Preconditions: IUT can behave as a Redirect Server";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request, while a  message-oriented (UDP) transport is used, including a body part shorter  than the length indicated in the Content-Length header field, sends a  Bad Request (400 Bad Request) response.";
        extension "Reference: 18.3 [1]";
        extension "FailCause: Invalid Bad Request (400 Bad Request) response received OR No Bad Request (400 Bad Request) response received";
      } // end testcase SIP_MG_RD_I_007
      testcase SIP_MG_RD_I_008(
        inout CSeq loc_CSeq_s,
        CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
      // Ref: 18.3 [1]
      // Purpose :Ensure that the IUT, on receipt of an INVITE request, while a
      // message-oriented (UDP) transport is used, including a body part longer
      // than the length indicated in the Content-Length header field, ignores
      // extra bytes and sends a 3XX redirection to the caller
      {
        var SipComponent vl_ptc;
        var integer vl_len_sdp;
        
        v_Default := activate (defaultCCRD());
        
        vl_ptc := SipComponent.create;
        
        initConfig1(mtc, vl_ptc, system);
        vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
        
        initMTC(loc_CSeq_s);
        
        //**************************************************
        //*******   MTC   Behaviour
        //**************************************************
        setHeadersRDPtcInvite(loc_CSeq_s);
        
        vl_len_sdp := lengthof (px_sdpBody) - 1;
        
        SIPP.send (
          INVITE_Request_s_5(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact,
            vl_len_sdp,
            px_sdpBody)) to v_sent_label;
        
        awaitingPRInviteNon200OK(
          Response_3XX_r_3(v_CallId, loc_CSeq_s),
          loc_CSeq_s);
        
        // wait the end of PTC
        wait_end_ptc(vl_ptc);
      }
      with {
        extension "Preconditions: IUT can behave as a Redirect Server";
        extension "Description: Ensure that the IUT, on receipt of an INVITE request, while a  message-oriented (UDP) transport is used, including a body part longer  than the length indicated in the Content-Length header field, ignores  extra bytes and sends a 3XX redirection to the caller";
        extension "Reference: 18.3 [1]";
        extension "FailCause: Invalid 3XX redirection response received OR No 3XX redirection response received";
      } // end testcase SIP_MG_RD_I_008
      // end testcase SIP_MG_RD_I_008
    } // end group InvalidBehaviour
  } // end group Redirectserver
} // end group TestPurposesforMessaging
}
