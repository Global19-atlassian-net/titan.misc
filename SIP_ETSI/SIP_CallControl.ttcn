/*
//-----------------------------------------------------------------------------
//AUTHOR:      Gyorgy Rethy, L.M. Ericsson (STF296, STF270, STF246, STF196, STF166)
//DATE:        September 2007
//VERSION:     4.2.1
//
//DTS/MTS 0097-3
//
//Methods for Testing and Specification (MTS);
//Conformance Test Specification for SIP (RFC32361);
//Part 3: Abstract Test Suite (TTCN-3 code)
//
//(c) European Telecommunications Standards Institute 2001.
//All rights reserved.
//
//-----------------------------------------------------------------------------
//HISTORY: ---> see History in SIP_MainModule.ttcn
//
//References
//The following documents contain provisions which, through reference in this text, constitute provisions of the present document.
//- References are either specific (identified by date of publication, edition number, version number, etc.) or non-specific.
//- For a specific reference, subsequent revisions do not apply.
//- For a non-specific reference, the latest version applies.
//- A non-specific reference to an ETS shall also be taken to refer to later versions published as an EN with the same number.
//[1]  RFC 3261, "Session Description Protocol", SDP: Session Description Protocol. M. Handley, V. Jacobson. April 1998. (Status: PROPOSED STANDARD).
//[3]  ISO/IEC 9646-1: "Information technology - Open Systems Interconnection - Conformance testing methodology and framework - Part 1: General concepts
//[4]  ISO/IEC 9646-2: "Information technology - Open Systems Interconnection - Conformance testing methodology and framework - Part 2: Abstract Test Suite specification".
//[5] ISO/IEC 9646-3: "Information technology - Open Systems Interconnection - Conformance testing methodology and framework - Part 3: The Tree and Tabular Combined Notation".
//[6]  ETS 300 406: "Methods for Testing and Specification (MTS); Protocol and profile conformance testing specifications; Standardization methodology".
*/

//**************************************************************************************************
//compiled with Titan 5 R4C 2016.02.22 Elemer Lelik
//**************************************************************************************************


module SIP_CallControl {

import from SIPmsg_Types all;
import from SIP_TypesAndConf all;
import from SIP_Templates all;
import from SIP_Steps all;

group TestPurposesforCallControl {
  // Ref: 1.4.4 [1]
  //
  group OriginatingEndpoint {
    group Callestablishment {
      group ValidBehaviour {
        testcase SIP_CC_OE_CE_V_001(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var INVITE_Request vl_INVITE_Request;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          iUTRegistration();
          action ("Please send INVITE");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              INVITE_Request_r_5) -> value vl_INVITE_Request {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
              rejectInvite(loc_CSeq_s);
            }
            
            [] SIPP.receive (
              INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
              all timer.stop;
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
              rejectInvite(loc_CSeq_s);
              setverdict (fail);
              stop;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              setverdict (fail);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, to establish a call sends an INVITE request including at least To, From, CSeq, Call-ID, Max-Forwards, Contact and Via headers.";
          extension "Reference: 8.1.1[1]";
          extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received ";
        }
        testcase SIP_CC_OE_CE_V_002(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var INVITE_Request vl_INVITE_Request;
          var SipUrl vl_To_SipUrl;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          iUTRegistration();
          action ("Please send INVITE");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              INVITE_Request_r_5) -> value vl_INVITE_Request sender v_sent_label {
              TWait.stop;
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
              if (ischosen (v_To.addressField.nameAddr)) {
                vl_To_SipUrl :=
                v_To.addressField.nameAddr.addrSpec;
              } else {
                vl_To_SipUrl :=
                v_To.addressField.addrSpecUnion;
              }
              if (eqURIs(vl_To_SipUrl,
                  vl_INVITE_Request.requestLine.requestUri)) {
                setverdict (pass);
              } else {
                log ("BEGIN_TRACE_INFO Request-URI unequal to URI value of To header. END_TRACE_INFO");
                setverdict (fail);
              }
              rejectInvite(loc_CSeq_s);
            }
            
            [] SIPP.receive (
              INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
              all timer.stop;
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
              rejectInvite(loc_CSeq_s);
              setverdict (fail);
              stop;
            }
            [] SIPP.receive {
              all timer.stop;
              rejectInvite(loc_CSeq_s);
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              setverdict (fail);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, to establish a call sends an INVITE request with a Request-URI set to the same URI value of the To header.";
          extension "Reference: 8.1.1[1]";
          extension "FailCause: Invalid INVITE_Request received OR Request-URI unequal to URI value of To header field in received INVITE_Request OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_003(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var INVITE_Request vl_INVITE_Request;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          iUTRegistration();
          action ("Please send INVITE");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              INVITE_Request_r_2) -> value vl_INVITE_Request sender v_sent_label {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
              rejectInvite(loc_CSeq_s);
            }
            [] SIPP.receive (
              INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
              all timer.stop;
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
              rejectInvite(loc_CSeq_s);
              setverdict (fail);
              stop;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              setverdict (fail);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, to establish a call sends an INVITE request including a To header set to an address of the callee and without TAG parameter.";
          extension "Reference: 8.1.1.2[1] ";
          extension "FailCause: Invalid INVITE_Request received OR URI value of To header field unequals PX_ETS_LOCAL_DOMAIN in received INVITE_Request OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_004(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var INVITE_Request vl_INVITE_Request;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          iUTRegistration();
          action ("Please send INVITE");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              INVITE_Request_r_5) -> value vl_INVITE_Request sender v_sent_label {
              var From vl_from;
              TWait.stop;
              vl_from :=
              valueof(
                vl_INVITE_Request.msgHeader.fromField);
              if (ispresent (vl_from.fromParams)) {
                var SemicolonParam_List vl_params :=
                valueof(
                  vl_INVITE_Request
                  .msgHeader
                  .fromField
                  .fromParams);
                if (checkTagPresent(vl_params)) {
                  setverdict (pass);
                } else {
                  log ("BEGIN_TRACE_INFO Missing TAG parameter in From header. END_TRACE_INFO");
                  setverdict (fail);
                }
              } else {
                setverdict (fail);
              }
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
              rejectInvite(loc_CSeq_s);
            }
            
            [] SIPP.receive (
              INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
              all timer.stop;
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
              rejectInvite(loc_CSeq_s);
              setverdict (fail);
              stop;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              setverdict (fail);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, to establish a call sends an INVITE request including a From header with a TAG parameter.";
          extension "Reference: 8.1.1.3[1]";
          extension "FailCause: Invalid INVITE_Request received OR Missing TAG parameter in From header of received INVITE_Request OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_005(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var INVITE_Request vl_INVITE_Request;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          iUTRegistration();
          action ("Please send INVITE");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
              rejectInvite(loc_CSeq_s);
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              setverdict (fail);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, to establish a call sends an INVITE request including a CSeq header with a method that matches ""INVITE"".";
          extension "Reference: 8.1.1.5[1]";
          extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_006(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var INVITE_Request vl_INVITE_Request;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          iUTRegistration();
          action ("Please send INVITE");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              INVITE_Request_r_6(70)) -> value vl_INVITE_Request sender v_sent_label {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
              rejectInvite(loc_CSeq_s);
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              setverdict (fail);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, to establish a call sends an INVITE request including a Max-Forward header set to 70.";
          extension "Reference: 8.1.1.6[1]";
          extension "FailCause: Invalid INVITE_Request received OR Max-Forward header unequals 70 in received INVITE_Request OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_007(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var INVITE_Request vl_INVITE_Request;
          var charstring vl_branch := "";
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          iUTRegistration();
          action ("Please send INVITE");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              INVITE_Request_r_7) -> value vl_INVITE_Request sender v_sent_label {
              TWait.stop;
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
              if (ispresent (v_Via.viaBody[0].viaParams)) {
                var SemicolonParam_List vl_params :=
                valueof(v_Via.viaBody[0].viaParams);
                if (checkBranchPresent(vl_params,
                    vl_branch)) {
                  if (match(vl_branch,
                      ValidBranch)) {
                    setverdict (pass);
                  } else {
                    log ("BEGIN_TRACE_INFO Invalid branch parameter in Via header. END_TRACE_INFO");
                    setverdict (fail);
                  }
                } else {
                  log ("BEGIN_TRACE_INFO Missing branch parameter in Via header. END_TRACE_INFO");
                  setverdict (fail);
                }
              } else {
                log ("BEGIN_TRACE_INFO Missing parameter in Via header. END_TRACE_INFO");
                setverdict (fail);
              }
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
              rejectInvite(loc_CSeq_s);
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              setverdict (fail);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, to establish a call sends an INVITE request including a Via header with a protocol name set to SIP, a protocol version set to 2.0 and a branch parameter set to a value beginning with ""z9hG4bK"".";
          extension "Reference: 8.1.1.7[1]";
          extension "FailCause: Invalid INVITE_Request received OR Via header field is missing in received INVITE_Request OR Parameter is missing in Via header field in received INVITE_Request OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_008(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var INVITE_Request vl_INVITE_Request;
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          iUTRegistration();
          action ("Please send INVITE");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              INVITE_Request_r_8) -> value vl_INVITE_Request sender v_sent_label {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
              rejectInvite(loc_CSeq_s);
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              setverdict (fail);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, to establish a call sends an INVITE request including Allow and Supported headers.";
          extension "Reference: 13.2.1[1]";
          extension "FailCause: Invalid INVITE_Request received OR INVITE_Request with missing Allow and Support header fields OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_009(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var INVITE_Request vl_INVITE_Request;
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACallingState();
          SIPP.send (
            Response_100_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          checkProceedingState();
          rejectInvite(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Trying (100 Trying) response enters in the Proceeding state.";
          extension "Reference: 8. 8.1.3.2  [1], 13.2.2.1[1], figure 5 [1] ";
          extension "FailCause: Any message received after Trying (100 Trying) response was send";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_010(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var INVITE_Request vl_INVITE_Request;
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACallingState();
          SIPP.send (
            Response_183_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          checkProceedingState();
          rejectInvite(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Session Progress (183 Session Progress) response enters in the Proceeding state.";
          extension "Reference: 8.1.3.2 [1], 13.2.2.1[1], figure 5 [1] ";
          extension "FailCause: Any message received after Session Progress (183 Session Progress) response was send";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_011(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var INVITE_Request vl_INVITE_Request;
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACallingState();
          SIPP.send (
            Response_199_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          checkProceedingState();
          rejectInvite(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Unknown (199 Unknown) response enters in the Proceeding state.";
          extension "Reference: 8.1.3.2 [1], 13.2.2.1[1], figure 5 [1] ";
          extension "FailCause: Any message received after Unknown (199 Unknown) response was send";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_012(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var INVITE_Request vl_INVITE_Request;
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACProceedingState();
          SIPP.send (
            Response_100_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          checkProceedingState();
          rejectInvite(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Proceeding state, on receipt of a Trying (100 Trying) response stays in the Proceeding state.";
          extension "Reference: 8.1.3.2 [1], 13.2.2.1 [1], figure 5 [1] ";
          extension "FailCause: Any message received after Trying (100 Trying) response was send";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_013(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          send200OKInvite();
          awaiting200OKAckRequest(loc_CSeq_s);
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Success (200 OK) response sends an ACK request.";
          extension "Reference: 12.2.1.1[1], 13.2.2.4 [1], figure 5 [1], 17.1.1.3 [1]";
          extension "FailCause: Invalid ACK request received OR No ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CE_V_014(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACProceedingState();
          send200OKInvite();
          awaiting200OKAckRequest(loc_CSeq_s);
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Proceeding state, on receipt of a Success (200 OK) response sends an ACK request.";
          extension "Reference: 12.2.1.1[1], 13.2.2.4 [1], figure 5 [1], 17.1.1.3 [1]";
          extension "FailCause: Invalid ACK_Request received OR No ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CE_V_015(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Via vl_viaOld := v_Via;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACProceedingState();
          v_Via.viaBody[1] := v_Via.viaBody[0];
          send200OKInvite();
          awaitingNoAckRequest(loc_CSeq_s);
          v_Via := vl_viaOld;
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Proceeding state, on receipt of a Success (200 OK) response with more than one Via header value does not send an ACK request, discards the response.";
          extension "Reference: 8.1.3.3[1], figure 5 [1]";
          extension "FailCause: ACK_Request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Any message received after Success (200 ok) ";
        }
        testcase SIP_CC_OE_CE_V_016(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          send200OKInvite();
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_10(
                v_CallId,
                v_CSeq)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
            }
          }
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Success (200 OK) response sends an ACK request with the same CSeq sequence number as in the original INVITE request and the CSeq method     field value set to ""ACK"".";
          extension "Reference: 12.2.1.1[1], 13.2.2.4 [1], figure 5 [1], 17.1.1.3 [1]";
          extension "FailCause: Invalid ACK_Request received OR Invalid CSeq header value or method in received ACK_Request OR No ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CE_V_017(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          send200OKInvite();
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_2(
                v_CallId,
                v_caller_To)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
            }
          }
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Success (200 OK) response sends an ACK request with the To header set to the same value as in the received final response.";
          extension "Reference: 12.2.1.1[1], 13.2.2.4 [1], figure 5 [1], 17.1.1.3 [1]";
          extension "FailCause: Invalid ACK_Request received OR InvalidTo header field value of received ACK_Request OR No ACK_Request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CE_V_018(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var integer i := 0,
          j := 0,
          vl_last;
          var ACK_Request vl_ACK_Request;
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          if (ispresent (v_caller_To.toParams)) {
            var SemicolonParam_List vl_params :=
            valueof(v_caller_To.toParams),
            tmp2_params;
            vl_last := sizeof (vl_params);
            if ((vl_last == 1) and (vl_params[0].id == "tag")) {
              v_caller_To.toParams := omit;
            } else {
              for (i := 0; i <= vl_last; i := i + 1) {
                if (vl_params[i].id != "tag") {
                  j := j + 1;
                } else {
                  tmp2_params[i - j] := vl_params[i];
                }
              }
              v_caller_To.toParams := tmp2_params;
            }
          }
          v_callee_To := {
            fieldName := TO_E,
            addressField := v_caller_From.addressField,
            toParams := v_caller_From.fromParams
          };
          v_callee_From := {
            fieldName := FROM_E,
            addressField := v_caller_To.addressField,
            fromParams := v_caller_To.toParams
          };
          send200OKInvite();
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_2(
                v_CallId,
                v_caller_To)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
            }
          }
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Success (200 OK) response including a To header without TAG sends an ACK request with a To header without TAG.";
          extension "Reference: 12.2.1.1[1], 13.2.2.4 [1], figure 5 [1], 17.1.1.3 [1]";
          extension "FailCause: Invalid ACK_Request received OR TAG found in To header field of received ACK_Request OR No ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CE_V_019(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          var To vl_caller_To;
          var From vl_callee_From;
          var integer i := 0;
          var integer vl_last := 0;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          send200OKInvite();
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_2(
                v_CallId,
                v_caller_To)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              stop;
            }
          }
          vl_caller_To := v_caller_To;
          if (ispresent (vl_caller_To.toParams)) {
            var SemicolonParam_List vl_params :=
            valueof(vl_caller_To.toParams);
            vl_last := sizeof (vl_params);
            while ((vl_params[i].id != "tag")
              and (i < vl_last)) {
              i := i + 1;
            }
            vl_params[i].paramValue := getRndTag();
            vl_caller_To.toParams := vl_params;
            vl_callee_From := {
              fieldName := FROM_E,
              addressField := vl_caller_To.addressField,
              fromParams := vl_params
            };
          }
          if (v_BOO_RecordRoute) {
            SIPP.send (
              Response_200_Invite_WithRoute_s_1(
                v_CallId,
                v_CSeq,
                v_caller_From,
                vl_caller_To,
                v_Via,
                v_RecordRoute)) to v_sent_label;
          } else {
            SIPP.send (
              Response_200_Invite_s_1(
                v_CallId,
                v_CSeq,
                v_caller_From,
                vl_caller_To,
                v_Via)) to v_sent_label;
          }
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_2(
                v_CallId,
                vl_caller_To)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
            }
          }
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
          terminateCall(
            v_CallId,
            v_CSeq,
            vl_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of Success (200 OK) responses differing only on the tag in the To header, sends an ACK request with a To header identical to the received one for each received Success (200 OK) responses.";
          extension "Reference: 12.2.1.1 [1], 13.2.2.4[1] figure 5 [1], 17.1.1.2 [1] ";
          extension "FailCause: Invalid first or second ACK_Request received OR No first or second ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR first or second Invalid Final Success (200 OK) response received OR No first or second Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CE_V_020(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          send200OKInvite();
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_11(
                v_CallId,
                v_From)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Success (200 OK) response sends an ACK request with the same Call-ID and From headers as in the original INVITE request.";
          extension "Reference: 12.2.1.1 [1], figure 5 [1], 17.1.1.3 [1]";
          extension "FailCause: Invalid ACK_Request received OR Invalid Call-ID or From header field in received ACK_Request OR No ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CE_V_021(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          SIPP.send (
            Response_200_Invite_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_12(v_CallId)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Success (200 OK) response with no Record-Route header set sends an ACK request with the Request-URI set to the Contact URI included in the received final response and with no Route header set.";
          extension "Reference: 12.2.1.1[1], 13.2.2.4 [1], figure 5 [1]";
          extension "FailCause: Invalid ACK_Request received OR Route header field found in received ACK_Request OR No ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CE_V_022(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          SIPP.send (
            Response_200_s_5(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_4(
                v_CallId,
                SipUrl_IP_ofETS,
                Route_reverse_r_1)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Success (200 OK) response with a Record-Route header set to a list in which the last element contains lr parameter, sends an ACK request with the Request-URI set to the Contact URI and a Route header set to the list in a reverse order of the Record-Route included in the received final response.";
          extension "Reference: 12.2.1.1[1], 13.2.2.4 [1], figure 5 [1]";
          extension "FailCause: Invalid ACK_Request received OR Missing/invalid Route header field in received ACK_Request OR No ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CE_V_023(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          SIPP.send (
            Response_200_s_6(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_5(v_CallId)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Success (200 OK) response with a Record-Route header set to a list in which the last element does not contain lr parameter, sends an ACK request with the Request-URI set to this element and a Route header set to the remainder list in a reverse order of the received Record-Route appended with the received Contact URI.";
          extension "Reference: 12.2.1.1[1], 13.2.2.4 [1], figure 5 [1]";
          extension "FailCause: Invalid ACK_Request received OR Missing/invalid Route header field in received ACK_Request OR No ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CE_V_024(
          inout CSeq loc_CSeq_s,
          inout CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          var SipComponent vl_ptc;
          
          vl_ptc := SipComponent.create;
          initConfig1(mtc, vl_ptc, system);
          TGuard.start (PX_TGUARD);
          vl_ptc.start (ptc_CC_OE_CE_V_02x(loc_CSeq_ptc_s));
          initMTCPort();
          v_Default := activate (defaultCCOE());
          uACallingState();
          synchroniseInitPtc();
          SIPP.send (
            Response_300_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_13(
                v_CallId,
                v_caller_From,
                v_caller_To,
                v_RequestUri2)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
          wait_end_ptc(vl_ptc);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Multiple Choices (300 Multiple Choices) response sends an ACK request with the same Call-ID, From headers and Request-URI as in the original INVITE request and the same Tag in the To header as in the Multiple Choices (300 Multiple Choices) response.";
          extension "Reference: 13.2.2.2[1] figure 5 [1], 17.1.1.2 [1], 17.1.1.3 [1]";
          extension "FailCause: Invalid ACK_Request received OR Missing/invalid Tag in To header field in received ACK_Request OR No ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_025(
          inout CSeq loc_CSeq_s,
          inout CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          var SipComponent vl_ptc;
          
          vl_ptc := SipComponent.create;
          initConfig1(mtc, vl_ptc, system);
          TGuard.start (PX_TGUARD);
          vl_ptc.start (ptc_CC_OE_CE_V_02x(loc_CSeq_ptc_s));
          initMTCPort();
          v_Default := activate (defaultCCOE());
          uACProceedingState();
          synchroniseInitPtc();
          SIPP.send (
            Response_300_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_13(
                v_CallId,
                v_caller_From,
                v_caller_To,
                v_RequestUri2)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
          wait_end_ptc(vl_ptc);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Proceeding state, on receipt of a Multiple Choices (300 Multiple Choices) response sends an ACK request with the same Call-ID, From headers and Request-URI as in the original INVITE request and the same Tag in the To header as in the Multiple Choices (300 Multiple Choices) response.";
          extension "Reference: 13.2.2.2[1] figure 5 [1], 17.1.1.2 [1], 17.1.1.3 [1]";
          extension "FailCause: Invalid ACK_Request received OR Missing/invalid Tag in To header field in received ACK_Request OR No ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_026(
          inout CSeq loc_CSeq_s,
          inout CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          var SipComponent vl_ptc;
          vl_ptc := SipComponent.create;
          initConfig1(mtc, vl_ptc, system);
          TGuard.start (PX_TGUARD);
          vl_ptc.start (ptc_CC_OE_CE_V_02x(loc_CSeq_ptc_s));
          initMTCPort();
          v_Default := activate (defaultCCOE());
          uACallingState();
          synchroniseInitPtc();
          SIPP.send (
            Response_300_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_8(
                v_CallId,
                v_Via)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
          wait_end_ptc(vl_ptc);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Multiple Choices (300 Multiple Choices) response sends an ACK request with a single Via header equal to the top Via header sent in the original INVITE request.";
          extension "Reference: 13.2.2.2 [1], figure 5 [1], 17.1.1.3 [1]";
          extension "FailCause: Invalid ACK_Request received OR Invalid via header field in received ACK_Request OR No ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_027(
          inout CSeq loc_CSeq_s,
          inout CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          var SipComponent vl_ptc;
          
          vl_ptc := SipComponent.create;
          initConfig1(mtc, vl_ptc, system);
          TGuard.start (PX_TGUARD);
          vl_ptc.start (ptc_CC_OE_CE_V_02x(loc_CSeq_ptc_s));
          initMTCPort();
          v_Default := activate (defaultCCOE());
          uACallingState();
          synchroniseInitPtc();
          SIPP.send (
            Response_301_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_13(
                v_CallId,
                v_caller_From,
                v_caller_To,
                v_RequestUri2)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
          wait_end_ptc(vl_ptc);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Moved Permanently (301 Moved Permanently) response sends an ACK request with the same Call-ID, From headers and Request-URI as in the original INVITE request and the same Tag in the To header as in the Moved Permanently  (301 Moved Permanently) response.";
          extension "Reference: 13.2.2.2[1] figure 5 [1], 17.1.1.2 [1], 17.1.1.3 [1]";
          extension "FailCause: Invalid ACK_Request received OR Missing/invalid Tag in To header field in received ACK_Request OR No ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_028(
          inout CSeq loc_CSeq_s,
          inout CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          var SipComponent vl_ptc;
          
          vl_ptc := SipComponent.create;
          initConfig1(mtc, vl_ptc, system);
          TGuard.start (PX_TGUARD);
          vl_ptc.start (ptc_CC_OE_CE_V_02x(loc_CSeq_ptc_s));
          initMTCPort();
          v_Default := activate (defaultCCOE());
          uACallingState();
          synchroniseInitPtc();
          SIPP.send (
            Response_302_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_13(
                v_CallId,
                v_caller_From,
                v_caller_To,
                v_RequestUri2)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
          wait_end_ptc(vl_ptc);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Moved Temporarily (302 Moved Temporarily) response sends an ACK request with the same Call-ID, From headers and Request-URI as in the original INVITE request and the same Tag in the To header as in the Moved Temporarily (302 Moved Temporarily) response.";
          extension "Reference: 12.2.1.1 [1], 13.2.2.2[1] figure 5 [1], 17.1.1.2 [1], 17.1.1.3 [1]";
          extension "FailCause: Invalid ACK_Request received OR Missing/invalid Tag in To header field in received ACK_Request OR No ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_029(
          inout CSeq loc_CSeq_s,
          inout CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
          var SipComponent vl_ptc;
          
          vl_ptc := SipComponent.create;
          initConfig1(mtc, vl_ptc, system);
          TGuard.start (PX_TGUARD);
          vl_ptc.start (ptc_CC_OE_CE_V_029(loc_CSeq_ptc_s));
          initMTCPort();
          v_Default := activate (defaultCCOE());
          uACallingState();
          synchroniseInitPtc();
          SIPP.send (
            Response_305_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          awaitingAckRequest(loc_CSeq_s);
          wait_end_ptc(vl_ptc);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Use Proxy (305 Use Proxy) response sends an INVITE request to the proxy given by the Contact header.";
          extension "Reference: 8.1.3.4 [1], 21.3.4 [1], 13.2.2.2[1] figure 5 [1], 17.1.1.2 [1], 17.1.1";
          extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid second INVITE_Request received OR No second INVITE_Request received at PX_PROXY_IPADDR, PX_PROXY_PORT OR Invalid ACK_Request received OR No ACK request received";
        }
        testcase SIP_CC_OE_CE_V_030(
          inout CSeq loc_CSeq_s,
          inout CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
          var SipComponent vl_ptc;
          
          vl_ptc := SipComponent.create;
          initConfig1(mtc, vl_ptc, system);
          TGuard.start (PX_TGUARD);
          vl_ptc.start (ptc_CC_OE_CE_V_030(loc_CSeq_ptc_s));
          initMTCPort();
          v_Default := activate (defaultCCOE());
          uACallingState();
          synchroniseInitPtc();
          SIPP.send (
            Response_301_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          awaitingAckRequest(loc_CSeq_s);
          wait_end_ptc(vl_ptc);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Moved Permanently  (301 Moved Permanently) response sends a new INVITE request with a Request-URI set with one of URI given in the Contact header of the redirection response.";
          extension "Reference: 8.1.3.4 [1], figure 5 [1] ";
          extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid second INVITE_Request received OR No second INVITE_Request received at PX_ETS_IPADDR2 OR Invalid ACK_Request received OR No ACK request received";
        }
        testcase SIP_CC_OE_CE_V_031(
          inout CSeq loc_CSeq_s,
          inout CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
          var SipComponent vl_ptc;
          var charstring vl_branchId;
          
          vl_ptc := SipComponent.create;
          initConfig1(mtc, vl_ptc, system);
          TGuard.start (PX_TGUARD);
          vl_ptc.start (ptc_CC_OE_CE_V_031(loc_CSeq_ptc_s));
          initMTCPort();
          v_Default := activate (defaultCCOE());
          uACallingState();
          synchroniseInitPtc();
          if (ispresent (v_Via.viaBody[0].viaParams)) {
            var SemicolonParam_List vl_params :=
            valueof(v_Via.viaBody[0].viaParams);
            vl_branchId := getParamValue(vl_params, BRANCH_ID);
          }
          SIPP.send (
            Response_301_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          awaitingAckRequest(loc_CSeq_s);
          TSync.start (PX_TSYNC);
          alt {
            [] cpA.receive (CM_Param(vl_branchId)) {
              TSync.stop;
              setverdict (pass);
            }
            [] cpA.receive (CM_Param(?)) {
              TSync.stop;
              setverdict (fail);
            }
            [] TSync.timeout {
              setverdict (inconc);
            }
          }
          wait_end_ptc(vl_ptc);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Moved Permanently (301 Moved Permanently) response sends a new INVITE request with a new branch ID in the top Via header.";
          extension "Reference: 8.1.3.4 [1], figure 5 [1] ";
          extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid second INVITE_Request received OR Second INVITE_Request Via header does not contain new branch ID OR No second INVITE_Request received OR Invalid ACK_Request received OR No ACK request received";
        }
        testcase SIP_CC_OE_CE_V_032(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          SIPP.send (
            Response_404_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_13(
                v_CallId,
                v_caller_From,
                v_caller_To,
                v_RequestUri2)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling  state, on receipt of a Not Found (404 Not Found) response sends an ACK request with the same Call-ID, From headers and Request-URI as in the original INVITE request and the same Tag in the To header as in this response.";
          extension "Reference: 13.2.2.3[1] figure 5 [1], 17.1.1.2 [1], 17.1.1.3 [1]";
          extension "FailCause: Invalid ACK_Request received OR Missing/invalid Tag in To header field in received ACK_Request OR No ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_033(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACProceedingState();
          SIPP.send (
            Response_404_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_13(
                v_CallId,
                v_caller_From,
                v_caller_To,
                v_RequestUri2)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Proceeding state, on receipt of a Not Found (404 Not Found) response sends an ACK request with the same Call-ID, From headers and Request-URI as in the original INVITE request and the same Tag in the To header as in this response.";
          extension "Reference: 13.2.2.3[1] figure 5 [1], 17.1.1.2 [1], 17.1.1.3 [1]";
          extension "FailCause: Invalid ACK_Request received OR Missing/invalid Tag in To header field in received ACK_Request OR No ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_034(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          SIPP.send (
            Response_410_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_13(
                v_CallId,
                v_caller_From,
                v_caller_To,
                v_RequestUri2)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Gone (410 Gone) response sends an ACK request with the same Call-ID, From headers and Request-URI as in the original INVITE request and the same Tag in the To header as in this response.";
          extension "Reference: 13.2.2.3[1] figure 5 [1], 17.1.1.2 [1], 17.1.1.3 [1]";
          extension "FailCause: Invalid ACK_Request received OR Missing/invalid Tag in To header field in received ACK_Request OR No ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_035(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          SIPP.send (
            Response_480_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_13(
                v_CallId,
                v_caller_From,
                v_caller_To,
                v_RequestUri2)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Temporarily Unavailable (480 Temporarily Unavailable) response sends an ACK request with the same Call-ID, From headers and Request-URI as in the original INVITE request and the same Tag in the To header as in this response.";
          extension "Reference: 13.2.2.3[1] figure 5 [1], 17.1.1.2 [1], 17.1.1.3 [1]";
          extension "FailCause: Invalid ACK_Request received OR Missing/invalid Tag in To header field in received ACK_Request OR No ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_036(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          SIPP.send (
            Response_486_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_13(
                v_CallId,
                v_caller_From,
                v_caller_To,
                v_RequestUri2)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Busy Here (486 Busy Here) response sends an ACK request with the same Call-ID, From headers and Request-URI as in the original INVITE request and the same Tag in the To header as in this response.";
          extension "Reference: 13.2.2.3[1] figure 5 [1], 17.1.1.2 [1], 17.1.1.3 [1]";
          extension "FailCause: Invalid ACK_Request received OR Missing/invalid Tag in To header field in received ACK_Request OR No ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_037(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          SIPP.send (
            Response_500_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_13(
                v_CallId,
                v_caller_From,
                v_caller_To,
                v_RequestUri2)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Server Internal Error (500 Server Internal Error) response sends an ACK request with the same Call-ID, From headers and Request-URI as in the original INVITE request and the same Tag in the To header as in this response.";
          extension "Reference: 13.2.2.3[1] figure 5 [1], 17.1.1.2 [1], 17.1.1.3 [1]";
          extension "FailCause: Invalid ACK_Request received OR Missing/invalid Tag in To header field in received ACK_Request OR No ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_038(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Via vl_Via2;
          var SemicolonParam_List vl_params;
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          SIPP.send (
            Response_600_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          vl_Via2 := v_Via;
          vl_params := valueof(vl_Via2.viaBody[0].viaParams);
          vl_params[0] := {
            id := BRANCH_ID,
            paramValue := BRANCH_COOKIE & getRndTag()
          };
          vl_Via2.viaBody[0].viaParams := vl_params;
          SIPP.send (
            Response_500_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              vl_Via2)) to v_sent_label;
          awaitingAckRequest(loc_CSeq_s);
          checkNoFurtherMessages();
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Busy Everywhere (600 Busy Everywhere) and a Server Internal Error (500 Server Internal Error) responses with different branch parameter value on the top Via header sends only one ACK request.";
          extension "Reference: 13.2.2.3[1] figure 5 [1], 17.1.1.2 [1], 17.1.1.3 [1]";
          extension "FailCause: Invalid ACK_Request received OR Missing/invalid Tag in To header field in received ACK_Request OR No ACK request received OR More than one ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_039(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          SIPP.send (
            Response_603_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_13(
                v_CallId,
                v_caller_From,
                v_caller_To,
                v_RequestUri2)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Decline (603 Decline) response sends an ACK request with the same Call-ID, From headers and Request-URI as in the original INVITE request and the same Tag in the To header as in this response.";
          extension "Reference: 13.2.2.3[1] figure 5 [1], 17.1.1.2 [1], 17.1.1.3 [1]";
          extension "FailCause: Invalid ACK_Request received OR Missing/invalid Tag in To header field in received ACK_Request OR No ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_040(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Via vl_Via2;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          SIPP.send (
            Response_500_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          awaitingAckRequest(loc_CSeq_s);
          SIPP.send (
            Response_603_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          awaitingAckRequest(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT having already received a non 2XX final response to its INVITE request, on receipt of a Decline (603 Decline) response, with the same Via branch parameter and CSeq header method as in the INVITE request, sends an ACK message.";
          extension "Reference: 13.2.2.3[1] figure 5 [1], 17.1.1.2 [1], 17.1.1.3 [1]";
          extension "FailCause: Invalid ACK_Request received OR No ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_041(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          var Via vl_Via2;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          SIPP.send (
            Response_200_s_6(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          awaitingAckRequest(loc_CSeq_s);
          SIPP.send (
            Response_200_s_5(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_4(
                v_CallId,
                ?,
              ?)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT having already received a 2XX final response to its INVITE request, on receipt of a Success (200 OK) response, with a different Record-Route as in previous response, but with the same Via branch parameter and CSeq header method as in the INVITE request, sends an ACK request with a Route header set according to this new Record-Route.";
          extension "Reference: 17[1], 13.2.2.3[1] figure 5 [1], 17.1.1.2 [1], 17.1.1.3 [1]";
          extension "FailCause: Invalid ACK_Request received OR Missing/invalid Route header field in received ACK_Request OR No ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CE_V_042(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          SIPP.send (
            Response_699_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_13(
                v_CallId,
                v_caller_From,
                v_caller_To,
                v_RequestUri2)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Calling state, on receipt of a Unknown (699 Unknown) response sends an ACK request with the same Call-ID, From headers and Request-URI as in the original INVITE request and the same Tag in the To header as in this response.";
          extension "Reference: 8.1.3.2  [1], 13.2.2.3[1], figure 5 [1], 17.1.1.2 [1], 17.1.1.3 [1]";
          extension "FailCause: Invalid ACK_Request received OR Missing/invalid Tag in To header field in received ACK_Request OR No ACK request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_043(
          inout CSeq loc_CSeq_s,
          inout CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
          var SipComponent vl_ptc;
          var charstring vl_branchId;
          
          vl_ptc := SipComponent.create;
          initConfig1(mtc, vl_ptc, system);
          TGuard.start (PX_TGUARD);
          vl_ptc.start (ptc_CC_OE_CE_V_043(loc_CSeq_ptc_s));
          initMTCPort();
          v_Default := activate (defaultCCOE());
          uACallingState();
          synchroniseInitPtc();
          if (ispresent (v_Via.viaBody[0].viaParams)) {
            var SemicolonParam_List vl_params :=
            valueof(v_Via.viaBody[0].viaParams);
            vl_branchId := getParamValue(vl_params, BRANCH_ID);
          }
          SIPP.send (
            Response_301_s_1(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          awaitingAckRequest(loc_CSeq_s);
          wait_end_ptc(vl_ptc);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT having sent an INVITE to the location get from the redirect server, on receipt of a Success (200 OK) response sends an ACK request";
          extension "Reference: 21.3.3 [1], 12.2.1 [1], 13.2.2.2[1] figure 5 [1], 17.1.1.2 [1], 17.1.1.";
          extension "FailCause: Invalid ACK_Request received OR No ACK request received";
          extension "InconcCause: Invalid first/second INVITE_Request received OR No first/second INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_V_044(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          var INVITE_Request vl_INVITE_Request;
          var boolean vl_body_found;
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          iUTRegistration4();
          action ("Please send INVITE");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              INVITE_Request_r_3) -> value vl_INVITE_Request {
              TWait.stop;
              vl_body_found := true;
              setverdict (pass);
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
            }
            [] SIPP.receive (
              INVITE_Request_r_1) -> value vl_INVITE_Request {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
            }
            [] SIPP.receive {
              TWait.stop;
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              setverdict (fail);
              stop;
            }
          }
          send200OKInvite();
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_3(v_CallId)) -> value vl_ACK_Request {
              TAck.stop;
              if (vl_body_found) {
                log ("BEGIN_TRACE_INFO Message Body already found in INVITE_Request. END_TRACE_INFO");
                setverdict (fail);
              } else {
                setverdict (pass);
              }
            }
            [] SIPP.receive (
              ACK_Request_r_1(v_CallId)) -> value vl_ACK_Request {
              TAck.stop;
              if (vl_body_found) {
                setverdict (pass);
              } else {
                log ("BEGIN_TRACE_INFO Missing Message Body. END_TRACE_INFO");
                setverdict (fail);
              }
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              TAck.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT while is establishing a call, sends a unique session description either in the INVITE request or in the ACK request to answer the initial offers given then in the final 2XX response.";
          extension "Reference: 13.2.1 [1]";
          extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received OR INVITE_Request received with missing message body OR Invalid ACK_Request received OR No ACK request received OR ACK request received with missing message body ";
          extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CE_V_045(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          var INVITE_Request vl_INVITE_Request;
          var boolean vl_body_found;
          var ContentLength vl_ContentLength;
          var charstring vl_messageBody;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          iUTRegistration4();
          action ("Please send INVITE");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              INVITE_Request_r_3) -> value vl_INVITE_Request {
              TWait.stop;
              vl_body_found := true;
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
              if (ispresent (vl_INVITE_Request
                  .msgHeader
                  .contentLength)) {
                vl_ContentLength :=
                valueof(
                  vl_INVITE_Request
                  .msgHeader
                  .contentLength);
                if (ispresent (vl_INVITE_Request
                    .messageBody)) {
                  vl_messageBody :=
                  valueof(
                    vl_INVITE_Request.messageBody);
                  if (vl_ContentLength.len
                    == lengthof (vl_messageBody)) {
                    setverdict (pass);
                  } else {
                    log ("BEGIN_TRACE_INFO Message Body size unequal to Content_Length header size. END_TRACE_INFO");
                    setverdict (fail);
                  }
                } else {
                  if (vl_ContentLength.len == 0) {
                    setverdict (pass);
                  } else {
                    log ("BEGIN_TRACE_INFO Content_Length header size unequal to 0. END_TRACE_INFO");
                    setverdict (fail);
                  }
                }
              }
            }
            [] SIPP.receive (
              INVITE_Request_r_1) -> value vl_INVITE_Request {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
            }
            [] SIPP.receive {
              TWait.stop;
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              setverdict (fail);
              stop;
            }
          }
          send200OKInvite();
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_3(v_CallId)) -> value vl_ACK_Request {
              TAck.stop;
              if (vl_body_found) {
                log ("BEGIN_TRACE_INFO Message Body already found in INVITE_Request. END_TRACE_INFO");
                setverdict (fail);
              }
              vl_messageBody :=
              valueof(vl_INVITE_Request.messageBody);
              vl_ContentLength :=
              valueof(
                vl_INVITE_Request
                .msgHeader
                .contentLength);
              if (vl_ContentLength.len
                == lengthof (vl_messageBody)) {
                setverdict (pass);
              } else {
                log ("BEGIN_TRACE_INFO Message Body size unequal to Content_Length header size. END_TRACE_INFO");
                setverdict (fail);
              }
            }
            [] SIPP.receive (
              ACK_Request_r_1(v_CallId)) -> value vl_ACK_Request {
              TAck.stop;
              if (vl_body_found) {
                setverdict (pass);
              } else {
                log ("BEGIN_TRACE_INFO Missing Message Body. END_TRACE_INFO");
                setverdict (fail);
              }
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              TAck.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT while is establishing a call, sends a Content-Length header set to the size of the body in the message that contains the session description.";
          extension "Reference: 20.14 [1], 13.2.1 [1]";
          extension "FailCause: Invalid INVITE_Request received OR INVITE_Request received with missing message body OR INVITE_Request received with message Body size unequal to Content_Length header size OR No INVITE_Request received OR Invalid ACK_Request received OR ACK request received with missing message body OR ACK request received with message Body size unequal to Content_Length header size OR No ACK request received";
          extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CE_V_046(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          var INVITE_Request vl_INVITE_Request;
          var boolean vl_body_found;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          iUTRegistration4();
          action ("Please send INVITE");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              INVITE_Request_r_3) -> value vl_INVITE_Request {
              TWait.stop;
              vl_body_found := true;
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
              if (ispresent (vl_INVITE_Request
                  .msgHeader
                  .contentType)) {
                setverdict (pass);
              } else {
                log ("BEGIN_TRACE_INFO Content-Type header missing. END_TRACE_INFO");
                setverdict (fail);
              }
            }
            [] SIPP.receive (
              INVITE_Request_r_1) -> value vl_INVITE_Request {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
            }
            [] SIPP.receive {
              TWait.stop;
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              setverdict (fail);
              stop;
            }
          }
          send200OKInvite();
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_3(v_CallId)) -> value vl_ACK_Request {
              TAck.stop;
              if (vl_body_found) {
                log ("BEGIN_TRACE_INFO Message Body already found in INVITE_Request. END_TRACE_INFO");
                setverdict (fail);
              }
              if (ispresent (vl_INVITE_Request
                  .msgHeader
                  .contentType)) {
                setverdict (pass);
              } else {
                log ("BEGIN_TRACE_INFO Content-Type header missing. END_TRACE_INFO");
                setverdict (fail);
              }
            }
            [] SIPP.receive (
              ACK_Request_r_1(v_CallId)) -> value vl_ACK_Request {
              TAck.stop;
              if (vl_body_found) {
                setverdict (pass);
              } else {
                log ("BEGIN_TRACE_INFO Missing Message Body. END_TRACE_INFO");
                setverdict (fail);
              }
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              TAck.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT while is establishing a call, sends a Content-Type header in the message that contains the session description.";
          extension "Reference: 20.15 [1], 13.2.1 [1]";
          extension "FailCause: Invalid INVITE_Request received OR INVITE_Request received with missing message body OR INVITE_Request received with missing Content-Type header OR No INVITE_Request received OR Invalid ACK_Request received OR ACK request received with missing message body OR ACK request received with missing Content-Type header OR No ACK request received";
          extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CE_V_047(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          var INVITE_Request vl_INVITE_Request;
          var BYE_Request vl_BYE_Request;
          var boolean vl_body_found;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          iUTRegistration4();
          action ("Please send INVITE");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              INVITE_Request_r_3) -> value vl_INVITE_Request {
              TWait.stop;
              vl_body_found := true;
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
              if (ispresent (vl_INVITE_Request
                  .msgHeader
                  .contentEncoding)) {
                setverdict (pass);
              } else {
                log ("BEGIN_TRACE_INFO Content-Encoding header missing. END_TRACE_INFO");
                setverdict (fail);
              }
            }
            [] SIPP.receive (
              INVITE_Request_r_1) -> value vl_INVITE_Request {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
            }
            [] SIPP.receive {
              TWait.stop;
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              setverdict (fail);
              stop;
            }
          }
          send200OKInvite();
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_3(v_CallId)) -> value vl_ACK_Request {
              TAck.stop;
              if (vl_body_found) {
                log ("BEGIN_TRACE_INFO Message Body already found in INVITE_Request. END_TRACE_INFO");
                setverdict (fail);
              }
              if (ispresent (vl_INVITE_Request
                  .msgHeader
                  .contentEncoding)) {
                setverdict (pass);
              } else {
                log ("BEGIN_TRACE_INFO Content-Encoding header missing. END_TRACE_INFO");
                setverdict (fail);
              }
            }
            [] SIPP.receive (
              ACK_Request_r_1(v_CallId)) -> value vl_ACK_Request {
              TAck.stop;
              if (vl_body_found) {
                setverdict (pass);
              } else {
                log ("BEGIN_TRACE_INFO Missing Message Body. END_TRACE_INFO");
                setverdict (fail);
              }
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              TAck.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT while is establishing a call, sends a Content-Encoding header only in the message that contains the session description.";
          extension "Reference: 7.4. [1], 13.2.1 [1]";
          extension "FailCause: Invalid INVITE_Request received OR INVITE_Request received with missing message body OR INVITE_Request received with missing Content-Encoding header OR No INVITE_Request received OR Invalid ACK_Request received OR ACK request received with missing message body OR ACK request received with missing Content-Encoding header OR No ACK request received";
          extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CE_V_048(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ACK_Request vl_ACK_Request;
          var INVITE_Request vl_INVITE_Request;
          var BYE_Request vl_BYE_Request;
          var boolean vl_body_found;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          iUTRegistration4();
          action ("Please send INVITE");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              INVITE_Request_r_3) -> value vl_INVITE_Request {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
            }
            [] SIPP.receive (
              INVITE_Request_r_1) -> value vl_INVITE_Request {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
            }
            [] SIPP.receive {
              TWait.stop;
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              setverdict (fail);
              stop;
            }
          }
          if (v_BOO_RecordRoute) {
            SIPP.send (
              Response_200_Invite_s_3(
                v_CallId,
                v_CSeq,
                v_caller_From,
                v_caller_To,
                v_Via,
                px_sdpBody_UNSUPPORTED,
                v_RecordRoute)) to v_sent_label;
          } else {
            SIPP.send (
              Response_200_Invite_s_3a(
                v_CallId,
                v_CSeq,
                v_caller_From,
                v_caller_To,
                v_Via,
                px_sdpBody_UNSUPPORTED)) to v_sent_label;
          }
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_3(v_CallId)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (
              ACK_Request_r_1(v_CallId)) -> value vl_ACK_Request {
              TAck.stop;
              setverdict (pass);
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              TAck.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
          v_IUT_CSeq.method := "BYE";
          v_IUT_CSeq.seqNumber := v_IUT_CSeq.seqNumber + 1;
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              BYE_Request_r_2(
                v_CallId,
                v_IUT_CSeq,
                v_caller_From,
                v_caller_To)) -> value vl_BYE_Request {
              TAck.stop;
              setverdict (pass);
              setHeadersOnReceiptOfBye(vl_BYE_Request);
              send200OK();
            }
            [] SIPP.receive {
              all timer.stop;
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (inconc);
              stop;
            }
            [] TAck.timeout {
              terminateCall(
                v_CallId,
                v_IUT_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (inconc);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT while is establishing a call on receipt of in 2XX a not acceptable session description, sends an ACK request immediately followed by a BYE request.";
          extension "Reference: 13.2.1 [1]";
          extension "FailCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid ACK_Request received OR No ACK request received";
          extension "InconcCause: Invalid Bye_Request received or No Bye_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CE_V_049(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
        // Ref: 20.14 and 13.2.1
        // If a reliable transport (TCP) is used, ensure that the IUT while is establishing a call, sends a
        // Content-Length header set to the size of the body in the message that contains the session
        // description.
        {
          var ACK_Request vl_ACK_Request;
          var INVITE_Request vl_INVITE_Request;
          var boolean vl_body_found;
          var ContentLength vl_ContentLength;
          var charstring vl_messageBody;
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          iUTRegistration4();
          action ("Please send INVITE");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              INVITE_Request_r_3) -> value vl_INVITE_Request {
              TWait.stop;
              vl_body_found := true;
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
              if (ispresent (vl_INVITE_Request
                  .msgHeader
                  .contentLength)) {
                vl_ContentLength :=
                valueof(
                  vl_INVITE_Request
                  .msgHeader
                  .contentLength);
                if (ispresent (vl_INVITE_Request
                    .messageBody)) {
                  vl_messageBody :=
                  valueof(
                    vl_INVITE_Request.messageBody);
                  if (vl_ContentLength.len
                    == lengthof (vl_messageBody)) {
                    setverdict (pass);
                  } else {
                    log ("BEGIN_TRACE_INFO Message Body size unequal to Content_Length header size. END_TRACE_INFO");
                    setverdict (fail);
                  }
                } else {
                  if (vl_ContentLength.len == 0) {
                    setverdict (pass);
                  } else {
                    log ("BEGIN_TRACE_INFO Content_Length header size unequal to 0. END_TRACE_INFO");
                    setverdict (fail);
                  }
                }
              }
            }
            [] SIPP.receive (
              INVITE_Request_r_1) -> value vl_INVITE_Request {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
            }
            [] SIPP.receive {
              TWait.stop;
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              setverdict (fail);
              stop;
            }
          }
          send200OKInvite();
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              ACK_Request_r_3(v_CallId)) -> value vl_ACK_Request {
              TAck.stop;
              if (vl_body_found) {
                log ("BEGIN_TRACE_INFO Message Body already found in INVITE_Request. END_TRACE_INFO");
                setverdict (fail);
              }
              vl_messageBody :=
              valueof(vl_INVITE_Request.messageBody);
              vl_ContentLength :=
              valueof(
                vl_INVITE_Request
                .msgHeader
                .contentLength);
              if (vl_ContentLength.len
                == lengthof (vl_messageBody)) {
                setverdict (pass);
              } else {
                log ("BEGIN_TRACE_INFO Message Body size unequal to Content_Length header size. END_TRACE_INFO");
                setverdict (fail);
              }
            }
            [] SIPP.receive (
              ACK_Request_r_1(v_CallId)) -> value vl_ACK_Request {
              TAck.stop;
              if (vl_body_found) {
                setverdict (pass);
              } else {
                log ("BEGIN_TRACE_INFO Missing Message Body. END_TRACE_INFO");
                setverdict (fail);
              }
            }
            [] SIPP.receive (INVITE_Request_r_1) {
              repeat;
            }
            [] SIPP.receive {
              TAck.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
          
        }
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: If a reliable transport (TCP) is used, ensure that the IUT while is establishing a call, sends a Content-Length header set to the size of the body in the message that contains the session description.";
          extension "Reference: 20.14 and 13.2.1 [1]";
          
        } // end testcase SIP_CC_OE_CE_V_049
        testcase SIP_CC_OE_CE_V_050(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
        // Ref: 8.1.3.5 and 22.2
        // Purpose: Ensure that the IUT having sent an INVITE request, on receipt of an Unauthorized (401
        // Unauthorized) response including a WWW-Authenticate header, repeats its INVITE request with
        // an Authorization header and with an incremented Cseq value.
        {
          var INVITE_Request vl_INVITE_Request;
          var CSeq vl_first_CSeq;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          vl_first_CSeq := v_CSeq;
          
          // Send a Unauthorized (401 Unauthorized) response
          SIPP.send (
            Response_401_s_1(
              v_CallId,
              v_CSeq,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          
          TAck.start (PX_TACK);
          alt {
            // INVITE message can be either received on multicast or unicast address
            // INVITE including an Authorization header and with an incremented
            // Cseq value.
            [] SIPP.receive (
              INVITE_Request_r_15_1) -> value vl_INVITE_Request sender v_sent_label {
              TAck.stop;
              // Catch and prepare informations to answer
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
              if (v_CSeq.seqNumber
                > vl_first_CSeq.seqNumber) {
                setverdict (pass);
              } else {
                log ("BEGIN_TRACE_INFO Cseq value not incremented. END_TRACE_INFO");
                setverdict (fail);
                SIPP.send (
                  Response_400_s_1(
                    v_CallId,
                    v_CSeq,
                    v_From,
                    v_To,
                    v_Via)) to v_sent_label;
                
                stop
              }
              rejectInvite(loc_CSeq_s);
            }
            [] TAck.timeout {
              setverdict (fail);
              stop
            }
          }
        }
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT having sent an INVITE request, on receipt of an Unauthorized (401 Unauthorized) response including a WWW-Authenticate header, repeats its INVITE request with an Authorization header and with an incremented Cseq value.";
          extension "Reference: 8.1.3.5 and 22.2 [1]";
          
        } // end testcase SIP_CC_OE_CE_V_050
        testcase SIP_CC_OE_CE_V_051(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
        // Ref: 8.1.3.5 and 22.2
        // Purpose: Ensure that the IUT having sent an INVITE request, on receipt of an Unauthorized (401
        // Unauthorized) response including a WWW-Authenticate header, repeats its INVITE request with
        // an Authorization header including proper values for username, realm nonce, digest-uri and
        // response HTTP parameters.
        {
          var INVITE_Request vl_INVITE_Request;
          var CSeq vl_first_CSeq;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          vl_first_CSeq := v_CSeq;
          
          // Send a Unauthorized (401 Unauthorized) response
          SIPP.send (
            Response_401_s_1(
              v_CallId,
              v_CSeq,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          
          TAck.start (PX_TACK);
          alt {
            // INVITE message can be either received on multicast or unicast address
            // INVITE including an Authorization header and with an incremented
            // Cseq value.
            [] SIPP.receive (
              INVITE_Request_r_15_1a) -> value vl_INVITE_Request sender v_sent_label {
              var charstring vl_myinput;
              TAck.stop;
              // Catch and prepare informations to answer
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
              // check if values for username, realm, nonce, digest-uri and response HTTP parameters
              // are included
              vl_myinput :=
              f_convertCredentials(vl_INVITE_Request
                .msgHeader
                .authorization
                .body);
              if (not (match(vl_myinput,
                    pattern "*username:*"))) {
                log ("Username missing in credentials.");
                setverdict (fail);
              }
              if (not (match(vl_myinput,
                    pattern "*realm:*"))) {
                log ("Realm missing in credentials.");
                setverdict (fail);
              }
              if (not (match(vl_myinput,
                    pattern "*nonce:*"))) {
                log ("Nonce missing in credentials.");
                setverdict (fail);
              }
              if (not (match(vl_myinput,
                    pattern "*uri:*"))) {
                log ("Digest-URI missing in credentials.");
                setverdict (fail);
              }
              if (not (match(vl_myinput,
                    pattern "*response:*"))) {
                log ("Response param missing in credentials.");
                setverdict (fail);
              }
              rejectInvite(loc_CSeq_s);
            }
            [] TAck.timeout {
              setverdict (fail);
              stop
            }
          }
        }
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT having sent an INVITE request, on receipt of an Unauthorized (401 Unauthorized) response including a WWW-Authenticate header, repeats its INVITE request with an Authorization header including proper values for username, realm nonce, digest-uri and response HTTP parameters.";
          extension "Reference: 8.1.3.5 and 22.2 [1]";
          
        } // end testcase SIP_CC_OE_CE_V_051
        testcase SIP_CC_OE_CE_V_052(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
        // Ref: 8.1.3.5 and 22.2
        // Purpose: Ensure that the IUT having sent an INVITE request, on receipt of a Proxy Authentication Required
        // (407 Proxy Authentication Required) response including a Proxy-Authenticate header, repeats its
        // INVITE request with a Proxy-Authorization header and with an incremented Cseq value.
        {
          var INVITE_Request vl_INVITE_Request;
          var CSeq vl_first_CSeq;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          vl_first_CSeq := v_CSeq;
          
          // Send a Unauthorized (407 Proxy Authentication Required) response
          SIPP.send (
            Response_407_s_1(
              v_CallId,
              v_CSeq,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          
          TAck.start (PX_TACK);
          alt {
            // INVITE message can be either received on multicast or unicast address
            // INVITE including an Authorization header and with an incremented
            // Cseq value.
            [] SIPP.receive (
              INVITE_Request_r_15_2) -> value vl_INVITE_Request sender v_sent_label {
              TAck.stop;
              // Catch and prepare informations to answer
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
              if (v_CSeq.seqNumber
                > vl_first_CSeq.seqNumber) {
                setverdict (pass);
              } else {
                log ("BEGIN_TRACE_INFO Cseq value not incremented. END_TRACE_INFO");
                setverdict (fail);
                SIPP.send (
                  Response_400_s_1(
                    v_CallId,
                    v_CSeq,
                    v_From,
                    v_To,
                    v_Via)) to v_sent_label;
                
                stop
              }
              rejectInvite(loc_CSeq_s);
            }
            [] TAck.timeout {
              setverdict (fail);
              stop
            }
          }
        }
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT having sent an INVITE request, on receipt of a Proxy Authentication Required (407 Proxy Authentication Required) response including a Proxy-Authenticate header, repeats its INVITE request with a Proxy-Authorization header and with an incremented Cseq value.";
          extension "Reference: 8.1.3.5 and 22.2 [1]";
          
        } // end testcase SIP_CC_OE_CE_V_052
        testcase SIP_CC_OE_CE_V_053(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
        // Ref: 8.1.3.5 and 22.2
        // Purpose: Ensure that the IUT having sent an INVITE request, on receipt of a Proxy Authentication Required
        // (407 Proxy Authentication Required) response including a Proxy-Authenticate header, repeats its
        // INVITE request with a Proxy-Authorization header including proper values for username, realm
        // nonce, digest-uri and response HTTP parameters.
        {
          var INVITE_Request vl_INVITE_Request;
          var CSeq vl_first_CSeq;
          var charstring vl_mystring := "";
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          vl_first_CSeq := v_CSeq;
          
          // Send a Unauthorized (407 Proxy Authentication Required) response
          SIPP.send (
            Response_407_s_1(
              v_CallId,
              v_CSeq,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          
          TAck.start (PX_TACK);
          alt {
            // INVITE message can be either received on multicast or unicast address
            // INVITE including an Authorization header and with an incremented
            // Cseq value.
            [] SIPP.receive (
              INVITE_Request_r_15_2a) -> value vl_INVITE_Request sender v_sent_label {
              var charstring vl_myinput;
              TAck.stop;
              setverdict (pass);
              
              // check if values for username, realm, nonce, digest-uri and response HTTP parameters
              // are included
              vl_myinput :=
              f_convertCredentials(vl_INVITE_Request
                .msgHeader
                .proxyAuthorization
                .credentials);
              if (not (match(vl_myinput,
                    pattern "*username:*"))) {
                log ("Username missing in credentials.");
                setverdict (fail);
              }
              if (not (match(vl_myinput,
                    pattern "*realm:*"))) {
                log ("Realm missing in credentials.");
                setverdict (fail);
              }
              if (not (match(vl_myinput,
                    pattern "*nonce:*"))) {
                log ("Nonce missing in credentials.");
                setverdict (fail);
              }
              if (not (match(vl_myinput,
                    pattern "*uri:*"))) {
                log ("Digest-URI missing in credentials.");
                setverdict (fail);
              }
              if (not (match(vl_myinput,
                    pattern "*response:*"))) {
                log ("Response param missing in credentials.");
                setverdict (fail);
              }
              rejectInvite(loc_CSeq_s);
            }
            [] TAck.timeout {
              setverdict (fail);
              stop
            }
          }
        }
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT having sent an INVITE request, on receipt of a Proxy Authentication Required (407 Proxy Authentication Required) response including a Proxy-Authenticate header, repeats its INVITE request with a Proxy-Authorization header including proper values for username, realm nonce, digest-uri and response HTTP parameters.";
          extension "Reference: 8.1.3.5 and 22.2 [1]";
          
        } // end testcase SIP_CC_OE_CE_V_053
      }
      group Timers {
        testcase SIP_CC_OE_CE_TI_001(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          repeatINVITE(v_CallId, v_CSeq, PX_T1);
          rejectInvite(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: If an unreliable transport (UDP) is used, ensure that the IUT, when an INVITE client transaction is in the Calling state repeats its INVITE request on the timeout condition of timer A set with a value of T1.";
          extension "Reference: Annex A [1], 17.1.1.1 [1]";
          extension "FailCause: Invalid second repeat INVITE_Request received OR No second INVITE_Request received";
          extension "InconcCause: Invalid first INVITE_Request received OR No first INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_TI_002(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          SIPP.clear;
          notRepeatINVITE(v_CallId, v_CSeq, PX_T1 * 0.9);
          rejectInvite(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: If a reliable transport (TCP) is used, ensure that the IUT, when an INVITE client transaction is in the Calling state does not repeat its INVITE request on the timeout condition of timer A set with a value of T1.";
          extension "Reference: Annex A [1], 17.1.1.1 [1]";
          extension "FailCause: Second repeat INVITE_Request received";
          extension "InconcCause: Invalid first INVITE_Request received OR No first INVITE_Request received OR Any second repeat message received";
        }
        testcase SIP_CC_OE_CE_TI_003(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          repeatINVITE(v_CallId, v_CSeq, PX_T1);
          SIPP.clear;
          notRepeatINVITE(
            v_CallId,
            v_CSeq,
            2.0 * PX_T1 * 0.9);
          repeatINVITE(v_CallId, v_CSeq, 2.0 * PX_T1);
          rejectInvite(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: If an unreliable transport (UDP) is used, ensure that the IUT, when an INVITE client transaction is in the Calling state having already repeated its INVITE wait for a timer A set with a value of 2*T1 before sending it again.";
          extension "Reference: Annex A [1], 17.1.1.1 [1]";
          extension "FailCause: Invalid second/third repeat INVITE_Request received OR No second/third INVITE_Request received OR Third INVITE_Request received before 2*T1";
          extension "InconcCause: Invalid first INVITE_Request received OR No first INVITE_Request received OR Any message received before 2*T1";
        }
        testcase SIP_CC_OE_CE_TI_004(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          repeatINVITE(v_CallId, v_CSeq, PX_T1);
          SIPP.clear;
          notRepeatINVITE(
            v_CallId,
            v_CSeq,
            2.0 * PX_T1 * 0.9);
          repeatINVITE(v_CallId, v_CSeq, 2.0 * PX_T1);
          SIPP.clear;
          notRepeatINVITE(
            v_CallId,
            v_CSeq,
            4.0 * PX_T1 * 0.9);
          repeatINVITE(v_CallId, v_CSeq, 4.0 * PX_T1);
          rejectInvite(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: If an unreliable transport (UDP) is used, ensure that the IUT, when an INVITE client transaction is in the Calling state retransmits its INVITE request with intervals that double after each transmission.";
          extension "Reference: Annex A [1], 17.1.1.1 [1]";
          extension "FailCause: Invalid repeated INVITE_Request received in correct time slot OR No INVITE_Request receivedin correct time slot OR INVITE_Request received in incorrect time slot";
          extension "InconcCause: Invalid first INVITE_Request received OR No first INVITE_Request received OR Any message received in incorrect time slot";
        }
        testcase SIP_CC_OE_CE_TI_005(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          waitForTimeout(v_TJ);
          SIPP.send (
            Response_486_s_1(
              v_CallId,
              v_CSeq,
              v_callee_From,
              v_callee_To,
              v_Via)) to v_sent_label;
          awaitingNoAckRequest(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, when an INVITE client transaction is in the Calling state, when timer B set to a value of 64*T1 expires, does not send an ACK.";
          extension "Reference: Annex A [1], 17.1.1.1 [1]";
          extension "FailCause: ACK_Request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_TI_006(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          waitForTimeout(v_TJ);
          checkUACTerminatedState(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, when an INVITE client transaction is in the Calling state, when timer B set to a value of 64*T1 expires, considers the transaction terminated.";
          extension "Reference: Annex A [1], 17.1.1.1 [1]";
          extension "FailCause: Invalid 481 Response received OR No 481 Response received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_TI_007(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACProceedingState();
          SIPP.clear;
          notRepeatINVITE(v_CallId, v_CSeq, 2.0 * PX_T1);
          rejectInvite(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, when an INVITE client transaction is in the Proceeding state, does not repeat its INVITE request.";
          extension "Reference: Annex A [1], 17.1.1.1 [1]";
          extension "FailCause: Repeat of INIVITE_Request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received";
        }
        testcase SIP_CC_OE_CE_TI_008(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var boolean vl_delay_not_expired := true;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACCompletedState(loc_CSeq_s);
          TDelay.start (31.0);
          while (vl_delay_not_expired) {
            SIPP.send (
              Response_486_s_1(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_Via)) to v_sent_label;
            TAck.start (PX_TACK);
            alt {
              [] SIPP.receive (ACK_Request_r_1(v_CallId)) {
                TAck.stop;
                setverdict (pass);
              }
              [] SIPP.receive (INVITE_Request_r_1) {
                repeat;
              }
              [] SIPP.receive {
                all timer.stop;
                setverdict (inconc);
                stop;
              }
              [] TDelay.timeout {
                setverdict (pass);
                vl_delay_not_expired := false;
                TAck.stop;
              }
              [] TAck.timeout {
                setverdict (fail);
                stop;
              }
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: If an unreliable transport is used, ensure that the IUT, when an INVITE client transaction is in the Completed state, on receipt of final responses that matches the transaction, still answers with an ACK request until timer D set to at least 32 second expires.";
          extension "Reference: Annex A [1], 17.1.1.1 [1]";
          extension "FailCause: Invalid receive of ACK_Request OR No receive of ACK_Request within 32s";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR any message received within 32s";
        }
        testcase SIP_CC_OE_CE_TI_009(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACCompletedState(loc_CSeq_s);
          SIPP.send (
            Response_486_s_1(
              v_CallId,
              v_CSeq,
              v_callee_From,
              v_callee_To,
              v_Via)) to v_sent_label;
          awaitingNoAckRequest(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: If a reliable transport is used, ensure that the IUT, when an INVITE client transaction is in the Completed state, on receipt of a final response that matches the transaction, does not repeats its ACK request.";
          extension "Reference: Annex A [1], 17.1.1.1 [1]";
          extension "FailCause: ACK_Request received after final response";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid receive of ACK_Request OR No receive of ACK_Request";
        }
        testcase SIP_CC_OE_CE_TI_010(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var boolean vl_delay_not_expired := true;
          var Via vl_Via2;
          
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACCompletedState(loc_CSeq_s);
          TDelay.start (31.0);
          vl_Via2 := v_Via;
          while (vl_delay_not_expired) {
            var SemicolonParam_List vl_params;
            var integer i;
            vl_params := valueof(vl_Via2.viaBody[0].viaParams);
            i := sizeof (vl_params);
            vl_params[i - 1] := {
              id := BRANCH_ID,
              paramValue := BRANCH_COOKIE & getRndTag()
            };
            vl_Via2.viaBody[0].viaParams := vl_params;
            SIPP.send (
              Response_486_s_1(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                vl_Via2)) to v_sent_label;
            TAck.start (PX_TACK);
            alt {
              [] SIPP.receive (ACK_Request_r_1(v_CallId)) {
                TAck.stop;
                setverdict (fail);
              }
              [] SIPP.receive (INVITE_Request_r_1) {
                repeat;
              }
              [] SIPP.receive {
                all timer.stop;
                setverdict (inconc);
                stop;
              }
              [] TDelay.timeout {
                setverdict (pass);
                vl_delay_not_expired := false;
                TAck.stop;
              }
              [] TAck.timeout {
                setverdict (pass);
              }
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: If an unreliable transport is used, ensure that the IUT, when an INVITE client transaction is in the Completed state, on receipt of new final responses with different Via branch parameter value, does not repeat its ACK request until timer D set to at least 32 second expires.";
          extension "Reference: Annex A [1], 17.1.1.1 [1]";
          extension "FailCause: ACK_Request received after 486 Response";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid receive of ACK_Request OR No receive of ACK_Request";
        }
        testcase SIP_CC_OE_CE_TI_011(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var boolean vl_delay_not_expired := true;
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACallingState();
          TDelay.start (v_TJ);
          while (vl_delay_not_expired) {
            send200OKInvite();
            TAck.start (PX_TACK);
            alt {
              [] SIPP.receive (ACK_Request_r_1(v_CallId)) {
                TAck.stop;
                setverdict (pass);
              }
              [] SIPP.receive (INVITE_Request_r_1) {
                repeat;
              }
              [] SIPP.receive {
                all timer.stop;
                setverdict (fail);
                terminateCall(
                  v_CallId,
                  loc_CSeq_s,
                  v_callee_From,
                  v_callee_To,
                  v_reqHostPort,
                  v_Route);
                stop;
              }
              [] TDelay.timeout {
                setverdict (pass);
                vl_delay_not_expired := false;
                TAck.stop;
              }
              [] TAck.timeout {
                setverdict (fail);
                terminateCall(
                  v_CallId,
                  loc_CSeq_s,
                  v_callee_From,
                  v_callee_To,
                  v_reqHostPort,
                  v_Route);
                stop;
              }
            }
          }
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, when an INVITE client transaction has been in the terminated state, on receipt of a retransmitted Success (200 OK) responses sends an ACK request until 64*T1 duration expires.";
          extension "Reference: Annex A [1], 13.2.2.4 [1]";
          extension "FailCause: Invalid ACK_Request received or No ACK_Request received for every 200OKInvite send within 64*T1";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CE_TI_012(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          initPort(mtc, system);
          v_Default := activate (defaultCCOE());
          uACCallTerminated(loc_CSeq_s);
          waitForTimeout(v_TJ);
          send200OKInvite();
          awaitingNoAckRequest(loc_CSeq_s);
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, when an INVITE client transaction has been in the terminated state, after 64*T1 duration expires, on receipt of a retransmitted Success (200 OK) responses does not send an ACK request.";
          extension "Reference: Annex A [1], 13.2.2.4 [1]";
          extension "FailCause: Receive Ack request after 64*T1 and send 200 OK";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid ACK_Request received or No ACK_Request received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
      }
    }
    group Callrelease {
      group ValidBehaviour {
        testcase SIP_CC_OE_CR_V_001(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var BYE_Request vl_BYE_Request;
          
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACCallEstablished(loc_CSeq_s);
          action ("Please HANG UP");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              BYE_Request_r_2(
                ?,
                ?,
                ?,
                v_caller_To)) -> value vl_BYE_Request {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfBye(vl_BYE_Request);
              send200OK();
            }
            [] SIPP.receive {
              all timer.stop;
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (fail);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, once a dialog has been established, to release it sends a BYE request with a To header set to the same value as in the last received final response.";
          extension "Reference: 12.2.1.1 [1], 15[1]";
          extension "FailCause: Invalid BYE_Request received OR No BYE_Request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid ACK_Request received or No ACK_Request received OR Invalid Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CR_V_002(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var BYE_Request vl_BYE_Request;
          var To vl_caller_To;
          var integer vl_last,
          i,
          j := 0;
          
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACallingState();
          if (ispresent (v_caller_To.toParams)) {
            var SemicolonParam_List vl_params :=
            valueof(v_caller_To.toParams),
            tmp2_params;
            vl_last := sizeof (vl_params);
            if ((vl_last == 1) and (vl_params[0].id == "tag")) {
              v_caller_To.toParams := omit;
            } else {
              for (i := 0; i <= vl_last; i := i + 1) {
                if (vl_params[i].id != "tag") {
                  j := j + 1;
                } else {
                  tmp2_params[i - j] := vl_params[i];
                }
              }
              v_caller_To.toParams := tmp2_params;
            }
          }
          send200OKInvite();
          awaiting200OKAckRequest(loc_CSeq_s);
          action ("Please HANG UP");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              BYE_Request_r_2(
                ?,
                ?,
                ?,
                v_caller_To)) -> value vl_BYE_Request {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfBye(vl_BYE_Request);
              send200OK();
            }
            [] SIPP.receive {
              all timer.stop;
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (inconc);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, once a dialog has been established with a final response in which the TAG in the To header was omitted, to release it sends a BYE request with an identical To header without TAG value.";
          extension "Reference: 12.2.1.1 [1], 15[1]";
          extension "FailCause: Invalid BYE_Request received OR No BYE_Request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid ACK_Request received or No ACK_Request received OR Invalid Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CR_V_003(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var BYE_Request vl_BYE_Request;
          
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACCallEstablished(loc_CSeq_s);
          action ("Please HANG UP");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              BYE_Request_r_2(
                v_CallId,
                ?,
                v_caller_From,
              ?)) -> value vl_BYE_Request {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfBye(vl_BYE_Request);
              send200OK();
            }
            [] SIPP.receive {
              all timer.stop;
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (inconc);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, once a dialog has been established, to release it sends a BYE request with the same Call-ID, From headers as in the original INVITE message.";
          extension "Reference: 12.2.1.1 [1], 15[1]";
          extension "FailCause: Invalid BYE_Request received OR No BYE_Request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid ACK_Request received or No ACK_Request received OR Invalid Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CR_V_004(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var BYE_Request vl_BYE_Request;
          
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACCallEstablished(loc_CSeq_s);
          action ("Please HANG UP");
          v_IUT_CSeq.method := "BYE";
          v_IUT_CSeq.seqNumber := v_IUT_CSeq.seqNumber + 1;
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              BYE_Request_r_2(
                ?,
                v_IUT_CSeq,
                ?,
              ?)) -> value vl_BYE_Request {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfBye(vl_BYE_Request);
              send200OK();
            }
            [] SIPP.receive {
              all timer.stop;
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (inconc);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, once a dialog has been established, to release it sends a BYE request with an incremented of one CSeq value, a method field in the CSeq header set to ""BYE"".";
          extension "Reference: 12.2.1.1 [1] ";
          extension "FailCause: Invalid BYE_Request received OR No BYE_Request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid ACK_Request received or No ACK_Request received OR Invalid Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CR_V_005(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var BYE_Request vl_BYE_Request;
          
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACCallEstablished(loc_CSeq_s);
          action ("Please HANG UP");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              BYE_Request_r_4(v_CallId)) -> value vl_BYE_Request {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfBye(vl_BYE_Request);
              send200OK();
            }
            [] SIPP.receive {
              all timer.stop;
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (inconc);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, once a dialog has been established with a Success (200 OK) response including no Record-Route header set, to release it sends a BYE request with the Request-URI set to the Contact URI included in the received final response and with no Route header set.";
          extension "Reference: 12.2.1.1[1], 15[1]";
          extension "FailCause: Invalid BYE_Request received OR No BYE_Request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid ACK_Request received or No ACK_Request received OR Invalid Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CR_V_006(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var BYE_Request vl_BYE_Request;
          
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACallingState();
          SIPP.send (
            Response_200_s_5(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          awaiting200OKAckRequest(loc_CSeq_s);
          action ("Please HANG UP");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              BYE_Request_r_5(v_CallId)) -> value vl_BYE_Request {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfBye(vl_BYE_Request);
              send200OK();
            }
            [] SIPP.receive {
              all timer.stop;
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (inconc);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, once a dialog has been established with a Success (200 OK) response including a Record-Route header set to a list in which the last element contains lr parameter, to release the call, sends a BYE request with the Request-URI set to the Contact URI and a Route header set to the list in a reverse order of the Record-Route included in the received final response.";
          extension "Reference: 12.2.1.1[1], 15[1]";
          extension "FailCause: Invalid BYE_Request received OR No BYE_Request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid ACK_Request received or No ACK_Request received OR Invalid Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CR_V_007(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var BYE_Request vl_BYE_Request;
          
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACallingState();
          SIPP.send (
            Response_200_s_6(
              v_CallId,
              v_CSeq,
              v_caller_From,
              v_caller_To,
              v_Via)) to v_sent_label;
          awaiting200OKAckRequest(loc_CSeq_s);
          action ("Please HANG UP");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              BYE_Request_r_6(v_CallId)) -> value vl_BYE_Request {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfBye(vl_BYE_Request);
              SIPP.send (
                Response_200_s_6(
                  v_CallId,
                  v_CSeq,
                  v_caller_From,
                  v_caller_To,
                  v_Via)) to v_sent_label;
            }
            [] SIPP.receive {
              all timer.stop;
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (inconc);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, once a dialog has been established with a Success (200 OK) response including a Record-Route header set to a list in which the last element does not contain lr parameter, to release the call, sends an BYE request with the Request-URI set to this element and a Route header set to the remainder list in a reverse order of the received Record-Route appended with the received Contact URI.";
          extension "Reference: 12.2.1.1[1], 15[1]";
          extension "FailCause: Invalid BYE_Request received OR No BYE_Request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid ACK_Request received or No ACK_Request received OR Invalid Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CR_V_008(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var BYE_Request vl_BYE_Request;
          
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACCallEstablished(loc_CSeq_s);
          askForOEBYE(loc_CSeq_s);
          send200OK();
          checkUACTerminatedState(v_CSeq);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, once a dialog has been established, having sent a BYE request, on receipt of a Success (200 OK) response considers the session and the dialog terminated.";
          extension "Reference: 12.2.1.1[1], 15.1.1[1]";
          extension "FailCause: Invalid BYE_Request received OR No BYE_Request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid ACK_Request received or No ACK_Request received OR Invalid Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CR_V_009(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var BYE_Request vl_BYE_Request;
          
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACCallEstablished(loc_CSeq_s);
          askForOEBYE(loc_CSeq_s);
          SIPP.send (
            Response_481_s_1(
              v_CallId,
              v_CSeq,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          checkUACTerminatedState(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, once a dialog has been established, having sent a BYE request, on receipt of a Call LegTransaction Does Not Exist (481 Call Leg Transaction Does Not Exist Request) considers the session and the dialog terminated.";
          extension "Reference: 12.2.1.1[1], 15.1.1[1]";
          extension "FailCause: Invalid BYE_Request received OR No BYE_Request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid ACK_Request received or No ACK_Request received OR Invalid Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CR_V_010(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var CANCEL_Request vl_CANCEL_Request;
          
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACProceedingState();
          action ("Please HANG UP");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              CANCEL_Request_r_1(v_CallId)) -> value vl_CANCEL_Request {
              TWait.stop;
              setverdict (pass);
              SIPP.send (
                Response_481_s_1(
                  v_CallId,
                  v_CSeq,
                  v_From,
                  v_To,
                  v_Via)) to v_sent_label;
              setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
              send200OK();
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TWait.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT having received a Trying (100 Trying) response to its INVITE request, to give up the call, sends a CANCEL request.";
          extension "Reference: 15 [1], 9.1 [1], figure 5 [1]  ";
          extension "FailCause: Invalid CANCEL_Request received OR No CANCEL_Request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid ACK_Request received or No ACK_Request received";
        }
        testcase SIP_CC_OE_CR_V_011(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var CANCEL_Request vl_CANCEL_Request;
          
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACProceedingState();
          action ("Please HANG UP");
          TWait.start (PX_TWAIT);
          SIPP.clear;
          alt {
            [] SIPP.receive (
              CANCEL_Request_r_2(
                v_CallId,
                v_From,
                v_Cancel_To,
                v_RequestUri)) -> value vl_CANCEL_Request {
              TWait.stop;
              setverdict (pass);
              SIPP.send (
                Response_481_s_1(
                  v_CallId,
                  v_CSeq,
                  v_From,
                  v_To,
                  v_Via)) to v_sent_label;
              setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
              send200OK();
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TWait.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT having received a Trying (100 Trying) response to its INVITE request, to give up the call, sends a CANCEL request with the same Request-URI, Call-ID, From, To headers as in the original INVITE message.";
          extension "Reference: 15 [1], 9.1 [1], figure 5 [1]  ";
          extension "FailCause: Invalid CANCEL_Request received OR No CANCEL_Request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid ACK_Request received or No ACK_Request received";
        }
        testcase SIP_CC_OE_CR_V_012(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var CANCEL_Request vl_CANCEL_Request;
          
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACProceedingState();
          action ("Please HANG UP");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              CANCEL_Request_r_3(
                v_CallId,
                v_CSeq
                .seqNumber)) -> value vl_CANCEL_Request {
              TWait.stop;
              setverdict (pass);
              SIPP.send (
                Response_481_s_1(
                  v_CallId,
                  v_CSeq,
                  v_From,
                  v_To,
                  v_Via)) to v_sent_label;
              setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
              send200OK();
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TWait.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT having received a Trying (100 Trying) response to its INVITE request, sends a CANCEL request with the same numeric part of  CSeq as in the original INVITE message and with a method field in the CSeq header set to ""CANCEL"".";
          extension "Reference: 15 [1], 9 [1], figure 5 [1]";
          extension "FailCause: Invalid CANCEL_Request received OR No CANCEL_Request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid ACK_Request received or No ACK_Request received";
        }
        testcase SIP_CC_OE_CR_V_013(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var CANCEL_Request vl_CANCEL_Request;
          
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACProceedingState();
          action ("Please HANG UP");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              CANCEL_Request_r_4(
                v_CallId,
                v_Via)) -> value vl_CANCEL_Request {
              TWait.stop;
              setverdict (pass);
              SIPP.send (
                Response_481_s_1(
                  v_CallId,
                  v_CSeq,
                  v_From,
                  v_To,
                  v_Via)) to v_sent_label;
              setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
              send200OK();
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TWait.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT having received a Trying (100 Trying) response to its INVITE request, sends a CANCEL request with a single Via header value matching the top Via value of the Via header of the original INVITE message.";
          extension "Reference: 15 [1], 9.1 [1], figure 5 [1]";
          extension "FailCause: Invalid CANCEL_Request received OR No CANCEL_Request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid ACK_Request received or No ACK_Request received";
        }
        testcase SIP_CC_OE_CR_V_014(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var CANCEL_Request vl_CANCEL_Request;
          
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACProceedingState();
          action ("Please HANG UP");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              CANCEL_Request_r_5(v_CallId)) -> value vl_CANCEL_Request {
              TWait.stop;
              setverdict (pass);
              SIPP.send (
                Response_481_s_1(
                  v_CallId,
                  v_CSeq,
                  v_From,
                  v_To,
                  v_Via)) to v_sent_label;
              setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
              send200OK();
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TWait.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT having received a Trying (100 Trying) response to its INVITE request, to give up the call, sends a CANCEL request without Require or Proxy-Require header.";
          extension "Reference: 15 [1], 9.1 [1], figure 5 [1]";
          extension "FailCause: Invalid CANCEL_Request received OR No CANCEL_Request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid ACK_Request received or No ACK_Request received";
        }
        testcase SIP_CC_OE_CR_V_015(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var CANCEL_Request vl_CANCEL_Request;
          
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACProceedingState();
          action ("Please HANG UP");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              CANCEL_Request_r_1(v_CallId)) -> value vl_CANCEL_Request {
              TWait.stop;
              setverdict (pass);
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
            [] TWait.timeout {
              setverdict (fail);
              rejectInvite(v_CSeq);
              stop;
            }
          }
          send200OKInvite();
          awaiting200OKAckRequest(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT having received a Trying (100 Trying) response to its INVITE request, to give up the call having sent a CANCEL request, on receipt of a 2XX response to the original INVITE sends an ACK request.";
          extension "Reference: 15 [1], 9.1 [1], figure 5 [1]";
          extension "FailCause: Invalid CANCEL_Request received OR No CANCEL_Request received OR Invalid ACK_Request received or No ACK_Request received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid Final Success (200 OK) response received";
        }
      }
      group InvalidBehaviour {
        testcase SIP_CC_OE_CR_I_001(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACCallEstablished(loc_CSeq_s);
          loc_CSeq_s := v_CSeq;
          loc_CSeq_s.method := "CANCEL";
          SIPP.send (
            CANCEL_Request_s_1(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_callee_From,
              v_callee_To,
              v_reqHostPort,
              v_Via)) to v_sent_label;
          sendBYE(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
          loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
          loc_CSeq_s.method := "BYE";
          awaitingOkResponse(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, once a dialog has been established, on receipt of a CANCEL request followed by a BYE request, sends a Success (200 OK) response to the BYE request.";
          extension "Reference: 9[1], 16.10 [1] ";
          extension "FailCause: Invalid Success (200 OK) received OR No Success (200 OK) received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid ACK_Request received or No ACK_Request received OR Invalid Final Success (200 OK) response received";
        }
      }
      group Timers {
        testcase SIP_CC_OE_CR_TI_001(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var BYE_Request vl_BYE_Request;
          
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACCallEstablished(loc_CSeq_s);
          askForOEBYE(loc_CSeq_s);
          SIPP.clear;
          notRepeatBYE(PX_T1 * 0.9);
          TAck.start (2.0 * PX_T1);
          alt {
            [] SIPP.receive (
              BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request {
              TAck.stop;
              setverdict (pass);
              setHeadersOnReceiptOfBye(vl_BYE_Request);
              send200OK();
            }
            [] SIPP.receive {
              all timer.stop;
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (fail);
              stop;
            }
            [] TAck.timeout {
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (inconc);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: If an unreliable transport is used, ensure that the IUT, having sent a BYE request on an established dialog, repeats its request after timer E set to T1 value expires.";
          extension "Reference: Annex A [1], 17.1.2.2 [1]";
          extension "FailCause: Invalid repeated BYE_Request received in correct time slot OR No BYE_Request received in correct time slot OR BYE_Request received in incorrect time slot";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Any message received in incorrect time slot OR Invalid Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CR_TI_002(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var BYE_Request vl_BYE_Request;
          var float vl_min_result;
          
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACCallEstablished(loc_CSeq_s);
          askForOEBYE(loc_CSeq_s);
          repeatOEBYE(loc_CSeq_s);
          vl_min_result := minValue(2.0 * PX_T1, PX_T2);
          SIPP.clear;
          notRepeatBYE(vl_min_result * 0.9);
          TAck.start (2.0 * vl_min_result);
          alt {
            [] SIPP.receive (
              BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request {
              TAck.stop;
              setverdict (pass);
              setHeadersOnReceiptOfBye(vl_BYE_Request);
              send200OK();
            }
            [] SIPP.receive {
              all timer.stop;
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (fail);
              stop;
            }
            [] TAck.timeout {
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (inconc);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: If an unreliable transport is used, ensure that the IUT, having sent twice times a BYE request on an established dialog, repeats its request after timer E set to the MIN(2*T1,T2) value expires.";
          extension "Reference: Annex A [1], 17.1.3 [1]";
          extension "FailCause: Invalid repeated BYE_Request received in correct time slot OR No BYE_Request received in correct time slot OR BYE_Request received in incorrect time slot";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Any message received in incorrect time slot OR Invalid Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CR_TI_003(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var BYE_Request vl_BYE_Request;
          var float vl_min_result;
          
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACCallEstablished(loc_CSeq_s);
          askForOEBYE(loc_CSeq_s);
          repeatOEBYE(loc_CSeq_s);
          repeatOEBYE(loc_CSeq_s);
          vl_min_result := minValue(4.0 * PX_T1, PX_T2);
          SIPP.clear;
          notRepeatBYE(vl_min_result * 0.9);
          TAck.start (2.0 * vl_min_result);
          alt {
            [] SIPP.receive (
              BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request {
              TAck.stop;
              setverdict (pass);
              setHeadersOnReceiptOfBye(vl_BYE_Request);
              send200OK();
            }
            [] SIPP.receive {
              all timer.stop;
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (fail);
              stop;
            }
            [] TAck.timeout {
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (inconc);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: If an unreliable transport is used, ensure that the IUT, having sent three times a BYE request on an established dialog, repeats its request after timer E set to the MIN(4*T1,T2) value expires.";
          extension "Reference: Annex A [1], 17.1.3 [1]";
          extension "FailCause: Invalid repeated BYE_Request received in correct time slot OR No BYE_Request received in correct time slot OR BYE_Request received in incorrect time slot";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Any message received in incorrect time slot OR Invalid Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CR_TI_004(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACCallEstablished(loc_CSeq_s);
          askForOEBYE(loc_CSeq_s);
          waitForTimeout(v_TJ);
          notRepeatBYE(PX_TACK);
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: If an unreliable transport is used, ensure that the IUT does not repeat a BYE request on an established dialog, after timer F set to 64*T1 expires.";
          extension "Reference: Annex A [1], 17.1.3 [1]";
          extension "FailCause: Invalid repeated BYE_Request received in correct time slot OR No BYE_Request received in correct time slot OR BYE_Request received in incorrect time slot";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Any message received in incorrect time slot OR Invalid Final Success (200 OK) response received";
        }
        
        testcase SIP_CC_OE_CR_TI_005(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var BYE_Request vl_BYE_Request;
          
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACCallEstablished(loc_CSeq_s);
          askForOEBYE(loc_CSeq_s);
          SIPP.send (
            Response_100_s_1(
              v_CallId,
              v_CSeq,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          TAck.start (PX_T1);
          alt {
            [] SIPP.receive (
              BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request {
              TAck.stop;
              setverdict (pass);
              setHeadersOnReceiptOfBye(vl_BYE_Request);
              send200OK();
            }
            [] SIPP.receive {
              all timer.stop;
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (fail);
              stop;
            }
            [] TAck.timeout {
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (inconc);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, when a BYE client transaction is in the Proceeding state repeats its BYE request after timer E set to inital T1 value expires.";
          extension "Reference: Annex A [1], 17.1.3 [1]";
          extension "FailCause: Invalid repeated BYE_Request received in correct time slot OR No BYE_Request received in correct time slot OR BYE_Request received in incorrect time slot";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Any message received in incorrect time slot OR Invalid Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CR_TI_006(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var BYE_Request vl_BYE_Request;
          
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACCallEstablished(loc_CSeq_s);
          askForOEBYE(loc_CSeq_s);
          SIPP.send (
            Response_100_s_1(
              v_CallId,
              v_CSeq,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          repeatOEBYE(loc_CSeq_s);
          SIPP.clear;
          notRepeatBYE(PX_T2 * 0.9);
          TAck.start (2.0 * PX_T2);
          alt {
            [] SIPP.receive (
              BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request {
              TAck.stop;
              setverdict (pass);
              setHeadersOnReceiptOfBye(vl_BYE_Request);
              send200OK();
            }
            [] SIPP.receive {
              all timer.stop;
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (fail);
              stop;
            }
            [] TAck.timeout {
              terminateCall(
                v_CallId,
                v_CSeq,
                v_callee_From,
                v_callee_To,
                v_reqHostPort,
                v_Route);
              setverdict (inconc);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, when a BYE client transaction is in the Proceeding state and BYE request have been already repeated in this state, repeats its BYE request after timer E set to T2 value expires.";
          extension "Reference: Annex A [1], 17.1.3 [1]";
          extension "FailCause: Invalid repeated BYE_Request received in correct time slot OR No BYE_Request received in correct time slot OR BYE_Request received in incorrect time slot";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Any message received in incorrect time slot OR Invalid Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CR_TI_007(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACCallEstablished(loc_CSeq_s);
          askForOEBYE(loc_CSeq_s);
          SIPP.send (
            Response_100_s_1(
              v_CallId,
              v_CSeq,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          waitForTimeout(v_TJ);
          notRepeatBYE(PX_TACK);
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, when a BYE client transaction is in the Proceeding state, does not repeat a BYE request on an established dialog, after timer F set to 64*T1 expires.";
          extension "Reference: Annex A [1], 17.1.3 [1]";
          extension "FailCause: Invalid BYE_Request received OR No BYE_Request received BYE_Request received in incorrect time slot";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid Final Success (200 OK) response received";
        }
        testcase SIP_CC_OE_CR_TI_008(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          uACCallEstablished(loc_CSeq_s);
          askForOEBYE(loc_CSeq_s);
          waitForTimeout(v_TJ);
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, when a BYE client transaction is in the Trying state, considers the transaction terminated after 64*T1 duration expires without receiving any final response.";
          extension "Reference: Annex A [1], 17.1.3 [1]";
          extension "FailCause: Invalid BYE_Request received OR No BYE_Request received BYE_Request received in incorrect time slot";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid Final Success (200 OK) response received";
        }
      }
    }
    group SessionModification {
      group ValidBehaviour {
        testcase SIP_CC_OE_SM_V_001(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var INVITE_Request vl_INVITE_Request;
          
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          action ("Please send INVITE");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
              TWait.stop;
              setverdict (pass);
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (inconc);
              stop;
            }
            [] TWait.timeout {
              setverdict (inconc);
              stop;
            }
          }
          setHeadersIUTInvite_SameCallID(
            loc_CSeq_s,
            vl_INVITE_Request);
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          awaitingWithOpt1XX(
            Response_491_r_1(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          rejectInvite(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT, having sent an INVITE, on receipt of a re-INVITE on this dialog, sends a Request Pending (491 Request Pending) response.";
          extension "Reference: 14.2[1] ";
          extension "FailCause: Invalid Request Pending (491 Request Pending) received OR No Request Pending (491 Request Pending) received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid ACK_Request received OR No ACK_Request received";
        }
        testcase SIP_CC_OE_SM_V_002(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var INVITE_Request vl_INVITE_Request;
          
          v_Default := activate (defaultCCOE());
          initPort(mtc, system);
          iUTRegistration();
          action ("Please send INVITE");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfInvite(vl_INVITE_Request);
              SIPP.send (
                Response_100_s_1(
                  v_CallId,
                  v_CSeq,
                  v_From,
                  v_To,
                  v_Via)) to v_sent_label;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (inconc);
              stop;
            }
            [] TWait.timeout {
              setverdict (inconc);
              stop;
            }
          }
          setHeadersIUTInvite_SameCallID(
            loc_CSeq_s,
            vl_INVITE_Request);
          SIPP.send (
            Response_100_s_1(
              v_CallId,
              v_CSeq,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          awaitingWithOpt1XX(
            Response_491_r_1(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          rejectInvite(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent client";
          extension "Description: Ensure that the IUT when an INVITE client transaction is in the Proceeding state, on receipt of an re-INVITE on this dialog, sends a Request Pending(491 Request Pending) response.";
          extension "Reference: 14.2[1] ";
          extension "FailCause: Invalid Request Pending (491 Request Pending) received OR No Request Pending (491 Request Pending) received";
          extension "InconcCause: Invalid INVITE_Request received OR No INVITE_Request received OR Invalid ACK_Request received OR No ACK_Request received";
        }
      }
    }
  }
  group TerminatingEndpoint {
    group Callestablishment {
      group ValidBehaviour {
        testcase SIP_CC_TE_CE_V_001(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          TWait.start;
          action ("Please accept the call!");
          alt {
            [] SIPP.receive (
              Response_101_199_r_1(
                v_CallId,
                loc_CSeq_s)) -> value vl_Response sender v_sent_label {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
            }
            [] SIPP.receive (
              Response_200_r_1(
                v_CallId,
                loc_CSeq_s)) -> value vl_Response sender v_sent_label {
              TWait.stop;
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              send200OKACK(loc_CSeq_s);
              setverdict (pass);
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                v_Route);
            }
            [] SIPP.receive (
              Response_100_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive (
              Response_Any_r_1) -> value vl_Response sender v_sent_label {
              all timer.stop;
              setverdict (fail);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              terminateUASCall(vl_Response, loc_CSeq_s);
              stop;
            }
            [] TWait.timeout {
              setverdict (fail);
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request, sends a Success (200 OK) or a provisional (101-199) response.";
          extension "Reference: 8.2 [1], 13.3.1.1 [1], 8[1] ";
          extension "FailCause: Invalid provisional (101-199) response received OR No provisional (101-199) response received OR Invalid Success (200 OK) response received OR No Success (200 OK) response received";
          extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        
        testcase SIP_CC_TE_CE_V_002(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          v_RequestUri.scheme := "unknownScheme";
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          TResp.start (PX_TRESP);
          alt {
            [] SIPP.receive (
              Response_416_r_1(
                v_CallId,
                loc_CSeq_s)) -> value vl_Response sender v_sent_label {
              TResp.stop;
              setverdict (pass);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              sendACK(loc_CSeq_s);
            }
            [] SIPP.receive (
              Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive (
              Response_Any_r_1) -> value vl_Response sender v_sent_label {
              all timer.stop;
              setverdict (fail);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              terminateUASCall(vl_Response, loc_CSeq_s);
              stop;
            }
            [] TResp.timeout {
              setverdict (fail);
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request with a Request-URI set with a scheme that it does not support, sends a Unsupported URI scheme (416 Unsupported URI scheme) response.";
          extension "Reference: 8.2.2.1 [1]";
          extension "FailCause: Unsupported URI scheme (416 Unsupported URI scheme) response received OR No Unsupported URI scheme (416 Unsupported URI scheme) received";
          extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_003(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          v_RequestUri := valueof(SipUrl_ofUnknown_s);
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          TResp.start (PX_TRESP);
          alt {
            [] SIPP.receive (
              Response_404_r_1(
                v_CallId,
                loc_CSeq_s)) -> value vl_Response sender v_sent_label {
              TResp.stop;
              setverdict (pass);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              sendACK(loc_CSeq_s);
            }
            [] SIPP.receive (
              Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive (
              Response_Any_r_1) -> value vl_Response sender v_sent_label {
              all timer.stop;
              setverdict (fail);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              terminateUASCall(vl_Response, loc_CSeq_s);
              stop;
            }
            [] TResp.timeout {
              setverdict (fail);
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request with a Request-URI set with an address that it does not accept sends a Not Found (404 Not Found) response.";
          extension "Reference: 8.2.2.1 [1]";
          extension "FailCause: Not Found (404 Not Found) response received OR No Not Found (404 Not Found) received";
          extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_004(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          var integer vl_maj := getMajorDigit();
          var integer vl_min := getMinorDigit();
          var TimeValue vl_TimeValue := {
            majorDigit := vl_maj,
            minorDigit := vl_min
          };
          var Timestamp vl_timestamp;
          var TimeValue vl_delay;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          SIPP.send (
            INVITE_Request_s_7(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via,
              vl_TimeValue)) to v_sent_label;
          TResp.start (PX_TRESP);
          alt {
            [] SIPP.receive (
              Response_100_r_2(
                v_CallId,
                loc_CSeq_s)) -> value vl_Response sender v_sent_label {
              TResp.stop;
              setverdict (pass);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              if (ispresent (vl_Response
                  .msgHeader
                  .timestamp)) {
                vl_timestamp :=
                valueof(
                  vl_Response.msgHeader.timestamp);
                if (vl_timestamp
                  .timeValue
                  .majorDigit != vl_TimeValue
                  .majorDigit
                  or vl_timestamp
                  .timeValue
                  .minorDigit != vl_TimeValue
                  .minorDigit) {
                  log ("BEGIN_TRACE_INFO Invalid timestamp value in Timestamp header. END_TRACE_INFO");
                  setverdict (fail);
                }
                if (ispresent (vl_timestamp.delay)) {
                  var integer i1, i2;
                  vl_delay := valueof(vl_timestamp.delay);
                  i1 := valueof(vl_delay.majorDigit);
                  i2 := valueof(vl_delay.minorDigit);
                  if (i1 > 0 or i2 > 0) {} else {
                    log ("BEGIN_TRACE_INFO Invalid delay value in Timestamp header (should be > 0). END_TRACE_INFO");
                    setverdict (fail);
                  }
                }
              } else {
                log ("BEGIN_TRACE_INFO Missing Timestamp header field. END_TRACE_INFO");
                setverdict (fail);
              }
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
            }
            [] SIPP.receive (
              Response_Any_r_1) -> value vl_Response sender v_sent_label {
              TResp.stop;
              setverdict (fail);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              terminateUASCall(vl_Response, loc_CSeq_s);
              stop;
            }
            [] TResp.timeout {
              setverdict (fail);
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request with a Timestamp header, when it answers with a provisional response Trying (100 Trying), set a Timestamp header with same timestamp value and optional an increased delay value in its response.";
          extension "Reference: 8.2.6.1 [1], 8[1] ";
          extension "FailCause: Invalid provisional (100) response received OR No provisional (100) response received OR Invalid Success (200 OK) response received OR No Success (200 OK) response received OR Timestamp header value missing OR Timestamp header value";
          extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_005(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          SIPP.send (
            INVITE_Request_s_4(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via,
              "0")) to v_sent_label;
          TResp.start (PX_TRESP);
          alt {
            [] SIPP.receive (
              Response_487_r_1(
                v_CallId,
                loc_CSeq_s)) -> value vl_Response sender v_sent_label {
              TResp.stop;
              setverdict (pass);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              sendACK(loc_CSeq_s);
            }
            [] SIPP.receive (
              Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive (
              Response_Any_r_1) -> value vl_Response sender v_sent_label {
              all timer.stop;
              setverdict (fail);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              terminateUASCall(vl_Response, loc_CSeq_s);
              stop;
            }
            [] TResp.timeout {
              setverdict (fail);
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request including an Expires header set to 0, sends a Request Terminated (487 Request Terminated) response";
          extension "Reference: 13.3.1 [1] ";
          extension "FailCause: Invalid  Request Terminated (487 Request Terminated) response received OR No  Request Terminated (487 Request Terminated) response received";
          extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_006(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          SIPP.send (
            INVITE_Request_s_1(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via,
              v_Contact)) to v_sent_label;
          awaitingWithOpt1XX(
            Response_200_r_4(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          if (v_BOO_Route) {
            SIPP.send (
              ACK_Request_s_9(
                v_RequestUri,
                v_reqHostPort,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via,
                v_Route,
                v_ContentType)) to v_sent_label;
          } else {
            SIPP.send (
              ACK_Request_s_8(
                v_RequestUri,
                v_reqHostPort,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via,
                v_ContentType)) to v_sent_label;
          }
          terminateCall(
            v_CallId,
            loc_CSeq_s,
            v_caller_From,
            v_caller_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request including no message body, includes in its first 2xx response an initial offer session description.";
          extension "Reference: 13.2.1 [1], 13.3.1 [1]";
          extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received OR missing initial offer session description";
          extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_007(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          
          setHeadersIUTInvite(loc_CSeq_s);
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          awaitingWithOpt1XX(
            Response_200_r_4(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          send200OKACK(loc_CSeq_s);
          terminateCall(
            v_CallId,
            loc_CSeq_s,
            v_caller_From,
            v_caller_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request including an initial offer session description in its message body, includes the answer in its first 2xx response a session description.";
          extension "Reference: 13.2.1 [1], 13.3.1 [1]";
          extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received OR missing initial offer session description";
          extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_008(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ContentDisposition vl_ContentDisposition;
          var SemicolonParam_List vl_params := {
            {
              id := "handling",
              paramValue := "optional"
            }
          };
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          vl_ContentDisposition := {
            fieldName := CONTENT_DISPOSITION_E,
            dispositionType := "render",
            dispositionParams := vl_params
          };
          SIPP.send (
            INVITE_Request_ContentDisposition_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via,
              px_sdpBody,
              vl_ContentDisposition)) to v_sent_label;
          awaitingWithOpt1XX(
            Response_200_r_4(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          if (v_BOO_Route) {
            SIPP.send (
              ACK_Request_s_9(
                v_RequestUri,
                v_reqHostPort,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via,
                v_Route,
                v_ContentType)) to v_sent_label;
          } else {
            SIPP.send (
              ACK_Request_s_8(
                v_RequestUri,
                v_reqHostPort,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via,
                v_ContentType)) to v_sent_label;
          }
          terminateCall(
            v_CallId,
            loc_CSeq_s,
            v_caller_From,
            v_caller_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request including a message body with a Content-Disposition header not set to session value, includes in its first 2xx response an initial offer session description.";
          extension "Reference: 13.2.1 [1], 13.3.1 [1]";
          extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received OR missing initial offer session description";
          extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_009(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ContentDisposition vl_ContentDisposition;
          var SemicolonParam_List vl_params := {
            {
              id := "handling",
              paramValue := "optional"
            }
          };
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          vl_ContentDisposition := {
            fieldName := CONTENT_DISPOSITION_E,
            dispositionType := "session",
            dispositionParams := vl_params
          };
          SIPP.send (
            INVITE_Request_ContentLanguage_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via,
              vl_ContentDisposition)) to v_sent_label;
          awaitingWithOpt1XX(
            Response_200_r_4(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          send200OKACK(loc_CSeq_s);
          terminateCall(
            v_CallId,
            loc_CSeq_s,
            v_caller_From,
            v_caller_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request including a Content-Language header value that it cannot understood and a Content-Disposition header including a handling set to ""optional"", includes in its first 2xx response an initial offer session description.";
          extension "Reference: 13.2.1 [1], 13.3.1 [1], 20.11 [1]";
          extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received OR missing initial offer session description";
          extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_010(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ContentDisposition vl_ContentDisposition;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          vl_ContentDisposition := valueof(ContentDisposition_s1);
          SIPP.send (
            INVITE_Request_ContentLanguage_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via,
              vl_ContentDisposition)) to v_sent_label;
          awaitingWithOpt1XX(
            Response_415_r_2(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          sendACK(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request including a Content-Language header value that it cannot understood, a Content-Disposition header including a handling empty,  sends an Unsupported Media Type (415 Unsupported Media Type) response with an Accept header that lists the types of all bodies it understands.";
          extension "Reference: 13.2.1 [1], 13.3.1 [1], 20.11 [1]";
          extension "FailCause: Unsupported Media Type (415 Unsupported Media Type) response received OR No Unsupported Media Type (415 Unsupported Media Type) response received";
        }
        testcase SIP_CC_TE_CE_V_011(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ContentDisposition vl_ContentDisposition;
          var SemicolonParam_List vl_params := {
            {
              id := "handling",
              paramValue := "required"
            }
          };
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          vl_ContentDisposition := {
            fieldName := CONTENT_DISPOSITION_E,
            dispositionType := "session",
            dispositionParams := vl_params
          };
          SIPP.send (
            INVITE_Request_ContentLanguage_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via,
              vl_ContentDisposition)) to v_sent_label;
          awaitingWithOpt1XX(
            Response_415_r_2(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          sendACK(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request including a Content-Language header value that it cannot understood, a Content-Disposition with a handling set to ""required"" and a disposition-types set to session, sends an Unsupported Media Type (415 Unsupported Media Type) response with an Accept header that lists the types of all bodies it understands.";
          extension "Reference: 8.2.3 [1], 21.4.13 [1], 13.2.1 [1], 13.3.1 [1], 20.11 [1]";
          extension "FailCause: Unsupported Media Type (415 Unsupported Media Type) response received OR No Unsupported Media Type (415 Unsupported Media Type) response received";
        }
        testcase SIP_CC_TE_CE_V_012(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ContentDisposition vl_ContentDisposition;
          var SemicolonParam_List vl_params := {
            {
              id := "handling",
              paramValue := "required"
            }
          };
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          vl_ContentDisposition := {
            fieldName := CONTENT_DISPOSITION_E,
            dispositionType := "session",
            dispositionParams := vl_params
          };
          SIPP.send (
            INVITE_Request_ContentEncoding_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via,
              vl_ContentDisposition)) to v_sent_label;
          awaitingWithOpt1XX(
            Response_415_r_3(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          sendACK(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request including a Content-Encoding header set to content-coding values that it does not support, and a Content-Disposition with a handling set to 'Required', sends an Unsupported Media Type (415 Unsupported Media Type) response with an Accept-Encoding header that list the types of coding that it understands.";
          extension "Reference: 8.2.3 [1], 21.4.13 [1], 13.2.1 [1], 13.3.1 [1], 20.12 [1]";
          extension "FailCause: Unsupported Media Type (415 Unsupported Media Type) response received OR No Unsupported Media Type (415 Unsupported Media Type) response received";
        }
        testcase SIP_CC_TE_CE_V_013(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var ContentDisposition vl_ContentDisposition;
          var SemicolonParam_List vl_params := {
            {
              id := "handling",
              paramValue := "required"
            }
          };
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          vl_ContentDisposition := {
            fieldName := CONTENT_DISPOSITION_E,
            dispositionType := "session",
            dispositionParams := vl_params
          };
          SIPP.send (
            INVITE_Request_ContentDisposition_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via,
              px_sdpBody_UNSUPPORTED,
              vl_ContentDisposition)) to v_sent_label;
          awaitingWithOpt1XX(
            Response_488_r_1(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          sendACK(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request including a session description that it can understand but it cannot accept, a Content-Disposition with a handling set to ""required"" and a disposition-types set to session,sends a Not Acceptable Here (488 Not Acceptable Here) response including a Warning header.";
          extension "Reference: 13.3.1.3 [1], 21.4.13 [1] ";
          extension "FailCause: Not Acceptable Here (488 Not Acceptable Here) response received OR Not Acceptable Here (488 Not Acceptable Here) response received";
        }
        testcase SIP_CC_TE_CE_V_014(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          TResp.start (PX_TRESP);
          alt {
            [] SIPP.receive (
              Response_101_199_r_2(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Via)) -> value vl_Response sender v_sent_label {
              TResp.stop;
              setverdict (pass);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
            }
            [] SIPP.receive (
              Response_200_r_5(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Via)) -> value vl_Response sender v_sent_label {
              TResp.stop;
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              sendACK(loc_CSeq_s);
              setverdict (pass);
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                v_Route);
            }
            [] SIPP.receive (
              Response_100_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive (
              Response_Any_r_1) -> value vl_Response sender v_sent_label {
              all timer.stop;
              setverdict (fail);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              terminateUASCall(vl_Response, loc_CSeq_s);
              stop;
            }
            [] TResp.timeout {
              setverdict (fail);
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request, sends a Success (200 OK) or a provisional (101-199)  response including the headers From, Call-ID, CSeq and Via headers copy from the INVITE request.";
          extension "Reference: 8.2.6.2 ";
          extension "FailCause: Invalid provisional (101-199) response received OR No provisional (101-199) response received OR Invalid Success (200 OK) response received OR No Success (200 OK) response received";
          extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_015(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          var SemicolonParam_List vl_params;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          TResp.start (PX_TRESP);
          alt {
            [] SIPP.receive (
              Response_101_199_r_3(
                v_CallId,
                loc_CSeq_s)) -> value vl_Response sender v_sent_label {
              TResp.stop;
              setverdict (pass);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              vl_params := valueof(v_To.toParams);
              if (checkTagPresent(vl_params)) {
                setverdict (pass);
              } else {
                log ("BEGIN_TRACE_INFO TAG in To header missing. END_TRACE_INFO");
                setverdict (fail);
              }
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
            }
            [] SIPP.receive (
              Response_200_r_9(
                v_CallId,
                loc_CSeq_s,
                getAddressFromToHeader(v_To))) -> value vl_Response sender v_sent_label {
              TResp.stop;
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              send200OKACK(loc_CSeq_s);
              vl_params := valueof(v_To.toParams);
              if (checkTagPresent(vl_params)) {
                setverdict (pass);
              } else {
                log ("BEGIN_TRACE_INFO TAG in To header missing. END_TRACE_INFO");
                setverdict (fail);
              }
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                v_Route);
            }
            [] SIPP.receive (
              Response_100_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive (
              Response_Any_r_1) -> value vl_Response sender v_sent_label {
              all timer.stop;
              setverdict (fail);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              terminateUASCall(vl_Response, loc_CSeq_s);
              stop;
            }
            [] TResp.timeout {
              setverdict (fail);
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request with no TAG set on the To header, sends a Success (200 OK) or a provisional (101-199) response including the same URI and an additional TAG for the To header.";
          extension "Reference: 8.2.6.2 [1]";
          extension "FailCause: Invalid provisional (101-199) response received OR No provisional (101-199) response received OR Invalid Success (200 OK) response received OR No Success (200 OK) response received OR TAG in To header missing";
          extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_016(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          //RGy (2007-11-21) Template variable to create the To header checked at receiving a Response
          var template To vlt_To;
          var SemicolonParam_List vl_params := {
            {
              id := TAG_ID,
              paramValue := getRndTag()
            }
          };
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          v_To.toParams := vl_params;
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          vlt_To := v_To;
          if (ischosen(v_To.addressField.nameAddr)){
            vlt_To.addressField.nameAddr.displayName := *;
            if (ispresent(v_To.addressField.nameAddr.addrSpec.userInfo)){
              if (v_To.addressField.nameAddr.addrSpec.userInfo.userOrTelephoneSubscriber==""){
                vlt_To.addressField.nameAddr.addrSpec.userInfo := *
              }
            }
          } else {
            if (ispresent(v_To.addressField.addrSpecUnion.userInfo)){
              if (v_To.addressField.addrSpecUnion.userInfo.userOrTelephoneSubscriber==""){
                vlt_To.addressField.addrSpecUnion.userInfo := *
              }
            }
          }
          TResp.start (PX_TRESP);
          alt {
            [] SIPP.receive (
              Response_101_199_r_4(
                v_CallId,
                loc_CSeq_s,
                vlt_To)) -> value vl_Response sender v_sent_label {
              TResp.stop;
              setverdict (pass);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
            }
            [] SIPP.receive (
              Response_200_r_11(
                v_CallId,
                loc_CSeq_s,
                vlt_To)) -> value vl_Response sender v_sent_label {
              TResp.stop;
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              setverdict (pass);
              send200OKACK(loc_CSeq_s);
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                v_Route);
            }
            [] SIPP.receive (
              Response_481_r_2(
                v_CallId,
                loc_CSeq_s,
                vlt_To)) -> value vl_Response sender v_sent_label {
              TResp.stop;
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              setverdict (pass);
              send200OKACK(loc_CSeq_s);
            }
            [] SIPP.receive (
              Response_100_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive (
              Response_Any_r_1) -> value vl_Response sender v_sent_label {
              all timer.stop;
              setverdict (fail);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              terminateUASCall(vl_Response, loc_CSeq_s);
              stop;
            }
            [] TResp.timeout {
              setverdict (fail);
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
              stop;
            }
          }
        }
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request with a TAG set on the To header, sends a Success (200 OK) or a provisional (101-199) response including the same URI and the same TAG for the To header.";
          extension "Reference: 8.2.6.2 [1]";
          extension "FailCause: Invalid provisional (101-199) response received OR Invalid Success (200 OK) response received OR (No provisional (101-199) response received AND no Success (200 OK) response received AND no unknown call/transaction (481) response received)";
          extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_017(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          TResp.start (PX_TRESP);
          alt {
            [] SIPP.receive (
              Response_101_199_r_5(
                v_CallId,
                loc_CSeq_s)) -> value vl_Response sender v_sent_label {
              TResp.stop;
              setverdict (pass);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
            }
            [] SIPP.receive (
              Response_200_r_6(
                v_CallId,
                loc_CSeq_s)) -> value vl_Response sender v_sent_label {
              TResp.stop;
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              setverdict (pass);
              send200OKACK(loc_CSeq_s);
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                v_Route);
            }
            [] SIPP.receive (
              Response_100_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive (
              Response_Any_r_1) -> value vl_Response sender v_sent_label {
              all timer.stop;
              setverdict (fail);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              terminateUASCall(vl_Response, loc_CSeq_s);
              stop;
            }
            [] TResp.timeout {
              setverdict (fail);
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request, sends a Success (200 OK) or a provisional (101-199) response including a single Contact header.";
          extension "Reference: 12.1.1 [1] ";
          extension "FailCause: Invalid provisional (101-199) response received OR No provisional (101-199) response received OR Invalid Success (200 OK) response received OR No Success (200 OK) response received OR Single Contact header missing";
          extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_018(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          v_RecordRoute := {
            fieldName := RECORD_ROUTE_E,
            routeBody := {
              {
                nameAddr := {
                  displayName := omit,
                  addrSpec := valueof(SipUrl_ofRouteEts)},
                rrParam := omit },
              {
                nameAddr := {
                  displayName := omit,
                  addrSpec := valueof(SipUrl_ofProxy)},
                rrParam := omit
              }
            }
          };
          SIPP.send (
            INVITE_Request_s_3(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via,
              v_RecordRoute)) to v_sent_label;
          TResp.start (PX_TRESP);
          alt {
            [] SIPP.receive (
              Response_101_199_r_6(
                v_CallId,
                loc_CSeq_s)) -> value vl_Response sender v_sent_label {
              TResp.stop;
              setverdict (pass);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
            }
            [] SIPP.receive (
              Response_200_r_7(
                v_CallId,
                loc_CSeq_s)) -> value vl_Response sender v_sent_label {
              TResp.stop;
              setverdict (pass);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              send200OKACK(loc_CSeq_s);
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                v_Route);
            }
            [] SIPP.receive (
              Response_100_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive (
              Response_Any_r_1) -> value vl_Response sender v_sent_label {
              all timer.stop;
              setverdict (fail);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              terminateUASCall(vl_Response, loc_CSeq_s);
              stop;
            }
            [] TResp.timeout {
              setverdict (fail);
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request including a Record-Route header, sends a Success (200 OK) or a provisional (101-199) response including a Record-Route header copy from the INVITE request, in the same order.";
          extension "Reference: 12.1.1 [1]";
          extension "FailCause: Invalid provisional (101-199) response received OR No provisional (101-199) response received OR Invalid Success (200 OK) response received OR No Success (200 OK) response received OR Record-Route header invalid/missing";
          extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_019(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          var SemicolonParam_List vl_params;
          var RecordRoute vl_recordRoute;
          var boolean vl_correctID := false;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          vl_params := {
            {
              id := "unknownid",
              paramValue := "unknownValue"
            }
          };
          v_RecordRoute := {
            fieldName := RECORD_ROUTE_E,
            routeBody := {
              {
                nameAddr := {
                  displayName := omit,
                  addrSpec := valueof(SipUrl_ofRouteEts)},
                rrParam := vl_params },
              {
                nameAddr := {
                  displayName := omit,
                  addrSpec := valueof(SipUrl_ofProxy)},
                rrParam := omit
              }
            }
          };
          SIPP.send (
            INVITE_Request_s_3(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via,
              v_RecordRoute)) to v_sent_label;
          TResp.start (PX_TRESP);
          alt {
            [] SIPP.receive (
              Response_101_199_r_6(
                v_CallId,
                loc_CSeq_s)) -> value vl_Response sender v_sent_label {
              TResp.stop;
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              if (ispresent (vl_Response
                  .msgHeader
                  .recordRoute)) {
                vl_recordRoute :=
                valueof(
                  vl_Response.msgHeader.recordRoute);
                if (ispresent (vl_recordRoute
                    .routeBody[0]
                    .rrParam)) {
                  vl_params :=
                  valueof(
                    vl_recordRoute
                    .routeBody[0]
                    .rrParam);
                  if (vl_params[0].id == "unknownid") {
                    setverdict (pass);
                    vl_correctID := true;
                  } else {
                    log ("BEGIN_TRACE_INFO Unknown Parameters in Record Route header invalid. END_TRACE_INFO");
                    setverdict (fail);
                  }
                } else {
                  log ("BEGIN_TRACE_INFO Parameters in Record Route header missing. END_TRACE_INFO");
                  setverdict (fail);
                }
              } else {
                log ("BEGIN_TRACE_INFO Record Route header not in provisional response . END_TRACE_INFO");
              }
              repeat;
            }
            [] SIPP.receive (
              Response_200_r_7(
                v_CallId,
                loc_CSeq_s)) -> value vl_Response sender v_sent_label {
              TResp.stop;
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              vl_recordRoute :=
              valueof(vl_Response.msgHeader.recordRoute);
              if (ispresent (vl_Response
                  .msgHeader
                  .recordRoute)) {
                if (ispresent (vl_recordRoute
                    .routeBody[0]
                    .rrParam)) {
                  vl_params :=
                  valueof(
                    vl_recordRoute
                    .routeBody[0]
                    .rrParam);
                  if (vl_params[0].id == "unknownid") {
                    setverdict (pass);
                  } else {
                    log ("BEGIN_TRACE_INFO Unknown Parameters in Record Route header invalid. END_TRACE_INFO");
                    setverdict (fail);
                  }
                } else {
                  log ("BEGIN_TRACE_INFO Parameters in Record Route header missing. END_TRACE_INFO");
                  setverdict (fail);
                }
              } else {
                log ("BEGIN_TRACE_INFO Record Route header not in 200 response . END_TRACE_INFO");
                if (vl_correctID == true) {
                  setverdict (pass);
                } else {
                  setverdict (fail);
                }
              }
              send200OKACK(loc_CSeq_s);
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                v_Route);
            }
            [] SIPP.receive (
              Response_100_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive (
              Response_Any_r_1) -> value vl_Response sender v_sent_label {
              all timer.stop;
              setverdict (fail);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              terminateUASCall(vl_Response, loc_CSeq_s);
              stop;
            }
            [] TResp.timeout {
              setverdict (fail);
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request including a Record-Route header with parameters that it does not understand, sends a Success(200 OK) or a provisional (101-199) response including a Record-Route header copy from the INVITE request, with the unknown parameters.";
          extension "Reference: 12.1.1 [1]";
          extension "FailCause: Invalid provisional (101-199) response received OR No provisional (101-199) response received OR Invalid Success (200 OK) response received OR No Success (200 OK) response received OR Record-Route header invalid/missing";
          extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_020(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          v_From := valueof(From_withoutTag_s1);
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          TResp.start (PX_TRESP);
          alt {
            [] SIPP.receive (
              Response_101_199_r_2(
                v_CallId,
                loc_CSeq_s,
                v_From,
              ?)) -> value vl_Response sender v_sent_label {
              TResp.stop;
              setverdict (pass);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
            }
            [] SIPP.receive (
              Response_200_r_5(
                v_CallId,
                loc_CSeq_s,
                v_From,
              ?)) -> value vl_Response sender v_sent_label {
              TResp.stop;
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              send200OKACK(loc_CSeq_s);
              setverdict (pass);
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                v_Route);
            }
            [] SIPP.receive (
              Response_100_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive (
              Response_Any_r_1) -> value vl_Response sender v_sent_label {
              all timer.stop;
              setverdict (fail);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              terminateUASCall(vl_Response, loc_CSeq_s);
              stop;
            }
            [] TResp.timeout {
              setverdict (fail);
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request including From header without tag, sends a Success (200 OK) or a provisional (101-199) response including a From header without tag. ";
          extension "Reference: 12.1.1 [1]";
          extension "FailCause: Invalid provisional (101-199) response received OR No provisional (101-199) response received OR Invalid Success (200 OK) response received OR No Success (200 OK) response received OR a From header invalid/missing";
          extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_021(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          TResp.start (PX_TRESP);
          alt {
            [] SIPP.receive (
              Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive (
              Response_200_r_12(
                v_CallId,
                loc_CSeq_s)) -> value vl_Response sender v_sent_label {
              TResp.stop;
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              send200OKACK(loc_CSeq_s);
              setverdict (pass);
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                v_Route);
            }
            [] SIPP.receive (
              Response_Any_r_1) -> value vl_Response sender v_sent_label {
              all timer.stop;
              setverdict (fail);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              terminateUASCall(vl_Response, loc_CSeq_s);
              stop;
            }
            [] TResp.timeout {
              setverdict (fail);
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT having received an INVITE request, sends a Success (200 OK) including an Allow and a Supported headers.";
          extension "Reference: 13.3.1.4 [1]";
          extension "FailCause: Invalid provisional (101-199) response received OR No provisional (101-199) response received OR Invalid Success (200 OK) response received OR No Success (200 OK) response received OR Allow and Supported headers invalid/missing";
          extension "InconcCause: Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_022(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASProceedingState(loc_CSeq_s);
          awaitingFirstAnyResp(vl_Response, loc_CSeq_s);
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          repeatLastResponse(vl_Response, loc_CSeq_s);
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          terminateUASCall(vl_Response, loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT when a server INVITE transaction is in the Proceeding state, on receipt of an INVITE request, including a Via header set with the same branch parameter and sent-by value in the topmost list value, repeats its last response.";
          extension "Reference: 17.2.1 [1], 17.2.3 [1]";
          extension "FailCause: Invalid second SIP message response received OR No second SIP message response received";
          extension "InconcCause: Invalid first SIP message response received OR No first SIP message response received Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_023(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASProceedingState(loc_CSeq_s);
          awaitingFirstAnyResp(vl_Response, loc_CSeq_s);
          v_Via := {
            fieldName := VIA_E,
            viaBody := { valueof(ViaBody_ETS_NoBranch)}
          };
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          repeatLastResponse(vl_Response, loc_CSeq_s);
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          terminateUASCall(vl_Response, loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT when a server INVITE transaction is in the Proceeding state, on receipt of an INVITE request, including a Via header set  no with no branch parameter but with the Request-URI, To tag, From tag, Call-ID, CSeq and top Via identical as in the first INVITE request, repeats its last response.";
          extension "Reference: 17.2.1 [1], 17.2.3 [1]";
          extension "FailCause: Invalid second SIP message response received OR No second SIP message response received";
          extension "InconcCause: Invalid first SIP message response received OR No first SIP message response received Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_024(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          var charstring vl_branch_val;
          var Via vl_Via2;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASProceedingState(loc_CSeq_s);
          awaitingFirstAnyResp(vl_Response, loc_CSeq_s);
          vl_branch_val := getRndTag();
          vl_Via2 := {
            fieldName := VIA_E,
            viaBody := {
              valueof(ViaBody_ETS_IPADDR(vl_branch_val))}
          };
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              vl_Via2)) to v_sent_label;
          repeatLastResponse(vl_Response, loc_CSeq_s);
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          terminateUASCall(vl_Response, loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT when a server INVITE transaction is in the Proceeding state, on receipt of an INVITE request, including a Via header set with a different branch parameter without the magic cookie ""z9hG4bK"" but with the Request-URI, To tag, From tag, Call-ID, CSeq and top Via identical as in the first INVITE request, repeats its last response.";
          extension "Reference: 17.2.1 [1], 17.2.3 [1]";
          extension "FailCause: Invalid second SIP message response received OR No second SIP message response received";
          extension "InconcCause: Invalid first SIP message response received OR No first SIP message response received Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_025(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASCompletedState(vl_Response, loc_CSeq_s);
          SIPP.send (
            INVITE_Request_s_6(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          repeatLastResponse(vl_Response, loc_CSeq_s);
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          terminateUASCall(vl_Response, loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT when a server INVITE transaction is in the Completed state, on receipt of an INVITE request, including a Via header set with the same branch parameter and sent-by value in the topmost list value, repeats its last response.";
          extension "Reference: 17.2.1 [1], 17.2.3 [1]";
          extension "FailCause: Invalid second SIP message response received OR No second SIP message response received";
          extension "InconcCause: Invalid first SIP message response received OR No first SIP message response received Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_026(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASCompletedState(vl_Response, loc_CSeq_s);
          v_Via := {
            fieldName := VIA_E,
            viaBody := { valueof(ViaBody_ETS_NoBranch)}
          };
          SIPP.send (
            INVITE_Request_s_6(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          repeatLastResponse(vl_Response, loc_CSeq_s);
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          terminateUASCall(vl_Response, loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT when a server INVITE transaction is in the Completed state, on receipt of an INVITE request, including a Via header set with no branch parameter but with the Request-URI, To tag, From tag, Call-ID, CSeq and top Via identical as in the first INVITE request, repeats its last response.";
          extension "Reference: 17.2.1 [1], 17.2.3 [1]";
          extension "FailCause: Invalid second SIP message response received OR No second SIP message response received";
          extension "InconcCause: Invalid first SIP message response received OR No first SIP message response received Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_027(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          var charstring vl_branch_val;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASCompletedState(vl_Response, loc_CSeq_s);
          vl_branch_val := getRndTag();
          v_Via := {
            fieldName := VIA_E,
            viaBody := {
              valueof(ViaBody_ETS_IPADDR(vl_branch_val))}
          };
          SIPP.send (
            INVITE_Request_s_6(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          repeatLastResponse(vl_Response, loc_CSeq_s);
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          terminateUASCall(vl_Response, loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT when a server INVITE transaction is in the Completed state, on receipt of an INVITE request, including a Via header set with a different branch parameter without the magic cookie ""z9hG4bK"" but with the Request-URI, To tag, From tag, Call-ID, CSeq and top Via identical as in the first INVITE request, repeats its last response.";
          extension "Reference: 17.2.1 [1], 17.2.3 [1]";
          extension "FailCause: Invalid second SIP message response received OR No second SIP message response received";
          extension "InconcCause: Invalid first SIP message response received OR No first SIP message response received Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_028(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          var charstring vl_branch_val;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASProceedingState(loc_CSeq_s);
          awaitingFirstAnyResp(vl_Response, loc_CSeq_s);
          vl_branch_val := BRANCH_COOKIE & getRndTag();
          v_Via := {
            fieldName := VIA_E,
            viaBody := {
              valueof(ViaBody_ETS_IPADDR(vl_branch_val))}
          };
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          awaitingWithOpt1XX(
            Response_482_r_1(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          sendACK(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT when a server INVITE transaction is in the Proceeding state, on receipt of an INVITE request, including a Via header set with a different branch parameter starting with the magic cookie ""z9hG4bK"" but with the Request-URI, To tag, From tag, Call-ID and CSeq identical as in the first INVITE request, sends a Loop Detected (482 Loop Detected) response.";
          extension "Reference: 8.2.2.2 [1], 17.2.1 [1], 17.2.3 [1]";
          extension "FailCause: Invalid Loop Detected (482 Loop Detected) received OR No Loop Detected (482 Loop Detected) received";
          extension "InconcCause: Invalid first SIP message response received OR No first SIP message response received Invalid Final Success (200 OK) response received";
        }
        
        testcase SIP_CC_TE_CE_V_029(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASProceedingState(loc_CSeq_s);
          awaitingFirstAnyResp(vl_Response, loc_CSeq_s);
          //RGy (2007-11-21) The whole checking and picking the branch value is deleted as the value is saved in v_Branch during initialization
          v_Via := {
            fieldName := VIA_E,
            viaBody := {valueof(ViaBody_PTC(v_Branch))}
          }
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          awaitingWithOpt1XX(
            Response_482_r_1(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          sendACK(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT when a server INVITE transaction is in the Proceeding state, on receipt of an INVITE request, including a Via header set to an identical branch parameter starting with the magic cookie ""z9hG4bK"" and a different sent-by value, but with the Request-URI, To tag, From tag, Call-ID and CSeq identical as in the first INVITE request, sends a Loop Detected (482 Loop Detected) response.";
          extension "Reference: 8.2.2.2 [1], 17.2.1 [1], 17.2.3 [1]";
          extension "FailCause: Invalid Loop Detected (482 Loop Detected) received OR No Loop Detected (482 Loop Detected) received";
          extension "InconcCause: Invalid first SIP message response received OR No first SIP message response received Invalid Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_030(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          var charstring vl_branch_val;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASProceedingState(loc_CSeq_s);
          awaitingFirstAnyResp(vl_Response, loc_CSeq_s);
          //RGy (2007-11-21) The whole checking and picking the branch value is deleted as a new branch value is generated anyway
          v_Via := {
            fieldName := VIA_E,
            //RGy (2007-11-21) According to the TP a new branch value shall be used
            viaBody := {valueof(ViaBody_PTC(BRANCH_COOKIE & getRndTag()))}
          }
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          awaitingWithOpt1XX(
            Response_482_r_1(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          sendACK(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT when a server INVITE transaction is in the Proceeding state, on receipt of an INVITE request, including a top Via header set to a different value but with the Request-URI, To tag, From tag, Call-ID and CSeq identical as in the first INVITE request, sends a Loop Detected (482 Loop Detected) response.";
          extension "Reference: 8.2.2.2 [1], 17.2.1 [1], 17.2.3 [1]";
          extension "FailCause: Invalid Loop Detected (482 Loop Detected) received OR No Loop Detected (482 Loop Detected) received";
          extension "InconcCause: Invalid first SIP message response received OR No first SIP message response received Invalid Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_V_031(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          SIPP.send (
            INVITE_Request_s_6(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          awaitingWithOpt1XX(
            Response_420_r_2(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          sendACK(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request with a Require header set to an option value that the IUT does not support, sends a Bad Extension (420 Bad Extension) response including those options in the Unsupported header.";
          extension "Reference: 8.2.2.3 [1] ";
          extension "FailCause: Invalid Bad Extension (420 Bad Extension) received OR No Bad Extension (420 Bad Extension) received";
        }
        testcase SIP_CC_TE_CE_V_032(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          SIPP.send (
            INVITE_Request_s_6(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          awaitingWithOpt1XX(
            Response_4XX_r_1(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          checkCompletedState(
            Response_4XX_r_1(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          sendACK(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT when a server INVITE transaction is in the Proceeding state, after sending a 4XX response, enters in the Completed state.";
          extension "Reference: 17.2.3.1 [1], 13.3.1.4 [1], figure 7 [1] ";
          extension "FailCause: Invalid 4xx received OR No 4xx received OR Any message received after 4xx received";
        }
        testcase SIP_CC_TE_CE_V_033(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASCompletedState(vl_Response, loc_CSeq_s);
          sendACK(loc_CSeq_s);
          checkServerConfirmedState();
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT when a server INVITE transaction is in the Completed state, on receipt of an ACK request, enters in the Confirmed transaction state.";
          extension "Reference: 17.2.3.1 [1], 13.3.1.4 [1], figure 7 [1] ";
          extension "FailCause: Invalid SIP message received OR No SIP message OR Any message received after SIP message received";
        }
        testcase SIP_CC_TE_CE_V_034(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
        // Ref: 22.2
        // Purpose: Ensure that the IUT on receipt of an INVITE request not including an Authorization header field,
        // sends an Unauthorized (401 Unauthorized) response, containing a WWW-Authenticate header.
        {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          awaitingWithOpt1XX(
            Response_401_r_1(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          sendACK(loc_CSeq_s);
        }
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request not including an Authorization header field, sends an Unauthorized (401 Unauthorized) response, containing a WWW-Authenticate header.";
          extension "Reference: 22.2 [1]";
        }
        testcase SIP_CC_TE_CE_V_035(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
        // Ref: 22.2
        // Purpose: Ensure that the IUT on receipt of an INVITE request not including an Authorization header field,
        // sends an Unauthorized (401 Unauthorized) response, containing a WWW-Authenticate header
        // including proper value for realm and nonce HTTP parameters.
        {
          var Response vl_Response;
          var CommaParam_List vl_challenge;
          var charstring vl_nonce;
          var charstring vl_realm;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          
          TResp.start (PX_TRESP);
          alt {
            [] SIPP.receive (
              Response_401_r_1(
                v_CallId,
                loc_CSeq_s)) -> value vl_Response sender v_sent_label {
              TResp.stop;
              //  check if values for realm and nonce are included
              if (ischosen (vl_Response
                  .msgHeader
                  .wwwAuthenticate
                  .challenge[0]
                  .digestCln)) {
                vl_challenge :=
                vl_Response
                .msgHeader
                .wwwAuthenticate
                .challenge[0]
                .digestCln;
                vl_nonce :=
                extractParamValueFromChallenge(
                  vl_challenge,
                  "nonce");
                if (vl_nonce == "") {
                  setverdict (fail);
                  stop;
                }
                vl_realm :=
                extractParamValueFromChallenge(
                  vl_challenge,
                  "realm");
                if (vl_realm == "") {
                  setverdict (fail);
                }
              } else {
                log ("No scheme in www-Authenticate header !!");
                setverdict (inconc);
                stop;
              }
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              setverdict (pass);
            }
            [] SIPP.receive (
              Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive (
              Response_Any_r_1) -> value vl_Response sender v_sent_label {
              all timer.stop;
              setverdict (fail);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              terminateUASCall(vl_Response, loc_CSeq_s);
              TResp.start (PX_TRESP);
              alt {
                [] SIPP.receive (
                  Response_Any_r_1) -> value vl_Response sender v_sent_label {
                  setverdict (inconc);
                  TResp.stop;
                  setHeadersOnReceiptOfResponse(
                    loc_CSeq_s,
                    vl_Response);
                  terminateUASCall(
                    vl_Response,
                    loc_CSeq_s);
                }
                [] TResp.timeout {
                  cancelCall(
                    v_CallId,
                    loc_CSeq_s,
                    v_From,
                    v_Cancel_To,
                    v_reqHostPort,
                    v_Via);
                }
              }
            }
            [] TResp.timeout {
              setverdict (fail);
              stop;
            }
          }
          sendACK(loc_CSeq_s);
        }
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request not including an Authorization header field, sends an Unauthorized (401 Unauthorized) response, containing a WWW-Authenticate header including proper value for realm and nonce HTTP parameters.";
          extension "Reference: 22.2 [1]";
        }
        testcase SIP_CC_TE_CE_V_036(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces
        // Ref: 22.2
        // Purpose: Ensure that the IUT having sent an Unauthorized (401 Unauthorized ) response to an INVITE
        // request, on receipt of a INVITE request including a valid Authorization header field, sends a
        // Success (200 OK) response.
        {
          var Response vl_Response;
          var CommaParam_List vl_challenge;
          // var charstring vl_Credentials;
          var Credentials vl_Credentials;
          
          var Request vl_Request :=
          valueof(
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via));
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          
          TResp.start (PX_TRESP);
          alt {
            [] SIPP.receive (
              Response_401_r_1(
                v_CallId,
                loc_CSeq_s)) -> value vl_Response sender v_sent_label {
              TResp.stop;
              setverdict (pass);
              // resent the REGISTER message with Authorization header include
              // Extract challenge and calculate credentials for a response.
              if (ischosen (vl_Response
                  .msgHeader
                  .wwwAuthenticate
                  .challenge[0]
                  .digestCln)) {
                vl_challenge :=
                vl_Response
                .msgHeader
                .wwwAuthenticate
                .challenge[0]
                .digestCln;
                vl_Credentials :=
                calculateCredentials(
                  "INVITE",
                  vl_challenge,
                  PX_RFC2617_USERNAME,
                  PX_RFC2617_PASSWD);
                
              } else {
                log ("No scheme in www-Authenticate header !!");
                setverdict (inconc);
                stop;
              }
              
              // Increment CSeq sequence number of and add the credentials
              // to the original saved REGEISTER message.
              loc_CSeq_s.seqNumber :=
              loc_CSeq_s.seqNumber + 1;
              vl_Request.msgHeader.cSeq.seqNumber :=
              loc_CSeq_s.seqNumber;
              vl_Request.msgHeader.authorization.fieldName :=
              AUTHORIZATION_E;
              vl_Request.msgHeader.authorization.body :=
              vl_Credentials;
              
              // Re-send the saved REGISTER with Authorization header
              // included.
              SIPP.send (vl_Request) to v_sent_label;
              
            }
            [] SIPP.receive (
              Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive (
              Response_Any_r_1) -> value vl_Response sender v_sent_label {
              all timer.stop;
              setverdict (fail);
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              terminateUASCall(vl_Response, loc_CSeq_s);
              TResp.start (PX_TRESP);
              alt {
                [] SIPP.receive (
                  Response_Any_r_1) -> value vl_Response sender v_sent_label {
                  setverdict (inconc);
                  TResp.stop;
                  setHeadersOnReceiptOfResponse(
                    loc_CSeq_s,
                    vl_Response);
                  terminateUASCall(
                    vl_Response,
                    loc_CSeq_s);
                }
                [] TResp.timeout {
                  cancelCall(
                    v_CallId,
                    loc_CSeq_s,
                    v_From,
                    v_Cancel_To,
                    v_reqHostPort,
                    v_Via);
                }
              }
            }
            [] TResp.timeout {
              setverdict (fail);
              stop;
            }
          }
          awaitingWithOpt1XX(
            Response_200_r_1(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
        }
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT having sent an Unauthorized (401 Unauthorized ) response to an INVITE request, on receipt of a INVITE request including a valid Authorization header field, sends a Success (200 OK) response.";
          extension "Reference: 22.2 [1]";
        }
      }
      group InvalidBehaviour {
        testcase SIP_CC_TE_CE_I_001(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASCompletedState(vl_Response, loc_CSeq_s);
          SIPP.send (
            ACK_Request_s_3(
              v_RequestUri,
              v_reqHostPort,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          checkServerConfirmedState();
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT when a server INVITE transaction is in the Completed state, on receipt of an ACK request including a Proxy-Require header set with an option-tag that it does not support, enters in the Confirmed transaction state.";
          extension "Reference: 17.2.3 [1], 8.2.2.3 [1], figure 7 [1] ";
          extension "FailCause: Invalid SIP message received OR No SIP message OR Any message received after SIP message received";
        }
        testcase SIP_CC_TE_CE_I_002(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASCompletedState(vl_Response, loc_CSeq_s);
          SIPP.send (
            ACK_Request_s_4(
              v_RequestUri,
              v_reqHostPort,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          checkServerConfirmedState();
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT when a server INVITE transaction is in the Completed state, on receipt of an ACK request including a Require header set with an option-tag that it does not support, enters in the Confirmed transaction state.";
          extension "Reference: 17.2.3 [1], 8.2.2.3 [1], figure 7 [1] ";
          extension "FailCause: Invalid SIP message received OR No SIP message OR Any message received after SIP message received";
        }
      }
      group Timers {
        testcase SIP_CC_TE_CE_TI_001(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASCompletedState(vl_Response, loc_CSeq_s);
          repeatRespInTime(vl_Response, loc_CSeq_s, PX_T1 * 1.1);
          sendACK(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: If an unreliable transport is used, ensure that the IUT, when an INVITE server transaction is in the Completed state repeats its response on the timeout condition of timer G set with a value of T1.";
          extension "Reference: Annex A [1], 17.2.1 [1]";
          extension "FailCause: Invalid repeat response within T1 OR No repeat response within T1";
          extension "InconcCause: Invalid first response OR No response received";
        }
        testcase SIP_CC_TE_CE_TI_002(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASCompletedState(vl_Response, loc_CSeq_s);
          SIPP.clear;
          notRepeatRespInTime(
            vl_Response,
            loc_CSeq_s,
            PX_T1 * 0.9);
          sendACK(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: If a reliable transport (TCP) is used, ensure that the IUT, when an INVITE server transaction is in the Completed state does not repeat its response on the timeout condition of timer G set with a value of T1.";
          extension "Reference: Annex A [1], 17.2.1 [1]";
          extension "FailCause: Repeat response within T1";
          extension "InconcCause: Invalid first response OR No response received";
        }
        testcase SIP_CC_TE_CE_TI_003(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          var float vl_delay;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASCompletedState(vl_Response, loc_CSeq_s);
          repeatRespInTime(vl_Response, loc_CSeq_s, PX_T1 * 1.5);
          vl_delay := 1.1 * minValue(2.0 * PX_T1, PX_T2);
          repeatRespInTime(vl_Response, loc_CSeq_s, vl_delay);
          sendACK(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: If an unreliable transport is used, ensure that the IUT, when an INVITE server transaction is in the Completed state and having already sent twice times its response, repeats it after timer G set MIN(2*T1,T2) value expires.";
          extension "Reference: Annex A [1], 17.2.1 [1]";
          extension "FailCause: Invalid repeat response within correct timeslot OR No repeat response within correcttimeslot";
          extension "InconcCause: Invalid first response OR No response received";
        }
        testcase SIP_CC_TE_CE_TI_004(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          var float vl_delay;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASCompletedState(vl_Response, loc_CSeq_s);
          repeatRespInTime(vl_Response, loc_CSeq_s, PX_T1 * 1.5);
          vl_delay := minValue(2.0 * PX_T1, PX_T2) * 1.5;
          repeatRespInTime(vl_Response, loc_CSeq_s, vl_delay);
          vl_delay := minValue(4.0 * PX_T1, PX_T2) * 1.1;
          repeatRespInTime(vl_Response, loc_CSeq_s, vl_delay);
          sendACK(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: If an unreliable transport is used, ensure that the IUT, when an INVITE server transaction is in the Completed state and having already sent three times its response, repeats it after timer G set the MIN(4*T1,T2) value expires.";
          extension "Reference: Annex A [1], 17.2.1 [1]";
          extension "FailCause: Invalid repeat response within correct timeslot OR No repeat response within correcttimeslot";
          extension "InconcCause: Invalid first response OR No response received";
        }
        testcase SIP_CC_TE_CE_TI_005(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASCompletedState(vl_Response, loc_CSeq_s);
          waitForTimeout(v_TJ);
          checkServerTerminatedState(loc_CSeq_s);
          sendACK(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT, when an INVITE server transaction is in the Completed state and, enters in the Terminated state after timer H set to 64*T1 value expires.";
          extension "Reference: Annex A [1], 17.2.1 [1]";
          extension "FailCause: Invalid repeat response within correct timeslot OR No repeat response within correct timeslot OR Invalid/No 481 response received";
          extension "InconcCause: Invalid first response OR No response received";
        }
        testcase SIP_CC_TE_CE_TI_006(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASCompletedState(vl_Response, loc_CSeq_s);
          waitForTimeout(v_TJ);
          TNoAct.start (PX_TNOACT);
          alt {
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
            }
            [] TNoAct.timeout {
              setverdict (pass);
            }
          }
          sendACK(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: If an unreliable transport is used, ensure that the IUT, when an INVITE server transaction is in the Completed state and, does not repeats its response after timer H set to 64*T1 value expires.";
          extension "Reference: Annex A [1], 17.2.1 [1]";
          extension "FailCause: Any repeat response after 64*T1 expires";
          extension "InconcCause: Invalid first response OR No response received";
        }
        testcase SIP_CC_TE_CE_TI_007(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASConfirmedState(loc_CSeq_s);
          waitForTimeout(PX_T4);
          checkServerTerminatedState(loc_CSeq_s);
          sendACK(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: If an unreliable transport is used, ensure that the IUT, when an INVITE server transaction is in the Confirmed state, enters in the Terminated state after timer I set to T4 value expires.";
          extension "Reference: Annex A [1], 17.2.1 [1]";
          extension "FailCause: Invalid/No 481 response received";
          extension "InconcCause: Invalid first response OR No response received";
        }
        testcase SIP_CC_TE_CE_TI_008(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASConfirmedState(loc_CSeq_s);
          checkServerTerminatedState(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: If a reliable transport is used, ensure that the IUT, when an INVITE server transaction is in the Confirmed state, enters immediately in the Terminated state.";
          extension "Reference: Annex A [1], 17.2.1 [1]";
          extension "FailCause: Invalid/No 481 response received";
          extension "InconcCause: Invalid first response OR No response received";
        }
        testcase SIP_CC_TE_CE_TI_009(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASSuccessState(loc_CSeq_s);
          SIPP.clear;
          notRepeatINVITE200OK(loc_CSeq_s, 0.9 * PX_T1);
          repeatINVITE200OK(loc_CSeq_s, 2.0 * PX_T1);
          send200OKACK(loc_CSeq_s);
          terminateCall(
            v_CallId,
            loc_CSeq_s,
            v_caller_From,
            v_caller_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT, when it has answered to an INVITE request with 2XX response, repeats it after T1 duration expires without receiving an ACK request.";
          extension "Reference: Annex A [1], 13.3.1.4 [1]";
          extension "FailCause: Invalid repeat response within correct timeslot OR No repeat response within correcttimeslot OR INvalid/No 481 response received";
          extension "InconcCause: Invalid first response OR No response received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_TI_010(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASSuccessState(loc_CSeq_s);
          repeatINVITE200OK(loc_CSeq_s, 1.5 * PX_T1);
          SIPP.clear;
          notRepeatINVITE200OK(loc_CSeq_s, 1.8 * PX_T1);
          repeatINVITE200OK(loc_CSeq_s, 1.5 * PX_T1);
          send200OKACK(loc_CSeq_s);
          terminateCall(
            v_CallId,
            loc_CSeq_s,
            v_caller_From,
            v_caller_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT, when it has already answered twice times to an INVITE request with a 2XX response, repeats it after 2*T1 duration expires without receiving an ACK request.";
          extension "Reference: Annex A [1], 13.3.1.4 [1]";
          extension "FailCause: Invalid repeat response within correct timeslot OR No repeat response within correcttimeslot OR INvalid/No 481 response received";
          extension "InconcCause: Invalid first response received OR No first response received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_TI_011(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASSuccessState(loc_CSeq_s);
          waitForTimeout(PX_T2 * 1.1);
          SIPP.clear;
          notRepeatINVITE200OK(loc_CSeq_s, PX_TNOACT);
          send200OKACK(loc_CSeq_s);
          terminateCall(
            v_CallId,
            loc_CSeq_s,
            v_caller_From,
            v_caller_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT, does not repeat its 2XX response to an INVITE request after T2 duration expires without receiving an ACK request.";
          extension "Reference: Annex A [1], 13.3.1.4 [1]";
          extension "FailCause: Invalid 2xx response within correct timeslot OR No repeat response within correct timeslot OR Any message within incorrect timeslot";
          extension "InconcCause: Invalid first response OR No response received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
        testcase SIP_CC_TE_CE_TI_012(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var BYE_Request vl_BYE_Request;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASSuccessState(loc_CSeq_s);
          waitForTimeout(v_TJ);
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfBye(vl_BYE_Request);
              send200OK();
            }
            [] SIPP.receive {
              all timer.stop;
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                v_Route);
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                v_Route);
              setverdict (inconc);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT, when it has receive no ACK to its 2XX responses during a duration of  64*T1 seconds, sends a BYE request.";
          extension "Reference: Annex A [1], 13.3.1.4 [1]";
          extension "FailCause: Invalid 2xx response within correct timeslot OR No repeat response within correct timeslot OR No BYE request received after 64*T1 timer expired";
          extension "InconcCause: Invalid first response OR No response received OR Invalid Final Success (200 OK) response received OR No Final Success (200 OK) response received";
        }
      }
    }
    group Callrelease {
      group ValidBehaviour {
        testcase SIP_CC_TE_CR_V_001(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASEstablishedState(loc_CSeq_s);
          sendBYE(
            v_CallId,
            loc_CSeq_s,
            v_caller_From,
            v_caller_To,
            v_reqHostPort,
            v_Route);
          awaitingOkResponse(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT while a session has been established, on receipt of a BYE request sends a Success (200 OK) response.";
          extension "Reference: 15 [1]";
          extension "FailCause: Invalid Success (200 OK) response (INVITE/BYE) received OR No Success (200 OK) response (INVITE/BYE) received";
        }
        testcase SIP_CC_TE_CR_V_002(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          var CSeq vl_CSeq_s2;
          
          initPort(mtc, system);
          uASProceedingState(loc_CSeq_s);
          TResp.start (PX_TRESP);
          alt {
            [] SIPP.receive (
              Response_100_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive (
              Response_1XX_r_1(v_CallId, loc_CSeq_s))
            -> value vl_Response sender v_sent_label {
              TResp.stop;
              setverdict (pass);
              setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
              
            }
            [] SIPP.receive (
              Response_200_r_1(v_CallId, loc_CSeq_s))
            -> value vl_Response sender v_sent_label {
              log ("200 OK Response is received. IUT is already not in early state.");
              setverdict (inconc);
              setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
              sendACK(loc_CSeq_s);
            }
            [] TResp.timeout {
              setverdict (inconc);
              log ("Did not received a 101-199 response. IUT is not in early state.");
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
              stop;
            }
          }
          //setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          sendBYE(
            v_CallId,
            loc_CSeq_s,
            v_caller_From,
            v_caller_To,
            v_reqHostPort,
            v_Route);
          awaitingOkResponse(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT while the dialog is in an early stage, on receipt of a BYE request sends a response.";
          extension "Reference: 15 [1], 12 [1] ";
          extension "FailCause: Invalid response received OR No response received";
        }
        testcase SIP_CC_TE_CR_V_003(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASSuccessState(loc_CSeq_s);
          sendBYE(
            v_CallId,
            loc_CSeq_s,
            v_caller_From,
            v_caller_To,
            v_reqHostPort,
            v_Route);
          awaitingOkResponse(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT while the dialog is in a confirmed stage, on receipt of a BYE request sends a Success (200 OK) response.";
          extension "Reference: 15 [1], 12 [1]";
          extension "FailCause: Invalid Success (200 OK) response (INVITE/BYE) received OR No Success (200 OK) response (INVITE/BYE) received";
        }
        testcase SIP_CC_TE_CR_V_004(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASEstablishedState(loc_CSeq_s);
          setHeadersForBYE(loc_CSeq_s);
          SIPP.send (
            BYE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_reqHostPort,
              v_Branch)) to v_sent_label;
          awaitingOkResponse2(loc_CSeq_s);
          sendBYE(
            v_CallId,
            loc_CSeq_s,
            v_caller_From,
            v_caller_To,
            v_reqHostPort,
            v_Route);
          awaitingOkResponse(loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT once a dialog has been established, on receipt of a BYE request including a header that it does not understand sends a Success (200 OK) response.";
          extension "Reference: 8.2.2 [1], 15.1.2 [1]";
          extension "FailCause: Invalid Success (200 OK) response (INVITE/BYE) received OR No Success (200 OK) response (INVITE/BYE) received";
        }
        testcase SIP_CC_TE_CR_V_005(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASEstablishedState(loc_CSeq_s);
          setHeadersForBYE(loc_CSeq_s);
          SIPP.send (
            BYE_Request_s_3(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_reqHostPort,
              v_Branch)) to v_sent_label;
          //RGy (2007-11-05) Behaviour copied here from awaitingWithOpt1XX and 200 branches are added
          TResp.start (PX_TRESP);
          alt {
            [] SIPP.receive (
              Response_420_r_2(v_CallId, loc_CSeq_s))
            -> value vl_Response sender v_sent_label {
              setverdict (pass);
              TResp.stop;
              setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
            }
            [] SIPP.receive (Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive (Response_200_r_1(v_CallId, loc_CSeq_s)) {
              setverdict(fail);
              stop
            }
            [] SIPP.receive (Response_200_r_1(?, ?)) {
              setverdict(fail)
            }
            [] SIPP.receive (Response_Any_r_1)
            -> value vl_Response sender v_sent_label {
              setverdict (fail);
              all timer.stop;
              setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response)
            }
            [] TResp.timeout {
              setverdict (fail);
              stop;
            }
          }
          terminateCall(
            v_CallId,
            loc_CSeq_s,
            v_caller_From,
            v_caller_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT, once a dialog has been established, on receipt of a BYE request including a Require header set with an option-tag that it does not support, sends a Bad Extension (420 Bad Extension) response including a Unsupported set with this option-tag.";
          extension "Reference: 8.2.2 [1], 15.1.2 [1]";
          extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received OR Invalid Bad Extension (420 Bad Extension) received OR No Bad Extension (420 Bad Extension) received";
        }
        testcase SIP_CC_TE_CR_V_006(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASEstablishedState(loc_CSeq_s);
          sendBYE(
            v_CallId,
            loc_CSeq_s,
            v_caller_From,
            v_caller_To,
            v_reqHostPort,
            v_Route);
          TResp.start (PX_TRESP);
          alt {
            //expected 200 OK received
            [] SIPP.receive (
              Response_200_r_5(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Via)){
              TResp.stop;
              setverdict (pass);
            }
            //incorrect 200 OK received
            [] SIPP.receive (
              Response_200_r_1(
                v_CallId,
                loc_CSeq_s)){
              TResp.stop;
              setverdict (fail);
            }
            [] SIPP.receive (Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive (
              Response_Any_r_1) -> value vl_Response sender v_sent_label {
              all timer.stop;
              setverdict (fail);
              setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
              terminateUASCall(vl_Response, loc_CSeq_s);
              TResp.start (PX_TRESP);
              alt {
                [] SIPP.receive (
                  Response_Any_r_1) -> value vl_Response sender v_sent_label {
                  setverdict (inconc);
                  TResp.stop;
                  setHeadersOnReceiptOfResponse(
                    loc_CSeq_s,
                    valueof(vl_Response));
                  terminateUASCall(valueof(vl_Response), loc_CSeq_s);
                }
                [] TResp.timeout {
                  cancelCall(
                    v_CallId,
                    loc_CSeq_s,
                    v_From,
                    v_Cancel_To,
                    v_reqHostPort,
                    v_Via);
                }
              }
            }
            [] TResp.timeout {
              setverdict (fail);
            }
          }
        }//end testcase
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT, once a dialog has been established, on receipt of a BYE request, sends a Success (200 OK) response with  From, Call-ID, CSeq and Via headers set to the same value as in the request.";
          extension "Reference: 8.2.6.2 [1], 15.1.2 [1]";
          extension "FailCause: Invalid Success (200 OK) response (INVITE/BYE) received OR No Success (200 OK) response (INVITE/BYE) received";
        }
        testcase SIP_CC_TE_CR_V_007(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          setHeadersForBYEOutOfDialog(loc_CSeq_s);
          SIPP.send (
            BYE_Request_noroute_s_1(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_reqHostPort,
              v_Branch)) to v_sent_label;
          awaitingWithOpt1XX(
            Response_481_r_1(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT, while no dialog has been established, on receipt of a BYE request, sends a CallTransaction does not exist (481 CallTransaction does not exist).";
          extension "Reference: 15.1.2 [1]";
          extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received OR Invalid '481 Call/Transaction does not exist' received OR '481 Call/Transaction does not exist' received";
        }
        testcase SIP_CC_TE_CR_V_008(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var To vl_bye_to;
          var To vl_sav_to;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASEstablishedState(loc_CSeq_s);
          setHeadersForBYE(loc_CSeq_s);
          vl_bye_to := v_To;
          vl_bye_to.toParams := omit;
          vl_sav_to := v_caller_To;
          SIPP.send (
            BYE_Request_noroute_s_1(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              vl_bye_to,
              v_reqHostPort,
              v_Branch)) to v_sent_label;
          awaitingWithOpt1XX(
            Response_481_r_1(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          terminateCall(
            v_CallId,
            loc_CSeq_s,
            v_caller_From,
            vl_sav_to,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT, while a dialog has been established, on receipt of a BYE request without TAG in the To header, sends a CallTransaction does not exist (481 CallTransaction does not exist).";
          extension "Reference: 15.1.2 [1]";
          extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received OR Invalid '481 Call/Transaction does not exist' received OR '481 Call/Transaction does not exist' received";
        }
        testcase SIP_CC_TE_CR_V_009(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASEstablishedState(loc_CSeq_s);
          setHeadersForBYE(loc_CSeq_s);
          loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
          SIPP.send (
            BYE_Request_noroute_s_1(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_reqHostPort,
              v_Branch)) to v_sent_label;
          awaitingOkResponse(loc_CSeq_s);
        }
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT, once a dialog has been established, on receipt of a BYE request including a CSeq header set with a more than one higher value as in the previous request, sends a Success (200 OK) response with the same CSeq value.    ";
          extension "Reference: 12.2.2 [1] ";
          extension "FailCause: Invalid Success (200 OK) response (INVITE/BYE) received OR No Success (200 OK) response (INVITE/BYE) received";
        }
        testcase SIP_CC_TE_CR_V_010(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var BYE_Request vl_BYE_Request;
          var To vl_expected_to;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASEstablishedState(loc_CSeq_s);
          action ("Please HANG UP");
          vl_expected_to.fieldName := TO_E;
          vl_expected_to.addressField := v_From.addressField;
          vl_expected_to.toParams := v_From.fromParams;
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              BYE_Request_r_3(
                v_CallId,
                vl_expected_to)) -> value vl_BYE_Request {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfBye(vl_BYE_Request);
            }
            [] SIPP.receive {
              all timer.stop;
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                v_Route);
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                v_Route);
              setverdict (inconc);
              stop;
            }
          }
          send200OK();
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT once a dialog has been established, to release it sends a BYE request with a To header set to the same value as in the From header of the previous received request.";
          extension "Reference: 12.2.1.1 [1] ";
          extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received OR Invalid BYE Request received OR No BYE Request received";
        }
        testcase SIP_CC_TE_CR_V_011(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var BYE_Request vl_BYE_Request;
          var From vl_expected_from;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASEstablishedState(loc_CSeq_s);
          action ("Please HANG UP");
          vl_expected_from.fieldName := FROM_E;
          vl_expected_from.addressField := v_To.addressField;
          vl_expected_from.fromParams := v_To.toParams;
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              BYE_Request_r_7(
                v_CallId,
                vl_expected_from)) -> value vl_BYE_Request {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfBye(vl_BYE_Request);
            }
            [] SIPP.receive {
              all timer.stop;
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                v_Route);
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                v_Route);
              setverdict (inconc);
              stop;
            }
          }
          send200OK();
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT once a dialog has been established, to release it sends a BYE request with a From header set to the same value as in the To header of the last sent response.";
          extension "Reference: 12.2.1.1 [1]";
          extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received OR Invalid BYE Request received OR No BYE Request received";
        }
        testcase SIP_CC_TE_CR_V_012(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var BYE_Request vl_BYE_Request;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASEstablishedState(loc_CSeq_s);
          action ("Please HANG UP");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              BYE_Request_r_4(v_CallId)) -> value vl_BYE_Request {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfBye(vl_BYE_Request);
            }
            [] SIPP.receive {
              all timer.stop;
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                v_Route);
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                v_Route);
              setverdict (inconc);
              stop;
            }
          }
          send200OK();
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT once a dialog has been established with an INVITE request including no Record-Route header set, to release it sends a BYE request with the Request-URI set to the Contact URI included in the original INVITE request and with no Route header set.";
          extension "Reference: 12.2.1.1 [1]";
          extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received OR Invalid BYE Request received OR No BYE Request received";
        }
        testcase SIP_CC_TE_CR_V_013(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var BYE_Request vl_BYE_Request;
          var SemicolonParam_List vl_params;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          v_RecordRoute := {
            fieldName := RECORD_ROUTE_E,
            routeBody := {
              {
                nameAddr := {
                  displayName := omit,
                  addrSpec := valueof(SipUrl_ofProxy)},
                rrParam := omit },
              {
                nameAddr := {
                  displayName := omit,
                  addrSpec :=
                  valueof(SipUrl_ofRouteEts_lr)},
                rrParam := omit
              }
            }
          };
          SIPP.send (
            INVITE_Request_s_3(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via,
              v_RecordRoute)) to v_sent_label;
          awaitingWithOpt1XX(
            Response_200_r_4(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          send200OKACK(loc_CSeq_s);
          action ("Please HANG UP");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              BYE_Request_r_5(v_CallId)) -> value vl_BYE_Request {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfBye(vl_BYE_Request);
            }
            [] SIPP.receive {
              all timer.stop;
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                v_Route);
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                v_Route);
              setverdict (inconc);
              stop;
            }
          }
          send200OK();
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT once a dialog has been established with an INVITE request including a Record-Route header set to a list in which the last element contains lr parameter, to release the call, sends a BYE request with the Request-URI set to the Contact URI and a Route header set to the list in a reverse order of the Record-Route included in the original INVITE request.";
          extension "Reference: 12.2.1.1 [1]";
          extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received OR Invalid BYE Request received OR No BYE Request received";
        }
        testcase SIP_CC_TE_CR_V_014(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var BYE_Request vl_BYE_Request;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          iUTRegistration();
          setHeadersIUTInvite(loc_CSeq_s);
          v_RecordRoute := {
            fieldName := RECORD_ROUTE_E,
            routeBody := {
              {
                nameAddr := {
                  displayName := omit,
                  addrSpec := valueof(SipUrl_ofRouteEts)},
                rrParam := omit },
              {
                nameAddr := {
                  displayName := omit,
                  addrSpec := valueof(SipUrl_ofProxy)},
                rrParam := omit
              }
            }
          };
          SIPP.send (
            INVITE_Request_s_3(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via,
              v_RecordRoute)) to v_sent_label;
          awaitingWithOpt1XX(
            Response_200_r_4(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          send200OKACK(loc_CSeq_s);
          action ("Please HANG UP");
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              BYE_Request_r_6(v_CallId)) -> value vl_BYE_Request {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfBye(vl_BYE_Request);
            }
            [] SIPP.receive {
              all timer.stop;
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                v_Route);
              setverdict (fail);
              stop;
            }
            [] TWait.timeout {
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                v_Route);
              setverdict (inconc);
              stop;
            }
          }
          send200OK();
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT once a dialog has been established with an INVITE request including a Record-Route header set to a list in which the last element does not contains lr parameter, to release the call, sends a BYE request with the Request-URI set to this element and a Route header set to the remainder list in a reverse order of the received Record-Route appended with the received Contact URI.";
          extension "Reference: 12.2.1.1 [1]";
          extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received OR Invalid BYE Request received OR No BYE Request received";
        }
        testcase SIP_CC_TE_CR_V_015(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASProceedingState(loc_CSeq_s);
          awaitingFirstAnyResp(vl_Response, loc_CSeq_s);
          //RGy (2007-11-03) Added to allow terminating the call if cancel does not
          v_To.toParams[0] := getToParamFromResponse(vl_Response);
          loc_CSeq_s.method := "CANCEL";
          SIPP.send (
            CANCEL_Request_s_1(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_Cancel_To,
              v_reqHostPort,
              v_Via)) to v_sent_label;
          awaitingCANCELOkResponse(loc_CSeq_s, v_CallId);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT when a server INVITE transaction is in the Proceeding state, on receipt of a CANCEL, sends a Success (200 Success) response.";
          extension "Reference: 9.2 [1]";
          extension "FailCause: Invalid Success (200 OK) response (INVITE/CANCEL) received OR No Success (200 OK) response (INVITE/CANCEL) received";
        }
        
        testcase SIP_CC_TE_CR_V_016(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          var CSeq vl_CSeq_INVITE;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASProceedingState(loc_CSeq_s);
          awaitingFirstAnyResp(vl_Response, loc_CSeq_s);
          //RGy (2007-11-03) Added to allow terminating the call if cancel does not
          v_To.toParams[0] := getToParamFromResponse(vl_Response);
          loc_CSeq_s.method := "CANCEL";
          SIPP.send (
            CANCEL_Request_s_1(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_Cancel_To,
              v_reqHostPort,
              v_Via)) to v_sent_label;
          loc_CSeq_s.method := "INVITE";
          vl_CSeq_INVITE := loc_CSeq_s;
          loc_CSeq_s.method := "CANCEL";
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive (
              Response_200_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive (
              Response_487_r_1(v_CallId, vl_CSeq_INVITE)) {
              setverdict (pass);
              TAck.stop;
              sendACK(loc_CSeq_s)
            }
            [] SIPP.receive (
              Response_4XX_r_1(v_CallId, loc_CSeq_s)) {
              setverdict (fail);
              terminateCallAfterCancelInProcState(loc_CSeq_s)
            }
            [] SIPP.receive (
              Response_Any_r_1) -> value vl_Response sender v_sent_label {
              all timer.stop;
              log("Other Response is received, 487 was expected");
              setverdict (fail);
              setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_To,
                v_reqHostPort,
                v_Route)
            }
            [] TAck.timeout {
              setverdict (fail);
              stop;
            }
          }
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT when a server INVITE transaction is in the Proceeding state, on receipt of a CANCEL answers to the original INVITE, request with a Request Terminated (487 Request Terminated) response.";
          extension "Reference: 9.2 [1]";
          extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received OR Invalid Request Terminated (487 Request Terminated) response received  OR No Request Terminated (487 Request Terminated) response received";
        }
        
        testcase SIP_CC_TE_CR_V_017(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Via vl_Via;
          var CSeq vl_CSeq_INVITE_s := loc_CSeq_s;
          var Response vl_Response;
          
          vl_CSeq_INVITE_s.method := "INVITE";
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASProceedingState(loc_CSeq_s);
          awaitingFirstAnyResp(vl_Response, loc_CSeq_s);
          //RGy (2007-11-03) Added to allow terminating the call if cancel does not
          v_To.toParams[0] := getToParamFromResponse(vl_Response);
          loc_CSeq_s.method := "CANCEL";
          vl_Via := v_Via;
          vl_Via.viaBody[0].viaParams[0] := {
            id := BRANCH_ID,
            paramValue := BRANCH_COOKIE & getRndTag()
          };
          SIPP.send (
            CANCEL_Request_s_1(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_Cancel_To,
              v_reqHostPort,
              vl_Via)) to v_sent_label;
          awaiting481ResponseOnCancelInProcState(loc_CSeq_s, vl_CSeq_INVITE_s)
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT when a server INVITE transaction is in the Proceeding state, on receipt of a CANCEL request including a Via header set with a different branch parameter starting with the magic cookie ""z9hG4bK"" but with the Request-URI, To tag, From tag, Call-ID and CSeq identical as in the original INVITE request, sends a Call LegTransaction Does Not Exist(481 Call LegTransaction Does Not Exist) response.";
          extension "Reference: 9.2 [1]";
          extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received OR Invalid '481 Call Leg/Transaction Does Not Exist' response received  OR No '481 Call Leg/Transaction Does Not Exist' response received";
        }
        testcase SIP_CC_TE_CR_V_018(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Via vl_Via;
          //var charstring vl_branch_val;
          var CSeq vl_CSeq_INVITE_s := loc_CSeq_s;
          var Response vl_Response;
          
          vl_CSeq_INVITE_s.method := "INVITE";
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASProceedingState(loc_CSeq_s);
          awaitingFirstAnyResp(vl_Response, loc_CSeq_s);
          //RGy (2007-11-03) Added to allow terminating the call if cancel does not
          v_To.toParams[0] := getToParamFromResponse(vl_Response);
          loc_CSeq_s.method := "CANCEL";
          vl_Via := v_Via;
          //vl_branch_val := BRANCH_COOKIE & getRndTag();
          vl_Via := {
            fieldName := VIA_E,
            viaBody := {
              valueof(ViaBody_ETS_IPADDR(BRANCH_COOKIE & getRndTag()))}
          };
          SIPP.send (
            CANCEL_Request_s_1(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_Cancel_To,
              v_reqHostPort,
              vl_Via)) to v_sent_label;
          awaiting481ResponseOnCancelInProcState(loc_CSeq_s, vl_CSeq_INVITE_s)
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT when a server INVITE transaction is in the Proceeding state, on receipt of a CANCEL request including a Via header set to an identical branch parameter starting with the magic cookie ""z9hG4bK"" and a different sent-by value, but with the Request-URI, To tag, From tag, Call-ID and CSeq identical as in the original INVITE request, sends a Call LegTransaction Does Not Exist (481 Call LegTransaction Does Not Exist) response.";
          extension "Reference: 9.2 [1], 17.2.3 [1]";
          extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received OR Invalid '481 Call Leg/Transaction Does Not Exist' response received  OR No '481 Call Leg/Transaction Does Not Exist' response received";
        }
        testcase SIP_CC_TE_CR_V_019(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Via vl_Via;
          //var charstring vl_branch_val;
          var CSeq vl_CSeq_INVITE_s := loc_CSeq_s;
          var Response vl_Response;
          
          vl_CSeq_INVITE_s.method := "INVITE";
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASProceedingState(loc_CSeq_s);
          awaitingFirstAnyResp(vl_Response, loc_CSeq_s);
          //RGy (2007-11-03) Added to allow terminating the call if cancel does not
          v_To.toParams[0] := getToParamFromResponse(vl_Response);
          loc_CSeq_s.method := "CANCEL";
          vl_Via := v_Via;
          //vl_branch_val := BRANCH_COOKIE & getRndTag();
          vl_Via := {
            fieldName := VIA_E,
            viaBody := {
              valueof(ViaBody_ETS_IPADDR(BRANCH_COOKIE & getRndTag()))}
          };
          SIPP.send (
            CANCEL_Request_s_1(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_Cancel_To,
              v_reqHostPort,
              vl_Via)) to v_sent_label;
          awaiting481ResponseOnCancelInProcState(loc_CSeq_s, vl_CSeq_INVITE_s)
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT when a server INVITE transaction is in the Proceeding state, on receipt of a CANCEL request, including a top Via header set to a different value but with the Request-URI, To tag, From tag, Call-ID and CSeq identical as in the original INVITE request, sends a Call LegTransaction Does Not Exist (481 Call LegTransaction Does Not Exist) response.";
          extension "Reference: 9.2 [1], 17.2.3 [1]";
          extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received OR Invalid '481 Call Leg/Transaction Does Not Exist' response received  OR No '481 Call Leg/Transaction Does Not Exist' response received";
        }
        testcase SIP_CC_TE_CR_V_020(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          var SemicolonParam_List vl_params;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASEstablishedState(loc_CSeq_s);
          SIPP.clear;
          sendBYE(
            v_CallId,
            loc_CSeq_s,
            v_caller_From,
            v_caller_To,
            v_reqHostPort,
            v_Route);
          awaitingFirstAnyResp(vl_Response, loc_CSeq_s);
          loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
          loc_CSeq_s.method := "BYE";
          vl_params := valueof(v_Via.viaBody[0].viaParams);
          SIPP.send (
            BYE_Request_noroute_s_1(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              valueof(
                vl_params[0].paramValue))) to v_sent_label;
          repeatLastResponse(vl_Response, loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT, having already answer to a BYE request, on receipt of a BYE request, before timer J fires, including a Via header set with the same branch parameter in the topmost list value, repeats its last response.";
          extension "Reference: 17.2.3 [1], 17.2.2[1], 12.1.2.1.1[1], 15.1.2[1]";
          extension "FailCause: Invalid response received OR No response received OR Invalid repeated response received OR No repeated response received";
        }
        testcase SIP_CC_TE_CR_V_021(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASEstablishedState(loc_CSeq_s);
          SIPP.clear;
          sendBYE(
            v_CallId,
            loc_CSeq_s,
            v_caller_From,
            v_caller_To,
            v_reqHostPort,
            v_Route);
          awaitingFirstAnyResp(vl_Response, loc_CSeq_s);
          v_Via := {
            fieldName := VIA_E,
            viaBody := { valueof(ViaBody_ETS_NoBranch)}
          };
          buildRequestURI_BYE(v_reqHostPort, v_caller_To);
          SIPP.send (
            BYE_Request_s_4(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Via)) to v_sent_label;
          repeatLastResponse(vl_Response, loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT, having already answer to a BYE request, on receipt of a BYE request, before timer J fires, including a Via header set with no branch parameter but with the Request-URI, To tag, From tag, Call-ID and CSeq identical as in the first BYE request, repeats its last response.";
          extension "Reference: 17.2.3 [1], 17.2.2[1], 15.1.2[1]";
          extension "FailCause: Invalid response received OR No response received OR Invalid repeated response received OR No repeated response received";
        }
      }
      group InvalidBehaviour {
        testcase SIP_CC_TE_CR_I_001(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var CSeq vl_CSeq := {fieldName := CSEQ_E, method := "BYE"};
          var Response vl_Response;
          var charstring vl_branch_val;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASEstablishedState(loc_CSeq_s);
          vl_CSeq.seqNumber := loc_CSeq_s.seqNumber - 1;
          buildRequestURI(v_reqHostPort, v_To);
          v_caller_To := v_To;
          vl_branch_val := BRANCH_COOKIE & getRndTag();
          SIPP.send (
            BYE_Request_noroute_s_1(
              v_RequestUri,
              v_CallId,
              vl_CSeq,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              vl_branch_val)) to v_sent_label;
          TResp.start (PX_TRESP);
          alt {
            [] SIPP.receive (
              Response_500_r_0(v_CallId, vl_CSeq)) -> value vl_Response sender v_sent_label {
              TResp.stop;
              setverdict (pass);
              setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
            }
            [] SIPP.receive (Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive (
              Response_200_r_1(v_CallId, loc_CSeq_s)) {
              setverdict(fail);
              stop
            }
            [] SIPP.receive (
              Response_Any_r_1) -> value vl_Response sender v_sent_label {
              all timer.stop;
              setverdict (fail);
              setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response)
            }
            [] TResp.timeout {
              setverdict (fail);
            }
          }
          terminateCall(
            v_CallId,
            loc_CSeq_s,
            v_caller_From,
            v_To,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT on receipt of a BYE request with a CSeq number set to a lower value than in the preceding INVITE request, sends a 500 (Server Internal Error) response.";
          extension "Reference: 12.2.2 [1]";
          extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received OR Invalid 500 (Server Internal Error) response received OR No 500 (Server Internal Error) response received";
        }
        testcase SIP_CC_TE_CR_I_002(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASProceedingState(loc_CSeq_s);
          awaitingFirstAnyResp(vl_Response, loc_CSeq_s);
          //RGy (2007-11-03) Added to allow terminating the call if cancel does not
          v_To.toParams[0] := getToParamFromResponse(vl_Response);
          loc_CSeq_s.method := "CANCEL";
          SIPP.send (
            CANCEL_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_Cancel_To,
              v_reqHostPort,
              v_Via)) to v_sent_label;
          awaitingCANCELOkResponse(loc_CSeq_s, v_CallId);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT when a server INVITE transaction is in the Proceeding state, on receipt of a CANCEL request including a Require header set with an option-tag that it does not support, sends a Success (200 OK) response.";
          extension "Reference: 8.2.2.3 [1]";
          extension "FailCause: Invalid Success (200 OK) response (INVITE/CANCEL) received  OR No Success (200 OK) response(INVITE/CANCEL) received";
        }
        testcase SIP_CC_TE_CR_I_003(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASProceedingState(loc_CSeq_s);
          awaitingFirstAnyResp(vl_Response, loc_CSeq_s);
          //RGy (2007-11-03) Added to allow terminating the call if cancel does not
          v_To.toParams[0] := getToParamFromResponse(vl_Response);
          loc_CSeq_s.method := "CANCEL";
          SIPP.send (
            CANCEL_Request_s_3(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_Cancel_To,
              v_reqHostPort,
              v_Via)) to v_sent_label;
          awaitingCANCELOkResponse(loc_CSeq_s, v_CallId);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT when a server INVITE transaction is in the Proceeding state, on receipt of a CANCEL request including a Proxy-Require header set with an option-tag that it does not support, sends a Success (200 OK) response.";
          extension "Reference: 8.2.2.3 [1] ";
          extension "FailCause: Invalid Success (200 OK) response (INVITE/CANCEL) received  OR No Success (200 OK) response(INVITE/CANCEL) received";
        }
        testcase SIP_CC_TE_CR_I_004(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          setHeadersForCANCELOutOfDialog(loc_CSeq_s);
          SIPP.send (
            CANCEL_Request_s_1(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_Cancel_To,
              v_reqHostPort,
              v_Via)) to v_sent_label;
          awaitingWithOpt1XX(
            Response_481_r_1(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT while no session has been initiated, on receipt of a CANCEL request, sends a Calltransaction Does Not Exist (481 Calltransaction Does Not Exist) response.";
          extension "Reference: 9.2 [1] , 15.1.2 [1]";
          extension "FailCause: Invalid 481 Call/transaction Does Not Exist response received OR No 481 Call/transaction Does Not Exist response received";
        }
        testcase SIP_CC_TE_CR_I_005(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASEstablishedState(loc_CSeq_s);
          sendBYE(
            v_CallId,
            loc_CSeq_s,
            v_caller_From,
            v_caller_To,
            v_reqHostPort,
            v_Route);
          awaitingOkResponse(loc_CSeq_s);
          waitForTimeout(v_TJ);
          SIPP.send (
            BYE_Request_noroute_s_1(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_reqHostPort,
              v_Branch)) to v_sent_label;
          TResp.start (PX_TRESP);
          alt {
            [] SIPP.receive (
              Response_481_r_1(v_CallId, loc_CSeq_s)) {
              TResp.stop;
              setverdict (pass);
            }
            [] SIPP.receive (Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive (
              Response_Any_r_1){
              TResp.stop;
              setverdict (fail)
            }
            [] TResp.timeout {
              setverdict (fail);
            }
          }
        }
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT, while a session has been released, on receipt of a BYE request, sends a Calltransaction Does Not Exist (481 Calltransaction Does Not Exist) response.";
          extension "Reference: 15.1.2 [1] ";
          extension "FailCause: Invalid 481 Call/transaction Does Not Exist response received OR No 481 Call/transaction Does Not Exist response received";
        }
      }
      group Timers {
        testcase SIP_CC_TE_CR_TI_001(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          var SemicolonParam_List vl_params;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASEstablishedState(loc_CSeq_s);
          sendBYE(
            v_CallId,
            loc_CSeq_s,
            v_caller_From,
            v_caller_To,
            v_reqHostPort,
            v_Route);
          TResp.start (PX_TRESP);
          alt {
            [] SIPP.receive (
              Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive (
              Response_Final_r(
                v_CallId,
                loc_CSeq_s)) -> value vl_Response sender v_sent_label {
              TResp.stop;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                v_Route);
              stop;
            }
            [] TResp.timeout {
              setverdict (fail);
              terminateCall(
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                v_Route);
              stop;
            }
          }
          deactivate (v_Default);
          TWait.start (v_TJ);
          vl_params := valueof(v_Via.viaBody[0].viaParams);
          do {
            SIPP.send (
              BYE_Request_noroute_s_1(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_reqHostPort,
                valueof(
                  vl_params[0]
                  .paramValue))) to v_sent_label;
            repeatLastResponse(vl_Response, loc_CSeq_s);
          } while (TWait.running == true);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: If an unreliable transport is used, ensure that the IUT, when a BYE server transaction is in the Completed state, on receipt of the repetitions of the BYE request, retransmits its response until the timer J set to 64*T1 expires.";
          extension "Reference: Annex A [1], 17.2.2 [1]";
          extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received OR Invalid repeated response received OR No repeated response received within timeslot";
        }
      }
    }
    group SessionModification {
      group ValidBehaviour {
        testcase SIP_CC_TE_SM_V_001(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          var CallId vl_CallId_old;
          var From vl_caller_From_old;
          var To vl_caller_To_old;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASEstablishedState(loc_CSeq_s);
          vl_CallId_old := v_CallId;
          vl_caller_From_old := v_caller_From;
          vl_caller_To_old := v_caller_To;
          setHeadersIUTInvite(loc_CSeq_s);
          loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
          SIPP.send (
            INVITE_Request_s_2b(
              v_RequestUri,
              vl_CallId_old,
              loc_CSeq_s,
              vl_caller_From_old,
              vl_caller_To_old,
              v_Via,
              v_Contact,
              px_sdpBody2)) to v_sent_label;
          awaitingWithOpt1XX2(
            Response_200_r_1(vl_CallId_old, loc_CSeq_s),
            loc_CSeq_s);
          send200OKACK(loc_CSeq_s);
          terminateCall2(
            vl_CallId_old,
            loc_CSeq_s,
            vl_caller_From_old,
            vl_caller_To_old,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT while a session has been established, on receipt of a re-INVITE request with a higher CSeq and a new complete session description sends a Success (200 OK) response including the last received CSeq.";
          extension "Reference: 14 [1]";
          extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received OR Invalid repeated Success (200 OK) response received OR No repeated Success (200 OK) response received";
        }
        testcase SIP_CC_TE_SM_V_002(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var Response vl_Response;
          var CallId vl_CallId_old;
          var From vl_caller_From_old;
          var To vl_caller_To_old;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASEstablishedState(loc_CSeq_s);
          vl_CallId_old := v_CallId;
          vl_caller_From_old := v_caller_From;
          vl_caller_To_old := v_caller_To;
          setHeadersIUTInvite(loc_CSeq_s);
          SIPP.clear;
          SIPP.send (
            INVITE_Request_s_1(
              v_RequestUri,
              vl_CallId_old,
              loc_CSeq_s,
              vl_caller_From_old,
              vl_caller_To_old,
              v_Via,
              v_Contact)) to v_sent_label;
          awaitingWithOpt1XX2(
            Response_200_r_1(vl_CallId_old, loc_CSeq_s),
            loc_CSeq_s);
          send200OKACK(loc_CSeq_s);
          terminateCall2(
            vl_CallId_old,
            loc_CSeq_s,
            vl_caller_From_old,
            vl_caller_To_old,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT while has been established, on receipt of a re-INVITE request with no session description sends a Success (200 OK) response.";
          extension "Reference: 14 [1]";
          extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received OR Invalid repeated Success (200 OK) response received OR No repeated Success (200 OK) response received";
        }
        testcase SIP_CC_TE_SM_V_003(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var BYE_Request vl_BYE_Request;
          var CallId vl_CallId_old;
          var From vl_caller_From_old;
          var To vl_caller_To_old;
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASEstablishedState(loc_CSeq_s);
          vl_CallId_old := v_CallId;
          vl_caller_From_old := v_caller_From;
          vl_caller_To_old := v_caller_To;
          setHeadersIUTInvite(loc_CSeq_s);
          SIPP.clear;
          SIPP.send (
            INVITE_Request_s_2b(
              v_RequestUri,
              vl_CallId_old,
              loc_CSeq_s,
              vl_caller_From_old,
              vl_caller_To_old,
              v_Via,
              v_Contact,
              px_sdpBody2)) to v_sent_label;
          awaitingWithOpt1XX2(
            Response_200_r_1(vl_CallId_old, loc_CSeq_s),
            loc_CSeq_s);
          TWait.start (PX_TWAIT);
          alt {
            [] SIPP.receive (
              BYE_Request_r_1(vl_CallId_old)) -> value vl_BYE_Request {
              TWait.stop;
              setverdict (pass);
              setHeadersOnReceiptOfBye(vl_BYE_Request);
              send200OK();
              stop;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
            }
            [] TWait.timeout {
              setverdict (fail);
            }
          }
          terminateCall2(
            vl_CallId_old,
            loc_CSeq_s,
            vl_caller_From_old,
            vl_caller_To_old,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT having sent a Success (200 OK) response to a re-INVITE request and receiving no ACK message, sends a BYE request for the dialog.";
          extension "Reference: 14 [1]";
          extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received OR Invalid repeated Success (200 OK) response received OR No repeated Success (200 OK) response received OR Invalid BYE request received OR No BYE request received";
        }
      }
      group InvalidBehaviour {
        testcase SIP_CC_TE_SM_I_001(inout CSeq loc_CSeq_s) runs on SipComponent system SipInterfaces {
          var CSeq vl_inv_CSeq;
          var CallId vl_CallId_old;
          var Response vl_Response;
          var From vl_caller_From_old;
          var To vl_caller_To_old;
          
          v_Default := activate (defaultCCTE());
          initPort(mtc, system);
          uASProceedingState(loc_CSeq_s);
          awaitingFirstAnyResp(vl_Response, loc_CSeq_s);
          vl_CallId_old := v_CallId;
          vl_caller_From_old := v_caller_From;
          vl_caller_To_old := v_caller_To;
          setHeadersIUTInvite(loc_CSeq_s);
          vl_inv_CSeq := loc_CSeq_s;
          vl_inv_CSeq.seqNumber := loc_CSeq_s.seqNumber - 2;
          SIPP.send (
            INVITE_Request_s_2b(
              v_RequestUri,
              vl_CallId_old,
              vl_inv_CSeq,
              vl_caller_From_old,
              vl_caller_To_old,
              v_Via,
              v_Contact,
              px_sdpBody2)) to v_sent_label;
          loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 3;
          awaitingWithOpt1XX2(
            Response_500_r_1(vl_CallId_old, vl_inv_CSeq),
            loc_CSeq_s);
          terminateCall2(
            v_CallId,
            loc_CSeq_s,
            vl_caller_From_old,
            vl_caller_To_old,
            v_reqHostPort,
            v_Route);
        }
        
        with {
          extension "Preconditions: IUT can behave as User Agent server";
          extension "Description: Ensure that the IUT when an INVITE server transaction is in the Proceeding state, on receipt of a re-INVITE with a lower CSeq values, sends a Server Internal Error  (500 Server Internal Error) response including a Retry-After header set to a randomly chosen value between 0 and 10 seconds.";
          extension "Reference: 14 [1]";
          extension "FailCause: Invalid Success (200 OK) response received OR No Success (200 OK) response received OR Invalid repeated Success (200 OK) response received OR No repeated Success (200 OK) response received OR Invalid Server Internal Error (500 Server Internal Error) received OR No Server Internal Error (500 Server Internal Error) received";
        }
      }
    }
  }
  group Proxy {
    group Messageprocessing {
      group SipRequests {
        group ValidBehaviour {
          testcase SIP_CC_PR_MP_RQ_V_001(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SipUrl vl_inv_RequestUri;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_INVITE_Not_Forwarded(
                v_CallId,
                loc_CSeq_ptc_s,
                v_cancel_sent));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            vl_inv_RequestUri := v_RequestUri;
            vl_inv_RequestUri.scheme := "unknownScheme";
            SIPP.send (
              INVITE_Request_s_2(
                vl_inv_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  vl_inv_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
            };
            awaitingPRInviteNon200OK(
              Response_416_r_1(v_CallId, ?),
              loc_CSeq_s);
            awaitingPRPtcCheck_NoForward(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request with a  Request-URI with a scheme that it does not understand, sends a Unsupported URI  Scheme (416 Unsupported URI Scheme) request failure response.";
            extension "Reference: 16.3 item 2[1]";
            extension "FailCause: Any INVITE_Request received at UA2 OR No/Invalid Unsupported URI Scheme (416 Unsupported URI Scheme) received at UA1";
          }
          testcase SIP_CC_PR_MP_RQ_V_002(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_INVITE_Not_Forwarded(
                v_CallId,
                loc_CSeq_ptc_s,
                v_cancel_sent));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_11(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via,
              0)) to v_sent_label;
            synchroniseInitPtc();
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_11(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via,
                0));
            };
            awaitingPRInviteNon200OK(
              Response_483_r_1(v_CallId, ?),
              loc_CSeq_s);
            awaitingPRPtcCheck_NoForward(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request including a  Max-Forwards header set to 0, sends a Too many hops (483 Too many hops)  request failure response.";
            extension "Reference: 16.3 item 3[1]";
            extension "FailCause: Any INVITE_Request received at UA2 OR No/Invalid Too many hops (483 Too many hops) received at UA1";
          }
          testcase SIP_CC_PR_MP_RQ_V_003(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_INVITE_Not_Forwarded(
                v_CallId,
                loc_CSeq_ptc_s,
                v_cancel_sent));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_10(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_10(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
            };
            
            awaitingPRInviteNon200OK(
              Response_420_r_2(v_CallId, ?),
              loc_CSeq_s);
            awaitingPRPtcCheck_NoForward(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request including a  Proxy-Require header set to a value that it does not understand, sends a Bad  Extension (420 Bad Extension) request failure response including a list of the  options that it does not support in the Unsupported header.";
            extension "Reference: 16.3 item 5[1]";
            extension "FailCause: Any INVITE_Request received at UA2 OR No/Invalid Bad Extension (420 Bad Extension) incl. a list of the options that it does not support request received at UA1";
          }
          testcase SIP_CC_PR_MP_RQ_V_004(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_INVITE_Forwarded(
                INVITE_Request_r_11,
                v_CallId,
                loc_CSeq_ptc_s,
                v_cancel_sent,
                v_bye_sent));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            v_RequestUri.urlParameters := {
              {
                "maddr",
                PX_ETS_IPADDR2
              }
            };
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            
            v_RequestFor407 :=
            valueof(INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via));
            
            awaitingPRPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request with the  Request-URI with a maddr parameter indicating a value the proxy is responsible  for and the request was received using the port and transport indicated, removes  the maddr and any non default port or transport parameter from the request and  forwards the message.";
            extension "Reference: 16.4 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 ";
          }
          testcase SIP_CC_PR_MP_RQ_V_005(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Route vl_expected_route;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_INVITE_Forwarded(
                INVITE_Request_r_12(Route_remove_r_1),
                v_CallId,
                loc_CSeq_ptc_s,
                v_cancel_sent,
                v_bye_sent));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            v_Route := valueof(Route_l_2);
            v_BOO_Route := true;
            SIPP.send (
              INVITE_Request_s_14(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via,
                v_Route)) to v_sent_label;
            v_RequestFor407 :=
            valueof(INVITE_Request_s_14(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via,
                v_Route));
            awaitingPRPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request including  a Route header with the first value indicates the IUT, removes that  value from the request and forwards the message.";
            extension "Reference: 16.4 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 ";
          }
          testcase SIP_CC_PR_MP_RQ_V_006(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_INVITE_Forwarded(
                INVITE_Request_r_1,
                v_CallId,
                loc_CSeq_ptc_s,
                v_cancel_sent,
                v_bye_sent));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            v_RequestUri.urlParameters := {
              {
                "maddr",
                PX_UNKNOWN_IPADDR
              }
            };
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            v_RequestFor407 :=
            valueof(INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via));
            awaitingPRPtcCheck(loc_CSeq_s);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request with the  Request-URI with a maddr parameter, indicating a value the proxy is not  responsible for, forwards the message to the target indicated in the  Request-URI.";
            extension "Reference: 16.5 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 ";
          }
          testcase SIP_CC_PR_MP_RQ_V_007(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_INVITE_Forwarded(
                INVITE_Request_r_1,
                v_CallId,
                loc_CSeq_ptc_s,
                v_cancel_sent,
                v_bye_sent));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            v_reqHostPort := {
              host := PX_UNKNOWN_DOMAIN,
              portField := PX_IUT_PORT
            };
            v_RequestUri.hostPort := v_reqHostPort;
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            v_RequestFor407 :=
            valueof(INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via));
            awaitingPRPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request with the  Request-URI, indicating a domain the proxy is not responsible for, forwards  the message to the target indicated in the Request-URI.";
            extension "Reference: 16.5 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 ";
          }
          testcase SIP_CC_PR_MP_RQ_V_008(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SipUrl vl_inv_RequestUri;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_INVITE_Not_Forwarded(
                v_CallId,
                loc_CSeq_ptc_s,
                v_cancel_sent));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            vl_inv_RequestUri := valueof(SipUrl_Ambiguous);
            SIPP.send (
              INVITE_Request_s_2(
                vl_inv_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  vl_inv_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
            };
            awaitingPRInviteNon200OK(
              Response_485_r_1(v_CallId, ?),
              loc_CSeq_s);
            awaitingPRPtcCheck_NoForward(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request but does not contain  sufficient information to determine the target set, sends back a Ambiguous  (485 Ambiguous) request failure response.";
            extension "Reference: 16.5 [1]";
            extension "FailCause: Any INVITE_Request received at UA2 OR No/Invalid Ambiguous (485 Ambiguous) request received at UA1";
          }
          testcase SIP_CC_PR_MP_RQ_V_009(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SipUrl vl_inv_RequestUri;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_INVITE_Not_Forwarded(
                v_CallId,
                loc_CSeq_ptc_s,
                v_cancel_sent));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            vl_inv_RequestUri := valueof(SipUrl_ofCallee_s);
            SIPP.send (
              INVITE_Request_s_2(
                vl_inv_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  vl_inv_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
            };
            awaitingPRInviteNon200OK(
              Response_404_r_1(v_CallId, ?),
              loc_CSeq_s);
            awaitingPRPtcCheck_NoForward(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request with the  Request-URI, indicating a resource, which does not exist at this proxy,  sends back a Not found (404 Not found) request failure response.";
            extension "Reference: 16.5 [1]";
            extension "FailCause: Any INVITE_Request received at UA2 OR No/Invalid Not found (404 Not found) request received at UA1";
          }
          //            STF296 - maintenance action
          //            SIP_CC_PR_MP_RQ_V_010 removed from Test purposes
          //            Thus the TC has been removed from execution in mainmodule (execute) and in the steps (selection)
          //            from STF296
          
          testcase SIP_CC_PR_MP_RQ_V_010(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SipUrl vl_inv_RequestUri;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_INVITE_Not_Forwarded(
                v_CallId,
                loc_CSeq_ptc_s,
                v_cancel_sent));
            initMTC(loc_CSeq_s);
            setHeadersIUTInvite(loc_CSeq_s);
            v_To := valueof(To_s1_Unknown);
            vl_inv_RequestUri := valueof(SipUrl_ofUnknown_s);
            SIPP.send (
              INVITE_Request_s_2(
                vl_inv_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  vl_inv_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
            };
            awaitingPRInviteNon200OK(
              Response_480_r_1(v_CallId, ?),
              loc_CSeq_s);
            awaitingPRPtcCheck_NoForward(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request but does not find  any target to forward, sends back a Temporary Unavailable (480 Temporary  Unavailable) request failure response.";
            extension "Reference: 16.5 [1]";
            extension "FailCause: Any INVITE_Request received at UA2 OR Temporary Unavailable (480 Temporary Unavailable) request received at UA1";
          }
          testcase SIP_CC_PR_MP_RQ_V_011(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_INVITE_Forwarded(
                INVITE_Request_r_6(4),
                v_CallId,
                loc_CSeq_ptc_s,
                v_cancel_sent,
                v_bye_sent));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_11(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via,
              5)) to v_sent_label;
            v_RequestFor407 :=
            valueof(INVITE_Request_s_11(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via,
              5));
            awaitingPRPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request including a  Max-Forwards header set to 5, forwards it after having decreasing  this counter of one.";
            extension "Reference: 16.6 item 3 [1]";
            extension "FailCause: Any INVITE_Request received at UA2 OR Invalid INVITE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_012(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_INVITE_Forwarded(
                INVITE_Request_r_6(0),
                v_CallId,
                loc_CSeq_ptc_s,
                v_cancel_sent,
                v_bye_sent));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_11(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via,
              1)) to v_sent_label;
            
            v_RequestFor407 :=
            
            valueof(INVITE_Request_s_11(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via,
              1));
            awaitingPRPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request including a  Max-Forwards header set to 1, forwards after having decreasing  this counter of one.";
            extension "Reference: 16.6 item 3 [1]";
            extension "FailCause: Any INVITE_Request received at UA2 OR Invalid INVITE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_013(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_INVITE_Forwarded(
                INVITE_Request_r_1,
                v_CallId,
                loc_CSeq_ptc_s,
                v_cancel_sent,
                v_bye_sent));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_15(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            v_RequestFor407 :=
            valueof(INVITE_Request_s_15(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via));
            awaitingPRPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request, without a  Max-Forwards header, forwards it after having added a Max-Forwards header.";
            extension "Reference: 16.6 item 3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_014(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_INVITE_Forwarded(
                INVITE_Request_r_6(70),
                v_CallId,
                loc_CSeq_ptc_s,
                v_cancel_sent,
                v_bye_sent));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_15(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            v_RequestFor407 :=
            valueof(INVITE_Request_s_15(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via));
            awaitingPRPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request, without a  Max-Forwards header, forwards it after having added a Max-Forwards header  with the value set to 70.";
            extension "Reference: 16.6 item 3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_015(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Route vl_expected_route;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_INVITE_Forwarded(
                INVITE_Request_r_13(Route_l_4),
                v_CallId,
                loc_CSeq_ptc_s,
                v_cancel_sent,
                v_bye_sent));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            v_Route := valueof(Route_l_3);
            v_BOO_Route := true;
            SIPP.send (
              INVITE_Request_s_14(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via,
                v_Route)) to v_sent_label;
            v_RequestFor407 :=
            valueof(INVITE_Request_s_14(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via,
                v_Route));
            awaitingPRPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request with a Route  header, and the first URI of this Route does not contain a lr parameter,  put the Request-URI into the last position of the Route header, and put  the first value of the Route header into the Request-URI, and then  forwards the message.";
            extension "Reference: 16.6 item 6 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_016(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_INVITE_Forwarded(
                INVITE_Request_r_1,
                v_CallId,
                loc_CSeq_ptc_s,
                v_cancel_sent,
                v_bye_sent));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            v_BOO_Route := true;
            v_Route := valueof(Route_l_5);
            SIPP.send (
              INVITE_Request_s_14(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via,
                v_Route)) to v_sent_label;
            v_RequestFor407 :=
            valueof(INVITE_Request_s_14(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via,
                v_Route));
            awaitingPRPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request with a Route  header, and the first URI of this Route containing a lr parameter, forwards  the message to the address in the first element of Route header.";
            extension "Reference: 16.6 item 7 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_017(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_INVITE_Forwarded(
                INVITE_Request_r_1,
                v_CallId,
                loc_CSeq_ptc_s,
                v_cancel_sent,
                v_bye_sent));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            v_RequestFor407 :=
            valueof(INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via));
            awaitingPRPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request without  a Route header, forwards the message to the address in the Request-URI.";
            extension "Reference: 16.6 item 7 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_018(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_MP_RQ_V_018(
                v_CallId,
                loc_CSeq_ptc_s,
                v_cancel_sent,
                v_bye_sent));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            v_RequestFor407 :=
            valueof(INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via));
            awaitingPRPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request forwards the  message after having inserted in first position a Via header - set to its  location with a protocol name set to SIP, a protocol version set to 2.0  and a branch parameter beginning with ""z9hG4bK"" - to the received list  of Via headers.";
            extension "Reference: 16.6 item 8 [1], 8.1.1.7 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2";
          }
          
          testcase SIP_CC_PR_MP_RQ_V_019(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SipUrl vl_inv_RequestUri;
            var SemicolonParam_List vl_params;
            var SipUrl vl_RequestUri := valueof(SipUrl_ofPTC);
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Check_The_ACK(
                ACK_Request_r_9(v_CallId),
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                vl_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  vl_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            }
            awaitingPRInvite200OK(
              Response_INVITE_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            loc_CSeq_s.method := "ACK";
            buildRequestURI(v_reqHostPort, v_To);
            vl_RequestUri.urlParameters := {
              {
                "maddr",
                PX_ETS_IPADDR2
              }
            };
            vl_RequestUri.hostPort := v_reqHostPort;
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            v_ack_sent := true;
            SIPP.send (
              ACK_Request_s_5(
                vl_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseCheck();
            v_bye_sent := true;
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an ACK request with the Request-URI  with a maddr parameter indicating a value the proxy is responsible for and  the request was received using the port and transport indicated,  removes the maddr and any non default port or transport parameter from the  request and forwards the message.";
            extension "Reference: 16.4 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_020(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            var SipUrl vl_RequestUri := valueof(SipUrl_ofPTC);
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Check_The_ACK(
                ACK_Request_r_4(
                  v_CallId,
                  ?,
                  Route_remove_r_1),
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                vl_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  vl_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            }
            awaitingPRInvite200OK(
              Response_INVITE_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            loc_CSeq_s.method := "ACK";
            buildRequestURI(v_reqHostPort, v_To);
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            v_Route := valueof(Route_l_2);
            v_BOO_Route := true;
            v_ack_sent := true;
            SIPP.send (
              ACK_Request_s_2(
                vl_RequestUri,
                v_reqHostPort,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via,
                v_Route)) to v_sent_label;
            synchroniseCheck();
            v_bye_sent := true;
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an ACK request including   a Route header with the first value indicates the IUT, removes  that value from the request and forwards the message.";
            extension "Reference: 16.4 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_021(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SipUrl vl_inv_RequestUri;
            var SemicolonParam_List vl_params;
            var SipUrl vl_RequestUri := valueof(SipUrl_ofPTC);
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Check_The_ACK(
                ACK_Request_r_1(v_CallId),
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                vl_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  vl_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            }
            awaitingPRInvite200OK(
              Response_INVITE_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            loc_CSeq_s.method := "ACK";
            buildRequestURI(v_reqHostPort, v_To);
            vl_RequestUri.urlParameters := {
              {
                "maddr",
                PX_UNKNOWN_IPADDR
              }
            };
            vl_RequestUri.hostPort := v_reqHostPort;
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            v_ack_sent := true;
            SIPP.send (
              ACK_Request_s_5(
                vl_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseCheck();
            v_bye_sent := true;
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an ACK request with the Request-URI  set with a maddr parameter, indicating a value the proxy is not responsible for,  forwards the message to the target indicated in the Request-URI.";
            extension "Reference: 16.5 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          
          testcase SIP_CC_PR_MP_RQ_V_022(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            var SipUrl vl_RequestUri := valueof(SipUrl_ofPTC);
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_MP_RQ_V_022(
                ACK_Request_r_1(v_CallId),
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                vl_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  vl_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            }
            awaitingPRInvite200OK(
              Response_INVITE_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            loc_CSeq_s.method := "ACK";
            buildRequestURI(v_reqHostPort, v_To);
            vl_RequestUri.hostPort := v_reqHostPort;
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            v_ack_sent := true;
            SIPP.send (
              ACK_Request_s_5(
                vl_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseCheck();
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an ACK request with the Request-URI, indicating a domain the proxy is not responsible for, forwards the message  to the target indicated in the Request-URI.";
            extension "Reference: 16.5 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_023(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            var SipUrl vl_RequestUri := valueof(SipUrl_ofPTC);
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Check_The_ACK(
                ACK_Request_r_14(v_CallId, 4),
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                vl_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  vl_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            }
            awaitingPRInvite200OK(
              Response_INVITE_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            loc_CSeq_s.method := "ACK";
            buildRequestURI(v_reqHostPort, v_To);
            vl_RequestUri.hostPort := v_reqHostPort;
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            v_ack_sent := true;
            SIPP.send (
              ACK_Request_s_6(
                vl_RequestUri,
                v_reqHostPort,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via,
              5)) to v_sent_label;
            synchroniseCheck();
            v_bye_sent := true;
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an ACK request including a Max-Forwards header set to 5, forwards it after having  decreasing this counter of one.";
            extension "Reference: 16.6 item 3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_024(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            var SipUrl vl_RequestUri := valueof(SipUrl_ofPTC);
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Check_The_ACK(
                ACK_Request_r_14(v_CallId, 0),
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                vl_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  vl_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            }
            awaitingPRInvite200OK(
              Response_INVITE_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            loc_CSeq_s.method := "ACK";
            buildRequestURI(v_reqHostPort, v_To);
            vl_RequestUri.hostPort := v_reqHostPort;
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            v_ack_sent := true;
            SIPP.send (
              ACK_Request_s_6(
                vl_RequestUri,
                v_reqHostPort,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via,
              1)) to v_sent_label;
            synchroniseCheck();
            v_bye_sent := true;
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an ACK request  including a Max-Forwards header set to 1, forwards it after having  decreasing this counter of one.";
            extension "Reference: 16.6 item 3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_025(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            var SipUrl vl_RequestUri := valueof(SipUrl_ofPTC);
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Check_The_ACK(
                ACK_Request_r_1(v_CallId),
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                vl_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  vl_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            }
            awaitingPRInvite200OK(
              Response_INVITE_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            loc_CSeq_s.method := "ACK";
            buildRequestURI(v_reqHostPort, v_To);
            vl_RequestUri.hostPort := v_reqHostPort;
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            v_ack_sent := true;
            SIPP.send (
              ACK_Request_s_7(
                vl_RequestUri,
                v_reqHostPort,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseCheck();
            v_bye_sent := true;
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an ACK request without  a Max-Forwards header, forwards after having added a Max-Forwards header.";
            extension "Reference: 16.6 item 3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_026(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            var SipUrl vl_RequestUri := valueof(SipUrl_ofPTC);
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Check_The_ACK(
                ACK_Request_r_14(v_CallId, 70),
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                vl_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  vl_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            }
            awaitingPRInvite200OK(
              Response_INVITE_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            loc_CSeq_s.method := "ACK";
            buildRequestURI(v_reqHostPort, v_To);
            vl_RequestUri.hostPort := v_reqHostPort;
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            v_ack_sent := true;
            SIPP.send (
              ACK_Request_s_7(
                vl_RequestUri,
                v_reqHostPort,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseCheck();
            v_bye_sent := true;
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an ACK request without  a Max-Forwards header, forwards it after having added a Max-Forwards  header set with the value set to 70.";
            extension "Reference: 16.6 item 3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_027(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            var SipUrl vl_RequestUri := valueof(SipUrl_ofPTC);
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Check_The_ACK(
                ACK_Request_r_15(
                  v_CallId,
                  SipUrl_ofPTC,
                  Route_l_4),
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                vl_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  vl_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInvite200OK(
              Response_INVITE_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            loc_CSeq_s.method := "ACK";
            v_reqHostPort := {
              host := PX_IUT_HOME_DOMAIN,
              portField := PX_IUT_PORT
            };
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            v_Route := valueof(Route_l_5);
            v_BOO_Route := true;
            v_ack_sent := true;
            SIPP.send (
              ACK_Request_s_2(
                vl_RequestUri,
                v_reqHostPort,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via,
                v_Route)) to v_sent_label;
            synchroniseCheck();
            v_bye_sent := true;
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an ACK request with a Route header,  and the first URI of this Route does contain a lr parameter, put the Request-URI  into the last position of the Route header, and put the first value of the Route header into the Request-URI, and then forwards the message to the address  in the Request-URI.";
            extension "Reference: 16.6 item 6 and 7 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_028(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            var SipUrl vl_RequestUri := valueof(SipUrl_ofPTC);
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Check_The_ACK(
                ACK_Request_r_1(v_CallId),
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                vl_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  vl_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            }
            awaitingPRInvite200OK(
              Response_INVITE_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            loc_CSeq_s.method := "ACK";
            v_reqHostPort := {
              host := PX_IUT_HOME_DOMAIN,
              portField := PX_IUT_PORT
            };
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            buildRequestURI(v_reqHostPort, v_To);
            vl_RequestUri.hostPort := v_reqHostPort;
            v_Route := valueof(Route_l_5);
            v_BOO_Route := true;
            v_ack_sent := true;
            SIPP.send (
              ACK_Request_s_2(
                vl_RequestUri,
                v_reqHostPort,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via,
                v_Route)) to v_sent_label;
            synchroniseCheck();
            v_bye_sent := true;
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an ACK request with a Route header,  and the first URI of this Route contains a lr parameter, forwards the message  to the address in the first element of Route header.";
            extension "Reference: 16.6 item 7 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_029(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SipUrl vl_RequestUri := valueof(SipUrl_ofPTC);
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Check_The_ACK(
                ACK_Request_r_1(v_CallId),
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                vl_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  vl_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            }
            awaitingPRInvite200OK(
              Response_INVITE_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            v_ack_sent := true;
            send200OKACK2(loc_CSeq_s);
            synchroniseCheck();
            v_bye_sent := true;
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an ACK request without a Route header,  forwards the message to the address in the Request-URI.";
            extension "Reference: 16.6 item 7 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_030(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SipUrl vl_RequestUri := valueof(SipUrl_ofPTC);
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_MP_RQ_V_030(
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                vl_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  vl_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            }
            awaitingPRInvite200OK(
              Response_INVITE_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            v_ack_sent := true;
            send200OKACK(loc_CSeq_s);
            synchroniseCheck();
            v_bye_sent := true;
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an ACK request forwards the message  after having inserted in first position a Via header - set to its location with a protocol name set to SIP, a protocol version set to 2.0 and a branch parameter beginning with ""z9hG4bK"" - to the received list of Via headers.";
            extension "Reference: 16.6 item 8 [1], 8.1.1.7 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_031(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SipUrl vl_inv_RequestUri;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CANCEL_Not_Forwarded(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            vl_inv_RequestUri := v_RequestUri;
            vl_inv_RequestUri.scheme := "unknownScheme";
            SIPP.send (
              CANCEL_Request_s_4(
                vl_inv_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRCancelNon200OK(
              Response_416_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a CANCEL request that does not correspond to an existing context with a Request-URI with a scheme  that it does not understand, sends a Unsupported URI Scheme  (416 Unsupported URI Scheme) request failure response.";
            extension "Reference: 16.3 item 2[1]";
            extension "FailCause: No/Invalid CANCEL_Request received at UA2 OR No/Invalid Unsupported URI Scheme request received (416 Unsupported URI Scheme) at UA1";
          }
          testcase SIP_CC_PR_MP_RQ_V_032(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CANCEL_Not_Forwarded(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            SIPP.send (
              CANCEL_Request_s_5(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via,
              0)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRCancelNon200OK(
              Response_483_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a CANCEL request that does not correspond to an existing context including a Max-Forwards header set to 0, sends a Too  many hops (483 Too many hops) request failure response.";
            extension "Reference: 16.3 item 3[1]";
            extension "FailCause: No/Invalid CANCEL_Request received at UA2 OR No/Invalid Too many hops (483 Too many hops) request received at UA1";
          }
          testcase SIP_CC_PR_MP_RQ_V_033(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CANCEL_Not_Forwarded(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            SIPP.send (
              CANCEL_Request_s_3(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRCancelNon200OK(
              Response_420_r_2(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a CANCEL request that does not  correspond to an existing context including a Proxy-Require header set to a  value that it does not understand, sends a Bad Extension (420 Bad Extension)  request failure response including a list of the options that it does not  support in the Unsupported header.";
            extension "Reference: 16.3 item 5[1]";
            extension "FailCause: No/Invalid CANCEL_Request received at UA2 OR No/Invalid Bad Extension (420 Bad Extension) request received at UA1";
          }
          testcase SIP_CC_PR_MP_RQ_V_034(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_CANCEL_Forwarded(
                CANCEL_Request_r_6(vl_CallId),
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            v_RequestUri.urlParameters := {
              {
                "maddr",
                PX_ETS_IPADDR2
              }
            };
            SIPP.send (
              CANCEL_Request_s_4(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRCANCELPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a CANCEL request that does not  correspond to an existing context with the Request-URI with a maddr  parameter indicating a value the proxy is responsible for and the request  was received using the port and transport indicated, removes the maddr and  any non default port or transport parameter from the request and forwards  the message.";
            extension "Reference: 16.4 [1]";
            extension "FailCause: No/Invalid CANCEL_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_035(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Route vl_expected_route;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_CANCEL_Forwarded(
                CANCEL_Request_r_7(
                  vl_CallId,
                  Route_remove_r_1),
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            v_Route := valueof(Route_l_2);
            v_BOO_Route := true;
            SIPP.send (
              CANCEL_Request_s_6(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_Via,
                v_Route)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRCANCELPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a CANCEL request that does not  correspond to an existing context including a Route header with the first  value indicates the IUT, removes that value from the request and forwards  the message.";
            extension "Reference: 16.4 [1]";
            extension "FailCause: No/Invalid CANCEL_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_036(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_CANCEL_Forwarded(
                CANCEL_Request_r_1(vl_CallId),
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            v_RequestUri.urlParameters := {
              {
                "maddr",
                PX_UNKNOWN_IPADDR
              }
            };
            SIPP.send (
              CANCEL_Request_s_4(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRCANCELPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a CANCEL request that does not  correspond to an existing context with the Request-URI with a maddr parameter,  indicating a value the proxy is not responsible for, forwards the message  to the target indicated in the Request-URI.";
            extension "Reference: 16.5 [1]";
            extension "FailCause: No/Invalid CANCEL_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_037(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_CC_PR_MP_RQ_V_037(
                CANCEL_Request_r_1(vl_CallId),
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            SIPP.send (
              CANCEL_Request_s_4(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRCANCELPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a CANCEL request that does not  correspond to an existing context with the Request-URI, indicating a domain  the proxy is not responsible for, forwards the message to the target indicated in the Request-URI.";
            extension "Reference: 16.5 [1]";
            extension "FailCause: No/Invalid CANCEL_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_038(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SipUrl vl_inv_RequestUri;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CANCEL_Not_Forwarded(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            vl_inv_RequestUri := valueof(SipUrl_Ambiguous);
            SIPP.send (
              CANCEL_Request_s_4(
                vl_inv_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRCancelNon200OK(
              Response_485_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a CANCEL request that does not  correspond to an existing context but does not sufficient information to  determine the target set, sends back a Ambiguous (485 Ambiguous) request  failure response.";
            extension "Reference: 16.5 [1]";
            extension "FailCause: CANCEL_Request received at UA2 OR No/Invalid Ambiguous (485 Ambiguous) request received at UA1";
          }
          testcase SIP_CC_PR_MP_RQ_V_039(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SipUrl vl_inv_RequestUri;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CANCEL_Not_Forwarded(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            vl_inv_RequestUri := valueof(SipUrl_ofCallee_s);
            SIPP.send (
              CANCEL_Request_s_4(
                vl_inv_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRCancelNon200OK(
              Response_404_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a CANCEL request that does not  correspond to an existing context with the Request-URI, indicating a resource,  which does not exist at this proxy, sends back a Not found (404 Not found)  request failure response.";
            extension "Reference: 16.5 [1]";
            extension "FailCause: CANCEL_Request received at UA2 OR No/Invalid Not found (404 Not found) request received at UA1";
          }
          testcase SIP_CC_PR_MP_RQ_V_040(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SipUrl vl_inv_RequestUri;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CANCEL_Not_Forwarded(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            v_Cancel_To := valueof(To_s1_Unknown);
            vl_inv_RequestUri := valueof(SipUrl_ofUnknown_s);
            SIPP.send (
              CANCEL_Request_s_4(
                vl_inv_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRCancelNon200OK(
              Response_480_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a CANCEL request that does not  correspond to an existing context but does not find any target to forward,  sends back a Temporary Unavailable (480 Temporary Unavailable) request  failure response.";
            extension "Reference: 16.5 [1]";
            extension "FailCause: CANCEL_Request received at UA2 OR No/Invalid Temporary Unavailable (480 Temporary Unavailable) request received at UA1";
          }
          testcase SIP_CC_PR_MP_RQ_V_041(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_CANCEL_Forwarded(
                CANCEL_Request_r_8(vl_CallId, 4),
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            SIPP.send (
              CANCEL_Request_s_5(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_Via,
              5)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRCANCELPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a CANCEL request that does not  correspond to an existing context including a Max-Forwards header set to 5,  forwards it after having decreasing this counter of one.";
            extension "Reference: 16.6 item 3 [1]";
            extension "FailCause: No/Invalid CANCEL_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_042(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_CANCEL_Forwarded(
                CANCEL_Request_r_8(vl_CallId, 0),
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            SIPP.send (
              CANCEL_Request_s_5(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_Via,
              1)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRCANCELPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a CANCEL request that does not  correspond to an existing context including a Max-Forwards header set to 1,  forwards it after having decreasing this counter of one.";
            extension "Reference: 16.6 item 3 [1]";
            extension "FailCause: No/Invalid CANCEL_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_043(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_CANCEL_Forwarded(
                CANCEL_Request_r_1(vl_CallId),
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            SIPP.send (
              CANCEL_Request_s_7(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRCANCELPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a CANCEL request that does not  correspond to an existing context, without a Max-Forwards header, forwards  it after having added a Max-Forwards header.";
            extension "Reference: 16.6 item 3 [1]";
            extension "FailCause: No/Invalid CANCEL_Request received at UA2";
          }
          
          testcase SIP_CC_PR_MP_RQ_V_044(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_CANCEL_Forwarded(
                CANCEL_Request_r_8(vl_CallId, 70),
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            SIPP.send (
              CANCEL_Request_s_7(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRCANCELPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a CANCEL request that does not  correspond to an existing context, without a Max-Forwards header, forwards  it after having added a Max-Forwards header with the value set to 70.";
            extension "Reference: 16.6 item 3 [1]";
            extension "FailCause: No/Invalid CANCEL_Request received at UA2";
          }
          
          testcase SIP_CC_PR_MP_RQ_V_045(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Route vl_expected_route;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_CANCEL_Forwarded(
                CANCEL_Request_r_7(
                  vl_CallId,
                  Route_l_4),
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            v_Route := valueof(Route_l_3);
            v_BOO_Route := true;
            SIPP.send (
              CANCEL_Request_s_6(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_Via,
                v_Route)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRCANCELPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a CANCEL request that does not  correspond to an existing context with a Route header, and the first URI of  this Route does not contain a lr parameter, put the Request-URI into  the last position of the Route header, and put the first value of the Route  header into the Request-URI, and then forwards the message to the address in  the Request-URI.";
            extension "Reference: 16.6 item 6 [1]";
            extension "FailCause: No/Invalid CANCEL_Request received at UA2";
          }
          
          testcase SIP_CC_PR_MP_RQ_V_046(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_CANCEL_Forwarded(
                CANCEL_Request_r_1(vl_CallId),
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            v_RequestUri := valueof(SipUrl_ofRouteIUT);
            v_Route := valueof(Route_l_5);
            v_BOO_Route := true;
            SIPP.send (
              CANCEL_Request_s_6(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_Via,
                v_Route)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRCANCELPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a CANCEL request that does not  correspond to an existing context with a Route header, and the first URI of  this Route containing a lr parameter, forwards the message to the address in  the first element of Route header.";
            extension "Reference: 16.6 item 7 [1]";
            extension "FailCause: No/Invalid CANCEL_Request received at UA2";
          }
          
          testcase SIP_CC_PR_MP_RQ_V_047(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_CANCEL_Forwarded(
                CANCEL_Request_r_1(vl_CallId),
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            v_RequestUri := valueof(SipUrl_ofPTC);
            SIPP.send (
              CANCEL_Request_s_4(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRCANCELPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a CANCEL request that does not  correspond to an existing context without a Route header, forwards the  message to the address in the Request-URI.";
            extension "Reference: 16.6 item 7 [1]";
            extension "FailCause: No/Invalid CANCEL_Request received at UA2";
          }
          
          testcase SIP_CC_PR_MP_RQ_V_048(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_CC_PR_MP_RQ_V_048(
                CANCEL_Request_r_1(vl_CallId),
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            SIPP.send (
              CANCEL_Request_s_4(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRCANCELPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a CANCEL request that does not  correspond to an existing context forwards the message after having inserted  in first position a Via header - set to its location with a protocol name set  to SIP, a protocol version set to 2.0 and a branch parameter beginning  with ""z9hG4bK"" - to the received list of Via headers.";
            extension "Reference: 16.6 item 8 [1], 8.1.1.7 [1]";
            extension "FailCause: No/Invalid CANCEL_Request received at UA2";
          }
          
          testcase SIP_CC_PR_MP_RQ_V_049(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            var SipUrl vl_inv_RequestUri;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Accept_the_Call(
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            loc_CSeq_s.method := "BYE";
            buildRequestURI(v_reqHostPort, v_caller_To);
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            vl_inv_RequestUri.scheme := "unknownScheme";
            vl_inv_RequestUri.hostPort := v_reqHostPort;
            synchroniseCheck();
            v_bye_sent := true;
            if (v_BOO_Route) {
              SIPP.send (
                BYE_Request_WithRoute_s_5(
                  vl_inv_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via,
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                BYE_Request_s_5(
                  vl_inv_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via)) to v_sent_label;
            }
            awaitingPRResponse2(
              Response_416_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a BYE request with a Request-URI with a scheme that it does not understand, sends a Unsupported URI Scheme  (416 Unsupported URI Scheme) request failure response.";
            extension "Reference: 16.3 item 2[1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR A BYE_Request received at UA2 OR No/Invalid Unsupported URI Scheme (416 Unsupported URI Scheme) request received at UA1";
          }
          
          testcase SIP_CC_PR_MP_RQ_V_050(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Accept_the_Call(
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            loc_CSeq_s.method := "BYE";
            buildRequestURI(v_reqHostPort, v_caller_To);
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            v_RequestUri.hostPort := v_reqHostPort;
            synchroniseCheck();
            v_bye_sent := true;
            if (v_BOO_Route) {
              SIPP.send (
                BYE_Request_WithRoute_s_6(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via,
                  0,
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                BYE_Request_s_6(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via,
                0)) to v_sent_label;
            }
            awaitingPRResponse2(
              Response_483_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a BYE request including  a Max-Forwards header set to 0, sends a Too many hops (483 Too many hops)  request failure response.";
            extension "Reference: 16.3 item 3[1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR A BYE_Request received at UA2 OR No/Invalid Too many hops (483 Too many hops) request received at UA1";
          }
          
          testcase SIP_CC_PR_MP_RQ_V_051(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Accept_the_Call(
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            loc_CSeq_s.method := "BYE";
            buildRequestURI(v_reqHostPort, v_caller_To);
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            v_RequestUri.hostPort := v_reqHostPort;
            synchroniseCheck();
            v_bye_sent := true;
            if (v_BOO_Route) {
              SIPP.send (
                BYE_Request_WithRoute_s_7(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via,
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                BYE_Request_s_7(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via)) to v_sent_label;
            }
            awaitingPRResponse2(
              Response_420_r_2(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a BYE request including a  Proxy-Require header set to a value that it does not understand, sends a Bad Extension (420 Bad Extension) request failure response including  a list of the options that it does not support in the Unsupported header.";
            extension "Reference: 16.3 item 5[1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR A BYE_Request received at UA2 OR Bad Extension (420 Bad Extension) request received at UA1";
          }
          testcase SIP_CC_PR_MP_RQ_V_052(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Check_The_BYE(
                BYE_Request_r_8(v_CallId),
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            loc_CSeq_s.method := "BYE";
            buildRequestURI(v_reqHostPort, v_caller_To);
            v_RequestUri.urlParameters := {
              {
                "maddr",
                PX_ETS_IPADDR2
              }
            };
            v_RequestUri.hostPort := v_reqHostPort;
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            synchroniseCheck();
            v_bye_sent := true;
            if (v_BOO_Route) {
              SIPP.send (
                BYE_Request_WithRoute_s_5(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via,
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                BYE_Request_s_5(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via)) to v_sent_label;
            }
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a BYE request with the Request-URI  with a maddr parameter indicating a value the proxy is responsible for and the  request was received using the port and transport indicated, removes the maddr  and any non default port or transport parameter from the request and forwards  the message.";
            extension "Reference: 16.4 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_053(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Check_The_BYE(
                BYE_Request_r_9(v_CallId, Route_remove_r_1),
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            loc_CSeq_s.method := "BYE";
            buildRequestURI(v_reqHostPort, v_caller_To);
            v_RequestUri.hostPort := v_reqHostPort;
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            synchroniseCheck();
            v_bye_sent := true;
            SIPP.send (
              BYE_Request_s_8(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_Via,
                Route_l_2)) to v_sent_label;
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a BYE request including a Route  header with the first value indicates the IUT, removes that value from  the request and forwards the message.";
            extension "Reference: 16.4 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_054(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Check_The_BYE(
                BYE_Request_r_1(v_CallId),
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            loc_CSeq_s.method := "BYE";
            buildRequestURI(v_reqHostPort, v_caller_To);
            v_RequestUri.urlParameters := {
              {
                "maddr",
                PX_UNKNOWN_IPADDR
              }
            };
            v_RequestUri.hostPort := v_reqHostPort;
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            synchroniseCheck();
            v_bye_sent := true;
            if (v_BOO_Route) {
              SIPP.send (
                BYE_Request_WithRoute_s_5(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via,
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                BYE_Request_s_5(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via)) to v_sent_label;
            }
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a BYE request with the Request-URI  with a maddr parameter, indicating a value the proxy is not responsible for,  forwards the message to the target indicated in the Request-URI.";
            extension "Reference: 16.5 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_055(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_MP_RQ_V_055(
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            loc_CSeq_s.method := "BYE";
            buildRequestURI(v_reqHostPort, v_caller_To);
            v_RequestUri.hostPort := v_reqHostPort;
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            synchroniseCheck();
            v_bye_sent := true;
            if (v_BOO_Route) {
              SIPP.send (
                BYE_Request_WithRoute_s_5(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via,
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                BYE_Request_s_5(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via)) to v_sent_label;
            }
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a BYE request with the Request-URI,  indicating a domain the proxy is not responsible for, forwards the message  to the target indicated in the Request-URI.";
            extension "Reference: 16.5 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          //PURPOSE: Ensure that the IUT on receipt of a BYE request but does not contain sufficient
          //         information to determine the target set, sends back a Ambiguous (485 Ambiguous)
          //         request failure response.
          testcase SIP_CC_PR_MP_RQ_V_056(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SipUrl vl_inv_RequestUri;
            var SemicolonParam_List vl_params;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Accept_the_Call2(
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            loc_CSeq_s.method := "BYE";
            buildRequestURI(v_reqHostPort, v_caller_To);
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            v_RequestUri.hostPort := v_reqHostPort;
            vl_inv_RequestUri := valueof(SipUrl_Ambiguous);
            synchroniseCheck();
            v_bye_sent := true;
            if (v_BOO_Route) {
              SIPP.send (
                BYE_Request_WithRoute_s_5(
                  vl_inv_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via,
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                BYE_Request_s_5(
                  vl_inv_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via)) to v_sent_label;
            }
            awaitingPRResponse3(
              Response_485_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a BYE request but does not contain  sufficient information to determine the target set, sends back a Ambiguous  (485 Ambiguous) request failure response.";
            extension "Reference: 16.5 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR A BYE_Request received at UA2 OR Ambiguous (485 Ambiguous) request received at UA1";
          }
          testcase SIP_CC_PR_MP_RQ_V_057(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SipUrl vl_inv_RequestUri;
            var SemicolonParam_List vl_params;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Accept_the_Call(
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            loc_CSeq_s.method := "BYE";
            buildRequestURI(v_reqHostPort, v_caller_To);
            v_RequestUri.hostPort := v_reqHostPort;
            vl_inv_RequestUri := valueof(SipUrl_ofCallee_s);
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            synchroniseCheck();
            v_bye_sent := true;
            if (v_BOO_Route) {
              SIPP.send (
                BYE_Request_WithRoute_s_5(
                  vl_inv_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via,
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                BYE_Request_s_5(
                  vl_inv_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via)) to v_sent_label;
            }
            awaitingPRResponse2(
              Response_404_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a BYE request with the Request-URI,  indicating a resource, which does not exist at this proxy, sends back a  Not found (404 Not found) request failure response.";
            extension "Reference: 16.5 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR A BYE_Request received at UA2 OR Not found (404 Not found) request received at UA1";
          }
          testcase SIP_CC_PR_MP_RQ_V_058(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SipUrl vl_inv_RequestUri;
            var SemicolonParam_List vl_params;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Accept_the_Call(
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            loc_CSeq_s.method := "BYE";
            buildRequestURI(v_reqHostPort, v_caller_To);
            v_RequestUri.hostPort := v_reqHostPort;
            vl_inv_RequestUri := valueof(SipUrl_ofUnknown_s);
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            synchroniseCheck();
            v_bye_sent := true;
            if (v_BOO_Route) {
              SIPP.send (
                BYE_Request_WithRoute_s_5(
                  vl_inv_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via,
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                BYE_Request_s_5(
                  vl_inv_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via)) to v_sent_label;
            }
            awaitingPRResponse2(
              Response_480_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a BYE request but  does not find any target to forward, sends back a Temporary Unavailable (480 Temporary Unavailable) request failure response.";
            extension "Reference: 16.5 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR A BYE_Request received at UA2 OR Temporary Unavailable (480 Temporary Unavailable) request received at UA1";
          }
          testcase SIP_CC_PR_MP_RQ_V_059(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Check_The_BYE(
                BYE_Request_r_10(v_CallId, 4),
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            loc_CSeq_s.method := "BYE";
            buildRequestURI(v_reqHostPort, v_caller_To);
            v_RequestUri.hostPort := v_reqHostPort;
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            synchroniseCheck();
            v_bye_sent := true;
            if (v_BOO_Route) {
              SIPP.send (
                BYE_Request_WithRoute_s_9(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via,
                  MaxForwards_s(5),
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                BYE_Request_s_9(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via,
                  MaxForwards_s(5))) to v_sent_label;
            }
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a BYE request including a  Max-Forwards header set to 5, forwards it after having decreasing this  counter of one.";
            extension "Reference: 16.6 item 3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_060(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Check_The_BYE(
                BYE_Request_r_10(v_CallId, 0),
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            loc_CSeq_s.method := "BYE";
            buildRequestURI(v_reqHostPort, v_caller_To);
            v_RequestUri.hostPort := v_reqHostPort;
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            synchroniseCheck();
            v_bye_sent := true;
            if (v_BOO_Route) {
              SIPP.send (
                BYE_Request_WithRoute_s_9(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via,
                  MaxForwards_s(1),
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                BYE_Request_s_9(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via,
                  MaxForwards_s(1))) to v_sent_label;
            }
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a BYE request including a  Max-Forwards header set to 1, forwards it after having decreasing  this counter of one.";
            extension "Reference: 16.6 item 3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_061(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Check_The_BYE(
                BYE_Request_r_10(v_CallId, ?),
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            loc_CSeq_s.method := "BYE";
            buildRequestURI(v_reqHostPort, v_caller_To);
            v_RequestUri.hostPort := v_reqHostPort;
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            synchroniseCheck();
            v_bye_sent := true;
            if (v_BOO_Route) {
              SIPP.send (
                BYE_Request_WithRoute_s_9(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via,
                  omit,
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                BYE_Request_s_9(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via,
                  omit)) to v_sent_label;
            }
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a BYE request, without a  Max-Forwards header, forwards it after having added a Max-Forwards  header.";
            extension "Reference: 16.6 item 3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_062(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Check_The_BYE(
                BYE_Request_r_10(v_CallId, 70),
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            loc_CSeq_s.method := "BYE";
            buildRequestURI(v_reqHostPort, v_caller_To);
            v_RequestUri.hostPort := v_reqHostPort;
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            synchroniseCheck();
            v_bye_sent := true;
            if (v_BOO_Route) {
              SIPP.send (
                BYE_Request_WithRoute_s_9(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via,
                  omit,
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                BYE_Request_s_9(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via,
                  omit)) to v_sent_label;
            }
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a BYE request, without a  Max-Forwards header, forwards it after having added a Max-Forwards header  with the value set to 70.";
            extension "Reference: 16.6 item 3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_063(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Check_The_BYE(
                BYE_Request_r_9(v_CallId, Route_l_4),
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            loc_CSeq_s.method := "BYE";
            buildRequestURI(v_reqHostPort, v_caller_To);
            v_BOO_Route := true;
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            synchroniseCheck();
            v_bye_sent := true;
            SIPP.send (
              BYE_Request_s_8(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_Via,
                Route_l_3)) to v_sent_label;
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a BYE request with a Route header,  and the first URI of this Route does not contain a lr parameter, put the  Request-URI into the last position of the Route header, and put the first  value of the Route header into the Request-URI, and then forwards the message to the address in the Request-URI.";
            extension "Reference: 16.6 item 6 and 7 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_064(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Check_The_BYE(
                BYE_Request_r_1(v_CallId),
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            loc_CSeq_s.method := "BYE";
            buildRequestURI(v_reqHostPort, v_caller_To);
            v_BOO_Route := true;
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            synchroniseCheck();
            v_bye_sent := true;
            SIPP.send (
              BYE_Request_s_8(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_Via,
                Route_l_5)) to v_sent_label;
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a BYE request with a Route header,  and the first URI of this Route containing a lr parameter, forwards   the message to the address in the first element of Route header.";
            extension "Reference: 16.6 item 7 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_065(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Check_The_BYE(
                BYE_Request_r_1(v_CallId),
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            loc_CSeq_s.method := "BYE";
            buildRequestURI(v_reqHostPort, v_caller_To);
            v_RequestUri := valueof(SipUrl_ofPTC);
            v_BOO_Route := false;
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            synchroniseCheck();
            v_bye_sent := true;
            SIPP.send (
              BYE_Request_s_8(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_caller_From,
                v_caller_To,
                v_Via,
                omit)) to v_sent_label;
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a BYE request without a Route  header, forwards the message to the address in the Request-URI.";
            extension "Reference: 16.6 item 7 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_066(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_MP_RQ_V_066(
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            loc_CSeq_s.method := "BYE";
            buildRequestURI(v_reqHostPort, v_caller_To);
            v_BOO_Route := false;
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            synchroniseCheck();
            v_bye_sent := true;
            if (v_BOO_Route) {
              SIPP.send (
                BYE_Request_WithRoute_s_5(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via,
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                BYE_Request_s_5(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via)) to v_sent_label;
            }
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a BYE request forwards the message  after having inserted in first position a Via header - set to its location with  a protocol name set to SIP, a protocol version set to 2.0 and a branch parameter  beginning with ""z9hG4bK"" - to the received list of Via headers.";
            extension "Reference: 16.6 item 8 [1], 8.1.1.7 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_V_067(
            inout CSeq loc_CSeq_s,
            inout CSeq loc_CSeq_ptc_s,
            inout CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_INVITE_Forwarded(
                INVITE_Request_r_1,
                loc_CSeq_ptc_s));
            vl_ptc2.start (
              ptc2_INVITE_Forwarded(
                INVITE_Request_r_1,
                loc_CSeq_ptc2_s));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            awaitingPRTwoPtcCheck(loc_CSeq_s);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request and the  dertermined target set is containing two URIs forwards the message (forking)  to both URIs.";
            extension "Reference: 16.6 item 7 and 10 [1], 16.5 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid INVITE_Request received at UA3";
          }
        }
        group InvalidBehaviour {
          testcase SIP_CC_PR_MP_RQ_I_001(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            var SipUrl vl_inv_RequestUri;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_INVITE_Forwarded(
                INVITE_Request_r_9,
                v_CallId,
                loc_CSeq_ptc_s,
                v_cancel_sent,
                v_bye_sent));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            v_RequestUri.urlParameters := {
              {
                "UnsupportedToken",
                "UnsupportedValue"
              }
            };
            vl_inv_RequestUri := v_RequestUri;
            SIPP.send (
              INVITE_Request_s_2(
                vl_inv_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            v_RequestFor407 :=
            valueof(INVITE_Request_s_2(
                vl_inv_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via));
            awaitingPRPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request with the  Request-URI containing a not allowed parameter, removes that parameter  from the Request-URI before forwarding that message.";
            extension "Reference: 16.6 item 2 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_I_002(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SipUrl vl_inv_RequestUri;
            var SemicolonParam_List vl_params;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersPtcInvite(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_Check_The_ACK(
                ACK_Request_r_9(v_CallId),
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            v_CallId := vl_CallId;
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CallId := vl_CallId;
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            }
            
            awaitingPRInvite200OK(
              Response_INVITE_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            loc_CSeq_s.method := "ACK";
            v_CallId := vl_CallId;
            buildRequestURI(v_reqHostPort, v_To);
            v_RequestUri.hostPort := v_reqHostPort;
            v_RequestUri.urlParameters := {
              {
                "UnsupportedToken",
                "UnsupportedValue"
              }
            };
            vl_inv_RequestUri := v_RequestUri;
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            v_CallId := vl_CallId;
            v_ack_sent := true;
            SIPP.send (
              ACK_Request_s_5(
                vl_inv_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseCheck();
            v_bye_sent := true;
            v_CallId := vl_CallId;
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an ACK request,  with the Request-URI containing a not allowed parameter, removes  that parameter from the Request-URI before forwarding that message.";
            extension "Reference: 16.6 item 2 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_I_003(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SipUrl vl_inv_RequestUri;
            var SemicolonParam_List vl_params;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_CANCEL_Forwarded(
                CANCEL_Request_r_6(v_CallId),
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForCANCELPTCOutOfDialog(loc_CSeq_s);
            v_CallId := vl_CallId;
            v_RequestUri.urlParameters := {
              {
                "UnsupportedToken",
                "UnsupportedValue"
              }
            };
            vl_inv_RequestUri := v_RequestUri;
            SIPP.send (
              CANCEL_Request_s_4(
                vl_inv_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRCANCELPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a CANCEL request with the  Request-URI containing a not allowed parameter, removes that parameter  from the Request-URI before forwarding that message.";
            extension "Reference: 16.6 item 2 [1]";
            extension "FailCause: No/Invalid CANCEL_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RQ_I_004(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SipUrl vl_inv_RequestUri;
            var SemicolonParam_List vl_params;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Check_The_BYE(
                BYE_Request_r_8(v_CallId),
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            loc_CSeq_s.method := "BYE";
            buildRequestURI(v_reqHostPort, v_caller_To);
            v_RequestUri.hostPort := v_reqHostPort;
            v_RequestUri.urlParameters := {
              {
                "UnsupportedToken",
                "UnsupportedValue"
              }
            };
            vl_inv_RequestUri := v_RequestUri;
            vl_params := valueof(v_Via.viaBody[0].viaParams);
            vl_params[0].paramValue :=
            BRANCH_COOKIE & getRndTag();
            v_Via.viaBody[0].viaParams := vl_params;
            synchroniseCheck();
            v_bye_sent := true;
            if (v_BOO_Route) {
              SIPP.send (
                BYE_Request_WithRoute_s_5(
                  vl_inv_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via,
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                BYE_Request_s_5(
                  vl_inv_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_caller_From,
                  v_caller_To,
                  v_Via)) to v_sent_label;
            }
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a BYE request with the  Request-URI containing a not allowed parameter, removes that parameter  from the Request-URI before forwarding that message.";
            extension "Reference: 16.6 item 2 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2";
          }
        }
      }
      group SipResponses {
        group ValidBehaviour {
          testcase SIP_CC_PR_MP_RS_V_001(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            
            vl_ptc.start (
              ptc_Resp_Forwarded(
                v_CallId,
                Response_200_r_13(v_CallId, ?, Via_l1(?)),
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForRespOutOfDialog(loc_CSeq_s);
            SIPP.send (
              Response_200_PTCInvite_noroute_s_1(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingRespPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a Success (200 OK) response with  the topmost Via header indicating its own location, deletes that header  and forwards the message to the address indicated in the next Via header  value.";
            extension "Reference: 16.11 [1]";
            extension "FailCause: No/Invalid Success (200 OK) response received at UA2";
          }
          testcase SIP_CC_PR_MP_RS_V_002(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var charstring vl_branch_val;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            
            vl_ptc.start (
              ptc_Resp_NotForwarded(
                v_CallId,
                Response_200_r_1(v_CallId, ?),
                loc_CSeq_ptc_s));
            
            initMTC(loc_CSeq_s);
            setHeadersForRespOutOfDialog(loc_CSeq_s);
            vl_branch_val := BRANCH_COOKIE & getRndTag();
            v_Via := {
              fieldName := VIA_E,
              viaBody := {
                valueof(ViaBody_ETS_IPADDR(vl_branch_val)),
                valueof(ViaBody_PTC(v_Branch))}
            };
            SIPP.send (
              Response_200_PTCInvite_noroute_s_1(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            TNoAct.start (PX_TNOACT);
            alt {
              [] cpA.receive (CM_Rsp_Rcved) {
                setverdict (fail);
                all timer.stop;
                stop;
              }
              [] SIPP.receive {
                repeat;
              }
              [] TNoAct.timeout {
                setverdict (pass);
                cpA.send (CM_Check_Done);
              }
            }
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a Success (200 OK) response  with the topmost Via header not indicating its own location, does not  forward the message.";
            extension "Reference: 16.11 [1], 18.1.2 [1]";
            extension "FailCause: Any response received at UA2/UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_003(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_MP_RS_V_003(
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_RequestFor407 :=
            valueof(INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via));
            v_CSeq := loc_CSeq_s;
            v_CSeq.method := "REGISTER";
            awaitingPRInvite200OK(
              Response_200_r_13(v_CallId, v_CSeq, Via_l2),
              loc_CSeq_s);
            v_ack_sent := true;
            send200OKACK(loc_CSeq_s);
            synchroniseCheck();
            v_bye_sent := true;
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a Success (200 OK) response with  the topmost Via header indicating its own location, but the branch parameter  of Via header together with the method parameter in the CSeq header does  not corresponds to any existing transaction, deletes that Via header and  forwards the message to the address indicated in the next Via header value.";
            extension "Reference: 16.11 [1]";
            extension "FailCause: No/Invalid Success (200 OK) response received at UA2";
          }
          testcase SIP_CC_PR_MP_RS_V_004(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            
            vl_ptc.start (
              ptc_Resp_NotForwarded(
                v_CallId,
                Response_200_r_1(v_CallId, ?),
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForRespOutOfDialog(loc_CSeq_s);
            v_Via := {
              fieldName := VIA_E,
              viaBody := {
                valueof(ViaBody_IUT_IPADDR(v_Branch))}
            };
            SIPP.send (
              Response_200_PTCInvite_noroute_s_1(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            TNoAct.start (PX_TNOACT);
            alt {
              [] cpA.receive (CM_Rsp_Rcved) {
                setverdict (fail);
                all timer.stop;
                stop;
              }
              [] SIPP.receive {
                repeat;
              }
              [] TNoAct.timeout {
                setverdict (pass);
                cpA.send (CM_Check_Done);
              }
            }
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, on receipt of a Success (200 OK) response that does not match to an existing client transaction with a single Via header, does not  forward the message.";
            extension "Reference: 16.7 item 3 [1], 16.11 [1]";
            extension "FailCause: Any response received at UA2/UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_005(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Accept_the_Call(
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            v_ack_sent := true;
            awaitingPRInvite200OK(
              Response_200_r_13(v_CallId, v_CSeq, Via_l2),
              loc_CSeq_s);
            send200OKACK(loc_CSeq_s);
            synchroniseCheck();
            v_bye_sent := true;
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, on receipt of a Success (200 OK) response that matches to an existing client transaction, removes the topmost via from the  response and forwards it to the address indicated in the next Via header.";
            extension "Reference: 16.7 [1], 16.11 [1]";
            extension "FailCause: No/Invalid Success (200 OK) response received at UA1 OR No/Invalid Invite_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR  No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RS_V_006(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            
            vl_ptc.start (
              ptc_Resp_Forwarded(
                v_CallId,
                Response_100_r_3(v_CallId, ?, Via_l1(?)),
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForRespOutOfDialog(loc_CSeq_s);
            SIPP.send (
              Response_100_s_1(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingRespPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, on receipt of a Trying (100 Trying) provisional  response that does not match to an existing client transaction, removes the  topmost via from the response and forwards it to the address indicated  in the next Via header.";
            extension "Reference: 16.7 [1], 16.11 [1] ";
            extension "FailCause: No/Invalid Trying (100 Trying) provisional response received at UA2";
          }
          testcase SIP_CC_PR_MP_RS_V_007(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Resp_Forwarded(
                v_CallId,
                Response_180_r_2(v_CallId, ?, Via_l1(?)),
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForRespOutOfDialog(loc_CSeq_s);
            SIPP.send (
              Response_180_s_1(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingRespPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, on receipt of a Ringing  (180 Ringing)  provisional response that does not match to an existing client transaction,  removes the topmost via from the response and forwards it to the address  indicated in the next Via header.";
            extension "Reference: 16.7 [1], 16.11 [1] ";
            extension "FailCause: No/Invalid Trying (100 Trying) provisional response received at UA2";
          }
          testcase SIP_CC_PR_MP_RS_V_008(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Resp_Forwarded(
                v_CallId,
                Response_302_r_2(v_CallId, ?, Via_l1(?)),
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForRespOutOfDialog(loc_CSeq_s);
            SIPP.send (
              Response_302_s_1(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingRespPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a Moved Temporarily (302 Moved  Temporarily) Redirection response that does not match to an existing client  transaction, removes the topmost via from the response and forwards it to  the address indicated in the next Via header.";
            extension "Reference: 16.7 [1], 16.11 [1]";
            extension "FailCause: No/Invalid Moved Temporarily (302 Moved  Temporarily) Redirection response received at UA2";
          }
          testcase SIP_CC_PR_MP_RS_V_009(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Resp_Forwarded(
                v_CallId,
                Response_410_r_2(v_CallId, ?, Via_l1(?)),
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForRespOutOfDialog(loc_CSeq_s);
            SIPP.send (
              Response_410_s_1(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingRespPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a Gone (410 Gone) Request failure  response that does not match to an existing client transaction, removes the  topmost via from the response and forwards it to the address indicated in  the next Via header.";
            extension "Reference: 16.7 [1], 16.11 [1]";
            extension "FailCause: No/Invalid Gone (410 Gone) Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RS_V_010(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Resp_Forwarded(
                v_CallId,
                Response_500_r_2(v_CallId, ?, Via_l1(?)),
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForRespOutOfDialog(loc_CSeq_s);
            SIPP.send (
              Response_500_s_1(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingRespPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a Server Internal Error (500 Server  Internal Error) server failure response that does not match to an existing  client transaction, removes the topmost via from the response and forwards  it to the address indicated in the next Via header.";
            extension "Reference: 16.7 [1], 16.11 [1]";
            extension "FailCause: No/Invalid Server Internal Error (500 Server  Internal Error) server response received at UA2";
          }
          testcase SIP_CC_PR_MP_RS_V_011(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            
            vl_ptc.start (
              ptc_Resp_Forwarded(
                v_CallId,
                Response_603_r_2(v_CallId, ?, Via_l1(?)),
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersForRespOutOfDialog(loc_CSeq_s);
            SIPP.send (
              Response_603_s_1(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingRespPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of a Decline (603 Decline) Global  failure response that does not match to an existing client transaction,  removes the topmost via from the response and forwards it to the address  indicated in the next Via header.";
            extension "Reference: 16.7 [1], 16.11 [1]";
            extension "FailCause: No/Invalid Decline (603 Decline) Global response received at UA2";
          }
          testcase SIP_CC_PR_MP_RS_V_012(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Answer_the_Call_with_1XX_200(
                180,
                "Ringing",
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRResponse(
              Response_180_r_2(v_CallId, v_CSeq, Via_l2),
              loc_CSeq_s);
            awaitingPRInvite200OK(
              Response_INVITE_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            send200OKACK(loc_CSeq_s);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT having already proxy an INVITE, on receipt of a  Ringing  (180 Ringing) provisional response matching to an existing client  transaction, removes the topmost via from the response and forwards it to  the address indicated in the next Via header.";
            extension "Reference: 16.7 item 5 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2 OR No/Invalid Ringing (180 Ringing) response received at UA1 OR No/Invalid Success (200 OK) response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_013(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Reject_the_Call_withFinal(
                302,
                "Moved Temporarily",
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_302_r_2(v_CallId, v_CSeq, Via_l2),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT having already proxy an INVITE, on receipt of a  Moved Temporarily (302 Moved Temporarily) Redirection response that matches   to an existing client transaction, removes the topmost via from the response  and forwards it to the address indicated in the next Via header.";
            extension "Reference: 16.7 item 5 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2 OR No/Invalid Moved Temporarily (302 Moved Temporarily) Redirection received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_014(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Reject_the_Call_withFinal(
                410,
                "Gone",
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_410_r_2(v_CallId, v_CSeq, Via_l2),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT having already proxy an INVITE, on receipt of a Gone (410 Gone) Request failure response matching to an existing client transacti on, removes the topmost via from the response and forwards it to the address ind icated in the next Via header.";
            extension "Reference: 16.7 item 5 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2 OR No/Invalid Gone (410 Gone) Request received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_015(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Reject_the_Call_withFinal(
                500,
                "Server Internal Error",
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_500_r_2(v_CallId, v_CSeq, Via_l2),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT having already proxy an INVITE, on receipt of  a Server Internal Error (500 Server Internal Error) server failure response  matching to an existing client transaction, removes the topmost via from  the response and forwards it to the address indicated in the next Via header.";
            extension "Reference: 16.7 item 5 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2 OR No/Invalid Server Internal Error (500 Server Internal Error) response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_016(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Reject_the_Call_withFinal(
                503,
                "Service Unavailable",
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_500_r_0(v_CallId, v_CSeq),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT having already proxy an INVITE, on receipt of a  Service Unavailable (503 Service Unavailable) server failure response matching  to an existing client transaction, generates a Server Internal Error  (500 Server Internal Error) server failure response, and forwards it.";
            extension "Reference: 16.7 item 5 and 6 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2 OR No/Invalid Server Internal Error (500 Server Internal Error) response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_017(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Reject_the_Call_withFinal(
                603,
                "Decline",
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_603_r_2(v_CallId, v_CSeq, Via_l2),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT having already proxy an INVITE, on receipt of a  Decline (603 Decline) Global failure response matching to an existing client  transaction, removes the topmost via from the response and forwards it to the  address indicated in the next Via header.";
            extension "Reference: 16.7 item 5 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2 OR No/Invalid Decline (603 Decline) response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_018(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                302,
                "Moved Temporarily",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                200,
                "OK",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInvite200OK(
              Response_INVITE_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            send200OKACK(loc_CSeq_s);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  having received a 302 response from one client transaction, on receipt  of a 200 response from the other client transaction, forwards the 200 response. ";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid Success (200 OK) response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_019(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                302,
                "Moved Temporarily",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                302,
                "Moved Temporarily",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_302_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  having received a 302 response from one client transaction, on receipt  of a 302 response from the other client transaction, forwards the 302  response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 302 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_020(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                302,
                "Moved Temporarily",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                486,
                "User Busy",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_302_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations  and having received a 302 response from one client transaction,  on receipt of a 486 response from the other client transaction, forwards the 302 response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 302 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_021(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                302,
                "Moved Temporarily",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                500,
                "Server Internal Error",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_302_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations  and having received a 302 response from one client transaction, on  receipt of a 500 response from the other client transaction, forwards  the 302 response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 302 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_022(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                302,
                "Moved Temporarily",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                603,
                "Decline",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_603_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  having received a 302 response from one client transaction, on receipt  of a 603 response from the other client transaction, forwards the 603 response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 603 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_023(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                486,
                "User Busy",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                200,
                "OK",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInvite200OK(
              Response_INVITE_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            send200OKACK(loc_CSeq_s);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations  and having received a 486 response from one client transaction,  on receipt of a 200 response from the other client transaction,  forwards the 200 response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid Success (200 OK) response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_024(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                486,
                "User Busy",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                302,
                "Moved Temporarily",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_302_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  having received a 486 response from one client transaction, on receipt  of a 302 response from the other client transaction, forwards the 302 response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 302 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_025(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                486,
                "User Busy",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                486,
                "User Busy",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_486_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations  and having received a 486 response from one client transaction,  on receipt of a 486 response from the other client transaction, forwards  the 486 response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 486 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_026(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                486,
                "User Busy",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                401,
                "Unauthorized",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_401_r_0(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations  and having received a 486 response from one client transaction,  on receipt of a 401 response from the other client transaction,  forwards the 401 response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 401 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_027(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                486,
                "User Busy",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                407,
                "Proxy Authentication Required",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_407_r_0(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations  and having received a 486 response from one client transaction,  on receipt of a 407 response from the other client transaction,  forwards the 407 response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 407 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_028(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                486,
                "User Busy",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                415,
                "Unsupported Media Type",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_415_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations  and having received a 486 response from one client transaction,  on receipt of a 415 response from the other client transaction,  forwards the 415 response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 415 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_029(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                486,
                "User Busy",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                420,
                "Bad Extension",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_420_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations  and having received a 486 response from one client transaction,  on receipt of a 420 response from the other client transaction,  forwards the 420 response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 420 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_030(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                486,
                "User Busy",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                484,
                "Address Incomplete",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_484_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations  and having received a 486 response from one client transaction,  on receipt of a 484 response from the other client transaction,  forwards the 484 response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 484 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_031(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                486,
                "User Busy",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                500,
                "Server Internal Error",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_486_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations  and having received a 486 response from one client transaction,  on receipt of a 500 response from the other client transaction,  forwards the 486 response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 486 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_032(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                486,
                "User Busy",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                603,
                "Decline",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_603_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  havng received a 486 response from one client transaction, on receipt  of a 603 response from the other client transaction, forwards the 603 response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 603 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_033(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                401,
                "Unauthorized",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                401,
                "Unauthorized",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_401_r_2(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations  and having received a 401 response from one client transaction,  on receipt of a 401 response from the other client transaction,  forwards the 401 response including all WWW-Authenticate and  Proxy-Authenticate headers collected from the received responses.";
            extension "Reference: 16.3 item 7 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 401 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_034(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                407,
                "Proxy Authentication Required",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                407,
                "Proxy Authentication Required",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_407_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  having received a 407 response from one client transaction, on receipt  of a 407 response from the other client transaction, forwards the 407 response including all Proxy-Authenticate headers collected from the received responses.";
            extension "Reference: 16.3 item 7 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 407 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_035(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                500,
                "Server Internal Error",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                200,
                "OK",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInvite200OK(
              Response_INVITE_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            send200OKACK(loc_CSeq_s);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  having received a 500 response from one client transaction, on receipt  of a 200 response from the other client transaction, forwards the 200  response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid Success (200 OK) response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_036(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                500,
                "Server Internal Error",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                302,
                "Moved Temporarily",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_302_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  having received a 500 response from one client transaction, on receipt  of a 302 response from the other client transaction, forwards the 302 response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 302 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_037(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                500,
                "Server Internal Error",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                486,
                "User Busy",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_486_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  having received a 500 response from one client transaction, on receipt  of a 486 response from the other client transaction, forwards the 486 response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 486 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_038(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                503,
                "Service Unavailable",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                500,
                "Server Internal Error",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_500_r_0(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  having received a 503 response from one client transaction, on receipt  of a 500 response from the other client transaction, forwards the 500 response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 500 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_039(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                503,
                "Service Unavailable",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                503,
                "Service Unavailable",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_500_r_0(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  having received a 503 response from one client transaction, on receipt  of a 503 response from the other client transaction, forwards the 503 response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 500 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_040(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                300,
                "Multiple Choices",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                603,
                "Decline",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_603_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  having received a 300 response from one client transaction, on receipt of a 603  response from the other client transaction, forwards the 603 response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 603 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_041(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                302,
                "Moved Temporarily",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_Answer_the_Call_with_1XX_486(
                180,
                "Ringing",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRResponse(
              Response_180_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            awaitingPRInviteNon200OK(
              Response_NonOK_Final_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  having received a 302 response from one client transaction, on receipt of  a 180 response from the other client transaction, forwards the 180 response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 180 response received at UA1 OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_042(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                486,
                "User Busy",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_Answer_the_Call_with_1XX_486(
                180,
                "Ringing",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRResponse(
              Response_180_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            awaitingPRInviteNon200OK(
              Response_NonOK_Final_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  having received a 486 response from one client transaction, on receipt of  a 180 response from the other client transaction, forwards the 180 response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 180 response received at UA1 OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_043(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                500,
                "Server Internal Error",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_Answer_the_Call_with_1XX_486(
                180,
                "Ringing",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRResponse(
              Response_180_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            awaitingPRInviteNon200OK(
              Response_NonOK_Final_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  having received a 500 response from one client transaction, on receipt  of a 180 response from the other client transaction, forwards the 180 response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 180 response received at UA1 OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_044(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_Answer_the_Call_with_1XX_486(
                180,
                "Ringing",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_Answer_the_Call_with_1XX_486(
                182,
                "Queued",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRResponse(
              Response_182_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            awaitingPRInviteNon200OK(
              Response_NonOK_Final_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  having received (and forwarded) a 180 response from one client transaction,   on receipt of a 182 response from the other client transaction, forwards the  182 response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 182 response received at UA1 OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_045(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_Answer_the_Call_with_1XX_486(
                180,
                "Ringing",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                200,
                "OK",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInvite200OK(
              Response_INVITE_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            send200OKACK(loc_CSeq_s);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations  and having received (and forwarded) a 180 response from one client  transaction, on receipt of a 200 response from the other client  transaction, forwards the 200 response.";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 200 response received at UA1 OR No/Invalid BYE_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RS_V_046(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_Check_Cancel(
                180,
                "Ringing",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_Coordinate_FinalAnswer(
                200,
                "OK",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRResponse(
              Response_180_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpB.send (CM_Send_Rsp);
            awaitingPRInvite200OK(
              Response_INVITE_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            send200OKACK(loc_CSeq_s);
            synchroniseCheck();
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  having received (and forwarded) a 180 response from one client transaction,   on receipt of a 200 response from the other client transaction, sends a  CANCEL request to the first client transaction with the same Call-ID, From header , To header, Request-URI, CSeq number as in the previous INVITE, with a single  Via header same as topmost Via of the previous INVITE and the CSeq method set  to CANCEL.";
            extension "Reference: 16.7[1] item 10";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 180 response received at UA1 OR No/Invalid CANCEL_Request received at UA2";
          }
          testcase SIP_CC_PR_MP_RS_V_047(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_Answer_the_Call_with_1XX(
                180,
                "Ringing",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                302,
                "Moved Temporarily",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRResponse(
              Response_180_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            checkNoMessage(PX_TRespRetention);
            awaitingPRInviteNon200OK(
              Response_302_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  having received (and forwarded) a 180 response from one client transaction, on  receipt of a 302 response from the other client transaction, does not forward  the 302 response immediately";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 180 response received at UA1 OR No/Invalid 302 response received at UA1 after 180 response received at UA1 OR 302 response received at UA1 before 180 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_048(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_Answer_the_Call_with_1XX(
                180,
                "Ringing",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                486,
                "Busy Here",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRResponse(
              Response_180_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            checkNoMessage(PX_TRespRetention);
            awaitingPRInviteNon200OK(
              Response_486_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  having received (and forwarded) a 180 response from one client transaction,   on receipt of a 486 response from the other client transaction, does not forward the 486 response immediately";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 180 response received at UA1 OR No/Invalid 486 response received at UA1 after 180 response received at UA1 OR 486 response received at UA1 before 180 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_049(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_Answer_the_Call_with_1XX(
                180,
                "Ringing",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_FinalAnswer(
                500,
                "Server Internal Error",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRResponse(
              Response_180_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            checkNoMessage(PX_TRespRetention);
            awaitingPRInviteNon200OK(
              Response_500_r_0(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  having received (and forwarded) a 180 response from one client transaction, on receipt of a 500 response from the other client transaction, does not forward the 500 response immediately";
            extension "Reference: 16.7[1] item 6";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid 180 response received at UA1 OR No/Invalid 500 response received at UA1 after 180 response received at UA1 OR 500 response received at UA1 before 180 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_050(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_Check_Cancel(
                180,
                "Ringing",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_Coordinate_FinalAnswer(
                603,
                "Decline",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRResponse(
              Response_180_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpB.send (CM_Send_Rsp);
            awaitingPRInviteNon200OK(
              Response_NonOK_Final_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            synchroniseCheck();
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  having received (and forwarded) a 180 response from one client transaction, on  receipt of a 603 response from the other client transaction, sends a CANCEL  request to the first client transaction with the same Call-ID, From header, To  header, Request-URI, CSeq number as in the previous INVITE, with a single Via   header same as topmost Via of the previous INVITE and the CSeq method set to  CANCEL.";
            extension "Reference: 16.7[1] item 10";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid CANCEL_Request received at UA2 OR No/Invalid 180 response received at UA1 OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_051(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                200,
                "OK",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_Check_Cancel(
                180,
                "Ringing",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            
            awaitingPRInvite200OK(
              Response_INVITE_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpB.send (CM_Send_Rsp);
            send200OKACK(loc_CSeq_s);
            synchronisePtc2Check();
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            awaitingPRResponse2(
              Response_200_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  having received (and forwarded) a 200 response from one client transaction,   on receipt of a 180 response from the other client transaction, sends a CANCEL  request to that client transaction with the same Call-ID, From header, To header,  Request-URI, CSeq number as in the previous INVITE, with a single Via header   same as topmost Via of the previous INVITE and the CSeq method set to CANCEL.";
            extension "Reference: 16.7[1] item 10";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid CANCEL_Request received at UA2 OR No/Invalid 180 response received at UA1 OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_052(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                603,
                "Decline",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_Check_Cancel(
                180,
                "Ringing",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNon200OK(
              Response_603_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpB.send (CM_Send_Rsp);
            synchronisePtc2Check();
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  having received (and forwarded) a 603 response from one client transaction, on  receipt of a 180 response from the other client transaction, sends a CANCEL  request to that client transaction with the same Call-ID, From header, To header,  Request-URI, CSeq number as in the previous INVITE, with a single Via header   same as topmost Via of the previous INVITE and the CSeq method set to CANCEL.";
            extension "Reference: 16.7[1] item 10";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid CANCEL_Request received at UA2 OR No/Invalid 180 response received at UA1 OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_MP_RS_V_053(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s,
            CSeq loc_CSeq_ptc2_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc1;
            var SipComponent vl_ptc2;
            
            vl_ptc1 := SipComponent.create;
            vl_ptc2 := SipComponent.create;
            v_Default := activate (defaultCCPR2());
            initConfig2(mtc, vl_ptc1, vl_ptc2, system);
            vl_ptc1.start (
              ptc1_FinalAnswer(
                603,
                "Decline",
                loc_CSeq_ptc_s,
                v_CallId));
            vl_ptc2.start (
              ptc2_CC_PR_MP_RS_V_053(
                487,
                "Request Terminated",
                loc_CSeq_ptc2_s,
                v_CallId));
            initMTC2(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRResponse(
              Response_180_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            awaitingPRInviteNon200OK(
              Response_603_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            cpA.send (CM_Check_Done);
            cpB.send (CM_Check_Done);
            wait_end_Two_ptc(vl_ptc1, vl_ptc2);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, after forking an INVITE to two locations and  having received a 603 response from one client transaction,  and having sent a CANCEL to the second client transaction, on receipt of a  487 response from the other client transaction, forwards the 603 response.";
            extension "Reference: 16.7[1] item 10, 16.7[1] item 5";
            extension "FailCause: No/Invalid INVITE_Request received at UA2/UA3 OR No/Invalid CANCEL_Request received at UA2 OR No/Invalid 180 response received at UA1 OR No/Invalid 603 response received at UA1";
          }
        }
      }
    }
    group Transaction {
      group Client {
        group ValidBehaviour {
          testcase SIP_CC_PR_TR_CL_V_001(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Check_Cancel(
                v_CallId,
                loc_CSeq_s,
                v_RequestUri));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRResponse(
              Response_183_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            loc_CSeq_s.method := "CANCEL";
            SIPP.send (
              CANCEL_Request_s_1(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via)) to v_sent_label;
            awaitingPRCANCELPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, on receipt of a CANCEL at server side matching  to a response context and the related client transaction is in the INVITE  Proceeding state, sends a CANCEL from the related pending client transaction  with the Request-URI, Call-ID, To, From headers, CSeq number identical as in  the INVITE request to be cancelled and the CSeq method set to CANCEL.";
            extension "Reference: 16.10 [1], 9.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid CANCEL_Request received at UA2 OR No/Invalid 183 response received at UA1";
          }
          testcase SIP_CC_PR_TR_CL_V_002(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (ptc_CC_PR_TR_CL_V_002(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            
            awaitingPRResponse(
              Response_183_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            loc_CSeq_s.method := "CANCEL";
            SIPP.send (
              CANCEL_Request_s_1(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via)) to v_sent_label;
            awaitingPRCANCELPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, on receipt of a CANCEL at server side matching  to a response context and the related client transaction is in the INVITE  Proceeding state, sends a CANCEL from the related pending client transaction  with the Via header identical as in topmost Via header in the INVITE request  to be cancelled.";
            extension "Reference: 16.10 [1], 9.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid CANCEL_Request received at UA2 OR No/Invalid 183 response received at UA1";
          }
          testcase SIP_CC_PR_TR_CL_V_003(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (ptc_CC_PR_TR_CL_V_003(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
              TResp.start (PX_TRESP);
              alt {
                [] ALTSTEP_407(loc_CSeq_s) {
                  TResp.stop;
                  TResp.start (PX_TRESP);
                }
              }
            };
            
            loc_CSeq_s.method := "CANCEL";
            SIPP.send (
              CANCEL_Request_s_1(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via)) to v_sent_label;
            awaitingPRCANCELPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, on receipt of a CANCEL at server side matching  to a response context, but the related client transaction is in the INVITE  Calling state, does not send a CANCEL.";
            extension "Reference: 16.10 [1], 9.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR A CANCEL_Request received at UA2";
          }
          testcase SIP_CC_PR_TR_CL_V_004(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (ptc_CC_PR_TR_CL_V_004(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            loc_CSeq_s.method := "CANCEL";
            SIPP.send (
              CANCEL_Request_s_1(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via)) to v_sent_label;
            awaitingPRCANCELPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, having received a CANCEL request matching to  a response context while the related client transaction is in the INVITE  Calling state, on receipt of a provisional response, sends a CANCEL from  the related client transaction.";
            extension "Reference: 16.10 [1], 9.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR A CANCEL_Request received at UA2 before 183 response was send OR No/Invalid CANCEL_Request received at UA2 after 183 response was send";
          }
          testcase SIP_CC_PR_TR_CL_V_005(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (ptc_CC_PR_TR_CL_V_005(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            loc_CSeq_s.method := "CANCEL";
            SIPP.send (
              CANCEL_Request_s_1(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via)) to v_sent_label;
            cpA.send (CM_Send_Rsp);
            awaitingPRCANCELPtcCheck(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, having received a CANCEL request matching to  a response context while the related client transaction is in the INVITE  Calling state, on receipt of a final response, does not send a CANCEL  from the related client transaction.";
            extension "Reference: 16.10 [1], 9.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR A CANCEL_Request received at UA2 before 486 final response was send OR No/Invalid CANCEL_Request received at UA2 after 486 final response was send";
          }
          testcase SIP_CC_PR_TR_CL_V_006(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_TR_Check_The_ACK(
                302,
                "Moved Temporarily",
                loc_CSeq_s,
                v_CallId,
                v_RequestUri));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNoFinal(loc_CSeq_s);
            synchroniseCheck();
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in the INVITE Client Calling state on receipt  of a Moved Temporarily (302 Moved Temporarily) Redirection response matching  to an existing client transaction, responses with an ACK request, with the same  Call-ID, From header, Request-URI, CSeq number as in the previous INVITE, with  a single Via header same as topmost Via of the previous INVITE and the To header  the same value as the To header in the received response and the CSeq method set  to ACK.";
            extension "Reference: 16.7[1] , 17.1.1.3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_TR_CL_V_007(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_TR_Check_The_ACK(
                410,
                "Gone",
                loc_CSeq_s,
                v_CallId,
                v_RequestUri));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRInviteNoFinal(loc_CSeq_s);
            synchroniseCheck();
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in the INVITE Client Calling state on receipt of  a Gone (410 Gone) Request failure response matching to an existing client  transaction, responses with an ACK request, with the same Call-ID, From header,  Request-URI, CSeq number as in the previous INVITE, with a single Via header  same as topmost Via of the previous INVITE and the To header the same value  as the To header in the received response and the CSeq method set to ACK.";
            extension "Reference: 16.7[1] , 17.1.1.3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_TR_CL_V_008(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_TR_Check_The_ACK(
                503,
                "Service Unavailable",
                loc_CSeq_s,
                v_CallId,
                v_RequestUri));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            
            awaitingPRInviteNoFinal(loc_CSeq_s);
            synchroniseCheck();
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in the INVITE Client Calling state on receipt of  a Service Unavailable (503 Service Unavailable) server failure response  matching to an existing client transaction, responses with an ACK request,  with the same Call-ID, From header, Request-URI, CSeq number as in the previous  INVITE, with a single Via header same as topmost Via of the previous INVITE and  the To header the same value as the To header in the received response and the  CSeq method set to ACK.";
            extension "Reference: 16.7[1] , 17.1.1.3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_TR_CL_V_009(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_TR_Check_The_ACK(
                603,
                "Decline",
                loc_CSeq_s,
                v_CallId,
                v_RequestUri));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            synchroniseInitPtc();
            awaitingPRInviteNoFinal(loc_CSeq_s);
            synchroniseCheck();
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in the INVITE Client Calling state on receipt of  a Decline (603 Decline) Global failure response matching to an existing client  transaction, responses with an ACK request, with the same Call-ID, From header,  Request-URI, CSeq number as in the previous INVITE, with a single Via header  same as topmost Via of the previous INVITE and the To header the same value as  the To header in the received response and the CSeq method set to ACK.";
            extension "Reference: 16.7[1] , 17.1.1.3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_TR_CL_V_010(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Answer_the_Call_with_1XX(
                100,
                "Trying",
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            synchroniseInitPtc();
            awaitingPRInvite200OK(
              Response_INVITE_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            send200OKACK(loc_CSeq_s);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, when an INVITE client transaction is in the  Calling state, on receipt of a Trying (100 Trying) response enters in the  Proceeding state.";
            extension "Reference: 17.1.1.2 [1], figure 5 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid BYE_Request received at UA2 OR No/Invalid Success (200 OK) response received at UA1";
          }
          testcase SIP_CC_PR_TR_CL_V_011(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Answer_the_Call_with_1XX(
                183,
                "Session Progress",
                loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            synchroniseInitPtc();
            awaitingPRInvite200OK(
              Response_INVITE_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            send200OKACK(loc_CSeq_s);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, when an INVITE client transaction is in the  Calling state, on receipt of a Session Progress (183 Session Progress)   response enters in the Proceeding state.";
            extension "Reference: 17.1.1.2 [1], figure 5 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid BYE_Request received at UA2 OR No/Invalid Success (200 OK) response received at UA1";
          }
          testcase SIP_CC_PR_TR_CL_V_012(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
          // Ref: 22.2
          // Purpose: Ensure that the IUT on receipt of an INVITE request not including a Proxy-Authorization header
          // field, sends a Proxy Authentication Required (407 Proxy Authentication Required) response,
          // containing a Proxy-Authenticate header.
          {
            var SipComponent vl_ptc := SipComponent.create;
            
            v_Default := activate (defaultCCPR());
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (initPTC(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            
            TAck.start (PX_TACK);
            alt {
              [] SIPP.receive (
                Response_407_r_1(v_CallId, loc_CSeq_s)) {
                setverdict (pass);
                TAck.stop;
              }
              [(not (PC_STATELESS))] SIPP.receive (
                Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
                repeat;
              }
              [] SIPP.receive {
                all timer.stop;
                setverdict (fail);
              }
              [] TAck.timeout {
                setverdict (fail);
              }
            }
            sendACK(loc_CSeq_s);
          }
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request not including a Proxy-Authorization header field, sends a Proxy Authentication Required (407 Proxy Authentication Required) response, containing a Proxy-Authenticate header.";
            extension "Reference: 22.2 [1]";
          }
          testcase SIP_CC_PR_TR_CL_V_013(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
          // Ref: 22.2
          // Purpose:  Ensure that the IUT on receipt of an INVITE request not including a Proxy-Authorization header
          // field, sends a Proxy Authentication Required (407 Proxy Authentication Required) response,
          // containing a Proxy-Authenticate header including proper value for realm and nonce HTTP
          // parameters.
          {
            var Response vl_Response;
            var charstring vl_nonce;
            var charstring vl_realm;
            var CommaParam_List vl_challenge;
            var SipComponent vl_ptc := SipComponent.create;
            
            v_Default := activate (defaultCCPR());
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (initPTC(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            
            TAck.start (PX_TACK);
            alt {
              [] SIPP.receive (
                Response_407_r_1(
                  v_CallId,
                  loc_CSeq_s)) -> value vl_Response {
                // check if values for realm and nonce are included
                if (ischosen (vl_Response
                    .msgHeader
                    .wwwAuthenticate
                    .challenge[0]
                    .digestCln)) {
                  vl_challenge :=
                  vl_Response
                  .msgHeader
                  .wwwAuthenticate
                  .challenge[0]
                  .digestCln;
                  vl_nonce :=
                  extractParamValueFromChallenge(
                    vl_challenge,
                    "nonce");
                  if (vl_nonce == "") {
                    setverdict (fail);
                    stop;
                  }
                  vl_realm :=
                  extractParamValueFromChallenge(
                    vl_challenge,
                    "realm");
                  if (vl_realm == "") {
                    setverdict (fail);
                  }
                } else {
                  log ("No scheme in www-Authenticate header !!");
                  setverdict (inconc);
                  stop;
                }
                setverdict (pass);
                TAck.stop;
              }
              [(not (PC_STATELESS))] SIPP.receive (
                Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
                repeat;
              }
              [] SIPP.receive {
                all timer.stop;
                setverdict (fail);
              }
              [] TAck.timeout {
                setverdict (fail);
              }
            }
            sendACK(loc_CSeq_s);
            
          }
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request not including a Proxy-Authorization header field, sends a Proxy Authentication Required (407 Proxy Authentication Required) response, containing a Proxy-Authenticate header including proper value for realm and nonce HTTP parameters.";
            extension "Reference: 22.2 [1]";
          }
          testcase SIP_CC_PR_TR_CL_V_014(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
          // Ref: 22.2
          // Purpose:  Ensure that the IUT having sent a Proxy Authentication Required (407 Proxy Authentication
          // Required) response to an INVITE request, on receipt of an INVITE request including a valid
          // Proxy-Authenticate header field, forwards the INVITE.
          {
            var CommaParam_List vl_challenge;
            //var charstring vl_Credentials;
            var Credentials vl_Credentials;
            
            var Response vl_Response;
            var SipComponent vl_ptc;
            var Request vl_Request;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_INVITE_Forwarded(
                INVITE_Request_r_1,
                v_CallId,
                loc_CSeq_ptc_s,
                v_cancel_sent,
                v_bye_sent));
            
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            
            vl_Request :=
            valueof(
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via));
            TAck.start (PX_TACK);
            alt {
              [] SIPP.receive (
                Response_407_r_1(
                  v_CallId,
                  loc_CSeq_s)) -> value vl_Response {
                setverdict (pass);
                TAck.stop;
                // resent the REGISTER message with Proxyauthorization header include
                // Extract challenge and calculate credentials for a response.
                if (ischosen (vl_Response
                    .msgHeader
                    .proxyAuthenticate
                    .challenge[0]
                    .digestCln)) {
                  vl_challenge :=
                  vl_Response
                  .msgHeader
                  .proxyAuthenticate
                  .challenge[0]
                  .digestCln;
                  vl_Credentials :=
                  calculateCredentials(
                    "INVITE",
                    vl_challenge,
                    PX_RFC2617_USERNAME,
                    PX_RFC2617_PASSWD);
                  // setverdict (fail);
                } else {
                  log ("No scheme in Proxy Authenticate header!!");
                  setverdict (inconc);
                  stop;
                }
                
                //send200OKACK(loc_CSeq_s);
                // Increment CSeq sequence number of and add the credentials
                // to the original saved REGEISTER message.
                loc_CSeq_s.method := "INVITE";
                loc_CSeq_s.seqNumber :=
                loc_CSeq_s.seqNumber + 1;
                vl_Request.msgHeader.cSeq.seqNumber :=
                loc_CSeq_s.seqNumber;
                vl_Request
                .msgHeader
                .proxyAuthorization
                .fieldName :=
                PROXY_AUTHORIZATION_E;
                vl_Request
                .msgHeader
                .proxyAuthorization
                .credentials :=
                vl_Credentials;
                
                // Re-send the saved REGISTER with Authorization header
                // included.
                SIPP.send (vl_Request) to v_sent_label;
              }
              [(not (PC_STATELESS))] SIPP.receive (
                Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
                repeat;
              }
              [] SIPP.receive {
                all timer.stop;
                setverdict (fail);
                stop;
              }
              [] TAck.timeout {
                setverdict (fail);
                stop;
              }
            }
            cpA.send (CM_Rsp_Rcved);
            TResp.start (PX_TRESP);
            alt {
              [] SIPP.receive (
                Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
                repeat;
              }
              [] SIPP.receive (
                Response_Final_r(v_CallId, loc_CSeq_s)) {
                TResp.stop;
                setverdict (pass);
              }
              [] TResp.timeout {
                setverdict (fail);
                cancelCall(
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_Cancel_To,
                  v_reqHostPort,
                  v_Via);
                stop;
              }
            }
          }
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT having sent a Proxy Authentication Required (407 Proxy Authentication Required) response to an INVITE request, on receipt of an INVITE request including a valid Proxy-Authenticate header field, forwards the INVITE.";
            extension "Reference: 22.2 [1]";
          }
        }
        group Timers {
          testcase SIP_CC_PR_TR_CL_TI_001(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_TR_CL_TI_001(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRInviteFinal(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: If an unreliable transport (UDP) is used, ensure that the IUT, when  an INVITE client transaction is in the Calling state repeats its INVITE request  on the timeout condition of timer A set with a value of T1.";
            extension "Reference: Annex A [1], 17.1.1.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid INVITE_Request received at UA2 after T1 expired OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_TR_CL_TI_002(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_TR_CL_TI_002(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRInviteFinal(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: If a reliable transport (TCP) is used, ensure that the IUT, when  an INVITE client transaction is in the Calling state does not repeat its  INVITE request on the timeout condition of timer A set with a value of T1.";
            extension "Reference: Annex A [1], 17.1.1.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR INVITE_Request received at UA2 after T1 expired OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_TR_CL_TI_003(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_TR_CL_TI_003(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            awaitingPRInviteFinal(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: If an unreliable transport (UDP) is used, ensure that the IUT, when  an INVITE client transaction is in the Calling state having already repeated   its INVITE wait for a timer A set with a value of 2*T1 before sending it again.";
            extension "Reference: Annex A [1], 17.1.1.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid INVITE_Request received at UA2 after T1 expired OR No/Invalid INVITE_Request received at UA2 after 2*T1 expired OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_TR_CL_TI_004(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_TR_CL_TI_004(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRInviteFinal(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: If an unreliable transport (UDP) is used, ensure that the IUT, when  an INVITE client transaction is in the Calling state retransmits its INVITE  request with intervals that double after each transmission.";
            extension "Reference: Annex A [1], 17.1.1.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 in a correct time slot OR INVITE_Request received at UA2 in a incorrect time slot OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_TR_CL_TI_005(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_TR_CL_TI_005(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRInviteFinal(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, when an INVITE client transaction is in the  Calling state, when timer B set to a value of 64*T1 expires, does not send  an ACK.";
            extension "Reference: Annex A [1], 17.1.1.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR ACK_Request received at UA2 after 64*T1";
          }
          testcase SIP_CC_PR_TR_CL_TI_006(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_TR_CL_TI_006(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRInviteFinal(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, when an INVITE client transaction is in the  Calling state, when timer B set to a value of 64*T1 expires, considers the  transaction terminated.";
            extension "Reference: Annex A [1], 17.1.1.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR Any message received at UA2 after 64*T1";
          }
          testcase SIP_CC_PR_TR_CL_TI_007(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_TR_CL_TI_007(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRInviteFinal(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, when an INVITE client transaction is in the  Proceeding state, does not repeat its INVITE request.";
            extension "Reference: Annex A [1], 17.1.1.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR Repeated INVITE_Request received at UA2 OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_TR_CL_TI_008(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_TR_CL_TI_008(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRInviteFinal(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: If an unreliable transport is used, ensure that the IUT, when an  INVITE client transaction is in the Completed state, on receipt of a final response that matches the transaction, repeats its ACK request until timer  D set to at least 32 second expires.";
            extension "Reference: Annex A [1], 17.1.1.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_TR_CL_TI_009(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_TR_CL_TI_009(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            awaitingPRInviteFinal(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: If a reliable transport is used, ensure that the IUT, when an INVITE  client transaction is in the Completed state, on receipt of a final response  that matches the transaction, does not repeats its ACK request.";
            extension "Reference: Annex A [1], 17.1.1.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR Repeated ACK_Request received at UA2 OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_TR_CL_TI_010(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_TR_CL_TI_010(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            
            TResp.start (60.0);
            alt {
              [] SIPP.receive (
                Response_NonOK_Final_r_1(
                  v_CallId,
                  loc_CSeq_s)) -> value vl_Response sender v_sent_label {
                TResp.stop;
                setverdict (pass);
                setHeadersOnReceiptOfResponse(
                  loc_CSeq_s,
                  vl_Response);
                repeat;
              }
              [] SIPP.receive (
                Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
                repeat;
              }
              [] SIPP.receive (Request: *) {
                repeat;
              }
              [] SIPP.receive (Response: *) {
                repeat;
              }
              [] cpA.receive (CM_Check_Done) {
                TGuard.stop;
                setverdict (pass);
                stop;
              }
              [] TResp.timeout {
                setverdict (fail);
                stop;
              }
            }
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: If an unreliable transport is used, ensure that the IUT, when an  INVITE client transaction is in the Completed state, on receipt of new final  responses with different Via branch parameter value, does not repeat its ACK  request until timer D set to at least 32 second expires.";
            extension "Reference: Annex A [1], 17.1.1.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR Repeated ACK_Request received at UA2 OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_TR_CL_TI_011(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_TR_CL_TI_011(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            synchroniseInitPtc();
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, when an INVITE client transaction has been in  the Terminated state, on receipt of a retransmitted Success (200 OK)  responses sends an ACK request until 64*T1 duration expires.";
            extension "Reference: Annex A [1], 13.2.2.4 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 within 64*T1 OR No/Invalid Success (200 OK) response received at UA1 OR No/Invalid BYE_Request response received at UA2";
            extension "InconcCause: Any message received instead of ACK_Request at UA2 within 64*T1 OR Any message received instead of BYE_Request at UA2";
          }
          testcase SIP_CC_PR_TR_CL_TI_012(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_TR_CL_TI_012(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: If an unreliable transport is used, ensure that the IUT, when a  BYE client transaction is in the Trying state having sent a BYE  request, repeats its request after timer E set to T1 value expires.";
            extension "Reference: Annex A [1], 17.1.2.2 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2 OR No/Invalid repeated BYE_Request received at UA2 in valid time slot OR Repeated BYE_Request received at UA2 in invalid time slot OR No/Invalid Success (200 OK) response received at UA1";
          }
          testcase SIP_CC_PR_TR_CL_TI_013(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_TR_CL_TI_013(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: If an unreliable transport is used, ensure that the IUT, when a  BYE client transaction is in the Trying state having sent twice  times a BYE request, repeats its request after timer E set to the  MIN(2*T1,T2) value expires.";
            extension "Reference: Annex A [1], 17.1.2.2 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2 OR No/Invalid repeated BYE_Request received at UA2 in valid time slot OR Repeated BYE_Request received at UA2 in invalid time slot OR No/Invalid Success (200 OK) response received at UA1";
          }
          testcase SIP_CC_PR_TR_CL_TI_014(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_TR_CL_TI_014(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: If an unreliable transport is used, ensure that the IUT, when a  BYE client transaction is in the Trying state having sent three times  a BYE request, repeats its request after timer E set to the MIN(4*T1,T2)  value expires.";
            extension "Reference: Annex A [1], 17.1.2.2 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2 OR No/Invalid repeated BYE_Request received at UA2 in valid time slot OR Repeated BYE_Request received at UA2 in invalid time slot OR No/Invalid Success (200 OK) response received at UA1";
          }
          testcase SIP_CC_PR_TR_CL_TI_015(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_TR_CL_TI_015(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: If an unreliable transport is used, ensure that the IUT, when a  BYE client transaction is in the Trying state does not repeat a BYE  request, after timer F set to 64*T1 expires.";
            extension "Reference: Annex A [1], 17.1.2.2 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2 OR Repeated BYE_Request received at UA2 OR No/Invalid Success (200 OK) response received at UA1";
          }
          testcase SIP_CC_PR_TR_CL_TI_016(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_Reject_the_Call_withFinal(
                486,
                "Busy Here",
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            v_CallId := vl_CallId;
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            awaitingPRResponse_100Resp(
              Response_100_r_1(vl_CallId, v_CSeq),
              loc_CSeq_s);
            awaitingPRInviteFinal(loc_CSeq_s);
            synchroniseCheckDone();
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request, sends a  provisional  (100 Trying) response.";
            extension "Reference: Annex A [1], 17.1.2.2 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid provisional (100 Trying) response received at UA1 OR No/Invalid 300..699  response received at UA1";
          }
          testcase SIP_CC_PR_TR_CL_TI_017(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_TR_CL_TI_017(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, when a BYE client transaction is in the Proceeding state and BYE request have been already repeated in this state, repeats its BYE request after timer E set to T2 value expires.";
            extension "Reference: Annex A [1], 17.1.2.2 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2 OR No/Invalid repeated BYE_Request received at UA2 in valid time slot OR Repeated BYE_Request received at UA2 in invalid time slot OR No/Invalid Success (200 OK) response received at UA1";
          }
          testcase SIP_CC_PR_TR_CL_TI_018(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_TR_CL_TI_018(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, when a BYE client transaction is in the Proceeding state, does not repeat a BYE request on an established dialog, after timer F set to 64*T1 expires.";
            extension "Reference: Annex A [1], 17.1.2.2 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2 OR Repeated BYE_Request received at UA2 OR No/Invalid Success (200 OK) response received at UA1";
          }
          testcase SIP_CC_PR_TR_CL_TI_019(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_CC_PR_TR_CL_TI_019(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_caller_From,
              v_caller_To,
              v_reqHostPort,
              v_Route);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, when a BYE client transaction is in the Trying state, considers the transaction terminated after 64*T1 duration expires without receiving any final response.";
            extension "Reference: Annex A [1], 17.1.2.2 [1], 9.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid BYE_Request received at UA2 OR Repeated BYE_Request received at UA2 OR No/Invalid Success (200 OK) response received at UA1";
          }
        }
      }
      group Server {
        group ValidBehaviour {
          testcase SIP_CC_PR_TR_SE_V_001(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersPtcInvite(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_Reject_the_Call_withFinal(
                486,
                "Busy Here",
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            v_CallId := vl_CallId;
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRResponse_100Resp(
              Response_100_r_1(vl_CallId, v_CSeq),
              loc_CSeq_s);
            awaitingPRInviteFinal(loc_CSeq_s);
            synchroniseCheckDone();
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT on receipt of an INVITE request, sends a provisional  (100 Trying) response.";
            extension "Reference: 16.2[1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid provisional (100 Trying) response received at UA1 OR No/Invalid 300..699  response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_002(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersPtcInvite(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_Reject_the_Call_withFinal(
                486,
                "Busy Here",
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            v_CallId := vl_CallId;
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRResponse_100Resp(
              Response_100_r_4(
                vl_CallId,
                v_CSeq,
                v_From,
                v_Via),
              loc_CSeq_s);
            awaitingPRInviteFinal(loc_CSeq_s);
            synchroniseCheckDone();
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, on receipt of an INVITE request, sends a  provisional  (100 Trying) response including the headers From, Call-Id,  CSeq and Via copied from from the INVITE message.";
            extension "Reference: 16.2[1], 8.2.6.2 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid provisional (100 Trying) response received at UA1 OR No/Invalid 300..699  response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_003(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersPtcInvite(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_Reject_the_Call_withFinal(
                486,
                "Busy Here",
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            v_CallId := vl_CallId;
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  vl_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRResponse_100Resp(
              Response_100_r_5(vl_CallId, v_CSeq, v_To),
              loc_CSeq_s);
            awaitingPRInviteFinal(loc_CSeq_s);
            synchroniseCheckDone();
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, on receipt of an INVITE request with no ""tag""  set on the To header, sends a provisional  (100 Trying) response including  the same URI and no tag in the To header.";
            extension "Reference: 16.2[1], 8.2.6.2 [1], 17.2.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid provisional (100 Trying) response received at UA1 OR No/Invalid 300..699  response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_004(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var SemicolonParam_List vl_params;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersPtcInvite(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_Reject_the_Call_withFinal(
                486,
                "Busy Here",
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            v_CallId := vl_CallId;
            vl_params := {
              {
                id := TAG_ID,
                paramValue := getRndTag()
              }
            };
            v_To.toParams := vl_params;
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRResponse_100Resp(
              Response_100_r_5(vl_CallId, v_CSeq, v_To),
              loc_CSeq_s);
            awaitingPRInviteFinal(loc_CSeq_s);
            synchroniseCheckDone();
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, on receipt of an INVITE request with a ""tag""  set on the To header, sends a provisional  (100 Trying) response including  the same URI and the same tag in the To header.";
            extension "Reference: 16.2[1], 8.2.6.2 [1], 17.2.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid provisional (100 Trying) response received at UA1 OR No/Invalid 300..699  response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_005(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var TimeValue vl_TimeValue := {
              majorDigit := getMajorDigit(),
              minorDigit := getMinorDigit()
            };
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersPtcInvite(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_Reject_the_Call_withFinal(
                486,
                "Busy Here",
                loc_CSeq_ptc_s,
                v_CallId));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            v_CallId := vl_CallId;
            SIPP.send (
              INVITE_Request_s_7(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via,
                vl_TimeValue)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_7(
                  v_RequestUri,
                  vl_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via,
                  vl_TimeValue));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingPRResponse_100Resp(
              Response_100_r_2(vl_CallId, v_CSeq),
              loc_CSeq_s);
            awaitingPRInviteFinal(loc_CSeq_s);
            synchroniseCheckDone();
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, on receipt of an INVITE request with a Timestamp  header, sends a provisional  (100 Trying) response with a Timestamp header.";
            extension "Reference: 16.2[1], 8.2.6.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid provisional (100 Trying) response received at UA1 OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_006(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersPtcInvite(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_Wait_Check_Invite_Proceeding_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            v_CallId := vl_CallId;
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingFirstAnyResp2(vl_Response, loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            repeatPRLastResponse(vl_Response, loc_CSeq_s);
            synchroniseCheckDone();
            awaitingPRInviteFinal(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in a server INVITE Proceeding state, on receipt of  an INVITE request, including a Via header set with the same branch parameter and  sent-by value in the topmost list value, repeats its last response.";
            extension "Reference: 17.2.1 [1], 17.2.3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid response received at UA1 OR No/Invalid repeat response received at UA1 OR No/Invalid 300..699  response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_007(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            var CallId vl_CallId;
            
            var Via vl_new_via;
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersPtcInvite(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_Wait_Check_Invite_Proceeding_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            v_CallId := vl_CallId;
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            
            awaitingFirstAnyResp2(vl_Response, loc_CSeq_s);
            vl_new_via := v_Via;
            vl_new_via := {
              fieldName := VIA_E,
              viaBody := { valueof(ViaBody_ETS_NoBranch)}
            };
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                vl_new_via)) to v_sent_label;
            repeatPRLastResponse(vl_Response, loc_CSeq_s);
            synchroniseCheckDone();
            awaitingPRInviteFinal(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in a server INVITE Proceeding state, on receipt of  an INVITE request, including a Via header set with no branch parameter but with  the Request-URI, To tag, From tag, Call-ID, CSeq and top Via header identical as  in the first INVITE request, repeats its last response.";
            extension "Reference: 17.2.1 [1], 17.2.3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid response received at UA1 OR No/Invalid repeat response received at UA1 OR No/Invalid 300..699  response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_008(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            var Via vl_new_via;
            var charstring vl_branch_val;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersPtcInvite(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_Wait_Check_Invite_Proceeding_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            v_CallId := vl_CallId;
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            
            awaitingFirstAnyResp2(vl_Response, loc_CSeq_s);
            vl_new_via := v_Via;
            vl_branch_val := getRndTag();
            vl_new_via := {
              fieldName := VIA_E,
              viaBody := {
                valueof(ViaBody_ETS_IPADDR(vl_branch_val))}
            };
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                vl_new_via)) to v_sent_label;
            repeatPRLastResponse(vl_Response, loc_CSeq_s);
            synchroniseCheckDone();
            awaitingPRInviteFinal(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in a server INVITE Proceeding state, on receipt of  an INVITE request, including a Via header set with a different branch parameter  without the magic cookie ""z9hG4bK"" but with the Request-URI, To tag, From tag,  Call-ID, CSeq and top Via header identical as in the first INVITE request,  repeats its last response.";
            extension "Reference: 17.2.1 [1], 17.2.3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid response received at UA1 OR No/Invalid repeat response received at UA1 OR No/Invalid 300..699  response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_009(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersPtcInvite(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_Wait_Check_Invite_Completed_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            v_CallId := vl_CallId;
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            
            awaitingFirstAnyFinalResp(vl_Response, loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            repeatPRLastResponse(vl_Response, loc_CSeq_s);
            awaitingPRInviteFinal(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in a server INVITE Completed state, on receipt  of an INVITE request, including a Via header set with the same branch parameter   and sent-by value in the topmost list value, repeats its last response.";
            extension "Reference: 17.2.1 [1], 17.2.3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid response received at UA1 OR No/Invalid repeat response received at UA1 OR No/Invalid 300..699  response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_010(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            var Via vl_new_via;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersPtcInvite(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_Wait_Check_Invite_Completed_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            v_CallId := vl_CallId;
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            
            awaitingFirstAnyFinalResp(vl_Response, loc_CSeq_s);
            vl_new_via := v_Via;
            vl_new_via := {
              fieldName := VIA_E,
              viaBody := { valueof(ViaBody_ETS_NoBranch)}
            };
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                vl_new_via)) to v_sent_label;
            repeatPRLastResponse(vl_Response, loc_CSeq_s);
            awaitingPRInviteFinal(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in a server INVITE Completed state, on receipt of  an INVITE request, including a Via header set with no branch parameter but  with the Request-URI, To tag, From tag, Call-ID, CSeq and top Via header  identical as in the first INVITE request, repeats its last response.";
            extension "Reference: 17.2.1 [1], 17.2.3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid response received at UA1 OR No/Invalid repeat response received at UA1 OR No/Invalid 300..699  response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_011(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            var Via vl_new_via;
            var charstring vl_branch_val;
            var CallId vl_CallId;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersPtcInvite(loc_CSeq_s);
            vl_CallId := v_CallId;
            vl_ptc.start (
              ptc_Wait_Check_Invite_Completed_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            v_CallId := vl_CallId;
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            
            awaitingFirstAnyFinalResp(vl_Response, loc_CSeq_s);
            vl_new_via := v_Via;
            vl_branch_val := getRndTag();
            vl_new_via := {
              fieldName := VIA_E,
              viaBody := {
                valueof(ViaBody_ETS_IPADDR(vl_branch_val))}
            };
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                vl_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                vl_new_via)) to v_sent_label;
            repeatPRLastResponse(vl_Response, loc_CSeq_s);
            awaitingPRInviteFinal(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in a server INVITE Completed state, on receipt of  an INVITE request, including a Via header set with a different branch  parameter without the magic cookie ""z9hG4bK"" but with the Request-URI, To tag,  From tag, Call-ID, CSeq and top Via header identical as in the first INVITE  request, repeats its last response.";
            extension "Reference: 17.2.1 [1], 17.2.3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid response received at UA1 OR No/Invalid repeat response received at UA1 OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_012(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Wait_Check_Bye_Proceeding_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            cpA.send (CM_Stop);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_reqHostPort,
              v_Route);
            awaitingFirstAnyResp(vl_Response, loc_CSeq_s);
            if (v_BOO_Route) {
              SIPP.send (
                BYE_Request_WithRoute_s_5(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via,
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                BYE_Request_s_5(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via)) to v_sent_label;
            }
            repeatPRLastResponse(vl_Response, loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in a server BYE Proceeding state, on receipt  of a BYE request, including a Via header set with the same branch parameter   and sent-by value in the topmost list value, repeats its last response.";
            extension "Reference: 17.2.2 [1], 17.2.3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid (repeat) BYE_Request received at UA2 OR No/Invalid Success (200 OK) response received at UA1 OR No/Invalid response received at UA1 OR No/Invalid repeat response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_013(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            var Via vl_new_via;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Wait_Check_Bye_Proceeding_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            cpA.send (CM_Stop);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_reqHostPort,
              v_Route);
            awaitingFirstAnyResp(vl_Response, loc_CSeq_s);
            vl_new_via := v_Via;
            vl_new_via := {
              fieldName := VIA_E,
              viaBody := { valueof(ViaBody_ETS_NoBranch)}
            };
            if (v_BOO_Route) {
              SIPP.send (
                BYE_Request_WithRoute_s_5(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  vl_new_via,
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                BYE_Request_s_5(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  vl_new_via)) to v_sent_label;
            }
            repeatPRLastResponse(vl_Response, loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in a server BYE Proceeding state, on receipt  of a BYE request, including a Via header set with no branch parameter  but with the Request-URI, To tag, From tag, Call-ID, CSeq and top Via  header identical as in the first BYE request, repeats its last response.";
            extension "Reference: 17.2.2 [1], 17.2.3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid (repeat) BYE_Request received at UA2 OR No/Invalid Success (200 OK) response received at UA1 OR No/Invalid response received at UA1 OR No/Invalid repeat response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_014(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            var Via vl_new_via;
            var charstring vl_branch_val;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Wait_Check_Bye_Proceeding_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            cpA.send (CM_Stop);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_reqHostPort,
              v_Route);
            awaitingFirstAnyResp(vl_Response, loc_CSeq_s);
            vl_new_via := v_Via;
            vl_branch_val := getRndTag();
            vl_new_via := {
              fieldName := VIA_E,
              viaBody := {
                valueof(ViaBody_ETS_IPADDR(vl_branch_val))}
            };
            if (v_BOO_Route) {
              SIPP.send (
                BYE_Request_WithRoute_s_5(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  vl_new_via,
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                BYE_Request_s_5(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  vl_new_via)) to v_sent_label;
            }
            repeatPRLastResponse(vl_Response, loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in a server BYE Proceeding state, on receipt  of a BYE request, including a Via header set with a different branch  parameter without the magic cookie ""z9hG4bK"" but with the Request-URI,  To tag, From tag, Call-ID, CSeq and top Via header identical as in the  first BYE request, repeats its last response.";
            extension "Reference: 17.2.2 [1], 17.2.3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid (repeat) BYE_Request received at UA2 OR No/Invalid Success (200 OK) response received at UA1 OR No/Invalid response received at UA1 OR No/Invalid repeat response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_015(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Wait_Check_Bye_Completed_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_reqHostPort,
              v_Route);
            awaitingFirstAnyResp(vl_Response, loc_CSeq_s);
            if (v_BOO_Route) {
              SIPP.send (
                BYE_Request_WithRoute_s_5(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via,
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                BYE_Request_s_5(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via)) to v_sent_label;
            }
            repeatPRLastResponse(vl_Response, loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in a server BYE Completed state, on receipt  of a BYE request, including a Via header set with the same branch parameter   and sent-by value in the topmost list value, repeats its last response.";
            extension "Reference: 17.2.2 [1], 17.2.3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid (repeat) BYE_Request received at UA2 OR No/Invalid Success (200 OK) response received at UA1 OR No/Invalid response received at UA1 OR No/Invalid repeat response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_016(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            var Via vl_new_via;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Wait_Check_Bye_Completed_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_reqHostPort,
              v_Route);
            awaitingFirstAnyResp(vl_Response, loc_CSeq_s);
            vl_new_via := v_Via;
            vl_new_via := {
              fieldName := VIA_E,
              viaBody := { valueof(ViaBody_ETS_NoBranch)}
            };
            if (v_BOO_Route) {
              SIPP.send (
                BYE_Request_WithRoute_s_5(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  vl_new_via,
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                BYE_Request_s_5(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  vl_new_via)) to v_sent_label;
            }
            repeatPRLastResponse(vl_Response, loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in a server BYE Completed state, on receipt  of a BYE request, including a Via header set with no branch parameter but  with the Request-URI, To tag, From tag, Call-ID, CSeq and top Via header  identical as in the first BYE request, repeats its last response.";
            extension "Reference: 17.2.2 [1], 17.2.3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid (repeat) BYE_Request received at UA2 OR No/Invalid Success (200 OK) response received at UA1 OR No/Invalid response received at UA1 OR No/Invalid repeat response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_017(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            var Via vl_new_via;
            var charstring vl_branch_val;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Wait_Check_Bye_Completed_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_reqHostPort,
              v_Route);
            awaitingFirstAnyResp(vl_Response, loc_CSeq_s);
            vl_new_via := v_Via;
            vl_branch_val := getRndTag();
            vl_new_via := {
              fieldName := VIA_E,
              viaBody := {
                valueof(ViaBody_ETS_IPADDR(vl_branch_val))}
            };
            if (v_BOO_Route) {
              SIPP.send (
                BYE_Request_WithRoute_s_5(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  vl_new_via,
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                BYE_Request_s_5(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  vl_new_via)) to v_sent_label;
            }
            repeatPRLastResponse(vl_Response, loc_CSeq_s);
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in a server BYE Completed state, on receipt  of a BYE request, including a Via header set with a different branch  parameter without the magic cookie ""z9hG4bK"" but with the Request-URI,  To tag, From tag, Call-ID, CSeq and top Via header identical as in the  first BYE request, repeats its last response.";
            extension "Reference: 17.2.2 [1], 17.2.3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid ACK_Request received at UA2 OR No/Invalid (repeat) BYE_Request received at UA2 OR No/Invalid Success (200 OK) response received at UA1 OR No/Invalid response received at UA1 OR No/Invalid repeat response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_018(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Wait_Check_Invite_Proceeding_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            
            awaitingFirstAnyResp2(vl_Response, loc_CSeq_s);
            v_CSeq := loc_CSeq_s;
            v_CSeq.method := "CANCEL";
            SIPP.send (
              CANCEL_Request_s_1(
                v_RequestUri,
                v_CallId,
                v_CSeq,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via)) to v_sent_label;
            awaitingPRResponse(
              Response_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            synchroniseCheckDone();
            awaitingPRInviteFinal(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in a server INVITE Proceeding state, on receipt  of a CANCEL, including a Via header set with the same branch parameter and  sent-by value with the topmost Via value INVITE to be cancelled, sends a  Success (200 Success) response to the CANCEL request.";
            extension "Reference: 16.10 [1], 9.2 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid Success (200 OK) response received at UA1 OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_019(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Wait_Check_Invite_Proceeding_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            
            awaitingFirstAnyResp2(vl_Response, loc_CSeq_s);
            v_CSeq := loc_CSeq_s;
            v_CSeq.method := "CANCEL";
            SIPP.send (
              CANCEL_Request_s_1(
                v_RequestUri,
                v_CallId,
                v_CSeq,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via)) to v_sent_label;
            awaitingPRResponse(
              Response_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            synchroniseCheckDone();
            awaitingPRInviteNon200OK(
              Response_487_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in a server INVITE Proceeding state, on receipt of  a CANCEL, including a Via header set with the same branch parameter and sent-by  value with the topmost Via value INVITE to be cancelled, answers to the original  INVITE request with a Request Terminated (487 Request Terminated) response.";
            extension "Reference: 9.2 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid Success (200 OK) response received at UA1 OR No/Invalid Request Terminated (487 Request Terminated) response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_020(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            var Via vl_new_via;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Wait_Check_Invite_Proceeding_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            
            awaitingFirstAnyResp2(vl_Response, loc_CSeq_s);
            v_CSeq := loc_CSeq_s;
            v_CSeq.method := "CANCEL";
            vl_new_via := v_Via;
            vl_new_via := {
              fieldName := VIA_E,
              viaBody := { valueof(ViaBody_ETS_NoBranch)}
            };
            SIPP.send (
              CANCEL_Request_s_1(
                v_RequestUri,
                v_CallId,
                v_CSeq,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                vl_new_via)) to v_sent_label;
            awaitingPRResponse(
              Response_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            synchroniseCheckDone();
            awaitingPRInviteFinal(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in a server INVITE Proceeding state, on receipt of  a CANCEL, including a Via header set with no branch parameter but with the  Request-URI, To tag, From tag, Call-ID, CSeq number and top Via header identical  as in the INVITE to be cancelled, sends a Success (200 Success) response to  the CANCEL request.";
            extension "Reference: 16.10 [1], 9.2 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid Success (200 OK) response received at UA1 OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_021(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            var Via vl_new_via;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Wait_Check_Invite_Proceeding_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            awaitingFirstAnyResp2(vl_Response, loc_CSeq_s);
            v_CSeq := loc_CSeq_s;
            v_CSeq.method := "CANCEL";
            vl_new_via := v_Via;
            vl_new_via := {
              fieldName := VIA_E,
              viaBody := { valueof(ViaBody_ETS_NoBranch)}
            };
            SIPP.send (
              CANCEL_Request_s_1(
                v_RequestUri,
                v_CallId,
                v_CSeq,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                vl_new_via)) to v_sent_label;
            awaitingPRResponse(
              Response_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            synchroniseCheckDone();
            awaitingPRInviteNon200OK(
              Response_487_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in a server INVITE Proceeding state, on receipt  of a CANCEL, including a Via header set with no branch parameter but with the  Request-URI, To tag, From tag, Call-ID, CSeq number and top Via header identical  as in the INVITE to be cancelled, answers to the original INVITE, request with  a Request Terminated (487 Request Terminated) response.";
            extension "Reference: 9.2 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid Success (200 OK) response received at UA1 OR No/Invalid Request Terminated (487 Request Terminated) response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_022(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            var Via vl_new_via;
            var charstring vl_branch_val;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Wait_Check_Invite_Proceeding_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            
            awaitingFirstAnyResp2(vl_Response, loc_CSeq_s);
            v_CSeq := loc_CSeq_s;
            v_CSeq.method := "CANCEL";
            vl_branch_val := getRndTag();
            vl_new_via := {
              fieldName := VIA_E,
              viaBody := {
                valueof(ViaBody_ETS_IPADDR(vl_branch_val))}
            };
            SIPP.send (
              CANCEL_Request_s_1(
                v_RequestUri,
                v_CallId,
                v_CSeq,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                vl_new_via)) to v_sent_label;
            awaitingPRResponse(
              Response_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            synchroniseCheckDone();
            awaitingPRInviteFinal(loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in a server INVITE Proceeding state, on receipt of  a CANCEL, including a Via header set with a different branch parameter without  the magic cookie ""z9hG4bK"" but with the Request-URI, To tag, From tag, Call-ID,  CSeq number and top Via header identical as in the INVITE to be cancelled,   sends a Success (200 Success) response to the CANCEL request.";
            extension "Reference: 16.10 [1], 9.2 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid Success (200 OK) response received at UA1 OR No/Invalid 300..699 response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_023(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            var Via vl_new_via;
            var charstring vl_branch_val;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Wait_Check_Invite_Proceeding_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            
            awaitingFirstAnyResp2(vl_Response, loc_CSeq_s);
            v_CSeq := loc_CSeq_s;
            v_CSeq.method := "CANCEL";
            vl_branch_val := getRndTag();
            vl_new_via := {
              fieldName := VIA_E,
              viaBody := {
                valueof(ViaBody_ETS_IPADDR(vl_branch_val))}
            };
            SIPP.send (
              CANCEL_Request_s_1(
                v_RequestUri,
                v_CallId,
                v_CSeq,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                vl_new_via)) to v_sent_label;
            awaitingPRResponse(
              Response_200_r_1(v_CallId, v_CSeq),
              loc_CSeq_s);
            synchroniseCheckDone();
            awaitingPRInviteNon200OK(
              Response_487_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in a server INVITE Proceeding state, on receipt of  a CANCEL, including a Via header set with a different branch parameter without  the magic cookie ""z9hG4bK"" but with the Request-URI, To tag, From tag, Call-ID,  CSeq number and top Via header identical as in the INVITE to be cancelled,  answers to the original INVITE, request with a Request Terminated  (487 Request Terminated) response.";
            extension "Reference: 9.2 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid Success (200 OK) response received at UA1 OR No/Invalid Request Terminated (487 Request Terminated) response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_024(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (ptc_ACK_Not_Forwarded(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            
            awaitingFirstAnyFinalResp(vl_Response, loc_CSeq_s);
            setHeadersOnReceiptOfResponse(
              loc_CSeq_s,
              vl_Response);
            sendACK(loc_CSeq_s);
            if (v_BOO_Route) {
              SIPP.send (
                ACK_Request_s_2(
                  v_RequestUri,
                  v_reqHostPort,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via,
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                ACK_Request_s_1(
                  v_RequestUri,
                  v_reqHostPort,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via)) to v_sent_label;
            }
            TNoAct.start (PX_TNOACT);
            alt {
              [] SIPP.receive {
                repeat;
              }
              [] TNoAct.timeout {
                setverdict (pass);
                cpA.send (CM_Check_Done);
              }
            }
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in a server INVITE Confirmed state, on receipt of  an ACK request, including a Via header set with the same branch parameter and  sent-by value in the topmost list value, does not forward the message.";
            extension "Reference: 17.2.1 [1], 17.2.3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid response received at UA1 OR No/Invalid ACK_Request response received at UA2 OR Repeated ACK_Request response received at UA2";
          }
          testcase SIP_CC_PR_TR_SE_V_025(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            var Via vl_new_via;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (ptc_ACK_Not_Forwarded(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            
            awaitingFirstAnyFinalResp(vl_Response, loc_CSeq_s);
            setHeadersOnReceiptOfResponse(
              loc_CSeq_s,
              vl_Response);
            sendACK(loc_CSeq_s);
            vl_new_via := v_Via;
            vl_new_via := {
              fieldName := VIA_E,
              viaBody := { valueof(ViaBody_ETS_NoBranch)}
            };
            if (v_BOO_Route) {
              SIPP.send (
                ACK_Request_s_2(
                  v_RequestUri,
                  v_reqHostPort,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  vl_new_via,
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                ACK_Request_s_1(
                  v_RequestUri,
                  v_reqHostPort,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  vl_new_via)) to v_sent_label;
            }
            TNoAct.start (PX_TNOACT);
            alt {
              [] SIPP.receive {
                repeat;
              }
              [] TNoAct.timeout {
                setverdict (pass);
                cpA.send (CM_Check_Done);
              }
            }
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in a server INVITE Confirmed state, on receipt of  an ACK request, including a Via header set with no branch parameter but with   the Request-URI, To tag, From tag, Call-ID, CSeq number and top Via header  identical as in the first INVITE request, does not forward the message.";
            extension "Reference: 17.2.1 [1], 17.2.3 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid response received at UA1 OR No/Invalid ACK_Request response received at UA2 OR Repeated ACK_Request response received at UA2";
          }
          testcase SIP_CC_PR_TR_SE_V_026(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            var Via vl_new_via;
            var charstring vl_branch_val;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersPtcInvite(loc_CSeq_s);
            vl_ptc.start (ptc_ACK_Not_Forwarded(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            
            awaitingFirstAnyFinalResp(vl_Response, loc_CSeq_s);
            setHeadersOnReceiptOfResponse(
              loc_CSeq_s,
              vl_Response);
            sendACK(loc_CSeq_s);
            vl_branch_val := getRndTag();
            vl_new_via := {
              fieldName := VIA_E,
              viaBody := {
                valueof(ViaBody_ETS_IPADDR(vl_branch_val))}
            };
            if (v_BOO_Route) {
              SIPP.send (
                ACK_Request_s_2(
                  v_RequestUri,
                  v_reqHostPort,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  vl_new_via,
                  v_Route)) to v_sent_label;
            } else {
              SIPP.send (
                ACK_Request_s_1(
                  v_RequestUri,
                  v_reqHostPort,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  vl_new_via)) to v_sent_label;
            }
            TNoAct.start (PX_TNOACT);
            alt {
              [] SIPP.receive {
                repeat;
              }
              [] TNoAct.timeout {
                setverdict (pass);
                cpA.send (CM_Check_Done);
              }
            }
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in a server INVITE Confirmed state, on receipt of  an ACK request, including a Via header set with a different branch parameter  without the magic cookie ""z9hG4bK"" but with the Request-URI, To tag, From tag,  Call-ID, CSeq number and top Via header identical as in the first INVITE request,  does not forward the message.";
            extension "Reference: 17.2.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid response received at UA1 OR No/Invalid ACK_Request response received at UA2 OR Repeated ACK_Request response received at UA2 ";
          }
          testcase SIP_CC_PR_TR_SE_V_027(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Wait_Check_Invite_Completed_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            
            awaitingFirstAnyFinalResp(vl_Response, loc_CSeq_s);
            setHeadersOnReceiptOfResponse(
              loc_CSeq_s,
              vl_Response);
            checkCompletedState(
              Response_4XX_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
            sendACK(loc_CSeq_s);
            synchroniseCheckDone();
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in a server INVITE Proceeding state, after sending  a 4XX response, enters in the Completed state. ";
            extension "Reference: 17.2.3.1 [1], 13.3.1.4 [1], figure 7 [1] ";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid response received at UA1 OR No/Invalid 4xx response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_V_028(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Wait_Check_Invite_Completed_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            
            if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
              v_RequestFor407 :=
              valueof(INVITE_Request_s_2(
                  v_RequestUri,
                  v_CallId,
                  loc_CSeq_s,
                  v_From,
                  v_To,
                  v_Via));
              v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
            };
            
            awaitingFirstAnyFinalResp(vl_Response, loc_CSeq_s);
            setHeadersOnReceiptOfResponse(
              loc_CSeq_s,
              vl_Response);
            sendACK(loc_CSeq_s);
            checkServerConfirmedState();
            synchroniseCheckDone();
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT in a server INVITE Completed state, on  receipt of an ACK request, enters in the Confirmed state. ";
            extension "Reference: 17.2.3.1 [1], 13.3.1.4 [1], figure 7 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid response received at UA1 OR No/Invalid ACK_Request received at UA2 OR Any message received at UA1 after sending ACK_Request to UA2";
          }
          testcase SIP_CC_PR_TR_SE_V_029(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            v_Default := activate (defaultCCPR());
            initPort(mtc, system);
            v_CallId := {
              fieldName := CALL_ID_E,
              callid := getRndCallId() & AT & PX_IUT_IPADDR
            };
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            loc_CSeq_s.method := "BYE";
            v_CSeq := loc_CSeq_s;
            v_To := valueof(To_s2);
            v_To := valueof(To_s4(getRndTag()));
            v_caller_To := v_To;
            v_From := valueof(From_s1(getRndTag()));
            v_caller_From := v_From;
            v_Contact := valueof(Contact_ETS_s);
            v_Branch := BRANCH_COOKIE & getRndTag();
            v_Via := {
              fieldName := VIA_E,
              viaBody := {
                valueof(ViaBody_ETS_IPADDR(v_Branch))}
            };
            v_RequestUri := valueof(SipUrl_ofPTC);
            v_reqHostPort := v_RequestUri.hostPort;
            SIPP.send (
              BYE_Request_noroute_s_1(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_reqHostPort,
                v_Branch)) to v_sent_label;
            awaitingPRResponse(
              Response_481_r_1(v_CallId, loc_CSeq_s),
              loc_CSeq_s);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, while no dialog has been established, on receipt of a BYE request, sends a CallTransaction does not exist  (481 CallTransaction does not exist)";
            extension "Reference: 15.1.2 [1]";
            extension "FailCause: No/Invalid CallTransaction does not exist (481 CallTransaction does not exist) received at UA1";
          }
        }
        group Timers {
          testcase SIP_CC_PR_TR_SE_TI_001(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Wait_Check_Invite_Completed_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            awaitingFirstAnyFinalResp(vl_Response, loc_CSeq_s);
            setHeadersOnReceiptOfResponse(
              loc_CSeq_s,
              vl_Response);
            repeatRespInTime(
              vl_Response,
              loc_CSeq_s,
              PX_T1 * 1.1);
            sendACK(loc_CSeq_s);
            synchroniseCheckDone();
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: If an unreliable transport is used, ensure that the IUT, when an INVITE server transaction is in the Completed state repeats its response  on the timeout condition of timer G set with a value of T1.";
            extension "Reference: Annex A [1], 17.2.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid response received at UA1 OR No/Invalid repeat response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_TI_002(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            setHeadersPtcInvite(loc_CSeq_s);
            vl_ptc.start (
              ptc_Wait_Check_Invite_Completed_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            awaitingFirstAnyFinalResp(vl_Response, loc_CSeq_s);
            setHeadersOnReceiptOfResponse(
              loc_CSeq_s,
              vl_Response);
            SIPP.clear;
            notRepeatPRRespInTime(
              vl_Response,
              loc_CSeq_s,
              PX_T1 * 0.9);
            sendACK(loc_CSeq_s);
            synchroniseCheckDone();
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: If a reliable transport (TCP) is used, ensure that the IUT, when an INVITE server transaction is in the Completed state does not repeat its response on the timeout condition of timer G set with a value of T1.";
            extension "Reference: Annex A [1], 17.2.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid response received at UA1 OR A repeat response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_TI_003(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            var float vl_delay;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Wait_Check_Invite_Completed_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            awaitingFirstAnyFinalResp(vl_Response, loc_CSeq_s);
            setHeadersOnReceiptOfResponse(
              loc_CSeq_s,
              vl_Response);
            repeatRespInTime(
              vl_Response,
              loc_CSeq_s,
              PX_T1 * 1.1);
            vl_delay := minValue(2.0 * PX_T1, PX_T2) * 1.1;
            repeatRespInTime(vl_Response, loc_CSeq_s, vl_delay);
            sendACK(loc_CSeq_s);
            synchroniseCheckDone();
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: If an unreliable transport is used, ensure that the IUT, when an  INVITE server transaction is in the Completed state and having already sent  twice times its response, repeats it after timer G set MIN(2*T1,T2)  value expires.";
            extension "Reference: Annex A [1], 17.2.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid response received at UA1 OR No/Invalid repeated responses received at UA1 in correct timeslot OR Repeated responses received at UA in incorrect timeslot";
          }
          testcase SIP_CC_PR_TR_SE_TI_004(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            var float vl_delay;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Wait_Check_Invite_Completed_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            awaitingFirstAnyFinalResp(vl_Response, loc_CSeq_s);
            setHeadersOnReceiptOfResponse(
              loc_CSeq_s,
              vl_Response);
            repeatRespInTime(
              vl_Response,
              loc_CSeq_s,
              PX_T1 * 1.5);
            vl_delay := minValue(2.0 * PX_T1, PX_T2) * 1.5;
            repeatRespInTime(vl_Response, loc_CSeq_s, vl_delay);
            vl_delay := minValue(4.0 * PX_T1, PX_T2) * 1.1;
            repeatRespInTime(vl_Response, loc_CSeq_s, vl_delay);
            sendACK(loc_CSeq_s);
            synchroniseCheckDone();
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: If an unreliable transport is used, ensure that the IUT, when an  INVITE server transaction is in the Completed state and having already sent  three times its response, repeats it after timer G set the MIN(4*T1,T2)  value expires.";
            extension "Reference: Annex A [1], 17.2.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid response received at UA1 OR No/Invalid repeated responses received at UA1 in correct timeslot OR Repeated responses received at UA in incorrect timeslot";
          }
          testcase SIP_CC_PR_TR_SE_TI_005(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Wait_Check_Invite_Completed_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            awaitingFirstAnyFinalResp(vl_Response, loc_CSeq_s);
            setHeadersOnReceiptOfResponse(
              loc_CSeq_s,
              vl_Response);
            
            waitForTimeout3(v_TJ);
            checkServerTerminatedState(loc_CSeq_s);
            sendACK(loc_CSeq_s);
            synchroniseCheckDone();
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: Ensure that the IUT, when an INVITE server transaction is in the  Completed state and, enters in the Terminated state after timer H set to  64*T1 value expires.";
            extension "Reference: Annex A [1], 17.2.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid response received at UA1 OR A repeat response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_TI_006(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Wait_Check_Invite_Completed_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            awaitingFirstAnyFinalResp(vl_Response, loc_CSeq_s);
            setHeadersOnReceiptOfResponse(
              loc_CSeq_s,
              vl_Response);
            waitForTimeout3(v_TJ);
            sendACK(loc_CSeq_s);
            synchroniseCheckDone();
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: If an unreliable transport is used, ensure that the IUT, when an  INVITE server transaction is in the Completed state and, does not repeats  its response after timer H set to 64*T1 value expires.";
            extension "Reference: Annex A [1], 17.2.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid response received at UA1 OR A repeat response received at UA1";
          }
          testcase SIP_CC_PR_TR_SE_TI_007(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_ACK_Not_Forwarded2(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            awaitingFirstAnyFinalResp(vl_Response, loc_CSeq_s);
            setHeadersOnReceiptOfResponse(
              loc_CSeq_s,
              vl_Response);
            sendACK(loc_CSeq_s);
            waitForTimeout3(PX_T4);
            checkServerTerminatedState(loc_CSeq_s);
            cpA.send (CM_Check_Done);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: If an unreliable transport is used, ensure that the IUT, when an  INVITE server transaction is in the Confirmed state, enters in the   Terminated state after timer I set to T4 value expires.";
            extension "Reference: Annex A [1], 17.2.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid response received at UA1 OR No/Invalid 481 received at UA1 after T4 value expires";
          }
          testcase SIP_CC_PR_TR_SE_TI_008(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (ptc_ACK_Not_Forwarded(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            setHeadersPtcInvite(loc_CSeq_s);
            SIPP.send (
              INVITE_Request_s_2(
                v_RequestUri,
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
            synchroniseInitPtc();
            v_CSeq := loc_CSeq_s;
            awaitingFirstAnyFinalResp(vl_Response, loc_CSeq_s);
            setHeadersOnReceiptOfResponse(
              loc_CSeq_s,
              vl_Response);
            sendACK(loc_CSeq_s);
            checkServerTerminatedState(loc_CSeq_s);
            cpA.send (CM_Check_Done);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: If a reliable transport is used, ensure that the IUT, when an INVITE  server transaction is in the Confirmed state, enters immediately in the  Terminated state.";
            extension "Reference: Annex A [1], 17.2.1 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid response received at UA1 OR No/Invalid 481 received at UA1 immediately";
          }
          testcase SIP_CC_PR_TR_SE_TI_009(
            inout CSeq loc_CSeq_s,
            CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
            var SipComponent vl_ptc;
            var Response vl_Response;
            
            v_Default := activate (defaultCCPR());
            vl_ptc := SipComponent.create;
            initConfig1(mtc, vl_ptc, system);
            vl_ptc.start (
              ptc_Wait_Check_Bye_Completed_State(loc_CSeq_ptc_s));
            initMTC(loc_CSeq_s);
            pRCallEstablished(loc_CSeq_s);
            catchRetrans(v_CallId, v_CSeq, 2.0);
            sendBYE(
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_reqHostPort,
              v_Route);
            loc_CSeq_s.method := "BYE";
            awaitingFirstAnyResp(vl_Response, loc_CSeq_s);
            TWait.start (v_TJ);
            while (TWait.running) {
              if (v_BOO_Route) {
                SIPP.send (
                  BYE_Request_WithRoute_s_5(
                    v_RequestUri,
                    v_CallId,
                    loc_CSeq_s,
                    v_From,
                    v_To,
                    v_Via,
                    v_Route)) to v_sent_label;
              } else {
                SIPP.send (
                  BYE_Request_s_5(
                    v_RequestUri,
                    v_CallId,
                    loc_CSeq_s,
                    v_From,
                    v_To,
                    v_Via)) to v_sent_label;
              }
              repeatPRLastResponse(vl_Response, loc_CSeq_s);
            }
            cpA.send (CM_Stop);
            wait_end_ptc(vl_ptc);
          }
          
          with {
            extension "Preconditions: IUT can behave as Proxy";
            extension "Description: If an unreliable transport is used, ensure that the IUT, when a BYE  server transaction is in the Completed state, on receipt of the repetitions  of the BYE request, retransmits its response until the timer J set to 64*T1  expires.";
            extension "Reference: Annex A [1], 17.2.2 [1]";
            extension "FailCause: No/Invalid INVITE_Request received at UA2 OR No/Invalid response received at UA1 OR No/Invalid repeat response received at UA1 after send BYE_Request";
          }
        }
      }
    }
  }
  group RedirectServer {
    group Callestablishment {
      group ValidBehaviour {
        testcase SIP_CC_RD_CE_V_001(
          inout CSeq loc_CSeq_s,
          CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
          var SipComponent vl_ptc;
          
          v_Default := activate (defaultCCRD());
          vl_ptc := SipComponent.create;
          initConfig1(mtc, vl_ptc, system);
          vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
          initMTC(loc_CSeq_s);
          setHeadersRDPtcInvite(loc_CSeq_s);
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          awaitingPRInviteNon200OK(
            Response_3XX_r_1(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          cpA.send (CM_Check_Done);
          wait_end_ptc(vl_ptc);
        }
        
        with {
          extension "Preconditions: IUT can behave as Redirect Server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request, sends a 3XX redirection response to the caller including a Contact header set to the registered location of the callee and the To header set to the received value with an additional TAG.";
          extension "Reference: 8.3 [1], 8.2.6.2 [1]";
          extension "FailCause: No/Invalid 3XX redirection response received at UA1";
        }
        testcase SIP_CC_RD_CE_V_002(
          inout CSeq loc_CSeq_s,
          CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
          var SipComponent vl_ptc;
          
          v_Default := activate (defaultCCRD());
          vl_ptc := SipComponent.create;
          initConfig1(mtc, vl_ptc, system);
          vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
          initMTC(loc_CSeq_s);
          setHeadersRDPtcInvite(loc_CSeq_s);
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          awaitingPRInviteNon200OK(
            Response_3XX_r_2(v_CallId, loc_CSeq_s, v_Via),
            loc_CSeq_s);
          cpA.send (CM_Check_Done);
          wait_end_ptc(vl_ptc);
        }
        
        with {
          extension "Preconditions: IUT can behave as Redirect Server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request, sends a 3XX redirection response to the caller after having copy the received Via header into the response.";
          extension "Reference: 8.3 [1], 8.2.6.2 [1]";
          extension "FailCause: No/Invalid 3XX redirection response received at UA1";
        }
        testcase SIP_CC_RD_CE_V_003(
          inout CSeq loc_CSeq_s,
          CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
          var SipComponent vl_ptc;
          
          v_Default := activate (defaultCCRD());
          vl_ptc := SipComponent.create;
          initConfig1(mtc, vl_ptc, system);
          vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
          initMTC(loc_CSeq_s);
          setHeadersRDPtcInvite(loc_CSeq_s);
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          awaitingPRInviteNon200OK(
            Response_3XX_r_3(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          TNoAct.start (PX_TNOACT);
          alt {
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
            }
            [] TNoAct.timeout {
              setverdict (pass);
            }
          }
          cpA.send (CM_Check_Done);
          wait_end_ptc(vl_ptc);
        }
        
        with {
          extension "Preconditions: IUT can behave as Redirect Server";
          extension "Description: Ensure that the IUT, having sent a 3XX redirection response, accepts an ACK request.";
          extension "Reference: 8.3 [1]";
          extension "FailCause: No/Invalid 3XX redirection response received at UA1 OR Any message received after 3xx received";
        }
        testcase SIP_CC_RD_CE_V_004(
          inout CSeq loc_CSeq_s,
          CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
          var SipComponent vl_ptc;
          
          v_Default := activate (defaultCCRD());
          vl_ptc := SipComponent.create;
          initConfig1(mtc, vl_ptc, system);
          vl_ptc.start (ptc_RD_MultiRegistration(loc_CSeq_ptc_s));
          initMTC(loc_CSeq_s);
          setHeadersRDPtcInvite(loc_CSeq_s);
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          v_Contact := valueof(Contact_RD_Multi_s);
          awaitingPRInviteNon200OK(
            Response_3XX_r_4(v_CallId, loc_CSeq_s, v_Contact),
            loc_CSeq_s);
          wait_end_ptc(vl_ptc);
        }
        
        with {
          extension "Preconditions: IUT can behave as Redirect Server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request, send a 3XX redirection response to the caller including a Contact header set to the list of locations of the callee previously registered.";
          extension "Reference: 8.3 [1]";
          extension "FailCause: No/Invalid 3XX redirection response received at UA1";
        }
        testcase SIP_CC_RD_CE_V_005(
          inout CSeq loc_CSeq_s,
          CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
          var SipComponent vl_ptc;
          
          v_Default := activate (defaultCCPR());
          vl_ptc := SipComponent.create;
          initConfig1(mtc, vl_ptc, system);
          vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
          initMTC(loc_CSeq_s);
          setHeadersRDPtcInvite(loc_CSeq_s);
          SIPP.send (
            INVITE_Request_s_6(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          awaitingPRInviteNon200OK(
            Response_3XX_r_3(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          cpA.send (CM_Check_Done);
          wait_end_ptc(vl_ptc);
        }
        
        with {
          extension "Preconditions: IUT can behave as Redirect Server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request including a Require header set to a value that it does not understand, sends a 3XX redirection response to the caller.";
          extension "Reference: 8.3 [1]";
          extension "FailCause: No/Invalid 3XX redirection response received at UA1";
        }
        testcase SIP_CC_RD_CE_V_006(
          inout CSeq loc_CSeq_s,
          CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
          var SipComponent vl_ptc;
          
          v_Default := activate (defaultCCRD());
          vl_ptc := SipComponent.create;
          initConfig1(mtc, vl_ptc, system);
          vl_ptc.start (ptc_RD_ShortRegistration(loc_CSeq_ptc_s));
          initMTC(loc_CSeq_s);
          setHeadersRDPtcInvite(loc_CSeq_s);
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          awaitingPRInviteNon200OK(
            Response_480_r_1(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          wait_end_ptc(vl_ptc);
        }
        
        with {
          extension "Preconditions: IUT can behave as Redirect Server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request for a UA for which the registration has expired, sends a Temporarily Unavailable (480 Temporarily Unavailable) request failure response to the caller.";
          extension "Reference: 8.3 [1], 21.4.18 [1]";
          extension "FailCause: No/Invalid Temporarily Unavailable (480 Temporarily Unavailable) received at UA1";
        }
        testcase SIP_CC_RD_CE_V_007(
          inout CSeq loc_CSeq_s,
          CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
          var SipComponent vl_ptc;
          var UserInfo vl_userInfo := {
            userOrTelephoneSubscriber := PX_ETS_LOCAL_USER,
            password := omit
          };
          
          v_Default := activate (defaultCCRD());
          vl_ptc := SipComponent.create;
          initConfig1(mtc, vl_ptc, system);
          vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
          initMTC(loc_CSeq_s);
          setHeadersRDPtcInvite(loc_CSeq_s);
          v_To := {
            fieldName := TO_E,
            addressField := {
              nameAddr := {
                displayName := "ETSI Tester",
                addrSpec := {
                  scheme := SIP_SCHEME,
                  userInfo := vl_userInfo,
                  hostPort := {
                    host := PX_UNKNOWN_DOMAIN,
                    portField := omit },
                  urlParameters := omit,
                  headers := omit }
              }
            },
            toParams := omit
          };
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          awaitingPRInviteNon200OK(
            Response_404_r_1(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          cpA.send (CM_Check_Done);
          wait_end_ptc(vl_ptc);
        }
        
        with {
          extension "Preconditions: IUT can behave as Redirect Server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request for an unknown UA, sends a Not found (404 Not Found) request failure response to the caller.";
          extension "Reference: 8.3 [1], 21.4.5 [1] ";
          extension "FailCause: No/Invalid Not found (404 Not Found) request received at UA1";
        }
        testcase SIP_CC_RD_CE_V_008(
          inout CSeq loc_CSeq_s,
          CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
        // Ref.: 10.3, 22.2
        // Purpose: Ensure that the IUT on receipt of an INVITE request not including an Authorization or Proxy-
        // Authorization header fields, sends an Unauthorized (401 Unauthorized) or Proxy Authentication
        // Required (407 Proxy Authentication Required) response, containing a WWW-Authenticate or a
        // Proxy-Authenticate header.
        {
          var Response vl_Response;
          var charstring vl_nonce;
          var charstring vl_realm;
          var CommaParam_List vl_challenge;
          var SipComponent vl_ptc := SipComponent.create;
          
          v_Default := activate (defaultCCPR());
          initConfig1(mtc, vl_ptc, system);
          vl_ptc.start (initPTC(loc_CSeq_ptc_s));
          initMTC(loc_CSeq_s);
          setHeadersPtcInvite(loc_CSeq_s);
          
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              Response_407_r_1(v_CallId, loc_CSeq_s)) {
              setverdict (pass);
              TAck.stop;
            }
            [] SIPP.receive (
              Response_407_r_1(v_CallId, loc_CSeq_s)) {
              setverdict (pass);
              TAck.stop;
            }
            [(not (PC_STATELESS))] SIPP.receive (
              Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
            }
            [] TAck.timeout {
              setverdict (fail);
            }
          }
          sendACK(loc_CSeq_s);
          
        }
        
        with {
          extension "Preconditions: IUT can behave as Redirect Server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request not including an Authorization or Proxy-Authorization header fields, sends an Unauthorized (401 Unauthorized) or Proxy Authentication Required (407 Proxy Authentication Required) response, containing a WWW-Authenticate or a Proxy-Authenticate header.";
          extension "Reference: 10.3 [1], 22.2 [1]";
        }
        testcase SIP_CC_RD_CE_V_009(
          inout CSeq loc_CSeq_s,
          CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
        // Ref: 22.2
        // Purpose: Ensure that the on IUT receipt of an INVITE request not including an Authorization or a Proxy-
        // Authorization header fields, sends an Unauthorized (401 Unauthorized) or Proxy Authentication
        // Required (407 Proxy Authentication Required) response, containing a WWW-Authenticate or a
        // Proxy-Authenticate header including proper value for realm and nonce HTTP parameters.
        {
          var Response vl_Response;
          var charstring vl_nonce;
          var charstring vl_realm;
          var CommaParam_List vl_challenge;
          var SipComponent vl_ptc := SipComponent.create;
          
          v_Default := activate (defaultCCPR());
          initConfig1(mtc, vl_ptc, system);
          vl_ptc.start (initPTC(loc_CSeq_ptc_s));
          initMTC(loc_CSeq_s);
          setHeadersPtcInvite(loc_CSeq_s);
          
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              Response_407_r_1(
                v_CallId,
                loc_CSeq_s)) -> value vl_Response {
              // check if values for realm and nonce are included
              if (ischosen (vl_Response
                  .msgHeader
                  .wwwAuthenticate
                  .challenge[0]
                  .digestCln)) {
                vl_challenge :=
                vl_Response
                .msgHeader
                .wwwAuthenticate
                .challenge[0]
                .digestCln;
                vl_nonce :=
                extractParamValueFromChallenge(
                  vl_challenge,
                  "nonce");
                if (vl_nonce == "") {
                  setverdict (fail);
                  stop;
                }
                vl_realm :=
                extractParamValueFromChallenge(
                  vl_challenge,
                  "realm");
                if (vl_realm == "") {
                  setverdict (fail);
                }
              } else {
                log ("No scheme in www-Authenticate header !!");
                setverdict (inconc);
                stop;
              }
              setverdict (pass);
              TAck.stop;
            }
            [] SIPP.receive (
              Response_407_r_1(
                v_CallId,
                loc_CSeq_s)) -> value vl_Response {
              setverdict (pass);
              // check if values for realm and nonce are included
              if (ischosen (vl_Response
                  .msgHeader
                  .proxyAuthenticate
                  .challenge[0]
                  .digestCln)) {
                vl_challenge :=
                vl_Response
                .msgHeader
                .proxyAuthenticate
                .challenge[0]
                .digestCln;
                vl_nonce :=
                extractParamValueFromChallenge(
                  vl_challenge,
                  "nonce");
                if (vl_nonce == "") {
                  setverdict (fail);
                  stop;
                }
                vl_realm :=
                extractParamValueFromChallenge(
                  vl_challenge,
                  "realm");
                if (vl_realm == "") {
                  setverdict (fail);
                }
              } else {
                log ("No scheme in Proxy-Authenticate header !!");
                setverdict (inconc);
                stop;
              }
              TAck.stop;
              setverdict (pass);
            }
            [(not (PC_STATELESS))] SIPP.receive (
              Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
            }
            [] TAck.timeout {
              setverdict (fail);
            }
          }
          sendACK(loc_CSeq_s);
          
        }
        with {
          extension "Preconditions: IUT can behave as Redirect Server";
          extension "Description: Ensure that IUT the on receipt of an INVITE request not including an Authorization or a Proxy-Authorization header fields, sends an Unauthorized (401 Unauthorized) or Proxy Authentication Required (407 Proxy Authentication Required) response, containing a WWW-Authenticate or a Proxy-Authenticate header including proper value for realm and nonce HTTP parameters.";
          extension "Reference: 22.2 [1] ";
        }
        testcase SIP_CC_RD_CE_V_010(
          inout CSeq loc_CSeq_s,
          CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
        // Ref: 22.2
        // Purpose: Ensure that the IUT having sent an Unauthorized (401 Unauthorized ) or a Proxy Authentication
        // Required (407 Proxy Authentication Required) response to an INVITE request, on receipt of a
        // INVITE request including a valid Authorization or Proxy-Authorization header field, sends a 3XX
        // redirection response.
        {
          var CommaParam_List vl_challenge;
          // var charstring vl_Credentials;
          var Credentials vl_Credentials;
          
          var Response vl_Response;
          var SipComponent vl_ptc;
          var Request vl_Request;
          
          v_Default := activate (defaultCCRD());
          vl_ptc := SipComponent.create;
          initConfig1(mtc, vl_ptc, system);
          vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
          initMTC(loc_CSeq_s);
          
          setHeadersPtcInvite(loc_CSeq_s);
          
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          
          vl_Request :=
          valueof(
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via));
          TAck.start (PX_TACK);
          alt {
            [] SIPP.receive (
              Response_401_r_1(
                v_CallId,
                loc_CSeq_s)) -> value vl_Response {
              TAck.stop;
              setverdict (pass);
              // resent the INVITE message with Authorization header include
              // Extract challenge and calculate credentials for a response.
              if (ischosen (vl_Response
                  .msgHeader
                  .wwwAuthenticate
                  .challenge[0]
                  .digestCln)) {
                vl_challenge :=
                vl_Response
                .msgHeader
                .wwwAuthenticate
                .challenge[0]
                .digestCln;
                vl_Credentials :=
                calculateCredentials(
                  "REGISTER",
                  vl_challenge,
                  PX_RFC2617_USERNAME,
                  PX_RFC2617_PASSWD);
                
              } else {
                log ("No scheme in www-Authenticate header !!");
                setverdict (inconc);
                stop;
              }
              
              // Increment CSeq sequence number of and add the credentials
              // to the original saved INVITE message.
              loc_CSeq_s.seqNumber :=
              loc_CSeq_s.seqNumber + 1;
              vl_Request.msgHeader.cSeq.seqNumber :=
              loc_CSeq_s.seqNumber;
              vl_Request.msgHeader.authorization.fieldName :=
              AUTHORIZATION_E;
              vl_Request.msgHeader.authorization.body :=
              vl_Credentials;
              
              // Re-send the saved INVITE with Authorization header
              // included.
              SIPP.send (vl_Request) to v_sent_label;
            }
            [] SIPP.receive (
              Response_407_r_1(
                v_CallId,
                loc_CSeq_s)) -> value vl_Response {
              setverdict (pass);
              TAck.stop;
              // resent the INVITE message with Proxyauthorization header include
              // Extract challenge and calculate credentials for a response.
              if (ischosen (vl_Response
                  .msgHeader
                  .proxyAuthenticate
                  .challenge[0]
                  .digestCln)) {
                vl_challenge :=
                vl_Response
                .msgHeader
                .proxyAuthenticate
                .challenge[0]
                .digestCln;
                vl_Credentials :=
                calculateCredentials(
                  "INVITE",
                  vl_challenge,
                  PX_RFC2617_USERNAME,
                  PX_RFC2617_PASSWD);
                // setverdict (fail);
              } else {
                log ("No scheme in Proxy Authenticate header!!");
                setverdict (inconc);
                stop;
              }
              
              // Increment CSeq sequence number of and add the credentials
              // to the original saved INVITE message.
              loc_CSeq_s.method := "INVITE";
              loc_CSeq_s.seqNumber :=
              loc_CSeq_s.seqNumber + 1;
              vl_Request.msgHeader.cSeq.seqNumber :=
              loc_CSeq_s.seqNumber;
              vl_Request
              .msgHeader
              .proxyAuthorization
              .fieldName :=
              PROXY_AUTHORIZATION_E;
              vl_Request
              .msgHeader
              .proxyAuthorization
              .credentials :=
              vl_Credentials;
              
              // Re-send the saved INVITE with Authorization header
              // included.
              SIPP.send (vl_Request) to v_sent_label;
            }
            [(not (PC_STATELESS))] SIPP.receive (
              Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
              repeat;
            }
            [] SIPP.receive {
              all timer.stop;
              setverdict (fail);
              stop;
            }
            [] TAck.timeout {
              setverdict (fail);
              stop;
            }
          }
          
          awaitingPRInviteNon200OK(
            Response_3XX_r_3(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          cpA.send (CM_Check_Done);
          wait_end_ptc(vl_ptc);
          
        }
        with {
          extension "Preconditions: IUT can behave as Redirect Server";
          extension "Description: Ensure that the IUT having sent an Unauthorized (401 Unauthorized ) or a Proxy Authentication Required (407 Proxy Authentication Required) response to an INVITE request, on receipt of a INVITE request including a valid Authorization or Proxy-Authorization header field, sends a 3XX redirection response.";
          extension "Reference: 22.2 [1]";
        }
      }
    }
    group Callrelease {
      group ValidBehaviour {
        testcase SIP_CC_RD_CR_V_001(
          inout CSeq loc_CSeq_s,
          CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
          var SipComponent vl_ptc;
          
          v_Default := activate (defaultCCRD());
          vl_ptc := SipComponent.create;
          initConfig1(mtc, vl_ptc, system);
          vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
          initMTC(loc_CSeq_s);
          setHeadersRDPtcInvite(loc_CSeq_s);
          SIPP.send (
            INVITE_Request_s_2(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_Via)) to v_sent_label;
          awaitingPRResponse_100Resp(
            Response_1XX_r_1(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          v_CSeq := loc_CSeq_s;
          v_CSeq.method := "CANCEL";
          SIPP.send (
            CANCEL_Request_s_1(
              v_RequestUri,
              v_CallId,
              v_CSeq,
              v_From,
              v_To,
              v_reqHostPort,
              v_Via)) to v_sent_label;
          awaitingPRResponse(
            Response_200_r_1(v_CallId, v_CSeq),
            loc_CSeq_s);
          cpA.send (CM_Check_Done);
          wait_end_ptc(vl_ptc);
        }
        
        with {
          extension "Preconditions: IUT can behave as Redirect Server";
          extension "Description: Ensure that the IUT on receipt of an INVITE request immediately followed by a CANCEL request with the same Call-ID, To, From, top Via header, Request URI and CSeq, sends an OK (200 OK) response to the caller.";
          extension "Reference: 8.3 [1]";
          extension "FailCause: No/Invalid 1XX response received at UA1 OR No/Invalid Success (200 OK) received after CANCEL_Request send";
        }
        testcase SIP_CC_RD_CR_V_002(
          inout CSeq loc_CSeq_s,
          CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces {
          var SipComponent vl_ptc;
          
          v_Default := activate (defaultCCRD());
          vl_ptc := SipComponent.create;
          initConfig1(mtc, vl_ptc, system);
          vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
          initMTC(loc_CSeq_s);
          setHeadersRDPtcInvite(loc_CSeq_s);
          loc_CSeq_s.method := "CANCEL";
          SIPP.send (
            CANCEL_Request_s_1(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_reqHostPort,
              v_Via)) to v_sent_label;
          awaitingPRResponse(
            Response_481_r_1(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          cpA.send (CM_Check_Done);
          wait_end_ptc(vl_ptc);
        }
        
        with {
          extension "Preconditions: IUT can behave as Redirect Server";
          extension "Description: Ensure that the IUT on receipt of a CANCEL request whose Call-ID does not match a pending request, sends a Call LegTransaction Does Not Exist (481 Call LegTransaction Does Not Exist) request failure to the caller.";
          extension "Reference: 8.3 [1], 21.4.19 [1]";
          extension "FailCause: No/Invalid Call LegTransaction Does Not Exist (481 Call LegTransaction Does Not Exist) request received at UA1";
        }
        testcase SIP_CC_RD_CR_V_003(
          inout CSeq loc_CSeq_s,
          CSeq loc_CSeq_ptc_s) runs on SipComponent system SipInterfaces
        // Ref: 8.3 and 8.2.6.2
        // Ensure that the IUT on receipt of an BYE request, sends a 3XX redirection response to the caller
        // including a Contact header set to the registered location of the callee.
        {
          var SipComponent vl_ptc;
          
          v_Default := activate (defaultCCRD());
          vl_ptc := SipComponent.create;
          initConfig1(mtc, vl_ptc, system);
          vl_ptc.start (ptc_RD_Registration(loc_CSeq_ptc_s));
          initMTC(loc_CSeq_s);
          setHeadersForBYEOutOfDialog(loc_CSeq_s);
          SIPP.send (
            BYE_Request_noroute_s_1(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_From,
              v_To,
              v_reqHostPort,
              v_Branch)) to v_sent_label;
          awaitingPRInviteNon200OK(
            Response_3XX_r_3(v_CallId, loc_CSeq_s),
            loc_CSeq_s);
          cpA.send (CM_Check_Done);
          wait_end_ptc(vl_ptc);
          
        }
        with {
          extension "Preconditions: IUT can behave as Redirect Server";
          extension "Description: Ensure that the IUT on receipt of an BYE request, sends a 3XX redirection response to the caller including a Contact header set to the registered location of the callee.";
          extension "Reference: 8.3 and 8.2.6.2 [1]";
        }
      }
    }
  }
}
}
