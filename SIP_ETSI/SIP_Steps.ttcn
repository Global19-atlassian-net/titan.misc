/*
******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission 
 * is hereby granted, free of charge, to copy, reproduce and amend this file 
 * under the following conditions: It is provided "as is", without warranty of any 
 * kind, expressed or implied. 
 *
 * ETSI shall never be liable for any claim, damages, or other liability arising 
 * from its use or inability of use.This permission does not apply to any documentation 
 * associated with this file for which ETSI keeps all rights reserved. The present 
 * copyright notice shall be included in all copies of whole or part of this 
 * file and shall not imply any sub-license right.
 *
 *  Modified by: Elemer Lelik
******************************************************************************
//-----------------------------------------------------------------------------
//AUTHOR:      Gyorgy Rethy, L.M. Ericsson (STF296, STF270, STF246, STF196, STF166)
//DATE:        September 2007
//VERSION:     4.2.1
//
//DTS/MTS 0097-3
//
//Methods for Testing and Specification (MTS);
//Conformance Test Specification for SIP (RFC32361);
//Part 3: Abstract Test Suite (TTCN-3 code)
//
//(c) European Telecommunications Standards Institute 2001.
//All rights reserved.
//
//-----------------------------------------------------------------------------
//HISTORY: ---> see History in SIP_MainModule.ttcn
//
//References
//The following documents contain provisions which, through reference in this text, constitute provisions of the present document.
//- References are either specific (identified by date of publication, edition number, version number, etc.) or non-specific.
//- For a specific reference, subsequent revisions do not apply.
//- For a non-specific reference, the latest version applies.
//- A non-specific reference to an ETS shall also be taken to refer to later versions published as an EN with the same number.
//[1]  RFC 3261, "Session Description Protocol", SDP: Session Description Protocol. M. Handley, V. Jacobson. April 1998. (Status: PROPOSED STANDARD).
//[3]  ISO/IEC 9646-1: "Information technology - Open Systems Interconnection - Conformance testing methodology and framework - Part 1: General concepts
//[4]  ISO/IEC 9646-2: "Information technology - Open Systems Interconnection - Conformance testing methodology and framework - Part 2: Abstract Test Suite specification".
//[5] ISO/IEC 9646-3: "Information technology - Open Systems Interconnection - Conformance testing methodology and framework - Part 3: The Tree and Tabular Combined Notation".
//[6]  ETS 300 406: "Methods for Testing and Specification (MTS); Protocol and profile conformance testing specifications; Standardization methodology".
*/

//**************************************************************************************************
//compiled with Titan 5 R4C 2016.02.22 Elemer Lelik
//**************************************************************************************************


module SIP_Steps {
import from TCCDateTime_Functions all;
import from TCCConversion_Functions all;
import from TCCInterface_Functions all;

import from SIPmsg_Types all;
import from SIP_TypesAndConf all;
import from SIP_Templates all;
const boolean mandatory := true; // lpa: true to progress
group Functions {
  // *****************************************************************************
  // *
  // *  Functions which are strictly behaviour are placed in the
  // *  BehaviourFunctions group.  For example, a function which groups test cases
  // *  is a behaviour function.
  // *
  // *****************************************************************************
  group TestCaseSelectionExpressions {
    //  external function isSelected(in charstring tc_name) return boolean;
    
    
    function isSelected(in charstring tc_name) return boolean
    {
      
      
      var boolean v_ret:=false;
      for(var integer i:=0;i< sizeof(par_selection); i:=i+1 )
      {
        
        if(par_selection[i].tc_name==tc_name) {v_ret:= par_selection[i].selection}
      }
      
      return v_ret;
    }
    
    
    
    
    function runRGRTV001() return boolean {
      return (isSelected("SIP_RG_RT_V_001"));
    }
    function runRGRTV002() return boolean {
      return (isSelected("SIP_RG_RT_V_002"));
    }
    function runRGRTV003() return boolean {
      return (
        isSelected("SIP_RG_RT_V_003")
        and PC_PRECONFIGURED_REGISTRAR);
    }
    function runRGRTV004() return boolean {
      return (
        isSelected("SIP_RG_RT_V_004") and PC_ADDR_RECORD_REGISTRAR);
    }
    function runRGRTV005() return boolean {
      return (
        isSelected("SIP_RG_RT_V_005") and PC_MULTICAST_REGISTRAR);
    }
    function runRGRTV006() return boolean {
      return (isSelected("SIP_RG_RT_V_006"));
    }
    function runRGRTV007() return boolean {
      return (isSelected("SIP_RG_RT_V_007"));
    }
    function runRGRTV008() return boolean {
      return (isSelected("SIP_RG_RT_V_008"));
    }
    function runRGRTV009() return boolean {
      return (isSelected("SIP_RG_RT_V_009"));
    }
    function runRGRTV010() return boolean {
      return (isSelected("SIP_RG_RT_V_010"));
    }
    function runRGRTV011() return boolean {
      return (isSelected("SIP_RG_RT_V_011"));
    }
    function runRGRTV012() return boolean {
      return (isSelected("SIP_RG_RT_V_012") and PC_SHOULD);
    }
    function runRGRTV013() return boolean {
      return (isSelected("SIP_RG_RT_V_013") and PC_SHOULD);
    }
    function runRGRRV001() return boolean {
      return (isSelected("SIP_RG_RR_V_001"));
    }
    function runRGRRV002() return boolean {
      return (isSelected("SIP_RG_RR_V_002"));
    }
    function runRGRRV003() return boolean {
      return (isSelected("SIP_RG_RR_V_003"));
    }
    function runRGRRV004() return boolean {
      return (isSelected("SIP_RG_RR_V_004") and PC_THIRD_PARTY);
    }
    function runRGRRV005() return boolean {
      return (isSelected("SIP_RG_RR_V_005"));
    }
    function runRGRRV006() return boolean {
      return (isSelected("SIP_RG_RR_V_006"));
    }
    function runRGRRV007() return boolean {
      return (isSelected("SIP_RG_RR_V_007"));
    }
    function runRGRRV008() return boolean {
      return (isSelected("SIP_RG_RR_V_008"));
    }
    function runRGRRV009() return boolean {
      return (isSelected("SIP_RG_RR_V_009"));
    }
    function runRGRRV010() return boolean {
      return (isSelected("SIP_RG_RR_V_010"));
    }
    function runRGRRV011() return boolean {
      return (isSelected("SIP_RG_RR_V_011"));
    }
    function runRGRRV012() return boolean {
      return (isSelected("SIP_RG_RR_V_012"));
    }
    function runRGRRV013() return boolean {
      return (isSelected("SIP_RG_RR_V_013"));
    }
    function runRGRRV014() return boolean {
      return (isSelected("SIP_RG_RR_V_014"));
    }
    function runRGRRV015() return boolean {
      return (isSelected("SIP_RG_RR_V_015"));
    }
    function runRGRRV016() return boolean {
      return (isSelected("SIP_RG_RR_V_016"));
    }
    function runRGRRV017() return boolean {
      return (isSelected("SIP_RG_RR_V_017"));
    }
    function runRGRRV018() return boolean {
      return (isSelected("SIP_RG_RR_V_018") and PC_SHOULD);
    }
    function runRGRRV019() return boolean {
      return (isSelected("SIP_RG_RR_V_019") and PC_SHOULD);
    }
    function runRGRRI001() return boolean {
      return (isSelected("SIP_RG_RR_I_001"));
    }
    function runRGRRI002() return boolean {
      return (isSelected("SIP_RG_RR_I_002"));
    }
    function runRGRRI003() return boolean {
      return (isSelected("SIP_RG_RR_I_003"));
    }
    function runRGRRI004() return boolean {
      return (isSelected("SIP_RG_RR_I_004"));
    }
    function runRGRRO001() return boolean {
      return (isSelected("SIP_RG_RR_O_001"));
    }
    function runRGRRO002() return boolean {
      return (isSelected("SIP_RG_RR_O_002"));
    }
    function runRGRRO003() return boolean {
      return (isSelected("SIP_RG_RR_O_003"));
    }
    function runCCOECEV001() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_001"));
    }
    function runCCOECEV002() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_002") and PC_SHOULD);
    }
    function runCCOECEV003() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_003"));
    }
    function runCCOECEV004() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_004"));
    }
    function runCCOECEV005() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_005"));
    }
    function runCCOECEV006() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_006") and PC_SHOULD);
    }
    function runCCOECEV007() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_007"));
    }
    function runCCOECEV008() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_008") and PC_SHOULD);
    }
    function runCCOECEV009() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_009"));
    }
    function runCCOECEV010() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_010"));
    }
    function runCCOECEV011() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_011"));
    }
    function runCCOECEV012() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_012"));
    }
    function runCCOECEV013() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_013"));
    }
    function runCCOECEV014() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_014"));
    }
    function runCCOECEV015() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_015") and PC_SHOULD);
    }
    function runCCOECEV016() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_016"));
    }
    function runCCOECEV017() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_017"));
    }
    function runCCOECEV018() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_018"));
    }
    function runCCOECEV019() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_019"));
    }
    function runCCOECEV020() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_020"));
    }
    function runCCOECEV021() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_021"));
    }
    function runCCOECEV022() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_022"));
    }
    function runCCOECEV023() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_023"));
    }
    function runCCOECEV024() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_024"));
    }
    function runCCOECEV025() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_025"));
    }
    function runCCOECEV026() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_026"));
    }
    function runCCOECEV027() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_027"));
    }
    function runCCOECEV028() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_028"));
    }
    function runCCOECEV029() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_029"));
    }
    function runCCOECEV030() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_030"));
    }
    function runCCOECEV031() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_031"));
    }
    function runCCOECEV032() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_032"));
    }
    function runCCOECEV033() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_033"));
    }
    function runCCOECEV034() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_034"));
    }
    function runCCOECEV035() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_035"));
    }
    function runCCOECEV036() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_036"));
    }
    function runCCOECEV037() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_037"));
    }
    function runCCOECEV038() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_038"));
    }
    function runCCOECEV039() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_039"));
    }
    function runCCOECEV040() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_040"));
    }
    function runCCOECEV041() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_041"));
    }
    function runCCOECEV042() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_042"));
    }
    function runCCOECEV043() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_043") and PC_REDIRECTION);
    }
    function runCCOECEV044() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_044"));
    }
    function runCCOECEV045() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_045") and PC_SHOULD);
    }
    function runCCOECEV046() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_046"));
    }
    function runCCOECEV047() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_047"));
    }
    function runCCOECEV048() return boolean {
      return (isSelected("SIP_CC_OE_CE_V_048"));
    }
    function runCCOECETI001() return boolean {
      return (isSelected("SIP_CC_OE_CE_TI_001") and PX_UDP);
    }
    function runCCOECETI002() return boolean {
      return (
        isSelected("SIP_CC_OE_CE_TI_002")
        and PC_SHOULD
        and (not PX_UDP));
    }
    function runCCOECETI003() return boolean {
      return (isSelected("SIP_CC_OE_CE_TI_003") and PX_UDP);
    }
    function runCCOECETI004() return boolean {
      return (isSelected("SIP_CC_OE_CE_TI_004") and PX_UDP);
    }
    function runCCOECETI005() return boolean {
      return (isSelected("SIP_CC_OE_CE_TI_005"));
    }
    function runCCOECETI006() return boolean {
      return (isSelected("SIP_CC_OE_CE_TI_006") and PC_SHOULD);
    }
    function runCCOECETI007() return boolean {
      return (isSelected("SIP_CC_OE_CE_TI_007") and PC_SHOULD);
    }
    function runCCOECETI008() return boolean {
      return (
        isSelected("SIP_CC_OE_CE_TI_008") and PC_SHOULD and PX_UDP);
    }
    function runCCOECETI009() return boolean {
      return (
        isSelected("SIP_CC_OE_CE_TI_009")
        and PC_SHOULD
        and (not PX_UDP));
    }
    function runCCOECETI010() return boolean {
      return (
        isSelected("SIP_CC_OE_CE_TI_010") and PC_SHOULD and PX_UDP);
    }
    function runCCOECETI011() return boolean {
      return (isSelected("SIP_CC_OE_CE_TI_011"));
    }
    function runCCOECETI012() return boolean {
      return (isSelected("SIP_CC_OE_CE_TI_012"));
    }
    function runCCOECRV001() return boolean {
      return (isSelected("SIP_CC_OE_CR_V_001"));
    }
    function runCCOECRV002() return boolean {
      return (isSelected("SIP_CC_OE_CR_V_002"));
    }
    function runCCOECRV003() return boolean {
      return (isSelected("SIP_CC_OE_CR_V_003"));
    }
    function runCCOECRV004() return boolean {
      return (isSelected("SIP_CC_OE_CR_V_004"));
    }
    function runCCOECRV005() return boolean {
      return (isSelected("SIP_CC_OE_CR_V_005"));
    }
    function runCCOECRV006() return boolean {
      return (isSelected("SIP_CC_OE_CR_V_006"));
    }
    function runCCOECRV007() return boolean {
      return (isSelected("SIP_CC_OE_CR_V_007"));
    }
    function runCCOECRV008() return boolean {
      return (isSelected("SIP_CC_OE_CR_V_008"));
    }
    function runCCOECRV009() return boolean {
      return (isSelected("SIP_CC_OE_CR_V_009"));
    }
    function runCCOECRV010() return boolean {
      return (isSelected("SIP_CC_OE_CR_V_010"));
    }
    function runCCOECRV011() return boolean {
      return (isSelected("SIP_CC_OE_CR_V_011"));
    }
    function runCCOECRV012() return boolean {
      return (isSelected("SIP_CC_OE_CR_V_012"));
    }
    function runCCOECRV013() return boolean {
      return (isSelected("SIP_CC_OE_CR_V_013"));
    }
    function runCCOECRV014() return boolean {
      return (isSelected("SIP_CC_OE_CR_V_014"));
    }
    function runCCOECRV015() return boolean {
      return (isSelected("SIP_CC_OE_CR_V_015"));
    }
    function runCCOECRI001() return boolean {
      return (isSelected("SIP_CC_OE_CR_I_001"));
    }
    function runCCOECRTI001() return boolean {
      return (isSelected("SIP_CC_OE_CR_TI_001") and PX_UDP);
    }
    function runCCOECRTI002() return boolean {
      return (isSelected("SIP_CC_OE_CR_TI_002") and PX_UDP);
    }
    function runCCOECRTI003() return boolean {
      return (isSelected("SIP_CC_OE_CR_TI_003") and PX_UDP);
    }
    function runCCOECRTI004() return boolean {
      return (isSelected("SIP_CC_OE_CR_TI_004") and PX_UDP);
    }
    function runCCOECRTI005() return boolean {
      return (isSelected("SIP_CC_OE_CR_TI_005"));
    }
    function runCCOECRTI006() return boolean {
      return (isSelected("SIP_CC_OE_CR_TI_006"));
    }
    function runCCOECRTI007() return boolean {
      return (isSelected("SIP_CC_OE_CR_TI_007"));
    }
    function runCCOECRTI008() return boolean {
      return (isSelected("SIP_CC_OE_CR_TI_008"));
    }
    function runCCTECEV001() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_001"));
    }
    function runCCTECEV002() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_002") and PC_SHOULD);
    }
    function runCCTECEV003() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_003") and PC_SHOULD);
    }
    function runCCTECEV004() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_004"));
    }
    function runCCTECEV005() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_005") and PC_SHOULD);
    }
    function runCCTECEV006() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_006"));
    }
    function runCCTECEV007() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_007"));
    }
    function runCCTECEV008() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_008"));
    }
    function runCCTECEV009() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_009"));
    }
    function runCCTECEV010() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_010") and PC_SHOULD);
    }
    function runCCTECEV011() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_011"));
    }
    function runCCTECEV012() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_012"));
    }
    function runCCTECEV013() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_013") and PC_SHOULD);
    }
    function runCCTECEV014() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_014"));
    }
    function runCCTECEV015() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_015"));
    }
    function runCCTECEV016() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_016"));
    }
    function runCCTECEV017() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_017"));
    }
    function runCCTECEV018() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_018"));
    }
    function runCCTECEV019() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_019"));
    }
    function runCCTECEV020() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_020"));
    }
    function runCCTECEV021() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_021") and PC_SHOULD);
    }
    function runCCTECEV022() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_022"));
    }
    function runCCTECEV023() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_023"));
    }
    function runCCTECEV024() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_024"));
    }
    function runCCTECEV025() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_025") and PC_SHOULD);
    }
    function runCCTECEV026() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_026") and PC_SHOULD);
    }
    function runCCTECEV027() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_027") and PC_SHOULD);
    }
    function runCCTECEV028() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_028") and PC_SHOULD);
    }
    function runCCTECEV029() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_029") and PC_SHOULD);
    }
    function runCCTECEV030() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_030") and PC_SHOULD);
    }
    function runCCTECEV031() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_031"));
    }
    function runCCTECEV032() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_032"));
    }
    function runCCTECEV033() return boolean {
      return (isSelected("SIP_CC_TE_CE_V_033"));
    }
    function runCCTECEI001() return boolean {
      return (isSelected("SIP_CC_TE_CE_I_001"));
    }
    function runCCTECEI002() return boolean {
      return (isSelected("SIP_CC_TE_CE_I_002"));
    }
    function runCCTECETI001() return boolean {
      return (isSelected("SIP_CC_TE_CE_TI_001") and PX_UDP);
    }
    function runCCTECETI002() return boolean {
      return (isSelected("SIP_CC_TE_CE_TI_002") and (not PX_UDP));
    }
    function runCCTECETI003() return boolean {
      return (isSelected("SIP_CC_TE_CE_TI_003") and PX_UDP);
    }
    function runCCTECETI004() return boolean {
      return (isSelected("SIP_CC_TE_CE_TI_004") and PX_UDP);
    }
    function runCCTECETI005() return boolean {
      return (isSelected("SIP_CC_TE_CE_TI_005"));
    }
    function runCCTECETI006() return boolean {
      return (isSelected("SIP_CC_TE_CE_TI_006") and PX_UDP);
    }
    function runCCTECETI007() return boolean {
      return (isSelected("SIP_CC_TE_CE_TI_007") and PX_UDP);
    }
    function runCCTECETI008() return boolean {
      return (isSelected("SIP_CC_TE_CE_TI_008") and (not PX_UDP));
    }
    function runCCTECETI009() return boolean {
      return (isSelected("SIP_CC_TE_CE_TI_009"));
    }
    function runCCTECETI010() return boolean {
      return (isSelected("SIP_CC_TE_CE_TI_010"));
    }
    function runCCTECETI011() return boolean {
      return (isSelected("SIP_CC_TE_CE_TI_011"));
    }
    function runCCTECETI012() return boolean {
      return (isSelected("SIP_CC_TE_CE_TI_012") and PC_SHOULD);
    }
    function runCCTECRV001() return boolean {
      return (isSelected("SIP_CC_TE_CR_V_001"));
    }
    function runCCTECRV002() return boolean {
      return (isSelected("SIP_CC_TE_CR_V_002"));
    }
    function runCCTECRV003() return boolean {
      return (isSelected("SIP_CC_TE_CR_V_003"));
    }
    function runCCTECRV004() return boolean {
      return (isSelected("SIP_CC_TE_CR_V_004"));
    }
    function runCCTECRV005() return boolean {
      return (isSelected("SIP_CC_TE_CR_V_005"));
    }
    function runCCTECRV006() return boolean {
      return (isSelected("SIP_CC_TE_CR_V_006"));
    }
    function runCCTECRV007() return boolean {
      return (isSelected("SIP_CC_TE_CR_V_007") and PC_SHOULD);
    }
    function runCCTECRV008() return boolean {
      return (isSelected("SIP_CC_TE_CR_V_008") and PC_SHOULD);
    }
    function runCCTECRV009() return boolean {
      return (isSelected("SIP_CC_TE_CR_V_009") and PC_SHOULD);
    }
    function runCCTECRV010() return boolean {
      return (isSelected("SIP_CC_TE_CR_V_010"));
    }
    function runCCTECRV011() return boolean {
      return (isSelected("SIP_CC_TE_CR_V_011"));
    }
    function runCCTECRV012() return boolean {
      return (isSelected("SIP_CC_TE_CR_V_012"));
    }
    function runCCTECRV013() return boolean {
      return (isSelected("SIP_CC_TE_CR_V_013"));
    }
    function runCCTECRV014() return boolean {
      return (isSelected("SIP_CC_TE_CR_V_014"));
    }
    function runCCTECRV015() return boolean {
      return (isSelected("SIP_CC_TE_CR_V_015") and PC_SHOULD);
    }
    function runCCTECRV016() return boolean {
      return (isSelected("SIP_CC_TE_CR_V_016") and PC_SHOULD);
    }
    function runCCTECRV017() return boolean {
      return (isSelected("SIP_CC_TE_CR_V_017") and PC_SHOULD);
    }
    function runCCTECRV018() return boolean {
      return (isSelected("SIP_CC_TE_CR_V_018") and PC_SHOULD);
    }
    function runCCTECRV019() return boolean {
      return (isSelected("SIP_CC_TE_CR_V_019") and PC_SHOULD);
    }
    function runCCTECRV020() return boolean {
      return (isSelected("SIP_CC_TE_CR_V_020"));
    }
    function runCCTECRV021() return boolean {
      return (isSelected("SIP_CC_TE_CR_V_021"));
    }
    function runCCTECRI001() return boolean {
      return (isSelected("SIP_CC_TE_CR_I_001"));
    }
    function runCCTECRI002() return boolean {
      return (isSelected("SIP_CC_TE_CR_I_002"));
    }
    function runCCTECRI003() return boolean {
      return (isSelected("SIP_CC_TE_CR_I_003"));
    }
    function runCCTECRI004() return boolean {
      return (isSelected("SIP_CC_TE_CR_I_004") and PC_SHOULD);
    }
    function runCCTECRI005() return boolean {
      return (isSelected("SIP_CC_TE_CR_I_005") and PC_SHOULD);
    }
    function runCCTECRTI001() return boolean {
      return (isSelected("SIP_CC_TE_CR_TI_001"));
    }
    function runCCTESMV001() return boolean {
      return (isSelected("SIP_CC_TE_SM_V_001"));
    }
    function runCCTESMV002() return boolean {
      return (isSelected("SIP_CC_TE_SM_V_002"));
    }
    function runCCTESMV003() return boolean {
      return (isSelected("SIP_CC_TE_SM_V_003") and PC_SHOULD);
    }
    function runCCTESMI001() return boolean {
      return (isSelected("SIP_CC_TE_SM_I_001"));
    }
    function runCCPRMPRQV001() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_001") and PC_SHOULD);
    }
    function runCCPRMPRQV002() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_002"));
    }
    function runCCPRMPRQV003() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_003"));
    }
    function runCCPRMPRQV004() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_004"));
    }
    function runCCPRMPRQV005() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_005"));
    }
    function runCCPRMPRQV006() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_006"));
    }
    function runCCPRMPRQV007() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_007"));
    }
    function runCCPRMPRQV008() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_008") and PC_SHOULD);
    }
    function runCCPRMPRQV009() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_009"));
    }
    function runCCPRMPRQV010() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_010") and PC_SHOULD);
    }
    function runCCPRMPRQV011() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_011"));
    }
    function runCCPRMPRQV012() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_012"));
    }
    function runCCPRMPRQV013() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_013"));
    }
    function runCCPRMPRQV014() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_014") and PC_SHOULD);
    }
    function runCCPRMPRQV015() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_015"));
    }
    function runCCPRMPRQV016() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_016"));
    }
    function runCCPRMPRQV017() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_017"));
    }
    function runCCPRMPRQV018() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_018"));
    }
    function runCCPRMPRQV019() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_019"));
    }
    function runCCPRMPRQV020() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_020"));
    }
    function runCCPRMPRQV021() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_021"));
    }
    function runCCPRMPRQV022() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_022"));
    }
    function runCCPRMPRQV023() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_023"));
    }
    function runCCPRMPRQV024() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_024"));
    }
    function runCCPRMPRQV025() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_025"));
    }
    function runCCPRMPRQV026() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_026") and PC_SHOULD);
    }
    function runCCPRMPRQV027() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_027"));
    }
    function runCCPRMPRQV028() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_028"));
    }
    function runCCPRMPRQV029() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_029"));
    }
    function runCCPRMPRQV030() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_030"));
    }
    function runCCPRMPRQV031() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_031") and PC_SHOULD);
    }
    function runCCPRMPRQV032() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_032"));
    }
    function runCCPRMPRQV033() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_033"));
    }
    function runCCPRMPRQV034() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_034"));
    }
    function runCCPRMPRQV035() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_035"));
    }
    function runCCPRMPRQV036() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_036"));
    }
    function runCCPRMPRQV037() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_037"));
    }
    function runCCPRMPRQV038() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_038") and PC_SHOULD);
    }
    function runCCPRMPRQV039() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_039"));
    }
    function runCCPRMPRQV040() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_040") and PC_SHOULD);
    }
    function runCCPRMPRQV041() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_041"));
    }
    function runCCPRMPRQV042() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_042"));
    }
    function runCCPRMPRQV043() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_043"));
    }
    function runCCPRMPRQV044() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_044") and PC_SHOULD);
    }
    function runCCPRMPRQV045() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_045"));
    }
    function runCCPRMPRQV046() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_046"));
    }
    function runCCPRMPRQV047() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_047") and PC_SHOULD);
    }
    function runCCPRMPRQV048() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_048"));
    }
    function runCCPRMPRQV049() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_049") and PC_SHOULD);
    }
    function runCCPRMPRQV050() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_050"));
    }
    function runCCPRMPRQV051() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_051"));
    }
    function runCCPRMPRQV052() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_052"));
    }
    function runCCPRMPRQV053() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_053"));
    }
    function runCCPRMPRQV054() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_054"));
    }
    function runCCPRMPRQV055() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_055"));
    }
    function runCCPRMPRQV056() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_056") and PC_SHOULD);
    }
    function runCCPRMPRQV057() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_057"));
    }
    function runCCPRMPRQV058() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_058") and PC_SHOULD);
    }
    function runCCPRMPRQV059() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_059"));
    }
    function runCCPRMPRQV060() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_060"));
    }
    function runCCPRMPRQV061() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_061"));
    }
    function runCCPRMPRQV062() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_062") and PC_SHOULD);
    }
    function runCCPRMPRQV063() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_063"));
    }
    function runCCPRMPRQV064() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_064"));
    }
    function runCCPRMPRQV065() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_065"));
    }
    function runCCPRMPRQV066() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_066"));
    }
    function runCCPRMPRQV067() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_V_067") and PC_FORK);
    }
    function runCCPRMPRQI001() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_I_001"));
    }
    function runCCPRMPRQI002() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_I_002"));
    }
    function runCCPRMPRQI003() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_I_003"));
    }
    function runCCPRMPRQI004() return boolean {
      return (isSelected("SIP_CC_PR_MP_RQ_I_004"));
    }
    function runCCPRMPRSV001() return boolean {
      return (isSelected("SIP_CC_PR_MP_RS_V_001"));
    }
    function runCCPRMPRSV002() return boolean {
      return (isSelected("SIP_CC_PR_MP_RS_V_002"));
    }
    function runCCPRMPRSV003() return boolean {
      return (isSelected("SIP_CC_PR_MP_RS_V_003"));
    }
    function runCCPRMPRSV004() return boolean {
      return (isSelected("SIP_CC_PR_MP_RS_V_004"));
    }
    function runCCPRMPRSV005() return boolean {
      return (isSelected("SIP_CC_PR_MP_RS_V_005"));
    }
    function runCCPRMPRSV006() return boolean {
      return (isSelected("SIP_CC_PR_MP_RS_V_006") and PC_STATELESS);
    }
    function runCCPRMPRSV007() return boolean {
      return (isSelected("SIP_CC_PR_MP_RS_V_007"));
    }
    function runCCPRMPRSV008() return boolean {
      return (isSelected("SIP_CC_PR_MP_RS_V_008"));
    }
    function runCCPRMPRSV009() return boolean {
      return (isSelected("SIP_CC_PR_MP_RS_V_009"));
    }
    function runCCPRMPRSV010() return boolean {
      return (isSelected("SIP_CC_PR_MP_RS_V_010"));
    }
    function runCCPRMPRSV011() return boolean {
      return (isSelected("SIP_CC_PR_MP_RS_V_011"));
    }
    function runCCPRMPRSV012() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_012") and (not PC_STATELESS));
    }
    function runCCPRMPRSV013() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_013") and (not PC_STATELESS));
    }
    function runCCPRMPRSV014() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_014") and (not PC_STATELESS));
    }
    function runCCPRMPRSV015() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_015") and (not PC_STATELESS));
    }
    function runCCPRMPRSV016() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_016")
        and (not PC_STATELESS)
        and PC_SHOULD);
    }
    function runCCPRMPRSV017() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_017") and (not PC_STATELESS));
    }
    function runCCPRMPRSV018() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_018")
        and (not PC_STATELESS)
        and PC_FORK);
    }
    function runCCPRMPRSV019() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_019")
        and (not PC_STATELESS)
        and PC_FORK);
    }
    function runCCPRMPRSV020() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_020")
        and (not PC_STATELESS)
        and PC_FORK
        and PC_SHOULD);
    }
    function runCCPRMPRSV021() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_021")
        and (not PC_STATELESS)
        and PC_FORK
        and PC_SHOULD);
    }
    function runCCPRMPRSV022() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_022")
        and (not PC_STATELESS)
        and PC_FORK);
    }
    function runCCPRMPRSV023() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_023")
        and (not PC_STATELESS)
        and PC_FORK);
    }
    function runCCPRMPRSV024() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_024")
        and (not PC_STATELESS)
        and PC_FORK
        and PC_SHOULD);
    }
    function runCCPRMPRSV025() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_025")
        and (not PC_STATELESS)
        and PC_FORK);
    }
    function runCCPRMPRSV026() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_026")
        and (not PC_STATELESS)
        and PC_FORK
        and PC_SHOULD);
    }
    function runCCPRMPRSV027() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_027")
        and (not PC_STATELESS)
        and PC_FORK
        and PC_SHOULD);
    }
    function runCCPRMPRSV028() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_028")
        and (not PC_STATELESS)
        and PC_FORK
        and PC_SHOULD);
    }
    function runCCPRMPRSV029() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_029")
        and (not PC_STATELESS)
        and PC_FORK
        and PC_SHOULD);
    }
    function runCCPRMPRSV030() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_030")
        and (not PC_STATELESS)
        and PC_FORK
        and PC_SHOULD);
    }
    function runCCPRMPRSV031() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_031")
        and (not PC_STATELESS)
        and PC_FORK
        and PC_SHOULD);
    }
    function runCCPRMPRSV032() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_032")
        and (not PC_STATELESS)
        and PC_FORK);
    }
    function runCCPRMPRSV033() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_033")
        and (not PC_STATELESS)
        and PC_FORK);
    }
    function runCCPRMPRSV034() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_034")
        and (not PC_STATELESS)
        and PC_FORK);
    }
    function runCCPRMPRSV035() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_035")
        and (not PC_STATELESS)
        and PC_FORK
        and PC_SHOULD);
    }
    function runCCPRMPRSV036() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_036")
        and (not PC_STATELESS)
        and PC_FORK
        and PC_SHOULD);
    }
    function runCCPRMPRSV037() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_037")
        and (not PC_STATELESS)
        and PC_FORK
        and PC_SHOULD);
    }
    function runCCPRMPRSV038() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_038")
        and (not PC_STATELESS)
        and PC_FORK
        and PC_SHOULD);
    }
    function runCCPRMPRSV039() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_039")
        and (not PC_STATELESS)
        and PC_FORK
        and PC_SHOULD);
    }
    function runCCPRMPRSV040() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_040")
        and (not PC_STATELESS)
        and PC_FORK);
    }
    function runCCPRMPRSV041() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_041")
        and (not PC_STATELESS)
        and PC_FORK);
    }
    function runCCPRMPRSV042() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_042")
        and (not PC_STATELESS)
        and PC_FORK);
    }
    function runCCPRMPRSV043() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_043")
        and (not PC_STATELESS)
        and PC_FORK);
    }
    function runCCPRMPRSV044() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_044")
        and (not PC_STATELESS)
        and PC_FORK);
    }
    function runCCPRMPRSV045() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_045")
        and (not PC_STATELESS)
        and PC_FORK);
    }
    function runCCPRMPRSV046() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_046")
        and (not PC_STATELESS)
        and PC_FORK);
    }
    function runCCPRMPRSV047() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_047")
        and (not PC_STATELESS)
        and PC_FORK);
    }
    function runCCPRMPRSV048() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_048")
        and (not PC_STATELESS)
        and PC_FORK);
    }
    function runCCPRMPRSV049() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_049")
        and (not PC_STATELESS)
        and PC_FORK);
    }
    function runCCPRMPRSV050() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_050")
        and (not PC_STATELESS)
        and PC_FORK);
    }
    function runCCPRMPRSV051() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_051")
        and (not PC_STATELESS)
        and PC_FORK);
    }
    function runCCPRMPRSV052() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_052")
        and (not PC_STATELESS)
        and PC_FORK);
    }
    function runCCPRMPRSV053() return boolean {
      return (
        isSelected("SIP_CC_PR_MP_RS_V_053")
        and (not PC_STATELESS)
        and PC_FORK);
    }
    function runCCPRTRCLV001() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_CL_V_001") and (not PC_STATELESS));
    }
    function runCCPRTRCLV002() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_CL_V_002") and (not PC_STATELESS));
    }
    function runCCPRTRCLV003() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_CL_V_003") and (not PC_STATELESS));
    }
    function runCCPRTRCLV004() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_CL_V_004") and (not PC_STATELESS));
    }
    function runCCPRTRCLV005() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_CL_V_005") and (not PC_STATELESS));
    }
    function runCCPRTRCLV006() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_CL_V_006") and (not PC_STATELESS));
    }
    function runCCPRTRCLV007() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_CL_V_007") and (not PC_STATELESS));
    }
    function runCCPRTRCLV008() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_CL_V_008") and (not PC_STATELESS));
    }
    function runCCPRTRCLV009() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_CL_V_009") and (not PC_STATELESS));
    }
    function runCCPRTRCLV010() return boolean {
      return (isSelected("SIP_CC_PR_TR_CL_V_010"));
    }
    function runCCPRTRCLV011() return boolean {
      return (isSelected("SIP_CC_PR_TR_CL_V_011"));
    }
    function runCCPRTRCLTI001() return boolean {
      return (isSelected("SIP_CC_PR_TR_CL_TI_001") and PX_UDP);
    }
    function runCCPRTRCLTI002() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_CL_TI_002")
        and (not PX_UDP)
        and PC_SHOULD);
    }
    function runCCPRTRCLTI003() return boolean {
      return (isSelected("SIP_CC_PR_TR_CL_TI_003") and PX_UDP);
    }
    function runCCPRTRCLTI004() return boolean {
      return (isSelected("SIP_CC_PR_TR_CL_TI_004") and PX_UDP);
    }
    function runCCPRTRCLTI005() return boolean {
      return (isSelected("SIP_CC_PR_TR_CL_TI_005"));
    }
    function runCCPRTRCLTI006() return boolean {
      return (isSelected("SIP_CC_PR_TR_CL_TI_006") and PC_SHOULD);
    }
    function runCCPRTRCLTI007() return boolean {
      return (isSelected("SIP_CC_PR_TR_CL_TI_007") and PC_SHOULD);
    }
    function runCCPRTRCLTI008() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_CL_TI_008")
        and PC_SHOULD
        and PX_UDP);
    }
    function runCCPRTRCLTI009() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_CL_TI_009")
        and (not PX_UDP)
        and PC_SHOULD);
    }
    function runCCPRTRCLTI010() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_CL_TI_010")
        and PX_UDP
        and PC_SHOULD);
    }
    function runCCPRTRCLTI011() return boolean {
      return (isSelected("SIP_CC_PR_TR_CL_TI_011"));
    }
    function runCCPRTRCLTI012() return boolean {
      return (isSelected("SIP_CC_PR_TR_CL_TI_012") and PX_UDP);
    }
    function runCCPRTRCLTI013() return boolean {
      return (isSelected("SIP_CC_PR_TR_CL_TI_013") and PX_UDP);
    }
    function runCCPRTRCLTI014() return boolean {
      return (isSelected("SIP_CC_PR_TR_CL_TI_014") and PX_UDP);
    }
    function runCCPRTRCLTI015() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_CL_TI_015")
        and PX_UDP
        and PC_SHOULD);
    }
    function runCCPRTRCLTI016() return boolean {
      return (isSelected("SIP_CC_PR_TR_CL_TI_016"));
    }
    function runCCPRTRCLTI017() return boolean {
      return (isSelected("SIP_CC_PR_TR_CL_TI_017"));
    }
    function runCCPRTRCLTI018() return boolean {
      return (isSelected("SIP_CC_PR_TR_CL_TI_018"));
    }
    function runCCPRTRCLTI019() return boolean {
      return (isSelected("SIP_CC_PR_TR_CL_TI_019") and PC_SHOULD);
    }
    function runCCPRTRSEV001() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_001") and (not PC_STATELESS));
    }
    function runCCPRTRSEV002() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_002") and (not PC_STATELESS));
    }
    function runCCPRTRSEV003() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_003") and (not PC_STATELESS));
    }
    function runCCPRTRSEV004() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_004") and (not PC_STATELESS));
    }
    function runCCPRTRSEV005() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_005") and (not PC_STATELESS));
    }
    function runCCPRTRSEV006() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_006") and (not PC_STATELESS));
    }
    function runCCPRTRSEV007() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_007") and (not PC_STATELESS));
    }
    function runCCPRTRSEV008() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_008") and (not PC_STATELESS));
    }
    function runCCPRTRSEV009() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_009")
        and (not PC_STATELESS)
        and PC_SHOULD);
    }
    function runCCPRTRSEV010() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_010")
        and (not PC_STATELESS)
        and PC_SHOULD);
    }
    function runCCPRTRSEV011() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_011")
        and (not PC_STATELESS)
        and PC_SHOULD);
    }
    function runCCPRTRSEV012() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_012") and (not PC_STATELESS));
    }
    function runCCPRTRSEV013() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_013") and (not PC_STATELESS));
    }
    function runCCPRTRSEV014() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_014") and (not PC_STATELESS));
    }
    function runCCPRTRSEV015() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_015") and (not PC_STATELESS));
    }
    function runCCPRTRSEV016() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_016")
        and (not PC_STATELESS)
        and PC_SHOULD);
    }
    function runCCPRTRSEV017() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_017")
        and (not PC_STATELESS)
        and PC_SHOULD);
    }
    function runCCPRTRSEV018() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_018") and (not PC_STATELESS));
    }
    function runCCPRTRSEV019() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_019")
        and (not PC_STATELESS)
        and PC_SHOULD);
    }
    function runCCPRTRSEV020() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_020") and (not PC_STATELESS));
    }
    function runCCPRTRSEV021() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_021")
        and (not PC_STATELESS)
        and PC_SHOULD);
    }
    function runCCPRTRSEV022() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_022") and (not PC_STATELESS));
    }
    function runCCPRTRSEV023() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_023")
        and (not PC_STATELESS)
        and PC_SHOULD);
    }
    function runCCPRTRSEV024() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_024")
        and (not PC_STATELESS)
        and PX_UDP);
    }
    function runCCPRTRSEV025() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_025")
        and (not PC_STATELESS)
        and PX_UDP);
    }
    function runCCPRTRSEV026() return boolean {
      return (
        isSelected("SIP_CC_PR_TR_SE_V_026")
        and (not PC_STATELESS)
        and PX_UDP);
    }
    function runCCPRTRSEV027() return boolean {
      return (isSelected("SIP_CC_PR_TR_SE_V_027"));
    }
    function runCCPRTRSEV028() return boolean {
      return (isSelected("SIP_CC_PR_TR_SE_V_028"));
    }
    function runCCPRTRSEV029() return boolean {
      return (isSelected("SIP_CC_PR_TR_SE_V_029") and PC_SHOULD);
    }
    function runCCPRTRSEV030() return boolean {
      return (isSelected("SIP_CC_PR_TR_SE_V_030"));
    }
    function runCCPRTRSEV031() return boolean {
      return (isSelected("SIP_CC_PR_TR_SE_V_031"));
    }
    function runCCPRTRSETI001() return boolean {
      return (isSelected("SIP_CC_PR_TR_SE_TI_001") and PX_UDP);
    }
    function runCCPRTRSETI002() return boolean {
      return (isSelected("SIP_CC_PR_TR_SE_TI_002") and (not PX_UDP));
    }
    function runCCPRTRSETI003() return boolean {
      return (isSelected("SIP_CC_PR_TR_SE_TI_003") and PX_UDP);
    }
    function runCCPRTRSETI004() return boolean {
      return (isSelected("SIP_CC_PR_TR_SE_TI_004") and PX_UDP);
    }
    function runCCPRTRSETI005() return boolean {
      return (isSelected("SIP_CC_PR_TR_SE_TI_005"));
    }
    function runCCPRTRSETI006() return boolean {
      return (isSelected("SIP_CC_PR_TR_SE_TI_006") and PX_UDP);
    }
    function runCCPRTRSETI007() return boolean {
      return (isSelected("SIP_CC_PR_TR_SE_TI_007") and PX_UDP);
    }
    function runCCPRTRSETI008() return boolean {
      return (isSelected("SIP_CC_PR_TR_SE_TI_008") and (not PX_UDP));
    }
    function runCCPRTRSETI009() return boolean {
      return (isSelected("SIP_CC_PR_TR_SE_TI_009") and PX_UDP);
    }
    function runCCRDCEV001() return boolean {
      return (isSelected("SIP_CC_RD_CE_V_001"));
    }
    function runCCRDCEV002() return boolean {
      return (isSelected("SIP_CC_RD_CE_V_002"));
    }
    function runCCRDCEV003() return boolean {
      return (isSelected("SIP_CC_RD_CE_V_003"));
    }
    function runCCRDCEV004() return boolean {
      return (isSelected("SIP_CC_RD_CE_V_004"));
    }
    function runCCRDCEV005() return boolean {
      return (isSelected("SIP_CC_RD_CE_V_005"));
    }
    function runCCRDCEV006() return boolean {
      return (isSelected("SIP_CC_RD_CE_V_006"));
    }
    function runCCRDCEV007() return boolean {
      return (isSelected("SIP_CC_RD_CE_V_007"));
    }
    function runCCRDCEV008() return boolean {
      return (isSelected("SIP_CC_RD_CE_V_008"));
    }
    function runCCRDCRV001() return boolean {
      return (isSelected("SIP_CC_RD_CR_V_001") and PC_SHOULD);
    }
    function runCCRDCRV002() return boolean {
      return (isSelected("SIP_CC_RD_CR_V_002"));
    }
    function runMGRTV001() return boolean {
      return (isSelected("SIP_MG_RT_V_001"));
    }
    function runMGRTV002() return boolean {
      return (isSelected("SIP_MG_RT_V_002"));
    }
    function runMGRTV003() return boolean {
      return (isSelected("SIP_MG_RT_V_003"));
    }
    function runMGRTV004() return boolean {
      return (isSelected("SIP_MG_RT_V_004"));
    }
    function runMGRTV005() return boolean {
      return (isSelected("SIP_MG_RT_V_005"));
    }
    function runMGRTV006() return boolean {
      return (isSelected("SIP_MG_RT_V_006"));
    }
    function runMGRTV007() return boolean {
      return (isSelected("SIP_MG_RT_V_007"));
    }
    function runMGRTV008() return boolean {
      return (isSelected("SIP_MG_RT_V_008"));
    }
    function runMGRTI001() return boolean {
      return (isSelected("SIP_MG_RT_I_001"));
    }
    function runMGRTI002() return boolean {
      return (isSelected("SIP_MG_RT_I_002"));
    }
    function runMGRTI003() return boolean {
      return (isSelected("SIP_MG_RT_I_003"));
    }
    function runMGRTI004() return boolean {
      return (isSelected("SIP_MG_RT_I_004"));
    }
    function runMGRTI005() return boolean {
      return (isSelected("SIP_MG_RT_I_005"));
    }
    function runMGRRV001() return boolean {
      return (isSelected("SIP_MG_RR_V_001"));
    }
    function runMGRRV002() return boolean {
      return (isSelected("SIP_MG_RR_V_002"));
    }
    function runMGRRV003() return boolean {
      return (isSelected("SIP_MG_RR_V_003"));
    }
    function runMGRRV004() return boolean {
      return (isSelected("SIP_MG_RR_V_004"));
    }
    function runMGRRV005() return boolean {
      return (isSelected("SIP_MG_RR_V_005"));
    }
    function runMGRRV006() return boolean {
      return (isSelected("SIP_MG_RR_V_006"));
    }
    function runMGRRV007() return boolean {
      return (isSelected("SIP_MG_RR_V_007"));
    }
    function runMGRRV008() return boolean {
      return (isSelected("SIP_MG_RR_V_008"));
    }
    function runMGRRV009() return boolean {
      return (isSelected("SIP_MG_RR_V_009"));
    }
    function runMGRRV010() return boolean {
      return (isSelected("SIP_MG_RR_V_010"));
    }
    function runMGRRV011() return boolean {
      return (isSelected("SIP_MG_RR_V_011"));
    }
    function runMGRRV012() return boolean {
      return (isSelected("SIP_MG_RR_V_012"));
    }
    function runMGRRV013() return boolean {
      return (isSelected("SIP_MG_RR_V_013"));
    }
    function runMGRRI001() return boolean {
      return (isSelected("SIP_MG_RR_I_001"));
    }
    function runMGRRI002() return boolean {
      return (isSelected("SIP_MG_RR_I_002"));
    }
    function runMGRRI003() return boolean {
      return (isSelected("SIP_MG_RR_I_003"));
    }
    function runMGRRI004() return boolean {
      return (isSelected("SIP_MG_RR_I_004"));
    }
    function runMGRRI005() return boolean {
      return (isSelected("SIP_MG_RR_I_005"));
    }
    function runMGRRI006() return boolean {
      return (isSelected("SIP_MG_RR_I_006") and PC_SHOULD);
    }
    function runMGOEV001() return boolean {
      return (isSelected("SIP_MG_OE_V_001"));
    }
    function runMGOEV002() return boolean {
      return (isSelected("SIP_MG_OE_V_002"));
    }
    function runMGOEV003() return boolean {
      return (isSelected("SIP_MG_OE_V_003"));
    }
    function runMGOEV004() return boolean {
      return (isSelected("SIP_MG_OE_V_004"));
    }
    function runMGOEV005() return boolean {
      return (isSelected("SIP_MG_OE_V_005"));
    }
    function runMGOEV006() return boolean {
      return (isSelected("SIP_MG_OE_V_006"));
    }
    function runMGOEV007() return boolean {
      return (isSelected("SIP_MG_OE_V_007"));
    }
    function runMGOEV008() return boolean {
      return (isSelected("SIP_MG_OE_V_008"));
    }
    function runMGOEV009() return boolean {
      return (isSelected("SIP_MG_OE_V_009"));
    }
    function runMGOEV010() return boolean {
      return (isSelected("SIP_MG_OE_V_010"));
    }
    function runMGOEV011() return boolean {
      return (isSelected("SIP_MG_OE_V_011"));
    }
    function runMGOEV012() return boolean {
      return (isSelected("SIP_MG_OE_V_012"));
    }
    function runMGOEV013() return boolean {
      return (isSelected("SIP_MG_OE_V_013"));
    }
    function runMGOEV014() return boolean {
      return (isSelected("SIP_MG_OE_V_014"));
    }
    function runMGOEV015() return boolean {
      return (isSelected("SIP_MG_OE_V_015"));
    }
    function runMGOEI001() return boolean {
      return (isSelected("SIP_MG_OE_I_001"));
    }
    function runMGOEI002() return boolean {
      return (isSelected("SIP_MG_OE_I_002"));
    }
    function runMGOEI003() return boolean {
      return (isSelected("SIP_MG_OE_I_003"));
    }
    function runMGOEI004() return boolean {
      return (isSelected("SIP_MG_OE_I_004"));
    }
    function runMGOEI005() return boolean {
      return (isSelected("SIP_MG_OE_I_005"));
    }
    function runMGOEI006() return boolean {
      return (isSelected("SIP_MG_OE_I_006"));
    }
    function runMGOEI007() return boolean {
      return (isSelected("SIP_MG_OE_I_007"));
    }
    function runMGOEI008() return boolean {
      return (isSelected("SIP_MG_OE_I_008"));
    }
    function runMGOEI009() return boolean {
      return (isSelected("SIP_MG_OE_I_009") and PC_SHOULD);
    }
    function runMGOEI010() return boolean {
      return (isSelected("SIP_MG_OE_I_010") and PC_SHOULD);
    }
    function runMGTEV001() return boolean {
      return (isSelected("SIP_MG_TE_V_001"));
    }
    function runMGTEV002() return boolean {
      return (isSelected("SIP_MG_TE_V_002"));
    }
    function runMGTEV003() return boolean {
      return (isSelected("SIP_MG_TE_V_003"));
    }
    function runMGTEV004() return boolean {
      return (isSelected("SIP_MG_TE_V_004"));
    }
    function runMGTEV005() return boolean {
      return (isSelected("SIP_MG_TE_V_005"));
    }
    function runMGTEV006() return boolean {
      return (isSelected("SIP_MG_TE_V_006"));
    }
    function runMGTEV007() return boolean {
      return (isSelected("SIP_MG_TE_V_007"));
    }
    function runMGTEV008() return boolean {
      return (isSelected("SIP_MG_TE_V_008"));
    }
    function runMGTEV009() return boolean {
      return (isSelected("SIP_MG_TE_V_009"));
    }
    function runMGTEV010() return boolean {
      return (isSelected("SIP_MG_TE_V_010"));
    }
    function runMGTEV011() return boolean {
      return (isSelected("SIP_MG_TE_V_011"));
    }
    function runMGTEV012() return boolean {
      return (isSelected("SIP_MG_TE_V_012"));
    }
    function runMGTEV013() return boolean {
      return (isSelected("SIP_MG_TE_V_013"));
    }
    function runMGTEV014() return boolean {
      return (isSelected("SIP_MG_TE_V_014"));
    }
    function runMGTEV015() return boolean {
      return (isSelected("SIP_MG_TE_V_015"));
    }
    function runMGTEI001() return boolean {
      return (isSelected("SIP_MG_TE_I_001"));
    }
    function runMGTEI002() return boolean {
      return (isSelected("SIP_MG_TE_I_002"));
    }
    function runMGTEI003() return boolean {
      return (isSelected("SIP_MG_TE_I_003"));
    }
    function runMGTEI004() return boolean {
      return (isSelected("SIP_MG_TE_I_004"));
    }
    function runMGTEI005() return boolean {
      return (isSelected("SIP_MG_TE_I_005") and PC_SHOULD);
    }
    function runMGTEI006() return boolean {
      return (isSelected("SIP_MG_TE_I_006") and PC_SHOULD);
    }
    function runMGTEI007() return boolean {
      return (isSelected("SIP_MG_TE_I_007") and PC_SHOULD);
    }
    function runMGTEI008() return boolean {
      return (isSelected("SIP_MG_TE_I_008") and PC_SHOULD);
    }
    function runMGPRV001() return boolean {
      return (isSelected("SIP_MG_PR_V_001"));
    }
    function runMGPRV002() return boolean {
      return (isSelected("SIP_MG_PR_V_002"));
    }
    function runMGPRV003() return boolean {
      return (isSelected("SIP_MG_PR_V_003"));
    }
    function runMGPRV004() return boolean {
      return (isSelected("SIP_MG_PR_V_004"));
    }
    function runMGPRV005() return boolean {
      return (isSelected("SIP_MG_PR_V_005"));
    }
    function runMGPRV006() return boolean {
      return (isSelected("SIP_MG_PR_V_006"));
    }
    function runMGPRV007() return boolean {
      return (isSelected("SIP_MG_PR_V_007"));
    }
    function runMGPRV008() return boolean {
      return (isSelected("SIP_MG_PR_V_008"));
    }
    function runMGPRV009() return boolean {
      return (isSelected("SIP_MG_PR_V_009"));
    }
    function runMGPRV010() return boolean {
      return (isSelected("SIP_MG_PR_V_010"));
    }
    function runMGPRV011() return boolean {
      return (isSelected("SIP_MG_PR_V_011"));
    }
    function runMGPRV012() return boolean {
      return (isSelected("SIP_MG_PR_V_012"));
    }
    function runMGPRV013() return boolean {
      return (isSelected("SIP_MG_PR_V_013"));
    }
    function runMGPRV014() return boolean {
      return (isSelected("SIP_MG_PR_V_014"));
    }
    function runMGPRV015() return boolean {
      return (isSelected("SIP_MG_PR_V_015"));
    }
    function runMGPRV016() return boolean {
      return (isSelected("SIP_MG_PR_V_016"));
    }
    function runMGPRI001() return boolean {
      return (isSelected("SIP_MG_PR_I_001"));
    }
    function runMGPRI002() return boolean {
      return (isSelected("SIP_MG_PR_I_002"));
    }
    function runMGPRI003() return boolean {
      return (isSelected("SIP_MG_PR_I_003"));
    }
    function runMGPRI004() return boolean {
      return (isSelected("SIP_MG_PR_I_004"));
    }
    function runMGPRI005() return boolean {
      return (isSelected("SIP_MG_PR_I_005") and PC_SHOULD);
    }
    function runMGPRI006() return boolean {
      return (isSelected("SIP_MG_PR_I_006"));
    }
    function runMGPRI007() return boolean {
      return (isSelected("SIP_MG_PR_I_007") and PC_SHOULD);
    }
    function runMGPRI008() return boolean {
      return (isSelected("SIP_MG_PR_I_008") and PC_SHOULD);
    }
    function runMGPRI009() return boolean {
      return (isSelected("SIP_MG_PR_I_009") and PC_SHOULD);
    }
    function runMGPRI010() return boolean {
      return (isSelected("SIP_MG_PR_I_010") and PC_SHOULD);
    }
    function runMGRDV001() return boolean {
      return (isSelected("SIP_MG_RD_V_001"));
    }
    function runMGRDV002() return boolean {
      return (isSelected("SIP_MG_RD_V_002"));
    }
    function runMGRDV003() return boolean {
      return (isSelected("SIP_MG_RD_V_003"));
    }
    function runMGRDV004() return boolean {
      return (isSelected("SIP_MG_RD_V_004"));
    }
    function runMGRDV005() return boolean {
      return (isSelected("SIP_MG_RD_V_005"));
    }
    function runMGRDV006() return boolean {
      return (isSelected("SIP_MG_RD_V_006"));
    }
    function runMGRDV007() return boolean {
      return (isSelected("SIP_MG_RD_V_007"));
    }
    function runMGRDV008() return boolean {
      return (isSelected("SIP_MG_RD_V_008"));
    }
    function runMGRDV009() return boolean {
      return (isSelected("SIP_MG_RD_V_009"));
    }
    function runMGRDV010() return boolean {
      return (isSelected("SIP_MG_RD_V_010"));
    }
    function runMGRDV011() return boolean {
      return (isSelected("SIP_MG_RD_V_011"));
    }
    function runMGRDV012() return boolean {
      return (isSelected("SIP_MG_RD_V_012"));
    }
    function runMGRDV013() return boolean {
      return (isSelected("SIP_MG_RD_V_013"));
    }
    function runMGRDV014() return boolean {
      return (isSelected("SIP_MG_RD_V_014"));
    }
    function runMGRDI001() return boolean {
      return (isSelected("SIP_MG_RD_I_001"));
    }
    function runMGRDI002() return boolean {
      return (isSelected("SIP_MG_RD_I_002"));
    }
    function runMGRDI003() return boolean {
      return (isSelected("SIP_MG_RD_I_003"));
    }
    function runMGRDI004() return boolean {
      return (isSelected("SIP_MG_RD_I_004"));
    }
    function runMGRDI005() return boolean {
      return (isSelected("SIP_MG_RD_I_005") and PC_SHOULD);
    }
    function runMGRDI006() return boolean {
      return (isSelected("SIP_MG_RD_I_006"));
    }
    function runMGRDI007() return boolean {
      return (isSelected("SIP_MG_RD_I_007") and PC_SHOULD);
    }
    function runMGRDI008() return boolean {
      return (isSelected("SIP_MG_RD_I_008") and PC_SHOULD);
    }
  }
  group TestGroupSelectionExpressions {
    function runRGRT() return boolean {
      return (PC_REGISTRATION and PC_UA);
    }
    function runRGRR() return boolean {
      return (PC_PROXY or PC_REDIRECTS);
    }
    function runCCOE() return boolean {
      return (PC_UA);
    }
    function runCCTE() return boolean {
      return (PC_UA);
    }
    function runCCPR() return boolean {
      return (PC_PROXY);
    }
    function runCCRD() return boolean {
      return (PC_REDIRECTS);
    }
    function runMGRT() return boolean {
      return (PC_REGISTRATION and PC_UA);
    }
    function runMGRR() return boolean {
      return (PC_PROXY or PC_REDIRECTS);
    }
    function runMGOE() return boolean {
      return (PC_UA);
    }
    function runMGTE() return boolean {
      return (PC_UA);
    }
    function runMGPR() return boolean {
      return (PC_PROXY);
    }
    function runMGRD() return boolean {
      return (PC_REDIRECTS);
    }
  }
  group FieldOperations {
    function addTagInTo(inout To loc_To) runs on SipComponent {
      addParameterTagIfNotPresent(TAG_ID, getRndTag(), loc_To);
    }
    
    // Build the request URI according to 12.2.1.1 of [1] to be done
    function buildRequestURI(
      inout HostPort loc_reqHostPort,
      in To loc_To) runs on SipComponent {
    }
    
    function buildRequestURI_BYE(
      in HostPort loc_reqHostPort,
      in To loc_To) runs on SipComponent {
      //RGy (2007-09-21) Content is identical to the template SipUrl_ofBYE
      v_RequestUri := {
        scheme := SIP_SCHEME, // contains "sip"
        userInfo := omit,
        hostPort := loc_reqHostPort,
        urlParameters := omit,
        headers := omit
      }
      if (ischosen (loc_To.addressField.nameAddr)) {
        if (ispresent (loc_To.addressField.nameAddr.addrSpec.userInfo)) {
          if (ispresent (loc_To.addressField.nameAddr.addrSpec.userInfo.userOrTelephoneSubscriber)){
            v_RequestUri.userInfo := {
              userOrTelephoneSubscriber :=
              loc_To.addressField.nameAddr.addrSpec.userInfo.userOrTelephoneSubscriber,
              password := omit
            }
          }
        }
      } else {          
        if (ispresent (loc_To.addressField.addrSpecUnion.userInfo)){
          if (ispresent (loc_To.addressField.addrSpecUnion.userInfo.userOrTelephoneSubscriber)){
            v_RequestUri.userInfo := {
              userOrTelephoneSubscriber :=
              loc_To.addressField.addrSpecUnion.userInfo.userOrTelephoneSubscriber,
              password := omit
            }
          }
        }
      }
    }
    
    function getViaReplyAddr(
      inout ViaBody_List loc_ViaBody_List,
      inout Addr loc_source_address) runs on SipComponent {
      var ViaBody vl_ViaBody;
      var HostPort vl_Addr;
      
      vl_ViaBody := loc_ViaBody_List[0];
      if (not equivalentHostAddr(valueof(vl_ViaBody.sentBy.host),
          valueof(loc_source_address.host))) {
        addParameterIfNotPresent(
          RECEIVED_ID,
          valueof(loc_source_address.host),
          vl_ViaBody);
      }
      if (ispresent (vl_ViaBody.sentBy.portField)) {
        loc_source_address.portField :=
        valueof(vl_ViaBody.sentBy.portField);
      } else {
        loc_source_address.portField := DEFAULT_SIP_PORT;
      }
    }
    
    function getContactAddr(in ContactAddress loc_contact) runs on SipComponent return HostPort {
      var HostPort vl_Addr;
      var SipUrl vl_SipUrl;
      
      if (ischosen (loc_contact.addressField.nameAddr)) {
        vl_SipUrl := loc_contact.addressField.nameAddr.addrSpec;
      } else {
        vl_SipUrl := loc_contact.addressField.addrSpecUnion;
      }
      vl_Addr.host := vl_SipUrl.hostPort.host;
      
      if (ispresent (vl_SipUrl.hostPort.portField)) {
        vl_Addr.portField := vl_SipUrl.hostPort.portField;
      } else {
        vl_Addr.portField := DEFAULT_SIP_PORT;
      }
      return (vl_Addr);
    }
    function getContactAddr_Reg(in ContactAddress loc_contact) runs on SipComponent return HostPort {
      var HostPort vl_Addr;
      var SipUrl vl_SipUrl;
      
      if (ischosen (loc_contact.addressField.nameAddr)) {
        vl_SipUrl := loc_contact.addressField.nameAddr.addrSpec;
      } else {
        vl_SipUrl := loc_contact.addressField.addrSpecUnion;
      }
      
      if (ispresent (vl_SipUrl.urlParameters)) {
        var integer vl_nb_params := sizeof (vl_SipUrl.urlParameters);
        
        for (var integer i := 0; i < vl_nb_params; i := i + 1) {
          if (ispresent (vl_SipUrl.urlParameters[i].id)) {
            var charstring vl_id := vl_SipUrl.urlParameters[i].id;
            log ("Detected SipUrl parameter ID: " & vl_id);
          }
          if (ispresent (vl_SipUrl.urlParameters[i].paramValue)) {
            var charstring vl_paramValue :=
            vl_SipUrl.urlParameters[i].paramValue;
            log ("Detected SipUrl parameter Value: " & vl_paramValue);
          }
        }
      }
      vl_Addr.host := vl_SipUrl.hostPort.host;
      
      if (ispresent (vl_SipUrl.hostPort.portField)) {
        var integer vl_portField := vl_SipUrl.hostPort.portField;
        log ("Used Port: " & int2str (vl_portField));
        vl_Addr.portField := vl_portField;
      } else {
        vl_Addr.portField := DEFAULT_SIP_PORT;
      }
      return (vl_Addr);
    }
    
    function getToParamFromResponse (in Response loc_Response) return GenericParam {
      var integer n := sizeof(loc_Response.msgHeader.toField.toParams);
      for (var integer i:= 0; i<n; i:= i+1) {
        if (loc_Response.msgHeader.toField.toParams[i].id=="tag"){
          return loc_Response.msgHeader.toField.toParams[i]
        }
      }
      return {id:="tag",paramValue:=""}
    }
    
    function getAddressFromToHeader (in To loc_To) return SipUrl {
      if (ischosen (loc_To.addressField.nameAddr)) {
        return loc_To.addressField.nameAddr.addrSpec
      } else {
        return loc_To.addressField.addrSpecUnion
      }  
    }
    
    
    function updateContactAddress_List(
      inout Contact loc_Contact,
      in charstring loc_time_expire_value) runs on SipComponent {
      var integer i;
      var integer j;
      var integer vl_nb_contacts;
      var integer vl_nb_params;
      var SemicolonParam_List vl_contact_params;
      
      vl_nb_contacts :=
      sizeof (loc_Contact.contactBody.contactAddresses);
      for (j := 0; j < vl_nb_contacts; j := j + 1) {
        if (ispresent (loc_Contact
            .contactBody
            .contactAddresses[j]
            .contactParams)) {
          vl_contact_params :=
          valueof(
            loc_Contact
            .contactBody
            .contactAddresses[j]
            .contactParams);
          vl_nb_params := sizeof (vl_contact_params);
          
          loc_Contact
          .contactBody
          .contactAddresses[j]
          .contactParams[0] := {
            EXPIRES_ID,
            loc_time_expire_value
          };
        } else {
          loc_Contact
          .contactBody
          .contactAddresses[j]
          .contactParams := {
            {
              EXPIRES_ID,
              loc_time_expire_value
            }
          };
        }
      }
    }
    // Function to calculate credentials for request that has an empty
    // entity body such as a REGISTER message.
    function calculateCredentials(
      in charstring loc_method,
      in CommaParam_List loc_challenge,
      in charstring loc_User,
      in charstring loc_password) return Credentials  { //charstring {
      
      
      var Credentials vl_Credentials;  
      var charstring vl_result := "";
      var charstring vl_nonce := "";
      
      // Use a fixed client nonce.
      var charstring vl_cnonce := "01234567890abcdef01234567890abcdef";
      
      // RFC 2617 3.2.2 username:
      // The name of user in the specified realm.
      //var charstring vl_username := PX_RFC2617_USERNAME;
      var charstring vl_username := loc_User;
      
      var charstring vl_realm;
      
      // RFC 2617 3.2.2.2 passwd:
      // A known shared secret, the password of user of the specified
      // username.
      var charstring vl_passwd := loc_password;
      
      var charstring vl_algorithm := "";
      
      // Use a fixed nonce count.
      const charstring cl_nonceCount := "00000001";
      
      var charstring vl_qop := PX_QOP;
      
      var charstring vl_uri :=
      "sip:" & PX_IUT_HOME_DOMAIN & ":" & int2str (PX_IUT_PORT);
      
      //var charstring vl_uri := PX_RFC2617_URI;
      // MD5 hash of empty entity body.
      const charstring cl_hEntity := "d41d8cd98f00b204e9800998ecf8427e";
      
      var charstring vl_response := "";
      var charstring vl_opaque := "";
      
      // extract nonce, realm, algorithm, and opaque from challenge
      vl_nonce := extractParamValueFromChallenge(loc_challenge, "nonce");
      vl_realm := extractParamValueFromChallenge(loc_challenge, "realm");
      vl_algorithm :=
      extractParamValueFromChallenge(loc_challenge, "algorithm");
      vl_opaque :=
      extractParamValueFromChallenge(loc_challenge, "opaque");
      
      // calculate a digest response for the Authorize header
      vl_response :=
      calculateDigestResponse(
        vl_nonce,
        vl_cnonce,
        vl_username,
        vl_realm,
        vl_passwd,
        vl_algorithm,
        cl_nonceCount,
        loc_method,
        vl_qop,
        vl_uri,
        cl_hEntity);
      
      // Construct credentials for an Authorization field of a request.
      if (vl_opaque != "") {
        /*    vl_result :=
        "Digest username="
        & """"
        & vl_username
        & ""","
        & "realm="
        & """"
        & vl_realm
        & ""","
        & "nonce="
        & """"
        & vl_nonce
        & ""","
        & "uri="
        & """"
        & vl_uri
        & ""","
        & "response="
        & """"
        & vl_response
        & ""","
        & "algorithm="
        & vl_algorithm
        & ","
        & "cnonce="
        & """"
        & vl_cnonce
        & ""","
        & "opaque="
        & """"
        & vl_opaque
        & ""","
        & "qop="
        & vl_qop
        & ","
        & "nc="
        & cl_nonceCount;
        */
        
        
        
        vl_Credentials.digestResponse:=  { 
          
          {id:="Digest username=",paramValue:= vl_username },
          {id:="realm=",paramValue:= vl_realm },
          {id:="nonce=",paramValue:= vl_nonce },
          {id:="uri=",paramValue:= vl_uri },
          {id:="response=",paramValue:= vl_response },
          {id:="algorithm=",paramValue:= vl_algorithm },
          {id:="cnonce=",paramValue:= vl_cnonce },
          {id:="qop=",paramValue:= vl_qop },
          {id:="opaque=",paramValue:= vl_opaque },
          {id:="nc=",paramValue:= cl_nonceCount }
          
        } 
        
        
        
        
        
        
      } else {
        /*     vl_result :=
        "Digest username="
        & """"
        & vl_username
        & ""","
        & "realm="
        & """"
        & vl_realm
        & ""","
        & "nonce="
        & """"
        & vl_nonce
        & ""","
        & "uri="
        & """"
        & vl_uri
        & ""","
        & "response="
        & """"
        & vl_response
        & ""","
        & "algorithm="
        & vl_algorithm
        & ","
        & "cnonce="
        & """"
        & vl_cnonce
        & ""","
        & "qop="
        & vl_qop
        & ","
        & "opaque="
        & """"
        & ""","
        & "nc="
        & cl_nonceCount;
        */
        
        
        vl_Credentials.digestResponse:=  { 
          
          {id:="Digest username=",paramValue:= vl_username },
          {id:="realm=",paramValue:= vl_realm },
          {id:="nonce=",paramValue:= vl_nonce },
          {id:="uri=",paramValue:= vl_uri },
          {id:="response=",paramValue:= vl_response },
          {id:="algorithm=",paramValue:= vl_algorithm },
          {id:="cnonce=",paramValue:= vl_cnonce },
          {id:="qop=",paramValue:= vl_qop },
          {id:="opaque=",paramValue:= omit },
          {id:="nc=",paramValue:= cl_nonceCount }
          
        }  //!!!!!!!!!!!!!!!!!!!!!
        
      }
      //return vl_result;
      
      //vl_Credentials.digestResponse:=  { {id:="digest response",paramValue:= vl_result }}  //!!!!!!!!!!!!!!!!!!!!!
      
      
      
      
      return vl_Credentials;
      
    }
    function setHeadersOnReceiptOfRegister(in Request loc_REGISTER_Request) runs on SipComponent {
      if (ispresent (loc_REGISTER_Request.msgHeader.contact)) {
        var Contact vl_contact :=
        valueof(loc_REGISTER_Request.msgHeader.contact);
        
        if (ischosen (vl_contact.contactBody.contactAddresses)) {
          v_reqHostPort :=
          getContactAddr_Reg(
            vl_contact.contactBody.contactAddresses[0]);
          
        }
      }
      v_CallId := valueof(loc_REGISTER_Request.msgHeader.callId);
      v_CSeq := valueof(loc_REGISTER_Request.msgHeader.cSeq);
      v_IUT_CSeq := valueof(loc_REGISTER_Request.msgHeader.cSeq);
      v_From := valueof(loc_REGISTER_Request.msgHeader.fromField);
      v_To := valueof(loc_REGISTER_Request.msgHeader.toField);
      v_Via := valueof(loc_REGISTER_Request.msgHeader.via);
      if (ischosen (loc_REGISTER_Request
          .msgHeader
          .contact
          .contactBody
          .contactAddresses)) {
        v_Contact :=
        valueof(loc_REGISTER_Request.msgHeader.contact);
      }
      getViaReplyAddr(v_Via.viaBody, v_sent_label);
      addTagInTo(v_To);
    }
    
    function setDefHeadersOnReceiptOfRegister(in Request loc_REGISTER_Request) runs on SipComponent {
      v_def_CallId := valueof(loc_REGISTER_Request.msgHeader.callId);
      v_def_CSeq := valueof(loc_REGISTER_Request.msgHeader.cSeq);
      v_def_From :=
      valueof(loc_REGISTER_Request.msgHeader.fromField);
      v_def_To := valueof(loc_REGISTER_Request.msgHeader.toField);
      v_def_Via := valueof(loc_REGISTER_Request.msgHeader.via);
      if (ispresent (loc_REGISTER_Request.msgHeader.contact)) {
        v_def_Contact :=
        valueof(loc_REGISTER_Request.msgHeader.contact);
      }
      getViaReplyAddr(v_def_Via.viaBody, v_sent_label);
      addTagInTo(v_def_To);
    }
    
    function setHeadersForBYE(inout CSeq loc_CSeq_s) runs on SipComponent {
      loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
      loc_CSeq_s.method := "BYE";
      buildRequestURI_BYE(v_reqHostPort, v_To);
      v_Branch := BRANCH_COOKIE & getRndTag();
      v_Via := {
        fieldName := VIA_E,
        viaBody := { valueof(ViaBody_ETS_IPADDR(v_Branch))}
      };
    }
    
    function setHeadersForBYEOutOfDialog(inout CSeq loc_CSeq_s) runs on SipComponent {
      v_RequestUri := valueof(SipUrl_ofCallee_s);
      v_To := valueof(To_s1);
      v_To.toParams := { { id := TAG_ID, paramValue := getRndTag() } }
      v_To.addressField.nameAddr.addrSpec.urlParameters := omit;
      v_From := valueof(From_s1(getRndTag()));
      v_CallId := {
        fieldName := CALL_ID_E,
        callid := getRndCallId() & AT & PX_IUT_IPADDR
      };
      loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
      loc_CSeq_s.method := "BYE";
      v_CSeq := loc_CSeq_s;
      v_caller_To := v_To;
      v_caller_From := v_From;
      v_Branch := BRANCH_COOKIE & getRndTag();
      v_Via := {
        fieldName := VIA_E,
        viaBody := { valueof(ViaBody_ETS_IPADDR(v_Branch))}
      };
      v_reqHostPort := v_RequestUri.hostPort;
    }
    
    function setHeadersForCANCELPTCOutOfDialog(inout CSeq loc_CSeq_s) runs on SipComponent {
      v_CallId := {
        fieldName := CALL_ID_E,
        callid := getRndCallId() & AT & PX_ETS_IPADDR
      };
      loc_CSeq_s.fieldName := CSEQ_E;
      loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
      loc_CSeq_s.method := "CANCEL";
      v_CSeq := loc_CSeq_s;
      v_To := valueof(To_s2);
      v_Cancel_To := v_To;
      v_caller_To := v_To;
      v_From := valueof(From_s1(getRndTag()));
      v_caller_From := v_From;
      v_Contact := valueof(Contact_ETS_s);
      v_Branch := BRANCH_COOKIE & getRndTag();
      v_Via := {
        fieldName := VIA_E,
        viaBody := { valueof(ViaBody_ETS_IPADDR(v_Branch))}
      };
      v_RequestUri := valueof(SipUrl_ofPTC);
      v_reqHostPort := v_RequestUri.hostPort;
    }
    
    function setHeadersForCANCELOutOfDialog(inout CSeq loc_CSeq_s) runs on SipComponent {
      v_CallId := {
        fieldName := CALL_ID_E,
        callid := getRndCallId() & AT & PX_IUT_IPADDR
      };
      loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
      loc_CSeq_s.method := "CANCEL";
      v_CSeq := loc_CSeq_s;
      v_To := checkToHeaderFields(valueof(To_s1));
      v_Cancel_To := v_To;
      v_caller_To := v_To;
      v_From := valueof(From_s1(getRndTag()));
      v_caller_From := v_From;
      v_Branch := BRANCH_COOKIE & getRndTag();
      v_Via := {
        fieldName := VIA_E,
        viaBody := { valueof(ViaBody_ETS_IPADDR(v_Branch))}
      };
      v_RequestUri := valueof(SipUrl_ofCallee_s);
      if (v_RequestUri.urlParameters[0].id == "" and
        v_RequestUri.urlParameters[0].paramValue == ""){
        v_RequestUri.urlParameters := omit;
      }
      v_reqHostPort := v_RequestUri.hostPort;
    }
    
    function setHeadersForRegister(inout CSeq loc_CSeq_s) runs on SipComponent {
      var SemicolonParam_List vl_params;
      var UserInfo vl_userInfo := {
        userOrTelephoneSubscriber := PX_ETS_LOCAL_USER,
        password := omit
      };
      
      v_RequestUri := {
        scheme := SIP_SCHEME,
        userInfo := omit,
        hostPort := {
          host := PX_IUT_HOME_DOMAIN,
          portField := PX_IUT_PORT },
        urlParameters := omit,
        headers := omit
      };
      v_reqHostPort := v_RequestUri.hostPort;
      v_CallId := {
        fieldName := CALL_ID_E,
        callid := getRndCallId() & AT & PX_ETS_IPADDR
      };
      v_CallIdReg := v_CallId;
      loc_CSeq_s.fieldName := CSEQ_E;
      loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
      loc_CSeq_s.method := "REGISTER";
      v_CSeq := loc_CSeq_s;
      //RGy (2007-11-20) Checking of To fields is added 
      v_To := checkToHeaderFields(valueof(To_s3));
      vl_params := {
        {
          id := TAG_ID,
          paramValue := getRndTag()
        }
      };
      v_From := {
        fieldName := FROM_E,
        addressField := v_To.addressField,
        fromParams := vl_params
      };
      v_Contact := {
        fieldName := CONTACT_E,
        contactBody := {
          contactAddresses := {
            { addressField := {
                nameAddr := {
                  displayName := PX_ETS_DISP_NAME, //%testcaseId, //PX_ETS_DISP_NAME,
                  addrSpec := {
                    scheme := SIP_SCHEME,
                    userInfo := vl_userInfo,
                    hostPort := {
                      host := PX_ETS_IPADDR,
                      portField := PX_ETS_PORT },
                    urlParameters := omit,
                    //RGy (2007-09-14) headers field is added to complete the variable def.
                    headers := omit }
                }
              }, contactParams := omit }
          }
        }
      };
      v_Branch := BRANCH_COOKIE & getRndTag();
      v_Via := {
        fieldName := VIA_E,
        viaBody := { valueof(ViaBody_ETS_IPADDR(v_Branch))}
      };
    }
    
    function setHeadersForRespOutOfDialog(inout CSeq loc_CSeq_s) runs on SipComponent {
      var charstring vl_branch_val;
      
      v_CallId := {
        fieldName := CALL_ID_E,
        callid := getRndCallId() & AT & PX_IUT_IPADDR
      };
      loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
      loc_CSeq_s.method := "INVITE";
      v_CSeq := loc_CSeq_s;
      v_To := valueof(To_s4(getRndTag()));
      v_caller_To := v_To;
      v_From := valueof(From_s1(getRndTag()));
      v_caller_From := v_From;
      v_Contact := valueof(Contact_ETS_s);
      vl_branch_val := BRANCH_COOKIE & getRndTag();
      v_Branch := BRANCH_COOKIE & getRndTag();
      v_Via := {
        fieldName := VIA_E,
        viaBody := {
          valueof(ViaBody_IUT_IPADDR(vl_branch_val)),
          valueof(ViaBody_PTC(v_Branch))}
      };
    }
    
    function setHeadersIUTInvite(inout CSeq loc_CSeq_s) runs on SipComponent {
      var SipUrl vl_SipUrl_To;
      var SipUrl vl_SipUrl_From;
      v_CallId := {
        fieldName := CALL_ID_E,
        callid := getRndCallId() & AT & PX_IUT_IPADDR
      };
      loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
      loc_CSeq_s.method := "INVITE";
      v_CSeq := loc_CSeq_s;
      v_To := checkToHeaderFields(valueof(To_s1));
      v_Cancel_To := v_To;
      v_caller_To := v_To;
      v_From := checkFromHeaderFields(valueof(From_s1(getRndTag())));
      v_caller_From := v_From;
      v_Contact := valueof(Contact_ETS_s);
      v_Branch := BRANCH_COOKIE & getRndTag();
      v_Via := {
        fieldName := VIA_E,
        viaBody := { valueof(ViaBody_ETS_IPADDR(v_Branch))}
      };
      v_RequestUri := checkSipUrl(valueof(SipUrl_ofCallee_s));
      v_reqHostPort := v_RequestUri.hostPort;
    }
    
    function setHeadersIUTOptions(inout CSeq loc_CSeq_s) runs on SipComponent {
      v_CallId := {
        fieldName := CALL_ID_E,
        callid := getRndCallId() & AT & PX_IUT_IPADDR
      };
      loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
      loc_CSeq_s.method := "OPTIONS";
      v_CSeq := loc_CSeq_s;
      v_To := checkToHeaderFields(valueof(To_s1));
      v_Cancel_To := v_To;
      v_caller_To := v_To;
      v_From := checkFromHeaderFields(valueof(From_s1(getRndTag()))) ;
      v_caller_From := v_From;
      v_Contact := valueof(Contact_ETS_s);
      v_Branch := BRANCH_COOKIE & getRndTag();
      v_Via := {
        fieldName := VIA_E,
        viaBody := { valueof(ViaBody_ETS_IPADDR(v_Branch))}
      };
      v_RequestUri := checkSipUrl(valueof(SipUrl_ofCallee_s));
      v_reqHostPort := v_RequestUri.hostPort;
    }
    
    function setHeadersIUTInvite_SameCallID(
      inout CSeq loc_CSeq_s,
      //RGy (2007-11-21) parameter type is changed from out to in, as an actual value is passed but not changed
      in INVITE_Request loc_INVITE_Request) runs on SipComponent {
      v_CallId := valueof(loc_INVITE_Request.msgHeader.callId);
      loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
      loc_CSeq_s.method := "INVITE";
      v_CSeq := loc_CSeq_s;
      v_Cancel_To := checkToHeaderFields(v_To);
      v_caller_To := checkToHeaderFields(v_To);
      v_From := checkFromHeaderFields(valueof(From_s1(getRndTag())));
      v_caller_From := v_From;
      v_Contact := valueof(Contact_ETS_s);
      v_Branch := BRANCH_COOKIE & getRndTag();
      v_Via := {
        fieldName := VIA_E,
        viaBody := { valueof(ViaBody_ETS_IPADDR(v_Branch))}
      };
      v_RequestUri := checkSipUrl(valueof(SipUrl_ofCallee_s));
      v_reqHostPort := v_RequestUri.hostPort;
    }
    
    function setHeadersOnReceiptOfResponse(
      inout CSeq loc_CSeq_s,
      Response loc_Response) runs on SipComponent {
      var integer i, j, vl_nbroute;
      
      v_CSeq := loc_CSeq_s;
      if (ispresent(loc_Response.msgHeader.toField)){
        v_To := valueof(loc_Response.msgHeader.toField)
      } else {setverdict(fail);log("To field is missing from the Response message")}
      if(ispresent(loc_Response.msgHeader.fromField)){
        v_From := valueof(loc_Response.msgHeader.fromField)
      } else {setverdict(fail);log("From field is missing from the Response message")}
      v_caller_To := v_To;
      v_caller_From := v_From;
      if (ispresent (loc_Response.msgHeader.contentType)) {
        v_ContentType :=
        valueof(loc_Response.msgHeader.contentType);
      }
      
      if (ispresent (loc_Response.msgHeader.contact)) {
        var Contact vl_Contact :=
        valueof(loc_Response.msgHeader.contact);
        if (ischosen (vl_Contact.contactBody.contactAddresses)) {
          v_reqHostPort :=
          getContactAddr(
            vl_Contact.contactBody.contactAddresses[0]);
        }
      } else {
        if (ischosen (v_To.addressField.nameAddr)) {
          v_reqHostPort :=
          v_To.addressField.nameAddr.addrSpec.hostPort;
        } else {
          v_reqHostPort :=
          v_To.addressField.addrSpecUnion.hostPort;
        }
      }
      v_callee_To := {
        fieldName := TO_E,
        addressField := v_caller_From.addressField,
        toParams := v_caller_From.fromParams
      };
      v_callee_From := {
        fieldName := FROM_E,
        addressField := v_caller_To.addressField,
        fromParams := v_caller_To.toParams
      };
      v_Via := valueof(loc_Response.msgHeader.via);
      if (ispresent (loc_Response.msgHeader.recordRoute)) {
        v_RecordRoute :=
        valueof(loc_Response.msgHeader.recordRoute);
        vl_nbroute := sizeof (v_RecordRoute.routeBody);
        for (i := 0; i <= (vl_nbroute - 1); i := i + 1) {
          j := vl_nbroute - 1 - i;
          v_Route.routeBody[j] := v_RecordRoute.routeBody[i];
        }
        v_Route.fieldName := ROUTE_E;
        v_BOO_RecordRoute := true;
        v_BOO_Route := true;
      } else {
        v_BOO_RecordRoute := false;
        v_BOO_Route := false;
      }
    }
    
    function setHeadersPtcInvite(inout CSeq loc_CSeq_s) runs on SipComponent {
      v_CallId := {
        fieldName := CALL_ID_E,
        callid := getRndCallId() & AT & PX_ETS_IPADDR
      };
      loc_CSeq_s.fieldName := CSEQ_E;
      loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
      loc_CSeq_s.method := "INVITE";
      v_CSeq := loc_CSeq_s;
      //RGy (2007-11-20) Checking of To fields is added 
      v_To := checkToHeaderFields(valueof(To_s2_Tel));
      v_Cancel_To := v_To;
      v_caller_To := v_To;
      //RGy (2007-11-20) Checking of From fields is added 
      v_From := checkFromHeaderFields(valueof(From_s1(getRndTag())));
      v_caller_From := v_From;
      v_Contact := valueof(Contact_ETS_s);
      v_Branch := BRANCH_COOKIE & getRndTag();
      v_Via := {
        fieldName := VIA_E,
        viaBody := { valueof(ViaBody_ETS_IPADDR(v_Branch))}
      };
      //RGy (2007-11-20) Checking of request URI fields is added 
      v_RequestUri := checkSipUrl(valueof(SipUrl_ofPTC_Tel));
      v_reqHostPort := v_RequestUri.hostPort;
    }
    
    function setHeadersPtcOptions(inout CSeq loc_CSeq_s) runs on SipComponent {
      v_CallId := {
        fieldName := CALL_ID_E,
        callid := getRndCallId() & AT & PX_ETS_IPADDR
      };
      loc_CSeq_s.fieldName := CSEQ_E;
      loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
      loc_CSeq_s.method := "OPTIONS";
      v_CSeq := loc_CSeq_s;
      //RGy (2007-11-20) Checking of To fields is added 
      v_To := checkToHeaderFields(valueof(To_s2_Tel));
      v_Cancel_To := v_To;
      v_caller_To := v_To;
      //RGy (2007-11-20) Checking of From fields is added 
      v_From := checkFromHeaderFields(valueof(From_s1(getRndTag())));
      v_caller_From := v_From;
      v_Contact := valueof(Contact_ETS_s);
      v_Branch := BRANCH_COOKIE & getRndTag();
      v_Via := {
        fieldName := VIA_E,
        viaBody := { valueof(ViaBody_ETS_IPADDR(v_Branch))}
      };
      //RGy (2007-11-20) Checking of request URI fields is added 
      v_RequestUri := checkSipUrl(valueof(SipUrl_ofPTC_Tel));
      v_reqHostPort := v_RequestUri.hostPort;
    }
    
    function setHeadersRDPtcInvite(inout CSeq loc_CSeq_s) runs on SipComponent {
      v_CallId := {
        fieldName := CALL_ID_E,
        callid := getRndCallId() & AT & PX_ETS_IPADDR
      };
      loc_CSeq_s.fieldName := CSEQ_E;
      loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
      loc_CSeq_s.method := "INVITE";
      v_CSeq := loc_CSeq_s;
      //RGy (2007-11-20) Checking of To fields is added 
      v_To := checkToHeaderFields(valueof(To_s5));
      v_Cancel_To := v_To;
      v_caller_To := v_To;
      //RGy (2007-11-20) Checking of From fields is added 
      v_From := checkFromHeaderFields(valueof(From_s1(getRndTag())));
      v_caller_From := v_From;
      v_Contact := valueof(Contact_ETS_s);
      v_Branch := BRANCH_COOKIE & getRndTag();
      v_Via := {
        fieldName := VIA_E,
        viaBody := { valueof(ViaBody_ETS_IPADDR(v_Branch))}
      };
      //RGy (2007-11-20) Checking of request URI fields is added 
      v_RequestUri := checkSipUrl(valueof(SipUrl_ofRDPTC));
      v_reqHostPort := v_RequestUri.hostPort;
    }
    
    function setHeadersRDPtcForRegister(inout CSeq loc_CSeq_s) runs on SipComponent {
      var SemicolonParam_List vl_params;
      v_RequestUri := {
        scheme := SIP_SCHEME,
        userInfo := omit,
        hostPort := {
          host := PX_IUT_HOME_DOMAIN,
          portField := PX_IUT_PORT },
        urlParameters := omit,
        headers := omit
      };
      v_reqHostPort := v_RequestUri.hostPort;
      v_CallId := {
        fieldName := CALL_ID_E,
        callid := getRndCallId() & AT & PX_ETS_IPADDR2
      };
      loc_CSeq_s.fieldName := CSEQ_E;
      loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
      loc_CSeq_s.method := "REGISTER";
      v_CSeq := loc_CSeq_s;
      //RGy (2007-11-20) Checking of To fields is added 
      v_To := checkToHeaderFields(valueof(To_s5));
      vl_params := {
        {
          id := TAG_ID,
          paramValue := getRndTag()
        }
      };
      v_From := {
        fieldName := FROM_E,
        addressField := v_To.addressField,
        fromParams := vl_params
      };
      v_Contact := valueof(Contact_PTC_s);
      v_Branch := BRANCH_COOKIE & getRndTag();
      v_Via := {
        fieldName := VIA_E,
        viaBody := { valueof(ViaBody_PTC(v_Branch))}
      };
    }
    
    function setHeadersOnReceiptOfInvite(INVITE_Request loc_INVITE_Request) runs on SipComponent {
      var integer i := 0, vl_last;
      
      v_CallId := valueof(loc_INVITE_Request.msgHeader.callId);
      v_CallIdReg := v_CallId;
      v_CSeq := valueof(loc_INVITE_Request.msgHeader.cSeq);
      v_IUT_CSeq := valueof(loc_INVITE_Request.msgHeader.cSeq);
      v_caller_From := valueof(loc_INVITE_Request.msgHeader.fromField);
      v_caller_To := valueof(loc_INVITE_Request.msgHeader.toField);
      v_RequestUri :=
      valueof(loc_INVITE_Request.requestLine.requestUri);
      v_RequestUri2 := v_RequestUri;
      v_Cancel_To := valueof(loc_INVITE_Request.msgHeader.toField);
      addTagInTo(v_caller_To);
      v_To := v_caller_To;
      v_From := v_caller_From;
      v_Via := valueof(loc_INVITE_Request.msgHeader.via);
      if (ispresent (loc_INVITE_Request.msgHeader.contact)) {
        var Contact vl_contact :=
        valueof(loc_INVITE_Request.msgHeader.contact);
        v_Contact := valueof(loc_INVITE_Request.msgHeader.contact);
        v_reqHostPort :=
        getContactAddr(
          vl_contact.contactBody.contactAddresses[0]);
        if (ispresent (vl_contact
            .contactBody
            .contactAddresses[0]
            .addressField
            .nameAddr
            .addrSpec
            .userInfo)) {
          v_RequestUri.userInfo :=
          valueof(
            vl_contact
            .contactBody
            .contactAddresses[0]
            .addressField
            .nameAddr
            .addrSpec
            .userInfo);
        }
      }
      getViaReplyAddr(v_Via.viaBody, v_sent_label);
      v_BOO_RecordRoute := false;
      if (ispresent (loc_INVITE_Request.msgHeader.recordRoute)) {
        v_BOO_RecordRoute := true;
        v_RecordRoute :=
        valueof(loc_INVITE_Request.msgHeader.recordRoute);
      }
      v_callee_To := {
        fieldName := TO_E,
        addressField := v_caller_From.addressField,
        toParams := v_caller_From.fromParams
      };
      v_callee_From := {
        fieldName := FROM_E,
        addressField := v_caller_To.addressField,
        fromParams := v_caller_To.toParams
      };
    }
    
    function setHeadersOnReceiptOfInvite2(INVITE_Request loc_INVITE_Request) runs on SipComponent {
      var integer i := 0, vl_last;
      
      v_CallId := valueof(loc_INVITE_Request.msgHeader.callId);
      v_CallIdReg := v_CallId;
      v_CSeq := valueof(loc_INVITE_Request.msgHeader.cSeq);
      v_IUT_CSeq := valueof(loc_INVITE_Request.msgHeader.cSeq);
      v_caller_From := valueof(loc_INVITE_Request.msgHeader.fromField);
      v_caller_To := valueof(loc_INVITE_Request.msgHeader.toField);
      v_RequestUri :=
      valueof(loc_INVITE_Request.requestLine.requestUri);
      v_RequestUri2 := v_RequestUri;
      v_Cancel_To := valueof(loc_INVITE_Request.msgHeader.toField);
      addTagInTo(v_caller_To);
      v_To := v_caller_To;
      v_From := v_caller_From;
      v_Via := valueof(loc_INVITE_Request.msgHeader.via);
      if (ispresent (loc_INVITE_Request.msgHeader.contact)) {
        var Contact vl_contact :=
        valueof(loc_INVITE_Request.msgHeader.contact);
        
        v_Contact := valueof(Contact_ETS_s);
        v_reqHostPort :=
        getContactAddr(
          vl_contact.contactBody.contactAddresses[0]);
        if (ispresent (vl_contact
            .contactBody
            .contactAddresses[0]
            .addressField
            .nameAddr
            .addrSpec
            .userInfo)) {
          v_RequestUri.userInfo :=
          valueof(
            vl_contact
            .contactBody
            .contactAddresses[0]
            .addressField
            .nameAddr
            .addrSpec
            .userInfo);
        }
      }
      getViaReplyAddr(v_Via.viaBody, v_sent_label);
      v_BOO_RecordRoute := false;
      if (ispresent (loc_INVITE_Request.msgHeader.recordRoute)) {
        v_BOO_RecordRoute := true;
        v_RecordRoute :=
        valueof(loc_INVITE_Request.msgHeader.recordRoute);
      }
      v_callee_To := {
        fieldName := TO_E,
        addressField := v_caller_From.addressField,
        toParams := v_caller_From.fromParams
      };
      v_callee_From := {
        fieldName := FROM_E,
        addressField := v_caller_To.addressField,
        fromParams := v_caller_To.toParams
      };
    }
    function setHeadersOnReceiptOfOptions(OPTIONS_Request loc_OPTIONS_Request) runs on SipComponent {
      var integer i := 0, vl_last;
      
      v_CallId := valueof(loc_OPTIONS_Request.msgHeader.callId);
      v_CallIdReg := v_CallId;
      v_CSeq := valueof(loc_OPTIONS_Request.msgHeader.cSeq);
      v_IUT_CSeq := valueof(loc_OPTIONS_Request.msgHeader.cSeq);
      v_caller_From := valueof(loc_OPTIONS_Request.msgHeader.fromField);
      v_caller_To := valueof(loc_OPTIONS_Request.msgHeader.toField);
      v_RequestUri :=
      valueof(loc_OPTIONS_Request.requestLine.requestUri);
      v_RequestUri2 := v_RequestUri;
      v_Cancel_To := valueof(loc_OPTIONS_Request.msgHeader.toField);
      addTagInTo(v_caller_To);
      v_To := v_caller_To;
      v_From := v_caller_From;
      v_Via := valueof(loc_OPTIONS_Request.msgHeader.via);
      if (ispresent (loc_OPTIONS_Request.msgHeader.contact)) {
        var Contact vl_contact :=
        valueof(loc_OPTIONS_Request.msgHeader.contact);
        v_Contact :=
        valueof(loc_OPTIONS_Request.msgHeader.contact);
        v_reqHostPort :=
        getContactAddr(
          vl_contact.contactBody.contactAddresses[0]);
        if (ispresent (vl_contact
            .contactBody
            .contactAddresses[0]
            .addressField
            .nameAddr
            .addrSpec
            .userInfo)) {
          v_RequestUri.userInfo :=
          valueof(
            vl_contact
            .contactBody
            .contactAddresses[0]
            .addressField
            .nameAddr
            .addrSpec
            .userInfo);
        }
      }
      getViaReplyAddr(v_Via.viaBody, v_sent_label);
      v_BOO_RecordRoute := false;
      if (ispresent (loc_OPTIONS_Request.msgHeader.recordRoute)) {
        v_BOO_RecordRoute := true;
        v_RecordRoute :=
        valueof(loc_OPTIONS_Request.msgHeader.recordRoute);
      }
      v_callee_To := {
        fieldName := TO_E,
        addressField := v_caller_From.addressField,
        toParams := v_caller_From.fromParams
      };
      v_callee_From := {
        fieldName := FROM_E,
        addressField := v_caller_To.addressField,
        fromParams := v_caller_To.toParams
      };
    }
    function setHeadersOnReceiptOfBye(BYE_Request loc_BYE_Request) runs on SipComponent {
      var integer i := 0, vl_last;
      
      v_CSeq := valueof(loc_BYE_Request.msgHeader.cSeq);
      v_IUT_CSeq := valueof(loc_BYE_Request.msgHeader.cSeq);
      v_From := valueof(loc_BYE_Request.msgHeader.fromField);
      v_To := valueof(loc_BYE_Request.msgHeader.toField);
      v_Via := valueof(loc_BYE_Request.msgHeader.via);
      getViaReplyAddr(v_Via.viaBody, v_sent_label);
      v_BOO_RecordRoute := false;
      if (ispresent (loc_BYE_Request.msgHeader.recordRoute)) {
        v_BOO_RecordRoute := true;
        v_RecordRoute :=
        valueof(loc_BYE_Request.msgHeader.recordRoute);
      }
    }
    
    function setHeadersOnReceiptOfCancel(CANCEL_Request loc_CANCEL_Request) runs on SipComponent {
      var integer i := 0, vl_last;
      
      v_CallId := valueof(loc_CANCEL_Request.msgHeader.callId);
      v_CSeq := valueof(loc_CANCEL_Request.msgHeader.cSeq);
      v_IUT_CSeq := valueof(loc_CANCEL_Request.msgHeader.cSeq);
      v_From := valueof(loc_CANCEL_Request.msgHeader.fromField);
      v_To := valueof(loc_CANCEL_Request.msgHeader.toField);
      v_Via := valueof(loc_CANCEL_Request.msgHeader.via);
      getViaReplyAddr(v_Via.viaBody, v_sent_label);
      v_BOO_RecordRoute := false;
      if (ispresent (loc_CANCEL_Request.msgHeader.recordRoute)) {
        v_BOO_RecordRoute := true;
        v_RecordRoute :=
        valueof(loc_CANCEL_Request.msgHeader.recordRoute);
      }
    }
    
    function setHeadersPtcForRegister(inout CSeq loc_CSeq_s) runs on SipComponent {
      var SemicolonParam_List vl_params;
      
      v_RequestUri := {
        scheme := SIP_SCHEME,
        userInfo := omit,
        hostPort := {
          host := PX_IUT_HOME_DOMAIN,
          portField := PX_IUT_PORT },
        urlParameters := omit,
        headers := omit
      };
      v_reqHostPort := v_RequestUri.hostPort;
      v_CallId := {
        fieldName := CALL_ID_E,
        callid := getRndCallId() & AT & PX_ETS_IPADDR2
      };
      loc_CSeq_s.fieldName := CSEQ_E;
      loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
      loc_CSeq_s.method := "REGISTER";
      v_CSeq := loc_CSeq_s;
      //RGy (2007-11-20) Checking of To fields is added 
      v_To := checkToHeaderFields(valueof(To_s2));
      vl_params := {
        {
          id := TAG_ID,
          paramValue := getRndTag()
        }
      };
      v_From := {
        fieldName := FROM_E,
        addressField := v_To.addressField,
        fromParams := vl_params
      };
      v_Contact := valueof(Contact_PTC_s);
      v_Branch := BRANCH_COOKIE & getRndTag();
      v_Via := {
        fieldName := VIA_E,
        viaBody := { valueof(ViaBody_PTC(v_Branch))}
      };
    }
    
    function setHeadersPtc2ForRegister(inout CSeq loc_CSeq_s) runs on SipComponent {
      var SemicolonParam_List vl_params;
      
      v_RequestUri := {
        scheme := SIP_SCHEME,
        userInfo := omit,
        hostPort := {
          host := PX_IUT_HOME_DOMAIN, portField := PX_IUT_PORT },
        urlParameters := omit,
        headers := omit
      };
      v_reqHostPort := v_RequestUri.hostPort;
      v_CallId := {
        fieldName := CALL_ID_E,
        callid := getRndCallId() & AT & PX_ETS_IPADDR3
      };
      loc_CSeq_s.fieldName := CSEQ_E;
      loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
      loc_CSeq_s.method := "REGISTER";
      v_CSeq := loc_CSeq_s;
      //RGy (2007-11-20) Checking of To fields is added 
      v_To := checkToHeaderFields(valueof(To_s2));
      vl_params := {
        {
          id := TAG_ID,
          paramValue := getRndTag()
        }
      };
      v_From := {
        fieldName := FROM_E,
        addressField := v_To.addressField,
        fromParams := vl_params
      };
      v_Contact := valueof(Contact_PTC2_s);
      v_Branch := BRANCH_COOKIE & getRndTag();
      v_Via := {
        fieldName := VIA_E,
        viaBody := { valueof(ViaBody_PTC2(v_Branch))}
      };
    }
    
    function buildRaw_SipURL(in SipUrl loc_sipUrl) runs on SipComponent return charstring {
      var charstring vl_sipUrl := "";
      var charstring vl_urlParamValue := "";
      var integer i, vl_nbelement;
      var integer vl_urlPortField;
      var charstring vl_urlHost;
      
      vl_sipUrl := loc_sipUrl.scheme & ":";
      if (ispresent (loc_sipUrl.userInfo)) {
        var UserInfo vl_userinfo := valueof(loc_sipUrl.userInfo);
        var charstring vl_userOrTele :=
        valueof(vl_userinfo.userOrTelephoneSubscriber);
        
        vl_sipUrl := vl_sipUrl & vl_userOrTele;
        if (ispresent (vl_userinfo.password)) {
          var charstring vl_userPassword :=
          valueof(vl_userinfo.password);
          vl_sipUrl := vl_sipUrl & ":" & vl_userPassword;
        }
        vl_sipUrl := vl_sipUrl & AT;
      }
      vl_urlHost := valueof(loc_sipUrl.hostPort.host);
      vl_sipUrl := vl_sipUrl & valueof(vl_urlHost);
      if (ispresent (loc_sipUrl.hostPort.portField)) {
        vl_urlPortField := valueof(loc_sipUrl.hostPort.portField);
        vl_sipUrl := vl_sipUrl & ":" & int2str (vl_urlPortField);
      }
      if (ispresent (loc_sipUrl.urlParameters)) {
        var SemicolonParam_List vl_urlParameters :=
        valueof(loc_sipUrl.urlParameters);
        //vl_sipUrl := vl_sipUrl & SP;
        vl_nbelement := sizeof (vl_urlParameters);
        for (i := 0; i <= (vl_nbelement - 1); i := i + 1) {
          vl_sipUrl := vl_sipUrl & ";" & vl_urlParameters[i].id;
          if (ispresent (vl_urlParameters[i].paramValue)) {
            vl_urlParamValue :=
            valueof(vl_urlParameters[i].paramValue);
            vl_sipUrl := vl_sipUrl & "=" & vl_urlParamValue;
          }
        }
      }
      if (ispresent (loc_sipUrl.headers)) {
        var AmpersandParam_List vl_headers :=
        valueof(loc_sipUrl.headers);
        vl_nbelement := sizeof (vl_headers);
        for (i := 0; i <= (vl_nbelement - 1); i := i + 1) {
          if (i == 0) {
            vl_sipUrl := vl_sipUrl & "?" & vl_headers[0].id;
          } else {
            vl_sipUrl := vl_sipUrl & "&" & vl_headers[i].id;
          }
          if (ispresent (vl_headers[i].paramValue)) {
            var charstring vl_paramValue :=
            valueof(vl_headers[i].paramValue);
            vl_sipUrl := vl_sipUrl & "=" & vl_paramValue;
          }
        }
      }
      return (vl_sipUrl);
    }
    
    function buildRaw_SemicolonParam_List(in SemicolonParam_List loc_genericParam_List) runs on SipComponent return charstring {
      var charstring vl_GenericParam_List;
      var integer i, vl_nbelement;
      var GenericParam vl_GenericParam;
      
      vl_GenericParam_List := "";
      vl_nbelement := sizeof (loc_genericParam_List);
      for (i := 0; i <= (vl_nbelement - 1); i := i + 1) {
        vl_GenericParam_List :=
        vl_GenericParam_List & ";" & loc_genericParam_List[i].id;
        vl_GenericParam := loc_genericParam_List[i];
        if (ispresent (vl_GenericParam.paramValue)) {
          var charstring vl_paramValue :=
          valueof(vl_GenericParam.paramValue);
          vl_GenericParam_List :=
          vl_GenericParam_List & "=" & vl_paramValue;
        }
      }
      return (vl_GenericParam_List);
    }
    
    function buildRaw_FromHeader(in From loc_fromHeader) runs on SipComponent return charstring {
      var charstring vl_resuChar := "";
      var charstring vl_sipUrl := "";
      var charstring vl_fromDispName := "";
      var integer i, vl_nbelement;
      
      if (v_white_space) {
        vl_resuChar := "From:" & SP & SP & SP;
      } else {
        vl_resuChar := "From:" & SP;
      }
      if (ischosen (loc_fromHeader.addressField.nameAddr)) {
        vl_sipUrl :=
        buildRaw_SipURL(
          loc_fromHeader.addressField.nameAddr.addrSpec);
      } else {
        vl_sipUrl :=
        buildRaw_SipURL(loc_fromHeader.addressField.addrSpecUnion);
      }
      if (ischosen (loc_fromHeader.addressField.nameAddr)) {
        if (ispresent (loc_fromHeader
            .addressField
            .nameAddr
            .displayName)) {
          vl_fromDispName :=
          valueof(
            loc_fromHeader.addressField.nameAddr.displayName);
          vl_resuChar :=
          vl_resuChar & vl_fromDispName & SP & LT & vl_sipUrl & GT;
        } else {
          vl_resuChar := vl_resuChar & SP & LT & vl_sipUrl & GT;
        }
      } else {
        vl_resuChar := vl_resuChar & vl_sipUrl;
      }
      if (ispresent (loc_fromHeader.fromParams)) {
        vl_resuChar :=
        vl_resuChar
        & buildRaw_SemicolonParam_List(
          valueof(loc_fromHeader.fromParams));
      }
      return (vl_resuChar);
    }
    
    function buildRaw_ToHeader(in To loc_toHeader) runs on SipComponent return charstring {
      var charstring vl_resuChar := "";
      var charstring vl_sipUrl := "";
      var charstring vl_toDispName := "";
      
      vl_resuChar := "To:" & SP;
      if (ischosen (loc_toHeader.addressField.nameAddr)) {
        vl_sipUrl :=
        buildRaw_SipURL(
          loc_toHeader.addressField.nameAddr.addrSpec);
      } else {
        vl_sipUrl :=
        buildRaw_SipURL(loc_toHeader.addressField.addrSpecUnion);
      }
      if (ischosen (loc_toHeader.addressField.nameAddr)) {
        if (ispresent (loc_toHeader
            .addressField
            .nameAddr
            .displayName)) {
          vl_toDispName :=
          valueof(
            loc_toHeader.addressField.nameAddr.displayName);
          vl_resuChar :=
          vl_resuChar & vl_toDispName & SP & LT & vl_sipUrl & GT;
        } else {
          vl_resuChar := vl_resuChar & SP & LT & vl_sipUrl & GT;
        }
      } else {
        vl_resuChar := vl_resuChar & vl_sipUrl;
      }
      if (ispresent (loc_toHeader.toParams)) {
        vl_resuChar :=
        vl_resuChar
        & buildRaw_SemicolonParam_List(
          valueof(loc_toHeader.toParams));
      }
      return (vl_resuChar);
    }
    
    function buildRaw_ViaHeader(in Via loc_viaHeader) runs on SipComponent return charstring {
      var charstring vl_resuChar := "";
      var charstring vl_viaHost := "";
      var integer i, vl_nbelement, vl_viaPortField;
      
      vl_nbelement := sizeof (loc_viaHeader.viaBody);
      for (i := 0; i <= (vl_nbelement - 1); i := i + 1) {
        vl_resuChar := vl_resuChar & "Via:" & SP;
        vl_resuChar :=
        vl_resuChar
        & loc_viaHeader.viaBody[i].sentProtocol.protocolName
        & SLASH
        & loc_viaHeader.viaBody[i].sentProtocol.protocolVersion
        & SLASH
        & loc_viaHeader.viaBody[i].sentProtocol.transport
        & SP;
        if (ispresent (loc_viaHeader.viaBody[i].sentBy.host)) {
          vl_viaHost := valueof(loc_viaHeader.viaBody[i].sentBy.host);
          vl_resuChar := vl_resuChar & vl_viaHost;
        }
        if (ispresent (loc_viaHeader.viaBody[i].sentBy.portField)) {
          vl_viaPortField :=
          valueof(loc_viaHeader.viaBody[i].sentBy.portField);
          vl_resuChar := vl_resuChar & ":" & int2str (vl_viaPortField);
        }
        if (ispresent (loc_viaHeader.viaBody[i].viaParams)) {
          vl_resuChar :=
          vl_resuChar
          & buildRaw_SemicolonParam_List(
            valueof(loc_viaHeader.viaBody[i].viaParams));
        }
      }
      return (vl_resuChar);
    }
    
    function buildRaw_CallIdHeader(in CallId loc_callIdHeader) runs on SipComponent return charstring {
      var charstring vl_resuChar := "";
      
      if (v_white_space) {
        vl_resuChar :=
        "Call-ID:" & SP & SP & SP & loc_callIdHeader.callid;
      } else {
        vl_resuChar := "Call-ID:" & SP & loc_callIdHeader.callid;
      }
      return (vl_resuChar);
    }
    
    function buildRaw_CSeqHeader(in CSeq loc_cSeqHeader) runs on SipComponent return charstring {
      var charstring vl_resuChar := "";
      
      if (v_white_space) {
        vl_resuChar :=
        "CSeq:"
        & TAB
        & int2str (loc_cSeqHeader.seqNumber)
        & SP
        & loc_cSeqHeader.method;
      } else {
        vl_resuChar :=
        "CSeq:"
        & SP
        & int2str (loc_cSeqHeader.seqNumber)
        & SP
        & loc_cSeqHeader.method;
      }
      return (vl_resuChar);
    }
    
    function buildRaw_ContactHeader(in Contact loc_contactHeader) runs on SipComponent return charstring {
      var charstring vl_resuChar := "";
      var charstring vl_sipUrl := "";
      var charstring vl_dispName := "";
      var integer i, vl_nbelement;
      
      if (ischosen (loc_contactHeader.contactBody.wildcard)) {
        vl_resuChar := "Contact:" & SP & "*";
        return (vl_resuChar);
      }
      vl_nbelement :=
      sizeof (loc_contactHeader.contactBody.contactAddresses);
      for (i := 0; i <= (vl_nbelement - 1); i := i + 1) {
        vl_resuChar := vl_resuChar & "Contact:" & SP;
        if (ischosen (loc_contactHeader
            .contactBody
            .contactAddresses[i]
            .addressField
            .nameAddr)) {
          vl_sipUrl :=
          buildRaw_SipURL(
            loc_contactHeader
            .contactBody
            .contactAddresses[i]
            .addressField
            .nameAddr
            .addrSpec);
        } else {
          vl_sipUrl :=
          buildRaw_SipURL(
            loc_contactHeader
            .contactBody
            .contactAddresses[i]
            .addressField
            .addrSpecUnion);
        }
        if (ischosen (loc_contactHeader
            .contactBody
            .contactAddresses[i]
            .addressField
            .nameAddr)) {
          if (ispresent (loc_contactHeader
              .contactBody
              .contactAddresses[i]
              .addressField
              .nameAddr
              .displayName)) {
            vl_dispName :=
            valueof(
              loc_contactHeader
              .contactBody
              .contactAddresses[i]
              .addressField
              .nameAddr
              .displayName);
            vl_resuChar :=
            vl_resuChar
            & vl_dispName
            & SP
            & LT
            & vl_sipUrl
            & GT;
          } else {
            vl_resuChar := vl_resuChar & SP & LT & vl_sipUrl & GT;
          }
        } else {
          vl_resuChar := vl_resuChar & vl_sipUrl;
        }
        if (ispresent (loc_contactHeader
            .contactBody
            .contactAddresses[i]
            .contactParams)) {
          vl_resuChar :=
          vl_resuChar
          & buildRaw_SemicolonParam_List(
            valueof(
              loc_contactHeader
              .contactBody
              .contactAddresses[i]
              .contactParams));
        }
      }
      return (vl_resuChar);
    }
    
    function buildRaw_DateHeader(in charstring loc_expiresvalue) runs on SipComponent return charstring {
      var charstring vl_resuChar := "";
      vl_resuChar := "Date:" & SP & loc_expiresvalue;
      return (vl_resuChar);
    }
    
    function buildRaw_Route(in Route loc_routeHeader) runs on SipComponent return charstring {
      var charstring vl_resuChar := "";
      var charstring vl_sipUrl := "";
      var charstring vl_dispName := "";
      var integer i, vl_nbelement;
      
      if (v_BOO_Route) {
        vl_nbelement := sizeof (loc_routeHeader.routeBody);
        for (i := 0; i <= (vl_nbelement - 1); i := i + 1) {
          vl_resuChar := "Route:" & SP;
          vl_sipUrl :=
          buildRaw_SipURL(
            loc_routeHeader.routeBody[i].nameAddr.addrSpec);
          if (ispresent (loc_routeHeader
              .routeBody[i]
              .nameAddr
              .displayName)) {
            vl_dispName :=
            valueof(
              loc_routeHeader
              .routeBody[i]
              .nameAddr
              .displayName);
            vl_resuChar :=
            vl_resuChar & vl_dispName & LT & vl_sipUrl & GT;
          } else {
            vl_resuChar := vl_resuChar & vl_sipUrl;
          }
          if (ispresent (loc_routeHeader.routeBody[i].rrParam)) {
            vl_resuChar :=
            vl_resuChar
            & buildRaw_SemicolonParam_List(
              valueof(
                loc_routeHeader.routeBody[i].rrParam));
          }
        }
      } else {
        vl_resuChar := "";
      }
      return (vl_resuChar);
    }
    
    function buildRaw_RecordRoute(in RecordRoute loc_recordRouteHeader) runs on SipComponent return charstring {
      var charstring vl_resuChar := "";
      var charstring vl_sipUrl := "";
      var integer i, vl_nbelement;
      
      if (v_BOO_RecordRoute) {
        vl_nbelement := sizeof (loc_recordRouteHeader.routeBody);
        for (i := 0; i <= (vl_nbelement - 1); i := i + 1) {
          vl_resuChar := "Record-Route:" & SP;
          vl_sipUrl :=
          buildRaw_SipURL(
            loc_recordRouteHeader
            .routeBody[i]
            .nameAddr
            .addrSpec);
          if (ispresent (loc_recordRouteHeader
              .routeBody[i]
              .nameAddr
              .displayName)) {
            var charstring vl_recRouteDispName :=
            valueof(
              loc_recordRouteHeader
              .routeBody[i]
              .nameAddr
              .displayName);
            vl_resuChar :=
            vl_resuChar
            & vl_recRouteDispName
            & LT
            & vl_sipUrl
            & GT;
          } else {
            vl_resuChar := vl_resuChar & vl_sipUrl;
          }
          if (ispresent (loc_recordRouteHeader
              .routeBody[i]
              .rrParam)) {
            vl_resuChar :=
            vl_resuChar
            & buildRaw_SemicolonParam_List(
              valueof(
                loc_recordRouteHeader
                .routeBody[i]
                .rrParam));
          }
        }
      } else {
        vl_resuChar := "";
      }
      return (vl_resuChar);
    }
    
    function buildRaw_EscapedDelimiters_SipURL(in SipUrl loc_sipUrl) runs on SipComponent return charstring {
      var charstring vl_sipUrl := "";
      var integer vl_nbelement;
      var charstring vl_urlParamValue;
      var charstring vl_userPass;
      var integer i, vl_urlPortField;
      var charstring vl_urlHost;
      
      vl_sipUrl := loc_sipUrl.scheme & ":";
      if (ispresent (loc_sipUrl.userInfo)) {
        var UserInfo vl_userinfo := valueof(loc_sipUrl.userInfo);
        var charstring vl_userOrTele :=
        valueof(vl_userinfo.userOrTelephoneSubscriber);
        vl_sipUrl := vl_sipUrl & "%22" & vl_userOrTele & "%22";
        if (ispresent (vl_userinfo.password)) {
          vl_userPass := valueof(vl_userinfo.password);
          vl_sipUrl := vl_sipUrl & ":" & vl_userPass;
        }
        vl_sipUrl := vl_sipUrl & "@";
      }
      vl_urlHost := valueof(loc_sipUrl.hostPort.host);
      vl_sipUrl := vl_sipUrl & vl_urlHost;
      if (ispresent (loc_sipUrl.hostPort.portField)) {
        vl_urlPortField := valueof(loc_sipUrl.hostPort.portField);
        vl_sipUrl := vl_sipUrl & ":" & int2str (vl_urlPortField);
      }
      if (ispresent (loc_sipUrl.urlParameters)) {
        var SemicolonParam_List vl_urlParameters :=
        valueof(loc_sipUrl.urlParameters);
        
        vl_sipUrl := vl_sipUrl & SP;
        vl_nbelement := sizeof (vl_urlParameters);
        for (i := 0; i <= (vl_nbelement - 1); i := i + 1) {
          vl_sipUrl := vl_sipUrl & ";" & vl_urlParameters[i].id;
          if (ispresent (vl_urlParameters[i].paramValue)) {
            vl_urlParamValue :=
            valueof(vl_urlParameters[i].paramValue);
            vl_sipUrl := vl_sipUrl & "=" & vl_urlParamValue;
          }
        }
      }
      if (ispresent (loc_sipUrl.headers)) {
        var AmpersandParam_List vl_headers :=
        valueof(loc_sipUrl.headers);
        
        vl_nbelement := sizeof (vl_headers);
        for (i := 0; i <= (vl_nbelement - 1); i := i + 1) {
          if (i == 0) {
            vl_sipUrl := vl_sipUrl & "?" & vl_headers[0].id;
          } else {
            vl_sipUrl := vl_sipUrl & "&" & vl_headers[i].id;
          }
          if (ispresent (vl_headers[i].paramValue)) {
            var charstring vl_paramValue :=
            valueof(vl_headers[i].paramValue);
            vl_sipUrl := vl_sipUrl & "=" & vl_paramValue;
          }
        }
      }
      return (vl_sipUrl);
    }
    
    function buildRaw_EscapedDelimiters_ContactHeader(in Contact loc_contactHeader) runs on SipComponent return charstring {
      var charstring vl_resuChar := "";
      var charstring vl_sipUrl := "";
      var charstring vl_contactDispName := "";
      var integer i, vl_nbelement;
      
      if (ischosen (loc_contactHeader.contactBody.wildcard)) {
        vl_resuChar := "Contact:" & SP & "*";
        return (vl_resuChar);
      }
      vl_nbelement :=
      sizeof (loc_contactHeader.contactBody.contactAddresses);
      for (i := 0; i <= (vl_nbelement - 1); i := i + 1) {
        vl_resuChar := vl_resuChar & "Contact:" & SP;
        if (ischosen (loc_contactHeader
            .contactBody
            .contactAddresses[i]
            .addressField
            .nameAddr)) {
          vl_sipUrl :=
          buildRaw_EscapedDelimiters_SipURL(
            loc_contactHeader
            .contactBody
            .contactAddresses[i]
            .addressField
            .nameAddr
            .addrSpec);
          if (ispresent (loc_contactHeader
              .contactBody
              .contactAddresses[i]
              .addressField
              .nameAddr
              .displayName)) {
            vl_contactDispName :=
            valueof(
              loc_contactHeader
              .contactBody
              .contactAddresses[i]
              .addressField
              .nameAddr
              .displayName);
            vl_resuChar :=
            vl_resuChar
            & vl_contactDispName
            & LT
            & vl_sipUrl
            & GT;
          } else {
            vl_resuChar := vl_resuChar & SP & LT & vl_sipUrl & GT;
          }
        } else {
          vl_sipUrl :=
          buildRaw_EscapedDelimiters_SipURL(
            loc_contactHeader
            .contactBody
            .contactAddresses[i]
            .addressField
            .addrSpecUnion);
          vl_resuChar := vl_resuChar & LT & vl_sipUrl & GT;
        }
        if (ispresent (loc_contactHeader
            .contactBody
            .contactAddresses[i]
            .contactParams)) {
          vl_resuChar :=
          vl_resuChar
          & buildRaw_SemicolonParam_List(
            valueof(
              loc_contactHeader
              .contactBody
              .contactAddresses[i]
              .contactParams));
        }
      }
      return (vl_resuChar);
    }
    
    function buildRaw_EscapedDelimiters_FromHeader(in From loc_fromHeader) runs on SipComponent return charstring {
      var charstring vl_resuChar := "";
      var charstring vl_sipUrl := "";
      var charstring vl_fromDispName := "";
      var integer i, vl_nbelement;
      
      vl_resuChar := "From:" & SP;
      if (ischosen (loc_fromHeader.addressField.nameAddr)) {
        vl_sipUrl :=
        buildRaw_EscapedDelimiters_SipURL(
          loc_fromHeader.addressField.nameAddr.addrSpec);
        if (ispresent (loc_fromHeader
            .addressField
            .nameAddr
            .displayName)) {
          vl_fromDispName :=
          valueof(
            loc_fromHeader.addressField.nameAddr.displayName);
          vl_resuChar :=
          vl_resuChar
          & vl_fromDispName
          & SP
          & LT
          & vl_sipUrl
          & GT;
        } else {
          vl_resuChar := vl_resuChar & SP & LT & vl_sipUrl & GT;
        }
      } else {
        vl_sipUrl :=
        buildRaw_EscapedDelimiters_SipURL(
          loc_fromHeader.addressField.addrSpecUnion);
        vl_resuChar := vl_resuChar & LT & vl_sipUrl & GT;
      }
      if (ispresent (loc_fromHeader.fromParams)) {
        vl_resuChar :=
        vl_resuChar
        & buildRaw_SemicolonParam_List(
          valueof(loc_fromHeader.fromParams));
      }
      return (vl_resuChar);
    }
  }
  group CheckOperations {
    function checkExpiresContactAddresses(
      in ContactAddress_List loc_ContactAddress_List,
      in template charstring loc_expires_value) runs on SipComponent return boolean {
      
      var integer vl_numberOfElements :=
      sizeof (loc_ContactAddress_List);
      var integer i := 0;
      var integer j := 0;
      var integer vl_numberOfParams;
      var boolean vl_faulty := false;
      var boolean vl_result := false;
      var SemicolonParam_List vl_GenericParam_List;
      
      while ((i < vl_numberOfElements) and not vl_faulty) {
        vl_result := false;
        j := 0;
        if (match(loc_ContactAddress_List[i],
            ContactAddress_r_1)
          and ispresent (
            loc_ContactAddress_List[i].contactParams)) {
          vl_GenericParam_List :=
          valueof(loc_ContactAddress_List[i].contactParams);
          vl_numberOfParams := sizeof (vl_GenericParam_List);
          while ((j < vl_numberOfParams) and not vl_faulty) {
            if ((putInLowercase(vl_GenericParam_List[j].id)
                == EXPIRES_ID)
              and match(vl_GenericParam_List[j].paramValue,
                loc_expires_value)) {
              vl_result := true;
            }
            j := j + 1;
          }
          if (not vl_result) {
            vl_faulty := true;
          }
        } else {
          vl_faulty := true;
        }
        i := i + 1;
      }
      if (vl_faulty) {
        return (false);
      } else {
        return (true);
      }
    }
    function checkTagEq(
      SemicolonParam_List loc_param_l1,
      SemicolonParam_List loc_param_l2) runs on SipComponent return boolean {
      var integer i := 0, vl_numberOfParams;
      var boolean vl_found := false;
      var boolean vl_result := false;
      var charstring vl_tag1 := "";
      var charstring vl_tag2 := "";
      
      vl_numberOfParams := sizeof (loc_param_l1);
      while ((i < vl_numberOfParams) and not vl_found) {
        if (putInLowercase(loc_param_l1[i].id) == TAG_ID) {
          if (ispresent (loc_param_l1[i].paramValue)) {
            vl_tag1 := valueof(loc_param_l1[i].paramValue);
            vl_found := true;
          }
        }
        i := i + 1;
      }
      vl_numberOfParams := sizeof (loc_param_l2);
      i := 0;
      vl_found := false;
      while ((i < vl_numberOfParams) and not vl_found) {
        if (putInLowercase(loc_param_l2[i].id) == TAG_ID) {
          if (ispresent (loc_param_l2[i].paramValue)) {
            vl_tag2 := valueof(loc_param_l2[i].paramValue);
            vl_found := true;
          }
        }
        i := i + 1;
      }
      return (vl_tag1 == vl_tag2);
    }
    
    function checkTagPresent(SemicolonParam_List loc_param_l) runs on SipComponent return boolean {
      var integer vl_numberOfParams;
      var integer i := 0;
      
      vl_numberOfParams := sizeof (loc_param_l);
      while (i < vl_numberOfParams) {
        if (putInLowercase(loc_param_l[i].id) == TAG_ID) {
          return (true);
        }
        i := i + 1;
      }
      return (false);
    }
    
    function checkBranchPresent(
      SemicolonParam_List loc_param_l,
      inout charstring loc_branch_value) runs on SipComponent return boolean {
      
      var integer i := 0, vl_numberOfParams;
      
      vl_numberOfParams := sizeof (loc_param_l);
      while (i < vl_numberOfParams) {
        if (putInLowercase(loc_param_l[i].id) == BRANCH_ID) {
          if (ispresent (loc_param_l[i].paramValue)) {
            loc_branch_value :=
            valueof(loc_param_l[i].paramValue);
            return (true);
          }
        }
        i := i + 1;
      }
      return (false);
    }
  }
  group UsefulOperations {
    function addParameterIfNotPresent(
      in charstring loc_parameter_name,
      in charstring loc_parameter_value,
      inout ViaBody loc_viaBody) {
      var integer i;
      var integer vl_nb_params;
      
      if (ispresent (loc_viaBody.viaParams)) {
        return;
      }
      loc_viaBody.viaParams := {
        {
          loc_parameter_name,
          loc_parameter_value
        }
      };
    }
    
    function addParameterTagIfNotPresent(
      in charstring loc_parameter_name,
      in charstring loc_parameter_value,
      inout To loc_To) {
      var integer i;
      var integer vl_nb_params;
      
      if (ispresent (loc_To.toParams)) {
        return;
      }
      loc_To.toParams := {
        {
          loc_parameter_name,
          loc_parameter_value
        }
      };
    }
    
    function equivalentHostAddr(
      in charstring loc_host1,
      in charstring loc_host2) return boolean {
      return (getIpAddr(loc_host1) == getIpAddr(loc_host2));
    }
    
    function getRndTag()
    return charstring {
      return rndStr() //(vl_tag_value);
    }
    
    function getRndCallId()
    return charstring {
      return rndStr() //(vl_tag_value);
    }
    
    //RGy  (2007-09-03) New function replacing the external function of the previous version
    function rndStr()
    return charstring {
      var charstring vl_tag_value := "";
      for (var integer i:=0; i<9; i:=i+1){
        vl_tag_value := vl_tag_value & SIP_TOKEN[float2int(rnd()*72.0)]
      }
      return (vl_tag_value);
    }
    
    function getParamValue(
      SemicolonParam_List loc_param_l,
      charstring loc_param_id) return charstring {
      var integer vl_nb_param;
      var integer i;
      
      vl_nb_param := sizeof (loc_param_l);
      for (i := 0; i < vl_nb_param; i := i + 1) {
        if ((putInLowercase(loc_param_l[i].id) == loc_param_id)
          and ispresent (loc_param_l[i].paramValue)) {
          var charstring vl_paramValue :=
          valueof(loc_param_l[i].paramValue);
          return (vl_paramValue);
        }
      }
      return ("notFound");
    }
    
    function eqAmpersandParamList(
      AmpersandParam_List loc_param_l1,
      AmpersandParam_List loc_param_l2) return boolean {
      var integer vl_nb_param1;
      var integer vl_nb_param2;
      var integer i;
      var charstring vl_name_param;
      var charstring vl_value_param;
      
      vl_nb_param1 := sizeof (loc_param_l1);
      vl_nb_param2 := sizeof (loc_param_l2);
      if (vl_nb_param1 != vl_nb_param2) {
        return (false);
      }
      for (i := 0; i < vl_nb_param1; i := i + 1) {
        vl_name_param := putInLowercase(loc_param_l1[i].id);
        vl_value_param :=
        getParamValue(valueof(loc_param_l2), vl_name_param);
        if (vl_value_param != loc_param_l1[i].paramValue) {
          return (false);
        }
      }
      return (true);
    }
    
    function eqSemicolonParamList(
      SemicolonParam_List loc_param_l1,
      SemicolonParam_List loc_param_l2) return boolean {
      var integer vl_nb_param1;
      var integer vl_nb_param2;
      var integer i;
      var charstring vl_value_param;
      var charstring vl_name_param;
      
      vl_nb_param1 := sizeof (loc_param_l1);
      vl_nb_param2 := sizeof (loc_param_l2);
      for (i := 0; i < vl_nb_param1; i := i + 1) {
        vl_name_param := putInLowercase(loc_param_l1[i].id);
        vl_value_param := getParamValue(loc_param_l2, vl_name_param);
        if (vl_value_param != "notFound") {
          if (vl_value_param != loc_param_l1[i].paramValue) {
            return (false);
          }
        } else {
          if ((vl_name_param == USER_ID)
            or (vl_name_param == TTL_ID)
            or (vl_name_param == METHOD_ID)
            or (vl_name_param == MADDR_ID)) {
            return (false);
          }
        }
      }
      for (i := 0; i < vl_nb_param2; i := i + 1) {
        vl_name_param := putInLowercase(loc_param_l2[i].id);
        vl_value_param := getParamValue(loc_param_l1, vl_name_param);
        if (vl_value_param != "notFound") {
          if (vl_value_param != loc_param_l2[i].paramValue) {
            return (false);
          }
        } else {
          if ((vl_name_param == USER_ID)
            or (vl_name_param == TTL_ID)
            or (vl_name_param == METHOD_ID)
            or (vl_name_param == MADDR_ID)) {
            return (false);
          }
        }
      }
      return (true);
    }
    
    function eqURIs(SipUrl loc_uri1, SipUrl loc_uri2) return boolean {
      if (loc_uri1.scheme != loc_uri2.scheme) {
        return (false);
      }
      if (ispresent (loc_uri1.userInfo) or ispresent (loc_uri2.userInfo)) {
        if (ispresent (loc_uri1.userInfo)
          and ispresent (loc_uri2.userInfo)) {
          var UserInfo vl_userinfo1 := valueof(loc_uri1.userInfo),
          vl_userinfo2 := valueof(loc_uri2.userInfo);
          if (vl_userinfo1
            .userOrTelephoneSubscriber != vl_userinfo2
            .userOrTelephoneSubscriber) {
            return (false);
          }
          if (ispresent (vl_userinfo1.password)
            and ispresent (vl_userinfo2.password)) {
            var charstring vl_pwd1 :=
            valueof(vl_userinfo1.password),
            vl_pwd2 := valueof(vl_userinfo2.password);
            if (vl_pwd1 != vl_pwd2) {
              return (false);
            }
          } else {
            if (ispresent (vl_userinfo1.password)
              or ispresent (vl_userinfo2.password)) {
              return (false);
            }
          }
        } else {
          return (false);
        }
      }
      if (loc_uri1.hostPort.host != loc_uri2.hostPort.host) {
        return (false);
      }
      if (ispresent (loc_uri1.hostPort.portField)
        and ispresent (loc_uri2.hostPort.portField)) {
        var integer vl_port1 := valueof(loc_uri1.hostPort.portField);
        var integer vl_port2 := valueof(loc_uri2.hostPort.portField);
        
        if (vl_port1 != vl_port2) {
          return (false);
        }
      } else {
        if (ispresent (loc_uri1.hostPort.portField)
          or ispresent (loc_uri2.hostPort.portField)) {
          return (false);
        }
      }
      if (ispresent (loc_uri1.urlParameters)
        and ispresent (loc_uri2.urlParameters)) {
        var SemicolonParam_List vl_params1 := valueof(loc_uri1.urlParameters);
        var SemicolonParam_List vl_params2 := valueof(loc_uri2.urlParameters);
        
        if (not (eqSemicolonParamList(vl_params1,
              vl_params2))) {
          return (false);
        }
      } else {
        if (ispresent (loc_uri1.urlParameters)
          or ispresent (loc_uri2.urlParameters)) {
          return (false);
        }
      }
      if (ispresent (loc_uri1.headers) and ispresent (loc_uri2.headers)) {
        var AmpersandParam_List vl_headers1 := valueof(loc_uri1.headers);
        var AmpersandParam_List vl_headers2 := valueof(loc_uri2.headers);
        
        if (not (eqAmpersandParamList(vl_headers1,
              vl_headers2))) {
          return (false);
        }
      } else {
        if (ispresent (loc_uri1.headers) or ispresent (loc_uri2.headers)) {
          return (false);
        }
      }
      return (true);
    }
    
    function minValue(in float loc_v1, in float loc_v2) return float {
      if (loc_v1 < loc_v2) {
        return (loc_v1);
      } else {
        return (loc_v2);
      }
    }
    
    //*@desc function checks fields of a To header and empty optional fields are set to omit 
    function checkToHeaderFields(in To loc_To) return To {
      var To vl_To := loc_To;
      if (ischosen (vl_To.addressField.nameAddr)) {
        if(ispresent(vl_To.addressField.nameAddr.displayName)){
          if (vl_To.addressField.nameAddr.displayName ==""){
            vl_To.addressField.nameAddr.displayName := omit
          }
        }
        vl_To.addressField.nameAddr.addrSpec := checkSipUrl(vl_To.addressField.nameAddr.addrSpec)
      } else {
        vl_To.addressField.addrSpecUnion := checkSipUrl(vl_To.addressField.addrSpecUnion)
      }  
      return vl_To
    }
    
    //*@desc function checks fields of a From header and empty optional fields are set to omit 
    function checkFromHeaderFields(in From loc_From) return From {
      var From vl_From := loc_From;
      if (ischosen (vl_From.addressField.nameAddr)) {
        if(ispresent(vl_From.addressField.nameAddr.displayName)){
          if (vl_From.addressField.nameAddr.displayName ==""){
            vl_From.addressField.nameAddr.displayName := omit
          }
        }
        vl_From.addressField.nameAddr.addrSpec := checkSipUrl(vl_From.addressField.nameAddr.addrSpec)
      } else {
        vl_From.addressField.addrSpecUnion := checkSipUrl(vl_From.addressField.addrSpecUnion)
      }  
      return vl_From
    }
    
    //*@desc function checks fields of a SipUrl and empty optional fields are set to omit 
    function checkSipUrl(in SipUrl loc_SipUrl) return SipUrl {
      var SipUrl vl_SipUrl := loc_SipUrl;
      if (ispresent(vl_SipUrl.userInfo)){
        if (vl_SipUrl.userInfo.userOrTelephoneSubscriber==""){
          vl_SipUrl.userInfo := omit
        } else {
          //RGy (2007-11-20) else branch is added to check also the password field
          if(vl_SipUrl.userInfo.password==""){
            vl_SipUrl.userInfo.password := omit
          }
        }
      }
      if (ispresent(vl_SipUrl.urlParameters)){
        if (sizeof(vl_SipUrl.urlParameters)==0){
          vl_SipUrl.urlParameters := omit;
        } else if (vl_SipUrl.urlParameters[0].id == "" and
          vl_SipUrl.urlParameters[0].paramValue == ""){
          vl_SipUrl.urlParameters := omit;
        }
      }
      if (ispresent(vl_SipUrl.headers)){
        if (sizeof(vl_SipUrl.headers)==0){
          vl_SipUrl.headers := omit;
        } else if (vl_SipUrl.headers[0].id == "" and
          vl_SipUrl.headers[0].paramValue == ""){
          vl_SipUrl.headers := omit;
        }
      }
      return vl_SipUrl
    }
    
    //  external function getDate(integer par_sec) return charstring;
    
    function getDate(integer par_sec) return charstring
    
    {
      
      return f_getCurrentDateWithOffset(par_sec)
    };
    
    //    external function getCurrentGMTDate() return charstring;
    function getCurrentGMTDate() return charstring
    {
      return f_getCurrentGMTDate();
    }
    
    
    //   external function getMajorDigit() return integer;
    //   external function getMinorDigit() return integer;
    
    function getMajorDigit() return integer{ return 1};//FIXME
    function getMinorDigit() return integer{ return 2};//FIXME
    
    
    
    // external function getIpAddr(charstring host_name) return charstring;
    function getIpAddr(charstring host_name) return charstring
    {
      
      return  f_getIpAddr( host_name) 
    }
    //     external function putInLowercase(charstring par_string) return charstring;
    function putInLowercase(charstring par_string) return charstring
    {
      return  f_putInLowercase(par_string);
    };
    
    
    // External function to generate a digest response.
    // References:
    // * RFC 2617 HTTP Authentication: Basic and Digest Access
    // Authentication, and
    // * RFC 1321 The MD5 Message-Digest Algorithm
    // See RFC 2617, chapter 5 Sample implementation, for example usage, as
    // the signature of calculateDigestResponse is according to the example
    // given in the RFC.
    /*   external function calculateDigestResponse(
    charstring vl_nonce,
    charstring cnonce,
    charstring user,
    charstring vl_realm,
    charstring passwd,
    charstring alg,
    charstring nonceCount,
    charstring method,
    charstring qop,
    charstring URI,
    charstring HEntity) return charstring;
    
    external function encodeEscapeDelim(charstring user) return charstring;
    
    */ 
    
    function calculateDigestResponse(
      charstring vl_nonce,
      charstring cnonce,
      charstring user,
      charstring vl_realm,
      charstring passwd,
      charstring alg,
      charstring nonceCount,
      charstring method,
      charstring qop,
      charstring URI,
      charstring HEntity) return charstring {return "FIXME"}; //FIXME
    
    function encodeEscapeDelim(charstring user) return charstring{return "FIXME"}; //FIXME
    
  }
  
  group PtcBehaviour {
    function ptc_RG_RR_V_017(CSeq loc_CSeq_s) runs on SipComponent {
      var SemicolonParam_List vl_params, vl_params2;
      
      initPTCPort();
      v_Default := activate (defaultCCPRPTC());
      ptcRegistration(loc_CSeq_s);
      synchroniseInitPtc();
      acceptPTCACall(loc_CSeq_s);
      
      setHeadersPtcForRegister(loc_CSeq_s);
      vl_params := {
        {
          id := EXPIRES_ID,
          paramValue := PX_DELTA_REGISTRATION
        }
      };
      vl_params2 := {
        {
          id := "transport",
          paramValue := PX_TRANSPORT
        }
      };
      v_Contact.contactBody.contactAddresses[0].contactParams :=
      vl_params;
      v_Contact
      .contactBody
      .contactAddresses[0]
      .addressField
      .nameAddr
      .addrSpec
      .urlParameters :=
      vl_params2;
      SIPP.send (
        REGISTER_Request_s_1(
          v_RequestUri,
          v_CallId,
          loc_CSeq_s,
          v_Contact,
          v_From,
          v_To,
          v_Via)) to v_sent_label;
      if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
        // Re-send request with Authorization header after
        // receiving 401 Unauthorized response.
        v_Branch := BRANCH_COOKIE & getRndTag();
        v_Via := {
          fieldName := VIA_E,
          viaBody := { valueof(ViaBody_ETS_IPADDR(v_Branch))}
        };
        awaitingUnauthorizedResponse(
          loc_CSeq_s,
          REGISTER_Request_s_1(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via),
          PX_RFC2617_USERNAME2,
          PX_RFC2617_PASSWD2);
      } else {
        awaitingOkResponse(loc_CSeq_s);
      }
      
      synchroniseCheckDone();
      acceptPTCReleaseCall();
      synchroniseCheck();
      //removeRegistration(loc_CSeq_s);
    }
    function ptc_CC_OE_CE_V_02x(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      
      v_Default := activate (defaultCCOE());
      synchroniseInitPtc();
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          TWait.stop;
          setverdict (pass);
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
        }
        [] SIPP.receive (Response_Any_r_1) {
          all timer.stop;
          setverdict (inconc);
          stop;
        }
        [] TResp.timeout {
          setverdict (inconc);
          stop;
        }
      }
      rejectInvite(loc_CSeq_s);
      synchroniseCheckDone();
    }
    function ptc_CC_OE_CE_V_029(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      
      v_Default := activate (defaultCCOE());
      initProxyPort();
      synchroniseInitPtc();
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          TWait.stop;
          setverdict (pass);
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
        }
        [] SIPP.receive (Response_Any_r_1) {
          all timer.stop;
          setverdict (inconc);
          stop;
        }
        [] TAck.timeout {
          setverdict (inconc);
          stop;
        }
      }
      rejectInvite(loc_CSeq_s);
      synchroniseCheckDone();
    }
    function ptc_CC_OE_CE_V_030(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      
      v_Default := activate (defaultCCOE());
      initPTC(loc_CSeq_s);
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (
          INVITE_Request_r_9) -> value vl_INVITE_Request sender v_sent_label {
          TWait.stop;
          setverdict (pass);
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
        }
        [] SIPP.receive (Response_Any_r_1) {
          all timer.stop;
          setverdict (inconc);
          stop;
        }
        [] TWait.timeout {
          setverdict (inconc);
          stop;
        }
      }
      rejectInvite(loc_CSeq_s);
      synchroniseCheckDone();
    }
    function ptc_CC_OE_CE_V_031(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var charstring vl_branchId;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCOE());
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          TWait.stop;
          setverdict (pass);
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (inconc);
          stop;
        }
        [] TWait.timeout {
          setverdict (inconc);
          stop;
        }
      }
      if (ispresent (v_Via.viaBody[0].viaParams)) {
        var SemicolonParam_List vl_params := valueof(v_Via.viaBody[0].viaParams);
        
        vl_branchId := getParamValue(vl_params, BRANCH_ID);
      }
      rejectInvite(loc_CSeq_s);
      cpA.send (CM_Param(vl_branchId));
    }
    function ptc_CC_OE_CE_V_043(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var charstring vl_branchId;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCOE());
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          TWait.stop;
          setverdict (pass);
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (inconc);
          stop;
        }
        [] TAck.timeout {
          setverdict (inconc);
          stop;
        }
      }
      if (v_BOO_RecordRoute) {
        SIPP.send (
          Response_200_Invite_WithRoute_s_2(
            v_CallId,
            v_CSeq,
            v_caller_From,
            v_caller_To,
            v_Via,
            v_RecordRoute)) to v_sent_label;
      } else {
        SIPP.send (
          Response_200_Invite_s_6(
            v_CallId,
            v_CSeq,
            v_caller_From,
            v_caller_To,
            v_Via)) to v_sent_label;
      }
      awaiting200OKAckRequest(loc_CSeq_s);
      synchroniseCheckDone();
    }
    function ptc_CC_PR_MP_RQ_V_018(
      CallId loc_CallId,
      CSeq loc_CSeq_s,
      boolean loc_cancelled,
      boolean loc_bye) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var charstring vl_branch := "";
      var CANCEL_Request vl_CANCEL_Request;
      var BYE_Request vl_BYE_Request;
      var Via vl_Via;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      alt {
        [] cpA.receive (CM_Rsp_Rcved) {
          setverdict (pass);
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      vl_Via := {
        fieldName := VIA_E,
        viaBody := { valueof(ViaBody_ETS_IPADDR(v_Branch))}
      };
      alt {
        [] SIPP.receive (INVITE_Request_r_7_2({
              ?
            })) -> value vl_INVITE_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          rejectInvite(loc_CSeq_s);
          if (ispresent (v_Via.viaBody[0].viaParams)) {
            var SemicolonParam_List vl_params :=
            valueof(v_Via.viaBody[0].viaParams);
            
            if (checkBranchPresent(vl_params,
                vl_branch)) {
              if (match(vl_branch,
                  ValidBranch)) {
                setverdict (pass);
              } else {
                log ("BEGIN_TRACE_INFO Invalid Branch in Via parameter. END_TRACE_INFO");
                setverdict (fail);
              }
            } else {
              log ("BEGIN_TRACE_INFO Branch missing in Via parameter. END_TRACE_INFO");
              setverdict (fail);
            }
          } else {
            log ("BEGIN_TRACE_INFO Via parameter missing. END_TRACE_INFO");
            setverdict (fail);
          }
          synchroniseCheckDone();
          stop;
        }
        [loc_cancelled] SIPP.receive (
          CANCEL_Request_r_1(loc_CallId)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
          setverdict (fail);
          stop;
        }
        [loc_bye] SIPP.receive (
          BYE_Request_r_1(loc_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
          setverdict (fail);
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc_CC_PR_MP_RQ_V_022(
      in template Request loc_ACK,
      CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var boolean vl_invite := true;
      var boolean vl_ack := false;
      var boolean vl_bye := false;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      loc_ACK.msgHeader.callId := loc_CallId;
      alt {
        [vl_invite] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          loc_ACK.msgHeader.callId := v_CallId;
          sendPTC200OKInvite();
          setverdict (pass);
          vl_invite := false;
          vl_ack := true;
          vl_bye := true;
          repeat;
        }
        [vl_ack] SIPP.receive (loc_ACK) {
          setverdict (pass);
          vl_ack := false;
          cpA.send (CM_Check_Done);
          repeat;
        }
        [vl_bye] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
        }
        //FIXME (RGy 2007-09-09) It is strange to simply ignore unexpected messages
        //      without any notice (the default at least assigns a fail verdict)
        //       -> it is a general problem!
        [] SIPP.receive {
          repeat;
        }
        //FIXME (RGy 2007-09-09) This event is handled in the default too
        //       -> it is a general problem!
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    
    function ptc_CC_PR_MP_RQ_V_030(
      CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var ACK_Request vl_ACK_Request;
      var charstring vl_branch := "";
      var boolean vl_invite := true;
      var boolean vl_ack := false;
      var boolean vl_bye := false;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [vl_invite] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTC200OKInvite();
          setverdict (pass);
          vl_invite := false;
          vl_ack := true;
          vl_bye := true;
          repeat;
        }
        [vl_ack] SIPP.receive (
          ACK_Request_r_1(v_CallId)) -> value vl_ACK_Request sender v_sent_label {
          v_Via := valueof(vl_ACK_Request.msgHeader.via);
          if (ispresent (v_Via.viaBody[0].viaParams)) {
            var SemicolonParam_List vl_params :=
            valueof(v_Via.viaBody[0].viaParams);
            
            if (checkBranchPresent(vl_params,
                vl_branch)) {
              if (match(vl_branch,
                  ValidBranch)) {
                setverdict (pass);
              } else {
                log ("BEGIN_TRACE_INFO Invalid Branch in Via parameter. END_TRACE_INFO");
                setverdict (fail);
              }
            } else {
              log ("BEGIN_TRACE_INFO Branch missing in Via parameter. END_TRACE_INFO");
              setverdict (fail);
            }
          } else {
            log ("BEGIN_TRACE_INFO Via parameter missing. END_TRACE_INFO");
            setverdict (fail);
          }
          cpA.send (CM_Check_Done);
          vl_ack := false;
          repeat;
        }
        [vl_bye] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
        }
        [] cpA.receive (CM_Stop) {
          all timer.stop;
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    
    function ptc_CC_PR_MP_RQ_V_037(
      in template CANCEL_Request loc_cancel,
      CSeq loc_CSeq_s) runs on SipComponent {
      var CANCEL_Request vl_CANCEL_Request;
      
      initPTCPort();
      TGuard.start (PX_TGUARD);
      synchroniseInitPtc();
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [] SIPP.receive (
          loc_cancel) -> value vl_CANCEL_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          v_CallId := valueof(vl_CANCEL_Request.msgHeader.callId);
          setverdict (pass);
          send200OK();
        }
        [] SIPP.receive (
          CANCEL_Request: ?) -> value vl_CANCEL_Request {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          v_CallId := vl_CANCEL_Request.msgHeader.callId;
          send200OK();
          setverdict (inconc);
          stop;
        }
        [] SIPP.receive (Request: ?) {
          repeat;
        }
        [] SIPP.receive (Response: ?) {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      synchroniseCheckDone();
      stop;
    }
    function ptc_CC_PR_MP_RQ_V_048(
      in template CANCEL_Request loc_cancel,
      CSeq loc_CSeq_s) runs on SipComponent {
      var CANCEL_Request vl_CANCEL_Request;
      var charstring vl_branch := "";
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [] SIPP.receive (
          loc_cancel) -> value vl_CANCEL_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          v_CallId := valueof(vl_CANCEL_Request.msgHeader.callId);
          v_Via := valueof(vl_CANCEL_Request.msgHeader.via);
          send200OK();
          if (ispresent (v_Via.viaBody[0].viaParams)) {
            var SemicolonParam_List vl_params :=
            valueof(v_Via.viaBody[0].viaParams);
            
            if (checkBranchPresent(vl_params,
                vl_branch)) {
              if (match(vl_branch,
                  ValidBranch)) {
                setverdict (pass);
              } else {
                log ("BEGIN_TRACE_INFO Invalid Branch in Via parameter. END_TRACE_INFO");
                setverdict (fail);
              }
            } else {
              log ("BEGIN_TRACE_INFO Branch missing in Via parameter. END_TRACE_INFO");
              setverdict (fail);
            }
          } else {
            log ("BEGIN_TRACE_INFO Via parameter missing. END_TRACE_INFO");
            setverdict (fail);
          }
        }
        [] SIPP.receive (
          CANCEL_Request: ?) -> value vl_CANCEL_Request {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          v_CallId := vl_CANCEL_Request.msgHeader.callId;
          send200OK();
          setverdict (inconc);
          stop;
        }
        [] SIPP.receive (Request: ?) {
          repeat;
        }
        [] SIPP.receive (Response: ?) {
          repeat;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      synchroniseCheckDone();
      stop;
    }
    
    function ptc_CC_PR_MP_RQ_V_055(
      CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var boolean vl_invite := true;
      var boolean vl_ack := false;
      var boolean vl_bye := false;
      
      initPTC(loc_CSeq_s);
      TGuard.start (PX_TGUARD);
      synchroniseInitPtc();
      v_Default := activate (defaultCCPRPTC());
      alt {
        [vl_invite] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTC200OKInvite();
          setverdict (pass);
          vl_invite := false;
          vl_ack := true;
          vl_bye := true;
          repeat;
        }
        [vl_ack] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          vl_ack := false;
          cpA.send (CM_Check_Done);
          repeat;
        }
        [vl_bye] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
          cpA.send (CM_Check_Done);
        }
        [] cpA.receive (CM_Stop) {
          all timer.stop;
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    
    function ptc_CC_PR_MP_RQ_V_066(
      CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var charstring vl_branch := "";
      var boolean vl_invite := true;
      var boolean vl_ack := false;
      var boolean vl_bye := false;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [vl_invite] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTC200OKInvite();
          setverdict (pass);
          vl_invite := false;
          vl_ack := true;
          vl_bye := true;
          repeat;
        }
        [vl_ack] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          vl_ack := false;
          cpA.send (CM_Check_Done);
          repeat;
        }
        [vl_bye] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
          v_Via := valueof(vl_BYE_Request.msgHeader.via);
          if (ispresent (v_Via.viaBody[0].viaParams)) {
            var SemicolonParam_List vl_params :=
            valueof(v_Via.viaBody[0].viaParams);
            
            if (checkBranchPresent(vl_params,
                vl_branch)) {
              if (match(vl_branch,
                  ValidBranch)) {
                setverdict (pass);
              } else {
                log ("BEGIN_TRACE_INFO Invalid Branch in Via parameter. END_TRACE_INFO");
                setverdict (fail);
              }
            } else {
              log ("BEGIN_TRACE_INFO Branch missing in Via parameter. END_TRACE_INFO");
              setverdict (fail);
            }
          } else {
            log ("BEGIN_TRACE_INFO Via parameter missing. END_TRACE_INFO");
            setverdict (fail);
          }
          cpA.send (CM_Check_Done);
        }
        [] cpA.receive (CM_Stop) {
          all timer.stop;
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    
    function ptc_CC_PR_MP_RS_V_003(
      CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var Via vl_sav_Via := {
        fieldName := VIA_E,
        viaBody := {
          {
            sentProtocol := {
              protocolName := SIP_NAME,
              protocolVersion := SIP_VERSION,
              transport := DEFAULT_SIP_PROT },
            sentBy := { host := "", portField := DEFAULT_SIP_PORT },
            viaParams := omit }
        }
      };
      var charstring vl_branch_val;
      var boolean vl_invite := true;
      var boolean vl_ack := false;
      var boolean vl_bye := false;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [vl_invite] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          v_CSeq.method := "REGISTER";
          vl_branch_val := BRANCH_COOKIE & getRndTag();
          v_Branch := BRANCH_COOKIE & getRndTag();
          vl_sav_Via := v_Via;
          v_Via := {
            fieldName := VIA_E,
            viaBody := {
              valueof(ViaBody_IUT_IPADDR(vl_branch_val)),
              valueof(ViaBody_ETS_IPADDR(v_Branch))}
          };
          sendPTC200OKInvite();
          vl_invite := false;
          vl_ack := true;
          vl_bye := true;
          repeat;
        }
        [vl_ack] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          vl_ack := false;
          synchroniseCheckDone();
          repeat;
        }
        [vl_bye] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    
    function ptc2_CC_PR_MP_RS_V_053(
      in integer loc_status,
      in charstring loc_reasonPhrase,
      CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var CANCEL_Request vl_CANCEL_Request;
      
      initPTC2(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC2());
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(180, "Ringing");
          setverdict (pass);
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(loc_CallId)) {
          repeat;
        }
        [] SIPP.receive (
          CANCEL_Request_r_1(loc_CallId)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(loc_status, loc_reasonPhrase);
          setverdict (pass);
          repeat;
        }
        [] cpB.receive (CM_Check_Done) {
          setverdict (pass);
          all timer.stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
        }
      }
      cpB.send (CM_Check_Done);
    }
    function ptc_CC_PR_TR_CL_V_002(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var CANCEL_Request vl_CANCEL_Request;
      var boolean vl_invite := true;
      var boolean vl_ack := true;
      var boolean vl_bye := true;
      var boolean vl_cancel := true;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [vl_invite] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(183, "Session Progress");
          setverdict (pass);
          vl_invite := false;
          repeat;
        }
        [vl_ack] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          vl_ack := false;
          repeat;
        }
        [vl_cancel] SIPP.receive (
          CANCEL_Request_r_4(
            v_CallId,
            v_Via)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
          setverdict (pass);
          synchroniseCheckDone();
          vl_cancel := false;
        }
        [vl_bye] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
          vl_bye := false;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc_CC_PR_TR_CL_V_003(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var CANCEL_Request vl_CANCEL_Request;
      var boolean vl_invite := true;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      TNoAct.start (PX_TNOACT);
      alt {
        [vl_invite] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          TNoAct.stop;
          TNoAct.start (PX_TNOACT);
          setverdict (pass);
          vl_invite := false;
          repeat;
        }
        [] TNoAct.timeout {
          setverdict (pass);
          synchroniseCheckDone();
          stop;
        }
        [] SIPP.receive (
          CANCEL_Request_r_1(v_CallId)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
          setverdict (fail);
          synchroniseCheckDone();
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc_CC_PR_TR_CL_V_004(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var CANCEL_Request vl_CANCEL_Request;
      var boolean vl_invite := true;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [vl_invite] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          TNoAct.start (PX_TNOACT);
          setverdict (pass);
          vl_invite := false;
          repeat;
        }
        [] SIPP.receive (
          CANCEL_Request_r_1(v_CallId)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
          setverdict (fail);
          synchroniseCheckDone();
        }
        [] TNoAct.timeout {
          sendPTCAnsw(183, "Session Progress");
          TResp.start (PX_TRESP);
          setverdict (pass);
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      alt {
        [] SIPP.receive (
          CANCEL_Request_r_1(v_CallId)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
          rejectInvite(loc_CSeq_s);
          setverdict (pass);
          synchroniseCheckDone();
          stop;
        }
        [] TResp.timeout {
          rejectInvite(loc_CSeq_s);
          setverdict (fail);
          synchroniseCheckDone();
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc_CC_PR_TR_CL_V_005(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var CANCEL_Request vl_CANCEL_Request;
      var boolean vl_invite := true;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [vl_invite] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          setverdict (pass);
          vl_invite := false;
          repeat;
        }
        [] SIPP.receive (
          CANCEL_Request_r_1(v_CallId)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
          setverdict (fail);
          synchroniseCheckDone();
        }
        [] cpA.receive (CM_Send_Rsp) {
          sendPTCAnsw(486, "Busy Here");
          TNoAct.start (PX_TNOACT);
          synchroniseCheckDone();
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      alt {
        [] SIPP.receive (
          CANCEL_Request_r_1(v_CallId)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
          rejectInvite(loc_CSeq_s);
          setverdict (fail);
          synchroniseCheckDone();
          stop;
        }
        [] TNoAct.timeout {
          setverdict (pass);
          synchroniseCheckDone();
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc_CC_PR_TR_CL_TI_001(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          setverdict (pass);
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      repeatINVITE(v_CallId, v_CSeq, PX_T1);
      sendPTCAnsw(486, "Busy here");
    }
    function ptc_CC_PR_TR_CL_TI_002(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          setverdict (pass);
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      notRepeatINVITE(v_CallId, v_CSeq, PX_T1);
      sendPTCAnsw(486, "Busy here");
    }
    function ptc_CC_PR_TR_CL_TI_003(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      
      initPTC(loc_CSeq_s);
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          TResp.stop;
          setverdict (pass);
        }
        [] SIPP.receive {
          repeat;
        }
        [] TResp.timeout {
          setverdict (fail);
          stop;
        }
      }
      repeatINVITE(v_CallId, v_CSeq, 2.0 * PX_T1);
      repeatINVITE(v_CallId, v_CSeq, 2.0 * PX_T1);
      sendPTCAnsw(486, "Busy here");
    }
    function ptc_CC_PR_TR_CL_TI_004(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          TResp.stop;
          setverdict (pass);
        }
        [] SIPP.receive {
          repeat;
        }
        [] TResp.timeout {
          setverdict (fail);
          stop;
        }
      }
      repeatINVITE(v_CallId, v_CSeq, PX_T1);
      repeatINVITE(v_CallId, v_CSeq, 2.0 * PX_T1);
      repeatINVITE(v_CallId, v_CSeq, 4.0 * PX_T1);
      sendPTCAnsw(486, "Busy here");
    }
    function ptc_CC_PR_TR_CL_TI_005(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var ACK_Request vl_ACK_Request;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          TGuard.stop;
          setverdict (pass);
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      waitForTimeout(64.0 * PX_T1);
      sendPTCAnsw(486, "Busy here");
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (
          ACK_Request_r_1(v_CallId)) -> value vl_ACK_Request {
          TAck.stop;
          setverdict (fail);
          stop;
        }
        [] SIPP.receive (INVITE_Request_r_1) {
          repeat;
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (inconc);
          stop;
        }
        [] TAck.timeout {
          setverdict (pass);
        }
      }
    }
    function ptc_CC_PR_TR_CL_TI_006(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          setverdict (pass);
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      waitForTimeout(64.0 * PX_T1);
      checkUACTerminatedState(loc_CSeq_s);
    }
    function ptc_CC_PR_TR_CL_TI_007(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(183, "Session Progress");
          setverdict (pass);
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      catchRetrans(v_CallId, v_CSeq, 2.0);
      notRepeatINVITE(v_CallId, v_CSeq, PX_T1 * 90.0 / 100.0);
      sendPTCAnsw(486, "Busy here");
    }
    function ptc_CC_PR_TR_CL_TI_008(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var boolean vl_delay_not_expired := true;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(183, "Session Progress");
          sendPTCAnsw(486, "Busy here");
          setverdict (pass);
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          setverdict (pass);
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      TDelay.start (31.0);
      while (vl_delay_not_expired) {
        sendPTCAnsw(486, "Busy here");
        TAck.start (PX_TACK);
        alt {
          [] SIPP.receive (ACK_Request_r_1(v_CallId)) {
            TAck.stop;
            setverdict (pass);
          }
          [] SIPP.receive {
            all timer.stop;
            setverdict (inconc);
            stop;
          }
          [] TDelay.timeout {
            setverdict (pass);
            vl_delay_not_expired := false;
            TAck.stop;
          }
          [] TAck.timeout {
            setverdict (fail);
            stop;
          }
        }
      }
    }
    function ptc_CC_PR_TR_CL_TI_009(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(183, "Session Progress");
          sendPTCAnsw(486, "Busy here");
          setverdict (pass);
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          setverdict (pass);
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      sendPTCAnsw(486, "Busy here");
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          TAck.stop;
          setverdict (fail);
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (inconc);
          stop;
        }
        [] TAck.timeout {
          setverdict (pass);
        }
      }
    }
    function ptc_CC_PR_TR_CL_TI_010(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var boolean vl_delay_not_expired := true;
      var SemicolonParam_List vl_params;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(183, "Session Progress");
          sendPTCAnsw(486, "Busy here");
          setverdict (pass);
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          setverdict (pass);
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      vl_params := valueof(v_Via.viaBody[0].viaParams);
      vl_params[0] := {
        id := BRANCH_ID,
        paramValue := BRANCH_COOKIE & getRndTag()
      };
      v_Via.viaBody[0].viaParams := vl_params;
      sendPTCAnsw(486, "Busy here");
      catchRetrans(v_CallId, v_CSeq, 2.0);
      TAck.start (31.0);
      alt {
        [] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          log ("BEGIN_TRACE_INFO No ACK_Request expected. ACK should not be retransmitted. END_TRACE_INFO");
          TAck.stop;
          setverdict (fail);
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (inconc);
        }
        [] TAck.timeout {
          setverdict (pass);
        }
      }
      cpA.send (CM_Check_Done);
    }
    function ptc_CC_PR_TR_CL_TI_011(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var boolean vl_delay_not_expired := true;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      acceptPTCACall(loc_CSeq_s);
      TDelay.start (62.0 * PX_T1);
      while (vl_delay_not_expired) {
        sendPTC200OKInvite();
        TAck.start (PX_TACK);
        alt {
          [] SIPP.receive (ACK_Request_r_1(v_CallId)) {
            TAck.stop;
            setverdict (pass);
          }
          [] SIPP.receive {
            TAck.stop;
            TDelay.stop;
            setverdict (inconc);
            cpA.send (CM_Check_Done);
            vl_delay_not_expired := false;
          }
          [] TDelay.timeout {
            setverdict (pass);
            vl_delay_not_expired := false;
            cpA.send (CM_Check_Done);
            TAck.stop;
          }
          [] TAck.timeout {
            setverdict (fail);
            TDelay.stop;
            cpA.send (CM_Check_Done);
            vl_delay_not_expired := false;
          }
        }
      }
      synchroniseInitPtc();
      acceptPTCReleaseCall();
    }
    function ptc_CC_PR_TR_CL_TI_012(CSeq loc_CSeq_s) runs on SipComponent {
      var BYE_Request vl_BYE_Request;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      tryingPTCBYE();
      TAck.start (PX_T1 * 2.0);
      alt {
        [] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request {
          TAck.stop;
          setverdict (pass);
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
        }
        [] SIPP.receive {
          all timer.stop;
          send200OK();
          setverdict (fail);
        }
        [] TAck.timeout {
          all timer.stop;
          send200OK();
          setverdict (fail);
        }
      }
    }
    function ptc_CC_PR_TR_CL_TI_013(CSeq loc_CSeq_s) runs on SipComponent {
      var BYE_Request vl_BYE_Request;
      var float vl_min_result;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      tryingPTCBYE();
      repeatPTCBYE();
      vl_min_result := minValue(2.0 * PX_T1, PX_T2);
      TAck.start (vl_min_result);
      alt {
        [] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request {
          TAck.stop;
          setverdict (pass);
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
        }
        [] SIPP.receive {
          all timer.stop;
          send200OK();
          setverdict (fail);
        }
        [] TAck.timeout {
          all timer.stop;
          send200OK();
          setverdict (fail);
        }
      }
    }
    function ptc_CC_PR_TR_CL_TI_014(CSeq loc_CSeq_s) runs on SipComponent {
      var BYE_Request vl_BYE_Request;
      var float vl_min_result;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      tryingPTCBYE();
      repeatPTCBYE();
      repeatPTCBYE();
      vl_min_result := minValue(4.0 * PX_T1, PX_T2);
      TAck.start (vl_min_result);
      alt {
        [] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request {
          TAck.stop;
          setverdict (pass);
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
        }
        [] SIPP.receive {
          all timer.stop;
          send200OK();
          setverdict (fail);
        }
        [] TAck.timeout {
          all timer.stop;
          send200OK();
          setverdict (fail);
        }
      }
    }
    function ptc_CC_PR_TR_CL_TI_015(CSeq loc_CSeq_s) runs on SipComponent {
      var BYE_Request vl_BYE_Request;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      tryingPTCBYE();
      waitForTimeout2(65.0 * PX_T1);
      notRepeatBYE(PX_TACK);
    }
    function ptc_CC_PR_TR_CL_TI_016(CSeq loc_CSeq_s) runs on SipComponent {
      var BYE_Request vl_BYE_Request;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      tryingPTCBYE();
      sendPTCAnsw(100, "Trying");
      TAck.start (PX_T1 * 0.2);
      alt {
        [] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request {
          TAck.stop;
          setverdict (pass);
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
        }
        [] SIPP.receive {
          all timer.stop;
          send200OK();
          setverdict (fail);
        }
        [] TAck.timeout {
          all timer.stop;
          send200OK();
          setverdict (fail);
        }
      }
    }
    function ptc_CC_PR_TR_CL_TI_017(CSeq loc_CSeq_s) runs on SipComponent {
      var BYE_Request vl_BYE_Request;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      tryingPTCBYE();
      sendPTCAnsw(100, "Trying");
      repeatPTCBYE();
      TAck.start (PX_T2);
      alt {
        [] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request {
          TAck.stop;
          setverdict (pass);
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
        }
        [] SIPP.receive {
          all timer.stop;
          send200OK();
          setverdict (fail);
        }
        [] TAck.timeout {
          all timer.stop;
          send200OK();
          setverdict (fail);
        }
      }
    }
    function ptc_CC_PR_TR_CL_TI_018(CSeq loc_CSeq_s) runs on SipComponent {
      var BYE_Request vl_BYE_Request;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      tryingPTCBYE();
      sendPTCAnsw(100, "Trying");
      waitForTimeout2(65.0 * PX_T1);
      notRepeatBYE(PX_TACK);
    }
    function ptc_CC_PR_TR_CL_TI_019(CSeq loc_CSeq_s) runs on SipComponent {
      var BYE_Request vl_BYE_Request;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      tryingPTCBYE();
      sendPTCAnsw(100, "Trying");
      waitForTimeout2(65.0 * PX_T1);
      notRepeatRespInTime2(PX_TACK);
    }
    
    function ptc_MG_PR_I_009(
      CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      
      var INVITE_Request vl_INVITE_Request;
      var CANCEL_Request vl_CANCEL_Request;
      var BYE_Request vl_BYE_Request;
      var integer vl_len_sdp;
      var boolean vl_invite := true;
      var boolean vl_ack := false;
      var boolean vl_bye := false;
      var boolean vl_cancel := false;
      
      initPTC(loc_CSeq_s);
      vl_len_sdp := lengthof (px_sdpBody) + 10;
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [vl_invite] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          if (v_BOO_RecordRoute) {
            SIPP.send (
              Response_200_Invite_s_5(
                v_CallId,
                v_CSeq,
                v_From,
                v_To,
                v_Via,
                vl_len_sdp,
                px_sdpBody,
                v_RecordRoute)) to v_sent_label;
          } else {
            SIPP.send (
              Response_200_Invite_s_5(
                v_CallId,
                v_CSeq,
                v_From,
                v_To,
                v_Via,
                vl_len_sdp,
                px_sdpBody,
                omit)) to v_sent_label;
          }
          setverdict (pass);
          vl_invite := false;
          vl_cancel := true;
          vl_ack := true;
          vl_bye := true;
          repeat;
        }
        [vl_ack] SIPP.receive (ACK_Request_r_1(loc_CallId)) {
          vl_ack := false;
          repeat;
        }
        [vl_cancel] SIPP.receive (
          CANCEL_Request_r_1(loc_CallId)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
          setverdict (fail);
          vl_cancel := false;
          synchroniseCheckDone();
          stop;
        }
        [] cpA.receive (CM_Check_Done) {
          setverdict (pass);
        }
        [vl_bye] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
          synchroniseCheckDone();
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    
    function ptc_MG_PR_I_010(
      CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var integer vl_len_sdp;
      var boolean vl_invite := true;
      var boolean vl_ack := false;
      var boolean vl_bye := false;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      vl_len_sdp := lengthof (px_sdpBody) - 1;
      synchroniseInitPtc();
      alt {
        [vl_invite] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(100, "Trying");
          if (v_BOO_RecordRoute) {
            SIPP.send (
              Response_200_Invite_s_5(
                v_CallId,
                v_CSeq,
                v_caller_From,
                v_caller_To,
                v_Via,
                vl_len_sdp,
                px_sdpBody,
                v_RecordRoute)) to v_sent_label;
          } else {
            SIPP.send (
              Response_200_Invite_s_5(
                v_CallId,
                v_CSeq,
                v_caller_From,
                v_caller_To,
                v_Via,
                vl_len_sdp,
                px_sdpBody,
                omit)) to v_sent_label;
          }
          setverdict (pass);
          vl_invite := false;
          vl_ack := true;
          vl_bye := true;
          repeat;
        }
        [vl_ack] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          vl_ack := false;
          repeat;
        }
        [vl_bye] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    
    function ptc_Accept_the_Call(
      CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var boolean vl_invite := true;
      var boolean vl_ack := false;
      var boolean vl_bye := false;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [vl_invite] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTC200OKInvite();
          setverdict (pass);
          vl_invite := false;
          vl_ack := true;
          vl_bye := true;
          repeat;
        }
        [vl_ack] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          vl_ack := false;
          synchroniseCheckDone();
          repeat;
        }
        [vl_bye] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    
    function ptc_Accept_the_Call2(
      CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var boolean vl_invite := true;
      var boolean vl_ack := false;
      var boolean vl_bye := false;
      var boolean vl_bye_twice := true;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [vl_invite] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTC200OKInvite();
          setverdict (pass);
          vl_invite := false;
          vl_ack := true;
          vl_bye := true;
          repeat;
        }
        [vl_ack] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          vl_ack := false;
          synchroniseCheckDone();
          repeat;
        }
        [vl_bye] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
          if (vl_bye_twice) {
            vl_bye_twice := false;
            repeat;
          } else {
            stop;
          }
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    
    function ptc_ACK_Not_Forwarded(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var boolean vl_ack_received := false; //controls the receipt of duplicate ACK
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(183, "Session Progress");
          sendPTCAnsw(486, "Busy Here");
          setverdict (pass);
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          if (vl_ack_received == true) {
            log ("BEGIN_TRACE_INFO The ACK_Request to reach Confirmed state has been already received. END_TRACE_INFO");
            setverdict (fail);
            all timer.stop;
            stop;
          }
          setverdict (pass);
          vl_ack_received := true;
          repeat;
        }
        [] cpA.receive (CM_Check_Done) {
          setverdict (pass);
          all timer.stop;
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc_ACK_Not_Forwarded2(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(183, "Session Progress");
          sendPTCAnsw(486, "Busy Here");
          setverdict (pass);
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          setverdict (pass);
          repeat;
        }
        [] cpA.receive (CM_Check_Done) {
          setverdict (pass);
          all timer.stop;
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc_Answer_the_Call_with_1XX(
      in integer loc_status,
      in charstring loc_reasonPhrase,
      CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var boolean vl_invite := true;
      //RGy (2007-09-09) Initial value is changed to false as a PTC behaviour
      //    that accepts ACK as the first message makes no sense
      var boolean vl_ack := false; //true;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [vl_invite] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(loc_status, loc_reasonPhrase);
          checkProceedingState();
          sendPTC200OKInvite();
          setverdict (pass);
          vl_invite := false;
          vl_ack := true;
          repeat;
        }
        [vl_ack] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          vl_ack := false;
          repeat;
        }
        [] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc_Answer_the_Call_with_1XX_200(
      in integer loc_status,
      in charstring loc_reasonPhrase,
      CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var boolean vl_invite := true;
      var boolean vl_ack := true;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [vl_invite] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(loc_status, loc_reasonPhrase);
          sendPTC200OKInvite();
          setverdict (pass);
          vl_invite := false;
          repeat;
        }
        [vl_ack] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          vl_ack := true;
          repeat;
        }
        [] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc_Answer_the_Call_with_2XX(
      in integer loc_status,
      in charstring loc_reasonPhrase,
      CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(100, "Trying");
          sendPTC2XXOKInvite(loc_status, loc_reasonPhrase);
          setverdict (pass);
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          repeat;
        }
        [] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
        }
        [] cpA.receive (CM_Stop) {
          all timer.stop;
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc_Check_Cancel(
      CallId loc_CallId,
      in CSeq loc_CSeq_s,
      SipUrl loc_RequestUri) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var CANCEL_Request vl_CANCEL_Request;
      var boolean vl_invite := true;
      var boolean vl_ack := false;
      var boolean vl_cancel := true;
      
      loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [vl_invite] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(183, "Session Progress");
          setverdict (pass);
          vl_invite := false;
          repeat;
        }
        [vl_ack] SIPP.receive (ACK_Request_r_1(loc_CallId)) {
          vl_ack := false;
          repeat;
        }
        [vl_cancel] SIPP.receive (
          CANCEL_Request_r_11(
            v_CallId,
            v_From,
            v_Cancel_To,
            v_RequestUri,
            v_CSeq
            .seqNumber)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
          setverdict (pass);
          vl_ack := true;
          vl_cancel := false;
          synchroniseCheckDone();
        }
        [] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    
    function ptc_CANCEL_Forwarded(
      in template CANCEL_Request loc_cancel,
      CSeq loc_CSeq_s) runs on SipComponent {
      var CANCEL_Request vl_CANCEL_Request;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [] SIPP.receive (
          loc_cancel) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          v_CallId := vl_CANCEL_Request.msgHeader.callId;
          send200OK();
          setverdict (pass);
          synchroniseCheckDone();
          stop;
        }
        [] SIPP.receive (
          CANCEL_Request: ?) -> value vl_CANCEL_Request {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          v_CallId := vl_CANCEL_Request.msgHeader.callId;
          send200OK();
          setverdict (inconc);
          stop;
        }
        [] SIPP.receive (Request: ?) {
          repeat;
        }
        [] SIPP.receive (Response: ?) {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc_CANCEL_Not_Forwarded(CSeq loc_CSeq_s) runs on SipComponent {
      var CANCEL_Request vl_CANCEL_Request;
      var Request vl_ANY_Request;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [] SIPP.receive (
          CANCEL_Request_ANY_r_1) -> value vl_CANCEL_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          v_CallId := valueof(vl_CANCEL_Request.msgHeader.callId);
          log ("BEGIN_TRACE_INFO No forwarded CANCEL expected. END_TRACE_INFO");
          send200OK();
          setverdict (fail);
          stop;
        }
        [] cpA.receive (CM_Check_Done) {
          setverdict (pass);
          TGuard.stop;
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    
    function ptc_Check_The_ACK(
      in template ACK_Request loc_ACK,
      CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var boolean vl_invite := true;
      var boolean vl_ack := false;
      var boolean vl_bye := false;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      loc_ACK.msgHeader.callId := loc_CallId;
      
      alt {
        [vl_invite] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          loc_ACK.msgHeader.callId := v_CallId;
          sendPTC200OKInvite();
          setverdict (pass);
          vl_invite := false;
          vl_ack := true;
          vl_bye := true;
          repeat;
        }
        [vl_ack] SIPP.receive (loc_ACK) {
          setverdict (pass);
          vl_ack := false;
          cpA.send (CM_Check_Done);
          repeat;
        }
        [vl_bye] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
        }
        [] SIPP.receive {
          cpA.send (CM_Check_Done);
          setverdict (fail);
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    
    function ptc_Check_The_BYE(
      in template BYE_Request loc_BYE,
      CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var boolean vl_invite := true;
      var boolean vl_ack := false;
      var boolean vl_bye := false;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [vl_invite] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTC200OKInvite();
          setverdict (pass);
          loc_BYE.msgHeader.callId := v_CallId;
          vl_invite := false;
          vl_ack := true;
          vl_bye := true;
          repeat;
        }
        [vl_ack] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          vl_ack := false;
          cpA.send (CM_Check_Done);
          repeat;
        }
        [vl_bye] SIPP.receive (loc_BYE)
        -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
        }
        [] SIPP.receive (BYE_Request: ?) -> value vl_BYE_Request {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          v_CallId := vl_BYE_Request.msgHeader.callId;
          send200OK();
          setverdict (fail);
          stop;
        }
        [] SIPP.receive {
          setverdict (fail);
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      cpA.send (CM_Check_Done);
    }
    
    function ptc_TR_Check_The_ACK(
      in integer loc_status,
      in charstring loc_reasonPhrase,
      in CSeq loc_CSeq_s,
      CallId loc_CallId,
      SipUrl loc_RequestUri) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var boolean vl_invite;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      vl_invite := true;
      alt {
        [vl_invite] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(loc_status, loc_reasonPhrase);
          setverdict (pass);
          vl_invite := false;
          repeat;
        }
        [] SIPP.receive (
          ACK_Request_r_16(
            loc_CallId,
            v_From,
            v_To,
            loc_RequestUri,
            v_CSeq.seqNumber)) {
          setverdict (pass);
          cpA.send (CM_Check_Done);
          stop;
        }
        [] SIPP.receive {
          setverdict (fail);
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc_INVITE_Not_Forwarded(
      CallId loc_CallId,
      CSeq loc_CSeq_s,
      boolean loc_cancelled) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var CANCEL_Request vl_CANCEL_Request;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          log ("BEGIN_TRACE_INFO No forwarded INVITE expected. END_TRACE_INFO");
          sendPTCAnsw(486, "Busy here");
          setverdict (fail);
          stop;
        }
        [loc_cancelled] SIPP.receive (
          CANCEL_Request_r_1(loc_CallId)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
          setverdict (fail);
          stop;
        }
        [] cpA.receive (CM_Check_Done) {
          setverdict (pass);
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      alt {
        [] SIPP.receive (ACK_Request_r_1(loc_CallId)) {
          TGuard.stop;
          setverdict (pass);
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (inconc);
          stop;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      synchroniseCheckDone();
    }
    function ptc_INVITE_Not_Forwarded_noAck(
      CallId loc_CallId,
      CSeq loc_CSeq_s,
      boolean loc_cancelled) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var CANCEL_Request vl_CANCEL_Request;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          log ("BEGIN_TRACE_INFO No forwarded INVITE expected. END_TRACE_INFO");
          sendPTCAnsw(486, "Busy here");
          setverdict (fail);
          stop;
        }
        [loc_cancelled] SIPP.receive (
          CANCEL_Request_r_1(loc_CallId)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
          setverdict (fail);
          stop;
        }
        [] cpA.receive (CM_Check_Done) {
          setverdict (pass);
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      synchroniseCheckDone();
    }
    function ptc_INVITE_Forwarded(
      in template INVITE_Request loc_invite,
      CallId loc_CallId,
      CSeq loc_CSeq_s,
      boolean loc_cancelled,
      boolean loc_bye) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var CANCEL_Request vl_CANCEL_Request;
      var BYE_Request vl_BYE_Request;
      var boolean vl_invite := true;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      alt {
        [] cpA.receive (CM_Rsp_Rcved) {
          setverdict (pass);
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      alt {
        [vl_invite] SIPP.receive (
          loc_invite) -> value vl_INVITE_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(486, "Busy here");
          vl_invite := false;
          setverdict (pass);
        }
        [loc_cancelled] SIPP.receive (
          CANCEL_Request_r_1(loc_CallId)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
          setverdict (fail);
          stop;
        }
        [loc_bye] SIPP.receive (
          BYE_Request_r_1(loc_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
          setverdict (fail);
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      synchroniseCheckDone();
    }
    
    function ptc_OPTIONS_Forwarded(
      in template OPTIONS_Request loc_options,
      CallId loc_CallId,
      CSeq loc_CSeq_s,
      boolean loc_cancelled,
      boolean loc_bye) runs on SipComponent {
      var OPTIONS_Request vl_OPTIONS_Request;
      var boolean vl_invite := true;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      alt {
        [] cpA.receive (CM_Rsp_Rcved) {
          setverdict (pass);
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      alt {
        [vl_invite] SIPP.receive (
          loc_options) -> value vl_OPTIONS_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfOptions(vl_OPTIONS_Request);
          sendPTCAnsw(486, "Busy here");
          vl_invite := false;
          setverdict (pass);
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      synchroniseCheckDone();
    }
    function ptc_RD_MultiRegistration(CSeq loc_CSeq_s) runs on SipComponent {
      v_Default := activate (defaultCCPRPTC());
      initPTCPort();
      TGuard.start (PX_TGUARD);
      ptcRDMultiRegistration(loc_CSeq_s);
      synchroniseInitPtc();
      alt {
        [] cpA.receive (CM_Check_Done) {
          setverdict (pass);
          TGuard.stop;
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc_RD_Registration(CSeq loc_CSeq_s) runs on SipComponent {
      initRDPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      alt {
        [] cpA.receive (CM_Check_Done) {
          setverdict (pass);
          TGuard.stop;
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc_RD_ShortRegistration(CSeq loc_CSeq_s) runs on SipComponent {
      var SemicolonParam_List vl_params := {
        {
          id := EXPIRES_ID,
          paramValue := "1"
        }
      };
      var SemicolonParam_List vl_params2 := {
        {
          id := "transport",
          paramValue := PX_TRANSPORT
        }
      };
      
      v_Default := activate (defaultCCPRPTC());
      initPTCPort();
      TGuard.start (PX_TGUARD);
      setHeadersRDPtcForRegister(loc_CSeq_s);
      v_Contact.contactBody.contactAddresses[0].contactParams :=
      vl_params;
      v_Contact
      .contactBody
      .contactAddresses[0]
      .addressField
      .nameAddr
      .addrSpec
      .urlParameters :=
      vl_params2;
      SIPP.send (
        REGISTER_Request_s_1(
          v_RequestUri,
          v_CallId,
          loc_CSeq_s,
          v_Contact,
          v_From,
          v_To,
          v_Via)) to v_sent_label;
      
      if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
        // Re-send request with Authorization header after
        // receiving 401 Unauthorized response.
        awaitingUnauthorizedResponse(
          loc_CSeq_s,
          REGISTER_Request_s_1(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via),
          PX_RFC2617_USERNAME2,
          PX_RFC2617_PASSWD2);
      } else {
        awaitingOkResponse(loc_CSeq_s);
      }
      synchroniseInitPtc();
      alt {
        [] cpA.receive (CM_Check_Done) {
          setverdict (pass);
          TGuard.stop;
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc_Reject_the_Call_withFinal(
      in integer loc_status,
      in charstring loc_reasonPhrase,
      CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var CANCEL_Request vl_CANCEL_Request;
      var boolean vl_invite := true;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [vl_invite] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(loc_status, loc_reasonPhrase);
          setverdict (pass);
          vl_invite := false;
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(loc_CallId)) {
          repeat;
        }
        [] cpA.receive (CM_Check_Done) {
          setverdict (pass);
        }
        [] SIPP.receive (
          CANCEL_Request_r_1(loc_CallId)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
          setverdict (fail);
          stop;
        }
        [] SIPP.receive {
          setverdict (fail);
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc_Resp_Forwarded(
      CallId loc_CallId,
      in template Response loc_response,
      CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      loc_response.msgHeader.callId := loc_CallId;
      alt {
        [] SIPP.receive (
          loc_response) -> value vl_Response sender v_sent_label {
          TGuard.stop;
          setverdict (pass);
          synchroniseCheckDone();
          stop;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc_Wait_Check_Bye_Completed_State(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var boolean vl_invite_received := true; //controls no 200OK to 2nd INVITE
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          if (vl_invite_received) {
            sendPTC200OKInvite();
            vl_invite_received := false;
          }
          setverdict (pass);
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          repeat;
        }
        [] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
          repeat;
        }
        [] cpA.receive (CM_Stop) {
          setverdict (pass);
          all timer.stop;
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc_Wait_Check_Bye_Proceeding_State(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var boolean vl_invite_received := true;  //controls no 200OK to 2nd INVITE
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          if (vl_invite_received) {
            sendPTC200OKInvite();
            vl_invite_received := false;
          }
          setverdict (pass);
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          repeat;
        }
        [] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          sendPTCAnsw(182, "Queued");
          repeat;
        }
        [] cpA.receive (CM_Stop) {
          setverdict (pass);
          all timer.stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          setverdict (pass);
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          repeat;
        }
        [] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          sendPTCAnsw(182, "Queued");
          repeat;
        }
        [] cpA.receive (CM_Stop) {
          setverdict (pass);
          all timer.stop;
          send200OK();
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc_Wait_Check_Invite_Completed_State(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(183, "Session Progress");
          sendPTCAnsw(486, "Busy Here");
          setverdict (pass);
        }
        [] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          all timer.stop;
          repeat;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          setverdict (pass);
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          all timer.stop;
          stop;
        }
        [] SIPP.receive (Response_Any_r_1) {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc_Wait_Check_Invite_Proceeding_State(CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var CANCEL_Request vl_CANCEL_Request;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(183, "Session Progress");
          setverdict (pass);
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          all timer.stop;
          stop;
        }
        [] SIPP.receive (
          CANCEL_Request_r_1(v_CallId)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
          setverdict (fail);
          stop;
        }
        [] cpA.receive (CM_Check_Done) {
          setverdict (pass);
          sendPTCAnsw(486, "Busy Here");
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc_Resp_NotForwarded(
      CallId loc_CallId,
      in template Response loc_response,
      CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      
      initPTC(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      synchroniseInitPtc();
      loc_response.msgHeader.callId := loc_CallId;
      alt {
        [] SIPP.receive (
          loc_response) -> value vl_Response sender v_sent_label {
          log ("BEGIN_TRACE_INFO Did not expect 200_OK. END_TRACE_INFO");
          TGuard.stop;
          setverdict (fail);
        }
        [] cpA.receive (CM_Check_Done) {
          TGuard.stop;
          setverdict (pass);
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      cpA.send (CM_Rsp_Rcved);
      stop;
    }
    function ptc1_Answer_the_Call_with_1XX(
      in integer loc_status,
      in charstring loc_reasonPhrase,
      CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var CANCEL_Request vl_CANCEL_Request;
      
      initPTC1(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(loc_status, loc_reasonPhrase);
          cpC.send (CM_Init_OK);
          setverdict (pass);
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(loc_CallId)) {
          repeat;
        }
        [] SIPP.receive (
          CANCEL_Request_r_1(loc_CallId)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
        }
        [] SIPP.receive (
          BYE_Request_r_1(loc_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
        }
        [] cpA.receive (CM_Check_Done) {
          all timer.stop;
          setverdict (pass);
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
        }
      }
      cpA.send (CM_Check_Done);
    }
    function ptc1_Answer_the_Call_with_1XX_486(
      in integer loc_status,
      in charstring loc_reasonPhrase,
      CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var CANCEL_Request vl_CANCEL_Request;
      
      initPTC1(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(loc_status, loc_reasonPhrase);
          cpC.send (CM_Init_OK);
          setverdict (pass);
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(loc_CallId)) {
          repeat;
        }
        [] SIPP.receive (
          CANCEL_Request_r_1(loc_CallId)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
        }
        [] SIPP.receive (
          BYE_Request_r_1(loc_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
        }
        [] cpA.receive (CM_Check_Done) {
          TGuard.stop;
          setverdict (pass);
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      cpA.send (CM_Check_Done);
    }
    function ptc1_Check_Cancel(
      in integer loc_status,
      in charstring loc_reasonPhrase,
      CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var CANCEL_Request vl_CANCEL_Request;
      
      initPTC1(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(loc_status, loc_reasonPhrase);
          setverdict (pass);
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(loc_CallId)) {
          repeat;
        }
        [] SIPP.receive (
          CANCEL_Request_r_10(
            loc_CallId,
            v_From,
            v_Cancel_To,
            v_RequestUri,
            v_CSeq.seqNumber,
            v_Via)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
          setverdict (pass);
        }
        [] SIPP.receive (
          BYE_Request_r_1(loc_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      cpB.send (CM_Check_Done);
    }
    function ptc1_Coordinate_FinalAnswer(
      in integer loc_status,
      in charstring loc_reasonPhrase,
      CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var CANCEL_Request vl_CANCEL_Request;
      var boolean vl_invite_received := false; //controls PTC action on CM_Send_Rsp
      
      initPTC1(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          vl_invite_received := true;
          setverdict (pass);
          repeat;
        }
        [] cpA.receive (CM_Send_Rsp) {
          if (vl_invite_received) {
            if ((loc_status > 199) and (loc_status < 300)) {
              if (v_BOO_RecordRoute) {
                SIPP.send (
                  Response_2XX_PTCInvite_s_1(
                    v_CallId,
                    v_CSeq,
                    v_From,
                    v_To,
                    v_Via,
                    v_RecordRoute,
                    loc_status,
                    loc_reasonPhrase)) to v_sent_label;
              } else {
                SIPP.send (
                  Response_2XX_PTCInvite_noroute_s_1(
                    v_CallId,
                    v_CSeq,
                    v_From,
                    v_To,
                    v_Via,
                    loc_status,
                    loc_reasonPhrase)) to v_sent_label;
              }
            } else {
              sendPTCAnsw(loc_status, loc_reasonPhrase);
            }
          } else {
            all timer.stop;
            setverdict (inconc);
            stop;
          }
          setverdict (pass);
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          repeat;
        }
        [] SIPP.receive (
          CANCEL_Request_r_1(v_CallId)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
        }
        [] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
        }
        [] cpB.receive (CM_Check_Done) {
          all timer.stop;
          setverdict (pass);
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc1_INVITE_Forwarded(
      in template INVITE_Request loc_invite,
      CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      
      initPTC1(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      alt {
        [] SIPP.receive (
          loc_invite) -> value vl_INVITE_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(486, "Busy here");
          setverdict (pass);
          repeat;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc1_OPTIONS_Forwarded(
      in template OPTIONS_Request loc_invite,
      CSeq loc_CSeq_s) runs on SipComponent {
      var OPTIONS_Request vl_OPTIONS_Request;
      
      initPTC1(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      alt {
        [] SIPP.receive (
          loc_invite) -> value vl_OPTIONS_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfInvite(vl_OPTIONS_Request);
          sendPTCAnsw(486, "Busy here");
          setverdict (pass);
          repeat;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc1_FinalAnswer(
      in integer loc_status,
      in charstring loc_reasonPhrase,
      CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var CANCEL_Request vl_CANCEL_Request;
      var boolean vl_invite := true;
      
      initPTC1(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      alt {
        [vl_invite] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          if ((loc_status > 199) and (loc_status < 300)) {
            if (v_BOO_RecordRoute) {
              SIPP.send (
                Response_2XX_PTCInvite_s_1(
                  loc_CallId,
                  v_CSeq,
                  v_From,
                  v_To,
                  v_Via,
                  v_RecordRoute,
                  loc_status,
                  loc_reasonPhrase)) to v_sent_label;
            } else {
              SIPP.send (
                Response_2XX_PTCInvite_noroute_s_1(
                  loc_CallId,
                  v_CSeq,
                  v_From,
                  v_To,
                  v_Via,
                  loc_status,
                  loc_reasonPhrase)) to v_sent_label;
            }
          } else {
            if (loc_status == 401) {
              SIPP.send (
                Response_401_s_1(
                  loc_CallId,
                  v_CSeq,
                  v_From,
                  v_To,
                  v_Via)) to v_sent_label;
            } else {
              if (loc_status == 407) {
                SIPP.send (
                  Response_407_s_1(
                    loc_CallId,
                    v_CSeq,
                    v_From,
                    v_To,
                    v_Via)) to v_sent_label;
              } else {
                sendPTCAnsw(loc_status, loc_reasonPhrase);
              }
            }
          }
          setverdict (pass);
          vl_invite := false;
          cpC.send (CM_Init_OK);
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(loc_CallId)) {
          repeat;
        }
        [] SIPP.receive (
          CANCEL_Request_r_1(loc_CallId)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
          
        }
        [] SIPP.receive (
          BYE_Request_r_1(loc_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
        }
        [] cpA.receive (CM_Check_Done) {
          setverdict (pass);
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc1_FinalAnswer_Options(
      in integer loc_status,
      in charstring loc_reasonPhrase,
      CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      var OPTIONS_Request vl_OPTIONS_Request;
      var boolean vl_invite := true;
      
      initPTC1(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC());
      alt {
        [vl_invite] SIPP.receive (
          OPTIONS_Request_r_1) -> value vl_OPTIONS_Request sender v_sent_label {
          setHeadersOnReceiptOfOptions(vl_OPTIONS_Request);
          if ((loc_status > 199) and (loc_status < 300)) {
            if (v_BOO_RecordRoute) {
              SIPP.send (
                Response_2XX_PTCInvite_s_1(
                  loc_CallId,
                  v_CSeq,
                  v_From,
                  v_To,
                  v_Via,
                  v_RecordRoute,
                  loc_status,
                  loc_reasonPhrase)) to v_sent_label;
            } else {
              SIPP.send (
                Response_2XX_PTCInvite_noroute_s_1(
                  loc_CallId,
                  v_CSeq,
                  v_From,
                  v_To,
                  v_Via,
                  loc_status,
                  loc_reasonPhrase)) to v_sent_label;
            }
          } else {
            if (loc_status == 401) {
              SIPP.send (
                Response_401_s_1(
                  loc_CallId,
                  v_CSeq,
                  v_From,
                  v_To,
                  v_Via)) to v_sent_label;
            } else {
              if (loc_status == 407) {
                SIPP.send (
                  Response_407_s_1(
                    loc_CallId,
                    v_CSeq,
                    v_From,
                    v_To,
                    v_Via)) to v_sent_label;
              } else {
                sendPTCAnsw(loc_status, loc_reasonPhrase);
              }
            }
          }
          setverdict (pass);
          vl_invite := false;
          cpC.send (CM_Init_OK);
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(loc_CallId)) {
          repeat;
        }
        [] cpA.receive (CM_Check_Done) {
          setverdict (pass);
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc2_Check_Cancel(
      in integer loc_status,
      in charstring loc_reasonPhrase,
      CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var CANCEL_Request vl_CANCEL_Request;
      var boolean vl_invite_received := false;  //controls PTC action on CM_Send_Rsp
      
      initPTC2(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC2());
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          vl_invite_received := true;
          setverdict (pass);
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(loc_CallId)) {
          repeat;
        }
        [] cpB.receive (CM_Send_Rsp) {
          if (vl_invite_received) {
            sendPTCAnsw(loc_status, loc_reasonPhrase);
          } else {
            all timer.stop;
            setverdict (inconc);
          }
          setverdict (pass);
          repeat;
        }
        [] SIPP.receive (
          CANCEL_Request_r_10(
            loc_CallId,
            v_From,
            v_Cancel_To,
            v_RequestUri,
            v_CSeq.seqNumber,
            v_Via)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
          setverdict (pass);
        }
        [] SIPP.receive (
          BYE_Request_r_1(loc_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc2_Answer_the_Call_with_1XX_486(
      in integer loc_status,
      in charstring loc_reasonPhrase,
      CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var CANCEL_Request vl_CANCEL_Request;
      
      initPTC2(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC2());
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          alt {
            [] cpC.receive (CM_Init_OK) {
              TSync.stop;
            }
            [] TSync.timeout {
              if (v_reg_done) {
                removeRegistration(v_CSeq);
              }
              setverdict (inconc);
              stop;
            }
          }
          sendPTCAnsw(loc_status, loc_reasonPhrase);
          sendPTCAnsw(486, "Busy here");
          setverdict (pass);
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(loc_CallId)) {
          repeat;
        }
        [] SIPP.receive (
          CANCEL_Request_r_1(loc_CallId)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
        }
        [] SIPP.receive (
          BYE_Request_r_1(loc_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
        }
        [] cpB.receive (CM_Check_Done) {
          TGuard.stop;
          setverdict (pass);
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc2_Coordinate_FinalAnswer(
      in integer loc_status,
      in charstring loc_reasonPhrase,
      CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var CANCEL_Request vl_CANCEL_Request;
      var boolean vl_invite_received := false;  //controls PTC action on CM_Send_Rsp
      
      initPTC2(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC2());
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          vl_invite_received := true;
          setverdict (pass);
          repeat;
        }
        [] cpB.receive (CM_Send_Rsp) {
          if (vl_invite_received) {
            if ((loc_status > 199) and (loc_status < 300)) {
              if (v_BOO_RecordRoute) {
                SIPP.send (
                  Response_2XX_PTCInvite_s_1(
                    loc_CallId,
                    v_CSeq,
                    v_From,
                    v_To,
                    v_Via,
                    v_RecordRoute,
                    loc_status,
                    loc_reasonPhrase)) to v_sent_label;
              } else {
                SIPP.send (
                  Response_2XX_PTCInvite_noroute_s_1(
                    loc_CallId,
                    v_CSeq,
                    v_From,
                    v_To,
                    v_Via,
                    loc_status,
                    loc_reasonPhrase)) to v_sent_label;
              }
            } else {
              sendPTCAnsw(loc_status, loc_reasonPhrase);
            }
          } else {
            all timer.stop;
            setverdict (inconc);
          }
          setverdict (pass);
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(loc_CallId)) {
          repeat;
        }
        [] SIPP.receive (
          CANCEL_Request_r_1(loc_CallId)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
        }
        [] SIPP.receive (
          BYE_Request_r_1(loc_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
        }
        [] cpB.receive (CM_Check_Done) {
          all timer.stop;
          setverdict (pass);
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
      cpB.send (CM_Check_Done);
    }
    function ptc2_INVITE_Forwarded(
      in template INVITE_Request loc_invite,
      CSeq loc_CSeq_s) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      
      initPTC2(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC2());
      alt {
        [] SIPP.receive (
          loc_invite) -> value vl_INVITE_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTCAnsw(486, "Busy here");
          setverdict (pass);
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc2_OPTIONS_Forwarded(
      in template OPTIONS_Request loc_invite,
      CSeq loc_CSeq_s) runs on SipComponent {
      var OPTIONS_Request vl_OPTIONS_Request;
      
      initPTC2(loc_CSeq_s);
      v_Default := activate (defaultCCPRPTC2());
      alt {
        [] SIPP.receive (
          loc_invite) -> value vl_OPTIONS_Request sender v_sent_label {
          TGuard.stop;
          setHeadersOnReceiptOfOptions(vl_OPTIONS_Request);
          sendPTCAnsw(486, "Busy here");
          setverdict (pass);
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc2_FinalAnswer(
      in integer loc_status,
      in charstring loc_reasonPhrase,
      CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      var CANCEL_Request vl_CANCEL_Request;
      var boolean vl_invite := true;
      
      initPTC2(loc_CSeq_s);
      alt {
        [vl_invite] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          TSync.start (PX_TSYNC);
          alt {
            [] cpC.receive (CM_Init_OK) {
              TSync.stop;
            }
            [] TSync.timeout {
              if (v_reg_done) {
                removeRegistration(v_CSeq);
              }
              setverdict (inconc);
              stop;
            }
          }
          if ((loc_status > 199) and (loc_status < 300)) {
            if (v_BOO_RecordRoute) {
              SIPP.send (
                Response_2XX_PTCInvite_s_1(
                  loc_CallId,
                  v_CSeq,
                  v_From,
                  v_To,
                  v_Via,
                  v_RecordRoute,
                  loc_status,
                  loc_reasonPhrase)) to v_sent_label;
            } else {
              SIPP.send (
                Response_2XX_PTCInvite_noroute_s_1(
                  loc_CallId,
                  v_CSeq,
                  v_From,
                  v_To,
                  v_Via,
                  loc_status,
                  loc_reasonPhrase)) to v_sent_label;
            }
          } else {
            if (loc_status == 401) {
              SIPP.send (
                Response_401_s_2(
                  loc_CallId,
                  v_CSeq,
                  v_From,
                  v_To,
                  v_Via)) to v_sent_label;
            } else {
              if (loc_status == 407) {
                SIPP.send (
                  Response_407_s_1(
                    loc_CallId,
                    v_CSeq,
                    v_From,
                    v_To,
                    v_Via)) to v_sent_label;
              } else {
                sendPTCAnsw(loc_status, loc_reasonPhrase);
              }
            }
          }
          
          setverdict (pass);
          vl_invite := false;
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(loc_CallId)) {
          repeat;
        }
        [] SIPP.receive (
          CANCEL_Request_r_1(loc_CallId)) -> value vl_CANCEL_Request sender v_sent_label {
          setHeadersOnReceiptOfCancel(vl_CANCEL_Request);
          send200OK();
        }
        [] SIPP.receive (
          BYE_Request_r_1(loc_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
        }
        [] cpB.receive (CM_Check_Done) {
          TGuard.stop;
          setverdict (pass);
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function ptc2_FinalAnswer_Options(
      in integer loc_status,
      in charstring loc_reasonPhrase,
      CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      var OPTIONS_Request vl_OPTIONS_Request;
      var boolean vl_invite := true;
      
      initPTC2(loc_CSeq_s);
      alt {
        [vl_invite] SIPP.receive (
          OPTIONS_Request_r_1) -> value vl_OPTIONS_Request sender v_sent_label {
          setHeadersOnReceiptOfOptions(vl_OPTIONS_Request);
          TSync.start (PX_TSYNC);
          alt {
            [] cpC.receive (CM_Init_OK) {
              TSync.stop;
            }
            [] TSync.timeout {
              setverdict (inconc);
              stop;
            }
          }
          if ((loc_status > 199) and (loc_status < 300)) {
            if (v_BOO_RecordRoute) {
              SIPP.send (
                Response_2XX_PTCInvite_s_1(
                  loc_CallId,
                  v_CSeq,
                  v_From,
                  v_To,
                  v_Via,
                  v_RecordRoute,
                  loc_status,
                  loc_reasonPhrase)) to v_sent_label;
            } else {
              SIPP.send (
                Response_2XX_PTCInvite_noroute_s_1(
                  loc_CallId,
                  v_CSeq,
                  v_From,
                  v_To,
                  v_Via,
                  loc_status,
                  loc_reasonPhrase)) to v_sent_label;
            }
          } else {
            if (loc_status == 401) {
              SIPP.send (
                Response_401_s_2(
                  loc_CallId,
                  v_CSeq,
                  v_From,
                  v_To,
                  v_Via)) to v_sent_label;
            } else {
              if (loc_status == 407) {
                SIPP.send (
                  Response_407_s_1(
                    loc_CallId,
                    v_CSeq,
                    v_From,
                    v_To,
                    v_Via)) to v_sent_label;
              } else {
                sendPTCAnsw(loc_status, loc_reasonPhrase)
              }
            }
          }
          setverdict (pass);
          vl_invite := false;
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(loc_CallId)) {
          repeat;
        }
        [] cpB.receive (CM_Check_Done) {
          TGuard.stop;
          setverdict (pass);
        }
        [] SIPP.receive {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
  }
}
group Behaviour {
  group TestConfiguration {
    function initPort(
      SipComponent loc_Comp,
      SipInterfaces loc_system) runs on SipComponent {
      if (PX_UDP) {
        initUDPport(loc_Comp, loc_system);
      } else {
        initTCPport(loc_Comp, loc_system);
      }
    }
    
    function initUDPport(
      SipComponent loc_Comp,
      SipInterfaces loc_system) runs on SipComponent {
      map (loc_Comp: SIPP, loc_system: UDP1);
      v_sent_label := {
        host := PX_IUT_IPADDR,
        portField := PX_IUT_PORT
      };
      v_ets_label := {
        host := PX_ETS_IPADDR,
        portField := PX_ETS_PORT
      };
    }
    function initTCPport(
      SipComponent loc_Comp,
      SipInterfaces loc_system) runs on SipComponent {
      map (loc_Comp: SIPP, loc_system: TCP1);
      v_sent_label := {
        host := PX_IUT_IPADDR,
        portField := PX_IUT_PORT
      };
      v_ets_label := {
        host := PX_ETS_IPADDR,
        portField := PX_ETS_PORT
      };
    }
    function initMTCPort() runs on SipComponent {
      if (PX_UDP) {
        initUDPMTCport();
      } else {
        initTCPMTCport();
      }
    }
    function initUDPMTCport() runs on SipComponent {
      v_sent_label := {
        host := PX_IUT_IPADDR,
        portField := PX_IUT_PORT
      };
      v_ets_label := {
        host := PX_ETS_IPADDR,
        portField := PX_ETS_PORT
      };
    }
    function initTCPMTCport() runs on SipComponent {
      v_sent_label := {
        host := PX_IUT_IPADDR,
        portField := PX_IUT_PORT
      };
      v_ets_label := {
        host := PX_ETS_IPADDR,
        portField := PX_ETS_PORT
      };
    }
    function initPTCPort() runs on SipComponent {
      if (PX_UDP) {
        initUDPPTCport();
      } else {
        initTCPPTCport();
      }
    }
    function initPTC2Port() runs on SipComponent {
      if (PX_UDP) {
        initUDPPTC2port();
      } else {
        initTCPPTC2port();
      }
    }
    function initUDPPTCport() runs on SipComponent {
      v_sent_label := {
        host := PX_IUT_IPADDR2,
        portField := PX_IUT_PORT2
      };
      v_ets_label := {
        host := PX_ETS_IPADDR2,
        portField := PX_ETS_PORT2
      };
    }
    function initTCPPTCport() runs on SipComponent {
      v_sent_label := {
        host := PX_IUT_IPADDR2,
        portField := PX_IUT_PORT2
      };
      v_ets_label := {
        host := PX_ETS_IPADDR2,
        portField := PX_ETS_PORT2
      };
    }
    function initUDPPTC2port() runs on SipComponent {
      v_sent_label := {
        host := PX_IUT_IPADDR3,
        portField := PX_IUT_PORT3
      };
      v_ets_label := {
        host := PX_ETS_IPADDR3,
        portField := PX_ETS_PORT3
      };
    }
    function initTCPPTC2port() runs on SipComponent {
      v_sent_label := {
        host := PX_IUT_IPADDR3,
        portField := PX_IUT_PORT3
      };
      v_ets_label := {
        host := PX_ETS_IPADDR3,
        portField := PX_ETS_PORT3
      };
    }
    function initProxyPort() runs on SipComponent {
      if (PX_UDP) {
        initUDPProxyPort();
      } else {
        initTCPProxyPort();
      }
    }
    function initUDPProxyPort() runs on SipComponent {
      v_sent_label := {
        host := PX_IUT_IPADDR,
        portField := PX_IUT_PORT
      };
      v_ets_label := {
        host := PX_PROXY_IPADDR,
        portField := PX_PROXY_PORT
      };
    }
    function initTCPProxyPort() runs on SipComponent {
      v_sent_label := {
        host := PX_IUT_IPADDR,
        portField := PX_IUT_PORT
      };
      v_ets_label := {
        host := PX_PROXY_IPADDR,
        portField := PX_PROXY_PORT
      };
    }
    function initConfig1(
      SipComponent loc_Comp1,
      SipComponent loc_Comp2,
      SipInterfaces loc_SipInterfaces) runs on SipComponent {
      if (PX_UDP) {
        map (loc_Comp1: SIPP, loc_SipInterfaces: UDP1);
        map (loc_Comp2: SIPP, loc_SipInterfaces: UDP2);
      } else {
        map (loc_Comp1: SIPP, loc_SipInterfaces: TCP1);
        map (loc_Comp2: SIPP, loc_SipInterfaces: TCP2);
      }
      connect (loc_Comp1: cpA, loc_Comp2: cpA);
    } //end initConfig1
    
    function initConfig2(
      SipComponent loc_Comp1,
      SipComponent loc_Comp2,
      SipComponent loc_Comp3,
      SipInterfaces loc_SipInterfaces) runs on SipComponent {
      if (PX_UDP) {
        map (loc_Comp1: SIPP, loc_SipInterfaces: UDP1);
        map (loc_Comp2: SIPP, loc_SipInterfaces: UDP2);
        map (loc_Comp3: SIPP, loc_SipInterfaces: UDP3);
      } else {
        map (loc_Comp1: SIPP, loc_SipInterfaces: TCP1);
        map (loc_Comp2: SIPP, loc_SipInterfaces: TCP2);
        map (loc_Comp3: SIPP, loc_SipInterfaces: TCP3);
      }
      connect (loc_Comp1: cpA, loc_Comp2: cpA);
      connect (loc_Comp1: cpB, loc_Comp3: cpB);
      connect (loc_Comp2: cpC, loc_Comp3: cpC);
    } //end initConfig2
  }
  group SynchronisationMtcPtcs {
    function synchroniseInitPtc() runs on SipComponent {
      deactivate (v_Default);
      TSync.start (PX_TSYNC);
      cpA.send (CM_Init_OK);
      alt {
        [] cpA.receive (CM_Init_OK) {
          TSync.stop;
        }
        [] TSync.timeout {
          if (v_reg_done) {
            removeRegistration(v_CSeq);
          }
          setverdict (inconc);
          stop;
        }
      }
      v_Default := activate (defaultCCPR());
    } //end synchroniseInitPtc
    
    function synchroniseInitPtc2() runs on SipComponent {
      TSync.start (PX_TSYNC);
      cpB.send (CM_Init_OK);
      deactivate (v_Default);
      alt {
        [] cpB.receive (CM_Init_OK) {
          TSync.stop;
        }
        [] TSync.timeout {
          if (v_reg_done) {
            removeRegistration(v_CSeq);
          }
          setverdict (inconc);
          stop;
        }
      }
      v_Default := activate (defaultCCPR());
    } //end synchroniseInitPtc2
    
    function synchroniseTwoInitPtc() runs on SipComponent {
      deactivate (v_Default);
      TSync.start (PX_TSYNC);
      cpA.send (CM_Init_OK);
      cpB.send (CM_Init_OK);
      alt {
        [] cpA.receive (CM_Init_OK) {
          alt {
            [] cpB.receive (CM_Init_OK) {
              TSync.stop;
            }
            [] TSync.timeout {
              setverdict (inconc);
              stop;
            }
          }
        }
        [] cpB.receive (CM_Init_OK) {
          alt {
            [] cpA.receive (CM_Init_OK) {
              TSync.stop;
            }
            [] TSync.timeout {
              setverdict (inconc);
              stop;
            }
          }
        }
        [] TSync.timeout {
          setverdict (inconc);
          stop;
        }
      }
      v_Default := activate (defaultCCPR());
    } //end synchroniseTwoInitPtc
    
    function synchroniseCheck() runs on SipComponent {
      TSync.start (PX_TSYNC);
      deactivate (v_Default);
      alt {
        [] cpA.receive (CM_Check_Done) {
          TSync.stop;
        }
        [] TSync.timeout {
          if (v_reg_done) {
            removeRegistration(v_CSeq);
          }
          setverdict (fail);
          stop;
        }
      }
      v_Default := activate (defaultCCPR());
    } //end synchroniseCheck
    
    function synchronisePtc2Check() runs on SipComponent {
      TSync.start (PX_TSYNC);
      deactivate (v_Default);
      alt {
        [] cpB.receive (CM_Check_Done) {
          TSync.stop;
        }
        [] TSync.timeout {
          if (v_reg_done) {
            removeRegistration(v_CSeq);
          }
          setverdict (fail);
          stop;
        }
      }
      v_Default := activate (defaultCCPR());
    } //end synchronisePtc2Check
    
    function synchroniseCheckDone() runs on SipComponent {
      cpA.send (CM_Check_Done);
    } //end synchroniseCheckDone
  } //end group SynchronisationMtcPtcs
  
  group Preambles {
    function initPTC(
      CSeq loc_CSeq_s) runs on SipComponent {
      initPTCPort();
      TGuard.start (0.5 * PX_TGUARD);
      ptcRegistration(loc_CSeq_s);
      synchroniseInitPtc();
    } //end initPTC
    
    function initPTC_NoSync(inout CSeq loc_CSeq_s) runs on SipComponent {
      initPTCPort();
      TGuard.start (0.5 * PX_TGUARD);
      ptcRegistration(loc_CSeq_s);
      
    } //end initPTC_NoSync
    
    function initPTC1(inout CSeq loc_CSeq_s) runs on SipComponent {
      initPTCPort();
      TGuard.start (0.5 * PX_TGUARD);
      ptc1Registration(loc_CSeq_s);
      synchroniseInitPtc();
    } //end initPTC1
    
    function initPTC2(inout CSeq loc_CSeq_s) runs on SipComponent {
      initPTC2Port();
      TGuard.start (0.5 * PX_TGUARD);
      ptc2Registration(loc_CSeq_s);
      synchroniseInitPtc2();
    } //end initPTC2
    
    function initRDPTC(inout CSeq loc_CSeq_s) runs on SipComponent {
      initPTCPort();
      TGuard.start (0.5 * PX_TGUARD);
      ptcRDRegistration(loc_CSeq_s);
      synchroniseInitPtc();
    } //end initRDPTC
    
    function initMTC(inout CSeq loc_CSeq_s) runs on SipComponent {
      initMTCPort();
      TGuard.start (PX_TGUARD);
      mtcRegistration(loc_CSeq_s);
      synchroniseInitPtc();
    } //end initMTC
    
    function initMTC_NoSync(inout CSeq loc_CSeq_s) runs on SipComponent {
      initMTCPort();
      TGuard.start (PX_TGUARD);
      mtcRegistration(loc_CSeq_s);
    } //end initMTC_NoSync
    
    function initMTC2(inout CSeq loc_CSeq_s) runs on SipComponent {
      initMTCPort();
      TGuard.start (PX_TGUARD);
      mtcRegistration(loc_CSeq_s);
      synchroniseTwoInitPtc();
    } //end initMTC2
    
    function mtcRegistration(inout CSeq loc_CSeq_s) runs on SipComponent {
      var SemicolonParam_List vl_params, vl_params2;
      
      if (PX_PR_MTC_REGISTRATION) {
        setHeadersForRegister(loc_CSeq_s);
        vl_params := {
          {
            id := EXPIRES_ID,
            paramValue := PX_DELTA_REGISTRATION
          }
        };
        vl_params2 := {
          {
            id := "transport",
            paramValue := PX_TRANSPORT
          }
        };
        v_Contact.contactBody.contactAddresses[0].contactParams :=
        vl_params;
        v_Contact
        .contactBody
        .contactAddresses[0]
        .addressField
        .nameAddr
        .addrSpec
        .urlParameters :=
        vl_params2;
        SIPP.send (
          REGISTER_Request_s_1(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via)) to v_sent_label;
        
        if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
          // Re-send request with Authorization header after
          // receiving 401 Unauthorized response.
          awaitingUnauthorizedResponse(
            loc_CSeq_s,
            REGISTER_Request_s_1(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_Contact,
              v_From,
              v_To,
              v_Via),
            PX_RFC2617_USERNAME,
            PX_RFC2617_PASSWD);
        } else {
          awaitingOkResponse(loc_CSeq_s);
        }
      }
    } //end mtcRegistration
    
    
    function ptcRegistration(inout CSeq loc_CSeq_s) runs on SipComponent {
      var SemicolonParam_List vl_params, vl_params2;
      
      if (PX_PR_PTC_REGISTRATION) {
        setHeadersPtcForRegister(loc_CSeq_s);
        vl_params := {
          {
            id := EXPIRES_ID,
            paramValue := PX_DELTA_REGISTRATION
          }
        };
        vl_params2 := {
          {
            id := "transport",
            paramValue := PX_TRANSPORT
          }
        };
        
        v_Contact
        .contactBody
        .contactAddresses[0]
        .addressField
        .nameAddr
        .addrSpec
        .urlParameters :=
        vl_params2;
        v_Contact.contactBody.contactAddresses[0].contactParams :=
        vl_params;
        SIPP.send (
          REGISTER_Request_s_1(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via)) to v_sent_label;
        if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
          // Re-send request with Authorization header after
          // receiving 401 Unauthorized response.
          awaitingUnauthorizedResponse(
            loc_CSeq_s,
            REGISTER_Request_s_1(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_Contact,
              v_From,
              v_To,
              v_Via),
            PX_RFC2617_USERNAME2,
            PX_RFC2617_PASSWD2);
        } else {
          awaitingOkResponse(loc_CSeq_s);
        }
      }
    } //end ptcRegistration
    
    
    function ptc1Registration(inout CSeq loc_CSeq_s) runs on SipComponent {
      var SemicolonParam_List vl_params, vl_params2;
      
      if (PX_PR_PTC_REGISTRATION) {
        setHeadersPtcForRegister(loc_CSeq_s);
        vl_params := {
          {
            id := EXPIRES_ID,
            paramValue := PX_DELTA_REGISTRATION
          },
          {
            id := "q",
            paramValue := "0.5"
          }
        };
        vl_params2 := {
          {
            id := "transport",
            paramValue := PX_TRANSPORT
          }
        };
        v_Contact
        .contactBody
        .contactAddresses[0]
        .addressField
        .nameAddr
        .addrSpec
        .urlParameters :=
        vl_params2;
        v_Contact.contactBody.contactAddresses[0].contactParams :=
        vl_params;
        SIPP.send (
          REGISTER_Request_s_1(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via)) to v_sent_label;
        if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
          // Re-send request with Authorization header after
          // receiving 401 Unauthorized response.
          awaitingUnauthorizedResponse(
            loc_CSeq_s,
            REGISTER_Request_s_1(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_Contact,
              v_From,
              v_To,
              v_Via),
            PX_RFC2617_USERNAME2,
            PX_RFC2617_PASSWD2);
        } else {
          awaitingOkResponse(loc_CSeq_s);
        }
      }
    } //end ptc1Registration
    
    function ptc2Registration(inout CSeq loc_CSeq_s) runs on SipComponent {
      var SemicolonParam_List vl_params, vl_params2;
      
      if (PX_PR_PTC_REGISTRATION) {
        setHeadersPtc2ForRegister(loc_CSeq_s);
        vl_params := {
          {
            id := EXPIRES_ID,
            paramValue := PX_DELTA_REGISTRATION
          },
          {
            id := "q",
            paramValue := "0.5"
          }
        };
        vl_params2 := {
          {
            id := "transport",
            paramValue := PX_TRANSPORT
          }
        };
        v_Contact
        .contactBody
        .contactAddresses[0]
        .addressField
        .nameAddr
        .addrSpec
        .urlParameters :=
        vl_params2;
        v_Contact.contactBody.contactAddresses[0].contactParams :=
        vl_params;
        SIPP.send (
          REGISTER_Request_s_1(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via)) to v_sent_label;
        if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
          // Re-send request with Authorization header after
          // receiving 401 Unauthorized response.
          awaitingUnauthorizedResponse(
            loc_CSeq_s,
            REGISTER_Request_s_1(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_Contact,
              v_From,
              v_To,
              v_Via),
            PX_RFC2617_USERNAME2,
            PX_RFC2617_PASSWD2);
        } else {
          awaitingOkResponse(loc_CSeq_s);
        }
      }
    } //end ptc2Registration
    
    function ptcRDRegistration(inout CSeq loc_CSeq_s) runs on SipComponent {
      var SemicolonParam_List vl_params, vl_params2;
      
      if (PX_PR_PTC_REGISTRATION) {
        setHeadersPtcForRegister(loc_CSeq_s);
        vl_params := {
          {
            id := EXPIRES_ID,
            paramValue := PX_DELTA_REGISTRATION
          }
        };
        vl_params2 := {
          {
            id := "transport",
            paramValue := PX_TRANSPORT
          }
        };
        v_Contact.contactBody.contactAddresses[0].contactParams :=
        vl_params;
        v_Contact
        .contactBody
        .contactAddresses[0]
        .addressField
        .nameAddr
        .addrSpec
        .urlParameters :=
        vl_params2;
        SIPP.send (
          REGISTER_Request_s_1(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via)) to v_sent_label;
        if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
          // Re-send request with Authorization header after
          // receiving 401 Unauthorized response.
          awaitingUnauthorizedResponse(
            loc_CSeq_s,
            REGISTER_Request_s_1(
              v_RequestUri,
              v_CallId,
              loc_CSeq_s,
              v_Contact,
              v_From,
              v_To,
              v_Via),
            PX_RFC2617_USERNAME,
            PX_RFC2617_PASSWD);
        } else {
          awaitingOkResponse(loc_CSeq_s);
        }
      }
    } //end_ptcRDRegistration
    
    function ptcRDMultiRegistration(inout CSeq loc_CSeq_s) runs on SipComponent {
      var SemicolonParam_List vl_params, vl_params2;
      //RGy (2007-09-14) vl_nameAddr added; used to set correct value of v_Contact
      var NameAddr vl_nameAddr;
      
      setHeadersRDPtcForRegister(loc_CSeq_s);
      v_Contact := valueof(Contact_RD_Multi_s);
      vl_params := {
        {
          id := EXPIRES_ID,
          paramValue := PX_DELTA_REGISTRATION
        }
      };
      vl_params2 := {
        {
          id := "transport",
          paramValue := PX_TRANSPORT
        }
      };
      v_Contact.contactBody.contactAddresses[0].contactParams :=
      vl_params;
      v_Contact.contactBody.contactAddresses[1].contactParams :=
      vl_params;
      vl_nameAddr := {
        displayName := PX_ETS_DISP_NAME2, //copied from Contact_PTC_s (see setHeadersRDPtcForRegister)
        addrSpec := {  //whole addrSpec is copied from SipUrl_IP_ofPTC (see setHeadersRDPtcForRegister)
          scheme := SIP_SCHEME,
          userInfo := {
            userOrTelephoneSubscriber := PX_ETS_LOCAL_USER2,
            password := omit
          },
          hostPort := {
            host := PX_ETS_IPADDR2,
            portField := PX_ETS_PORT2
          },
          urlParameters := vl_params2,
          headers := omit
        }
      }
      
      v_Contact
      .contactBody
      .contactAddresses[0]
      .addressField
      //RGy (2007-09-14) Using vl_nameAddr for the nameAddr field
      .nameAddr := vl_nameAddr;
      v_Contact
      .contactBody
      .contactAddresses[1]
      .addressField
      //RGy (2007-09-14) Using vl_nameAddr for the nameAddr field
      .nameAddr := vl_nameAddr;
      
      SIPP.send (
        REGISTER_Request_s_1(
          v_RequestUri,
          v_CallId,
          loc_CSeq_s,
          v_Contact,
          v_From,
          v_To,
          v_Via)) to v_sent_label;
      if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
        // Re-send request with Authorization header after
        // receiving 401 Unauthorized response.
        awaitingUnauthorizedResponse(
          loc_CSeq_s,
          REGISTER_Request_s_1(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via),
          PX_RFC2617_USERNAME,
          PX_RFC2617_PASSWD);
      } else {
        awaitingOkResponse(loc_CSeq_s);
      }
    } //end_ptcRDMultiRegistration
    
    function iUTRegistration() runs on SipComponent {
      var REGISTER_Request vl_REGISTER_Request;
      
      if (PX_HOME_REGISTRATION) {
        action ("Please REGISTER to your Home registrar");
        TWait.start (PX_TWAIT);
        alt {
          [] SIPP.receive (
            REGISTER_Request_r_2) -> value vl_REGISTER_Request sender v_sent_label {
            TWait.stop;
            setHeadersOnReceiptOfRegister(vl_REGISTER_Request);
            updateContactAddress_List(
              v_Contact,
              PX_DELTA_REGISTRATION);
            v_date := getCurrentGMTDate();
            SIPP.send (
              Response_Register_200_s_2(
                v_CallId,
                v_CSeq,
                v_From,
                v_To,
                v_Via,
                v_Contact,
                v_date)) to v_sent_label;
          }
          [] SIPP.receive {
            repeat;
          }
          [] TWait.timeout { setverdict (inconc); stop }
          // STF296 - maintenance action
          // "setverdict (inconc); stop" added acc. to CR1
          // from V. M. Puro : 12.11.2004 12:04
        }
      }
    } //end iUTRegistration
    
    function iUTRegistration2() runs on SipComponent {
      var REGISTER_Request vl_REGISTER_Request;
      
      action ("Please REGISTER to your Home registrar");
      TWait.start (PX_TWAIT);
      alt {
        [] SIPP.receive (
          REGISTER_Request_r_2) -> value vl_REGISTER_Request sender v_sent_label {
          TWait.stop;
          setHeadersOnReceiptOfRegister(vl_REGISTER_Request);
          updateContactAddress_List(
            v_Contact,
            int2str (float2int (SHORT_REGISTRATION)));
          v_date := getCurrentGMTDate();
          SIPP.send (
            Response_Register_200_s_2(
              v_CallId,
              v_CSeq,
              v_From,
              v_To,
              v_Via,
              v_Contact,
              v_date)) to v_sent_label;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TWait.timeout { setverdict (inconc); stop }
        //          STF296 - maintenance action
        //          "setverdict (inconc); stop" added acc. to CR1
        //          from V. M. Puro : 12.11.2004 12:04
      }
    } //end iUTRegistration2
    
    function iUTRegistration3() runs on SipComponent {
      var REGISTER_Request vl_REGISTER_Request;
      
      action ("Please REGISTER to your Home registrar");
      TWait.start (PX_TWAIT);
      alt {
        [] SIPP.receive (
          REGISTER_Request_r_2) -> value vl_REGISTER_Request sender v_sent_label {
          TWait.stop;
          setHeadersOnReceiptOfRegister(vl_REGISTER_Request);
          updateContactAddress_List(
            v_Contact,
            PX_DELTA_REGISTRATION);
          v_date := getCurrentGMTDate();
          SIPP.send (
            Response_Register_200_s_2(
              v_CallId,
              v_CSeq,
              v_From,
              v_To,
              v_Via,
              v_Contact,
              v_date)) to v_sent_label;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TWait.timeout { setverdict (inconc); stop }
        //          STF296 - maintenance action
        //          "setverdict (inconc); stop" added acc. to CR1
        //          from V. M. Puro : 12.11.2004 12:04
      }
    } //end iUTRegistration3
    
    function iUTRegistration4() runs on SipComponent {
      var REGISTER_Request vl_REGISTER_Request;
      
      if (PX_HOME_REGISTRATION) {
        action ("Please REGISTER to your Home registrar");
        TWait.start (PX_TWAIT);
        alt {
          [] SIPP.receive (
            REGISTER_Request_r_2) -> value vl_REGISTER_Request sender v_sent_label {
            TWait.stop;
            setHeadersOnReceiptOfRegister(vl_REGISTER_Request);
            updateContactAddress_List(
              v_Contact,
              PX_DELTA_REGISTRATION);
            v_date := getCurrentGMTDate();
            SIPP.send (
              Response_Register_200_s_2(
                v_CallId,
                v_CSeq,
                v_From,
                v_To,
                v_Via,
                v_Contact,
                v_date)) to v_sent_label;
          }
          [] SIPP.receive {
            repeat;
          }
          [] TWait.timeout { setverdict (inconc); stop }
          //            STF296 - maintenance action
          //            "setverdict (inconc); stop" added acc. to CR1
          //            from V. M. Puro : 12.11.2004 12:04
        }
      }
    } //end iUTRegistration4
    
    function pRCallEstablished(inout CSeq loc_CSeq_s) runs on SipComponent {
      setHeadersPtcInvite(loc_CSeq_s);
      SIPP.send (
        INVITE_Request_s_2(
          v_RequestUri,
          v_CallId,
          loc_CSeq_s,
          v_From,
          v_To,
          v_Via)) to v_sent_label;
      if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
        v_RequestFor407 :=
        valueof(INVITE_Request_s_2(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via));
        v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
      };
      v_ack_sent := true;
      synchroniseInitPtc();
      awaitingPRInvite200OK(
        Response_INVITE_200_r_1(v_CallId, v_CSeq),
        loc_CSeq_s);
      sendACK(loc_CSeq_s);
    } //end pRCallEstablished
    
    function uACallingState() runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      
      iUTRegistration();
      action ("Please send INVITE");
      TWait.start (PX_TWAIT);
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          TWait.stop;
          setverdict (pass);
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (inconc);
          stop;
        }
        [] TWait.timeout {
          setverdict (inconc);
          stop;
        }
      }
    } //end uACallingState
    
    //usage to make sure that the Contact Header will not be copied into the response
    function uACallingState2() runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      
      iUTRegistration();
      action ("Please send INVITE");
      TWait.start (PX_TWAIT);
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          TWait.stop;
          setverdict (pass);
          setHeadersOnReceiptOfInvite2(vl_INVITE_Request);
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (inconc);
          stop;
        }
        [] TWait.timeout {
          setverdict (inconc);
          stop;
        }
      }
    } //end uACallingState2
    
    function uACProceedingState() runs on SipComponent {
      uACallingState();
      SIPP.send (
        Response_100_s_1(
          v_CallId,
          v_CSeq,
          v_From,
          v_To,
          v_Via)) to v_sent_label;
      SIPP.send (
        Response_180_s_1(
          v_CallId,
          v_CSeq,
          v_From,
          v_To,
          v_Via)) to v_sent_label;
    } //end uACProceedingState
    
    function uACCompletedState(inout CSeq loc_CSeq_s) runs on SipComponent {
      uACallingState();
      SIPP.send (
        Response_486_s_1(
          v_CallId,
          v_CSeq,
          v_From,
          v_To,
          v_Via)) to v_sent_label;
      awaitingAckRequest(loc_CSeq_s);
    } //end uACCompletedState
    
    function uASProceedingState(inout CSeq loc_CSeq_s) runs on SipComponent {
      iUTRegistration();
      setHeadersIUTInvite(loc_CSeq_s);
      SIPP.send (
        INVITE_Request_s_2(
          v_RequestUri,
          v_CallId,
          loc_CSeq_s,
          v_From,
          v_To,
          v_Via)) to v_sent_label;
    } //end uASProceedingState
    
    function uASCompletedState(
      out Response loc_response,
      inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      
      iUTRegistration();
      setHeadersIUTInvite(loc_CSeq_s);
      SIPP.send (
        INVITE_Request_s_6(
          v_RequestUri,
          v_CallId,
          loc_CSeq_s,
          v_From,
          v_To,
          v_Via)) to v_sent_label;
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (
          Response_NonOK_Final_r_1(
            v_CallId,
            loc_CSeq_s)) -> value loc_response sender v_sent_label {
          TResp.stop;
          setHeadersOnReceiptOfResponse(loc_CSeq_s, loc_response);
          setverdict (pass);
        }
        [] SIPP.receive (Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
          repeat;
        }
        [] SIPP.receive (
          Response_Any_r_1) -> value vl_Response sender v_sent_label {
          all timer.stop;
          setverdict (inconc);
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          terminateUASCall(vl_Response, loc_CSeq_s);
          stop;
        }
        [] TResp.timeout {
          setverdict (inconc);
          cancelCall(
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_Cancel_To,
            v_reqHostPort,
            v_Via);
          stop;
        }
      }
    } //end uASCompletedState
    
    function uASConfirmedState(inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      
      uASCompletedState(vl_Response, loc_CSeq_s);
      sendACK(loc_CSeq_s);
    } //end uASConfirmedState
    
    function uACCallTerminated(inout CSeq loc_CSeq_s) runs on SipComponent {
      uACallingState();
      send200OKInvite();
    } //end uACCallTerminated
    
    function uACCallEstablished(inout CSeq loc_CSeq_s) runs on SipComponent {
      uACallingState();
      send200OKInvite();
      awaiting200OKAckRequest2(loc_CSeq_s);
    } //end uACCallEstablished
    
    function uASSuccessState(inout CSeq loc_CSeq_s) runs on SipComponent {
      iUTRegistration();
      setHeadersIUTInvite(loc_CSeq_s);
      SIPP.send (
        INVITE_Request_s_2(
          v_RequestUri,
          v_CallId,
          loc_CSeq_s,
          v_From,
          v_To,
          v_Via)) to v_sent_label;
      awaitingWithOpt1XX(
        Response_200_r_4(v_CallId, loc_CSeq_s),
        loc_CSeq_s);
    } //end uASSuccessState
    
    function uASEstablishedState(inout CSeq loc_CSeq_s) runs on SipComponent {
      uASSuccessState(loc_CSeq_s);
      send200OKACK(loc_CSeq_s);
    } //end uASEstablishedState
  } //end group Preambles
  
  group Postambles {
    function cancelCall(
      CallId loc_currentCallId,
      CSeq loc_CSeq,
      From loc_From,
      To loc_To,
      HostPort loc_reqHostPort,
      Via loc_via) runs on SipComponent {
      
      var CSeq vl_CSeq_INVITE := loc_CSeq;
      var Response vl_Response;
      
      loc_CSeq.method := "CANCEL";
      v_cancel_sent := true;
      if (loc_To.addressField.nameAddr.addrSpec.hostPort.host
        == "") {
        loc_To := v_To;
      }
      SIPP.send (
        CANCEL_Request_s_1(
          v_RequestUri,
          loc_currentCallId,
          loc_CSeq,
          loc_From,
          loc_To,
          loc_reqHostPort,
          loc_via)) to v_sent_label;
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (
          Response_1XX_r_1(loc_currentCallId, loc_CSeq)) {
          repeat;
        }
        [] SIPP.receive (
          Response_200_r_1(loc_currentCallId, loc_CSeq)) {
          repeat;
        }
        [] SIPP.receive (
          Response_200_r_1(
            loc_currentCallId,
            vl_CSeq_INVITE)) -> value vl_Response {
          send200OKACK(vl_CSeq_INVITE);
          setHeadersOnReceiptOfResponse(
            vl_CSeq_INVITE,
            vl_Response);
          terminateCall(
            loc_currentCallId,
            vl_CSeq_INVITE,
            v_caller_From,
            v_caller_To,
            v_reqHostPort,
            v_Route);
        }
        [] SIPP.receive (
          Response_487_r_1(loc_currentCallId, vl_CSeq_INVITE)) {
          sendACK(loc_CSeq);
        }
        [] SIPP.receive {
          sendACK(loc_CSeq);
          repeat;
        }
        [] TResp.timeout {
          setverdict (fail);
        }
      }
    }
    function cancelPRMtcCall() runs on SipComponent {
      v_CSeq.method := "CANCEL";
      v_cancel_sent := true;
      SIPP.send (
        CANCEL_Request_s_1(
          v_RequestUri,
          v_CallId,
          v_CSeq,
          v_From,
          v_Cancel_To,
          v_reqHostPort,
          v_Via)) to v_sent_label;
    }
    function rejectInvite(inout CSeq loc_CSeq_s) runs on SipComponent {
      SIPP.send (
        Response_486_s_1(
          v_CallId,
          v_CSeq,
          v_caller_From,
          v_caller_To,
          v_Via)) to v_sent_label;
      awaitingAckRequest(loc_CSeq_s);
    }
    function rejectOptions(inout CSeq loc_CSeq_s) runs on SipComponent {
      SIPP.send (
        Response_486_s_1(
          v_CallId,
          v_CSeq,
          v_caller_From,
          v_caller_To,
          v_Via)) to v_sent_label;
      awaitingAckRequest(loc_CSeq_s);
    }
    
    function terminateCallAfterCancelInProcState (
      inout CSeq loc_CSeq_s) runs on SipComponent {
      TAck.stop;
      sendACK(loc_CSeq_s);
      terminateCall(
        v_CallId,
        loc_CSeq_s,
        v_From,
        v_To,
        v_reqHostPort,
        v_Route);
      stop;
    }
    
    function terminateUASCall(
      in Response loc_response,
      //CSeq is available in component variable v_CSeq, why not used that one?
      inout CSeq loc_CSeq_s) runs on SipComponent {
      if (loc_response.statusLine.statusCode > 299) {
        sendACK(loc_CSeq_s);
        return;
      }
      if (loc_response.statusLine.statusCode > 199) {
        send200OKACK(loc_CSeq_s);
        terminateCall(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        return;
      }
      cancelCall(
        v_CallId,
        loc_CSeq_s,
        v_From,
        v_Cancel_To,
        v_reqHostPort,
        v_Via);
    }
    function terminatePRMtcCall(
      in Response loc_response,
      inout CSeq loc_CSeq_s) runs on SipComponent {
      if (loc_response.statusLine.statusCode > 299) {
        sendACK(loc_CSeq_s);
        return;
      }
      if (loc_response.statusLine.statusCode > 199) {
        v_ack_sent := true;
        send200OKACK(loc_CSeq_s);
        v_bye_sent := true;
        sendBYE(
          v_CallId,
          loc_CSeq_s,
          v_caller_From,
          v_caller_To,
          v_reqHostPort,
          v_Route);
        return;
      }
      cancelCall(
        v_CallId,
        loc_CSeq_s,
        v_From,
        v_Cancel_To,
        v_reqHostPort,
        v_Via);
    }
    function terminatePRMtcCall_ByeAlreadySent(
      in Response loc_response,
      inout CSeq loc_CSeq_s) runs on SipComponent {
      if (loc_response.statusLine.statusCode > 299) {
        sendACK(loc_CSeq_s);
        return;
      }
      if (loc_response.statusLine.statusCode > 199) {
        send200OKACK(loc_CSeq_s);
        return;
      }
      cancelCall(
        v_CallId,
        loc_CSeq_s,
        v_From,
        v_Cancel_To,
        v_reqHostPort,
        v_Via);
    }
    function terminateCall(
      CallId loc_CallId,
      inout CSeq loc_CSeq_s,
      From loc_From,
      To loc_To,
      HostPort loc_reqHostPort,
      Route loc_Route) runs on SipComponent {
      
      sendBYE(
        loc_CallId,
        loc_CSeq_s,
        loc_From,
        loc_To,
        loc_reqHostPort,
        loc_Route);
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (
          Response_1XX_r_1(loc_CallId, loc_CSeq_s)) {
          repeat;
        }
        //ignore incomming Bye Requests if IUT starts sending Bye Request
        [] SIPP.receive (BYE_Request_r_1(v_CallId)) {
          repeat;
        }
        [] SIPP.receive (
          Response_Final_r(loc_CallId, loc_CSeq_s)) {
          TResp.stop;
        }
        [] SIPP.receive (Response_Final_r(loc_CallId, ?)) {
          repeat;
        }
        [] SIPP.receive {
          all timer.stop;
          if (v_reg_done) {
            removeRegistration(loc_CSeq_s);
          }
          setverdict (inconc);
          stop;
        }
        [] TResp.timeout {
          setverdict (inconc);
          if (v_reg_done) {
            removeRegistration(loc_CSeq_s);
          }
          stop;
        }
      }
    }
    function terminateCall2(
      CallId loc_currentCallId,
      inout CSeq loc_CSeq_s,
      From loc_From,
      To loc_To,
      HostPort loc_reqHostPort,
      Route loc_Route) runs on SipComponent {
      sendBYE2(
        loc_currentCallId,
        loc_CSeq_s,
        loc_From,
        loc_To,
        loc_reqHostPort,
        loc_Route);
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (
          Response_1XX_r_1(loc_currentCallId, loc_CSeq_s)) {
          repeat;
        }
        [] SIPP.receive (
          Response_Final_r(loc_currentCallId, loc_CSeq_s)) {
          TResp.stop;
        }
        [] SIPP.receive (Response_Final_r(loc_currentCallId, ?)) {
          repeat;
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (inconc);
          stop;
        }
        [] TResp.timeout {
          setverdict (inconc);
          stop;
        }
      }
    }
    
    function removeRegistration(inout CSeq loc_CSeq_s) runs on SipComponent {
      var SemicolonParam_List vl_params;
      
      v_Contact := {
        fieldName := CONTACT_E,
        contactBody := { wildcard := "*" }
      };
      loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
      loc_CSeq_s.method := "REGISTER";
      vl_params := valueof(v_Via.viaBody[0].viaParams);
      vl_params[0] := {
        id := BRANCH_ID,
        paramValue := BRANCH_COOKIE & getRndTag()
      };
      v_Via.viaBody[0].viaParams := vl_params;
      vl_params := {
        {
          id := TAG_ID,
          paramValue := getRndTag()
        }
      };
      
      v_From.fromParams := vl_params;
      v_From := {
        fieldName := FROM_E,
        addressField := v_To.addressField,
        fromParams := vl_params
      };
      
      SIPP.send (
        REGISTER_Request_s_2(
          v_RequestUri,
          v_CallIdReg,
          loc_CSeq_s,
          v_Contact,
          v_From,
          v_To,
          v_Via,
          "0")) to v_sent_label;
      TResp.start (PX_TRESP);
      if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
        awaitingUnauthorizedResponse_CallIdReg(
          loc_CSeq_s,
          REGISTER_Request_s_2(
            v_RequestUri,
            v_CallIdReg,
            loc_CSeq_s,
            v_Contact,
            v_From,
            v_To,
            v_Via,
            "0"),
          PX_RFC2617_USERNAME);
      } else {
        alt {
          [] SIPP.receive (
            Response_200_r_1(v_CallIdReg, loc_CSeq_s)) {
            setverdict (pass);
            TResp.stop;
          }
          [
            not (PC_STATELESS)] SIPP.receive (
            Response_1XX_r_1(v_CallIdReg, loc_CSeq_s)) {
            repeat;
          }
          [] SIPP.receive {
            setverdict (inconc);
            all timer.stop;
            stop;
          }
          [] TResp.timeout {
            setverdict (pass);
            stop;
          }
        }
      }
    } //end removeRegistration
    
    function wait_end_ptc(SipComponent loc_Comp) runs on SipComponent {
      alt {
        [] SIPP.receive (Response: ?) {
          repeat;
        }
        [] SIPP.receive (Request: ?) {
          repeat;
        }
        [] loc_Comp.done {
          TGuard.stop;
        }
        [] TGuard.timeout {
          setverdict (inconc);
          stop;
        }
      }
    }
    function wait_end_Two_ptc(
      SipComponent loc_Comp1,
      SipComponent loc_Comp2) runs on SipComponent {
      alt {
        [] SIPP.receive (Response: ?) {
          repeat;
        }
        [] SIPP.receive (Request: ?) {
          repeat;
        }
        
        [] loc_Comp1.done {
          TGuard.stop;
          stop;
        }
        [] loc_Comp2.done {
          TGuard.stop;
          stop;
          
        }
        [] TGuard.timeout {
          setverdict (inconc);
          stop;
        }
      }
    }
  }
  group CommonSubTrees {
    function askForOEBYE(inout CSeq loc_CSeq_s) runs on SipComponent {
      var BYE_Request vl_BYE_Request;
      
      action ("Please HANG UP");
      TWait.start (PX_TWAIT);
      alt {
        [] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request {
          TWait.stop;
          setverdict (pass);
          setHeadersOnReceiptOfBye(vl_BYE_Request);
        }
        [] SIPP.receive {
          all timer.stop;
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
          setverdict (fail);
          stop;
        }
        [] TWait.timeout {
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
          setverdict (inconc);
          stop;
        }
      }
    }
    function havingSentARegister(out REGISTER_Request loc_REGISTER_Request) runs on SipComponent {
      action ("Please REGISTER");
      
      TWait.start (PX_TWAIT);
      alt {
        [] SIPP.receive (
          REGISTER_Request_r_2) -> value loc_REGISTER_Request sender v_sent_label {
          TWait.stop;
        }
        [] TWait.timeout {
          setverdict (inconc);
          stop;
        }
      }
      setHeadersOnReceiptOfRegister(loc_REGISTER_Request);
    }
    function havingSentARegisterProceeding(out REGISTER_Request loc_REGISTER_Request) runs on SipComponent {
      havingSentARegister(loc_REGISTER_Request);
      SIPP.send (
        Response_100_s_1(
          v_CallId,
          v_CSeq,
          v_From,
          v_To,
          v_Via)) to v_sent_label;
    }
    function havingSentAOptionsProceeding(out OPTIONS_Request loc_OPTIONS_Request) runs on SipComponent {
      havingSentAOptions(loc_OPTIONS_Request);
      SIPP.send (
        Response_100_s_1(
          v_CallId,
          v_CSeq,
          v_From,
          v_To,
          v_Via)) to v_sent_label;
    }
    function havingSentAOptions(out OPTIONS_Request loc_OPTIONS_Request) runs on SipComponent {
      action ("Please send OPTIONS request");
      
      TWait.start (PX_TWAIT);
      alt {
        [] SIPP.receive (
          OPTIONS_Request_r_1) -> value loc_OPTIONS_Request sender v_sent_label {
          TWait.stop;
        }
        [] TWait.timeout {
          setverdict (inconc);
          stop;
        }
      }
      setHeadersOnReceiptOfOptions(loc_OPTIONS_Request);
    }
    function awaitingCANCELOkResponse(
      inout CSeq loc_CSeq_s,
      CallId loc_CallId) runs on SipComponent {
      var CSeq vl_CSeq_INVITE;
      
      loc_CSeq_s.method := "INVITE";
      vl_CSeq_INVITE := loc_CSeq_s;
      
      loc_CSeq_s.method := "CANCEL";
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (
          Response_1XX_r_1(loc_CallId, loc_CSeq_s)) {
          repeat;
        }
        [] SIPP.receive (
          Response_1XX_r_1(loc_CallId, vl_CSeq_INVITE)) {
          repeat;
        }
        [] SIPP.receive (
          Response_200_r_1(loc_CallId, loc_CSeq_s)) {
          setverdict(pass)
        }
        [] SIPP.receive (
          Response_487_r_1(loc_CallId, vl_CSeq_INVITE)) {
          setverdict(inconc);
          sendACK(loc_CSeq_s)
        }
        [] SIPP.receive (
          Response_4XX_r_1(v_CallId, loc_CSeq_s)) {
          setverdict (fail);
          terminateCallAfterCancelInProcState(loc_CSeq_s)
        }
        [] SIPP.receive (Response:?) {
          send200OK();
          setverdict(fail);
        }
        [] SIPP.receive {
          setverdict (fail);
          all timer.stop;
          stop;
        }
        [] TAck.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function awaitingOkResponse(inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (Response_200_r_1(v_CallId, loc_CSeq_s)) {
          TAck.stop;
          setverdict (pass);
        }
        [not (PC_STATELESS)] SIPP.receive (
          Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
          repeat;
        }
        [] SIPP.receive (
          Response_Any_r_1) -> value vl_Response sender v_sent_label {
          all timer.stop;
          setverdict (inconc);
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          terminateUASCall(vl_Response, loc_CSeq_s);
        }
        [] TAck.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    
    function awaitingOkResponse_CallIdReg(inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (
          Response_200_r_1(v_CallIdReg, loc_CSeq_s)) {
          TAck.stop;
          setverdict (pass);
        }
        [
          not (PC_STATELESS)] SIPP.receive (
          Response_1XX_r_1(v_CallIdReg, loc_CSeq_s)) {
          repeat;
        }
        [] SIPP.receive (
          Response_Any_r_1) -> value vl_Response sender v_sent_label {
          all timer.stop;
          setverdict (inconc);
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          terminateUASCall(vl_Response, loc_CSeq_s);
        }
        [] TAck.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    
    function awaitingOkResponse2(inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (Response_200_r_1(v_CallId, loc_CSeq_s)) {
          TAck.stop;
          setverdict (pass);
          stop;
        }
        [] SIPP.receive (
          Response_Any_r_1) -> value vl_Response sender v_sent_label {
          all timer.stop;
          setverdict (inconc);
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          terminateUASCall(vl_Response, loc_CSeq_s);
          stop;
        }
        [] TAck.timeout {
          setverdict (fail);
        }
      }
    }
    function awaitingOkResponse3(inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      var charstring vl_id;
      var charstring vl_paramValue;
      
      if (ispresent (v_From.fromParams[0].id)) {
        vl_id := valueof(v_From.fromParams[0].id);
        vl_paramValue := valueof(v_From.fromParams[0].paramValue);
        v_From.fromParams := {
          {
            vl_id,
            vl_paramValue
          }
        };
        
      } else {
        v_From.fromParams := omit;
      }
      if (ispresent (v_To.toParams[0].id)) {
        vl_id := v_To.toParams[0].id;
        vl_paramValue := v_To.toParams[0].paramValue;
        
        v_To.toParams := {
          {
            vl_id,
            vl_paramValue
          }
        };
        
      } else {
        v_To.toParams := omit;
      }
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (
          Response_200_r_14(
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To)) {
          TAck.stop;
          setverdict (pass);
          stop;
        }
        [] SIPP.receive (
          Response_Any_r_1) -> value vl_Response sender v_sent_label {
          all timer.stop;
          setverdict (inconc);
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          terminateUASCall(vl_Response, loc_CSeq_s);
          stop;
        }
        [] TAck.timeout {
          setverdict (fail);
        }
      }
    }
    function awaitingOkResponse4(inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (Response_200_r_1(v_CallId, loc_CSeq_s)) {
          TAck.stop;
          setverdict (pass);
        }
        [] SIPP.receive (
          Response_Any_r_1) -> value vl_Response sender v_sent_label {
          all timer.stop;
          setverdict (fail);
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          terminateUASCall(vl_Response, loc_CSeq_s);
        }
        [] TAck.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function awaitingRegisterOkResponse(
      template Request loc_Request,
      in CallId loc_CallId,
      inout CSeq loc_CSeq_s,
      out Response loc_response) runs on SipComponent {
      if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
        var CommaParam_List vl_challenge;
        //  var charstring vl_Credentials;
        var Credentials vl_Credentials;
        
        var Response vl_Response;
        var Request vl_Request := valueof(loc_Request);
        
        TAck.start (PX_TACK);
        alt {
          [] SIPP.receive (
            Response_401_r_1(
              v_CallId,
              loc_CSeq_s)) -> value vl_Response {
            TAck.stop;
            // resent the REGISTER message with Authorization header include
            // Extract challenge and calculate credentials for a response.
            if (ischosen (vl_Response
                .msgHeader
                .wwwAuthenticate
                .challenge[0]  /*!!!!!!!!!!!!!!*/
                .digestCln)) {
              vl_challenge :=
              vl_Response
              .msgHeader
              .wwwAuthenticate
              .challenge[0]  /*!!!!!!!!!!!!!!*/
              .digestCln;
              vl_Credentials :=
              calculateCredentials(
                "REGISTER",
                vl_challenge,
                PX_RFC2617_USERNAME,
                PX_RFC2617_PASSWD);
              
            } else {
              log ("No scheme in www-Authenticate header !!");
              setverdict (inconc);
              stop;
            }
            
            // Increment CSeq sequence number of and add the credentials
            // to the original saved REGEISTER message.
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            vl_Request.msgHeader.cSeq.seqNumber :=
            loc_CSeq_s.seqNumber;
            vl_Request.msgHeader.authorization.fieldName :=
            AUTHORIZATION_E;
            vl_Request.msgHeader.authorization.body :=
            vl_Credentials;
            
            // Re-send the saved REGISTER with Authorization header
            // included.
            SIPP.send (vl_Request) to v_sent_label;
          }
          [] SIPP.receive (
            Response_407_r_1(
              v_CallId,
              loc_CSeq_s)) -> value vl_Response {
            TAck.stop;
            // resent the REGISTER message with Proxyauthorization header include
            // Extract challenge and calculate credentials for a response.
            if (ischosen (vl_Response
                .msgHeader
                .proxyAuthenticate
                .challenge[0]  /*!!!!!!!!!!!!!!*/
                .digestCln)) {
              vl_challenge :=
              vl_Response
              .msgHeader
              .proxyAuthenticate
              .challenge[0]  /*!!!!!!!!!!!!!!*/
              .digestCln;
              vl_Credentials :=
              calculateCredentials(
                "REGISTER",
                vl_challenge,
                PX_RFC2617_USERNAME,
                PX_RFC2617_PASSWD);
            } else {
              log ("No scheme in Proxy Authenticate header!!");
              setverdict (inconc);
              stop;
            }
            
            // Increment CSeq sequence number of and add the credentials
            // to the original saved REGEISTER message.
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            vl_Request.msgHeader.cSeq.seqNumber :=
            loc_CSeq_s.seqNumber;
            vl_Request.msgHeader.proxyAuthorization.fieldName :=
            PROXY_AUTHORIZATION_E;
            vl_Request.msgHeader.proxyAuthorization.credentials :=
            vl_Credentials;
            
            // Re-send the saved REGISTER with Authorization header
            // included.
            SIPP.send (vl_Request) to v_sent_label;
          }
          [(not (PC_STATELESS))
            and mandatory] SIPP.receive (
            Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
            repeat;
          }
          [] SIPP.receive (
            Response_200_r_1(v_CallId, loc_CSeq_s)) {
            TAck.stop;
            log ("Authorization was not requested as expected");
            setverdict (inconc);
            stop
          }
          [] SIPP.receive {
            all timer.stop;
            setverdict (inconc);
            stop
          }
          [] TAck.timeout {
            setverdict (inconc);
            stop
          }
        }
      }
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (
          Response_REGISTER_200_r_1(
            loc_CallId,
            loc_CSeq_s)) -> value loc_response {
          TAck.stop;
          setverdict (pass);
        }
        [
          not (PC_STATELESS)] SIPP.receive (
          Response_1XX_r_1(loc_CallId, loc_CSeq_s)) {
          repeat;
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (fail);
          removeRegistration(loc_CSeq_s);
          stop;
        }
        [] TAck.timeout {
          setverdict (fail);
          removeRegistration(loc_CSeq_s);
          stop;
        }
      }
    }
    
    function awaitingRegisterOkResponseRaw(
      in CallId loc_CallId,
      inout CSeq loc_CSeq_s,
      charstring loc_User,
      charstring loc_password) runs on SipComponent {
      if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
        var CommaParam_List vl_challenge;
        // var charstring vl_Credentials;
        var Credentials vl_Credentials;
        var Response vl_Response;
        
        TAck.start (PX_TACK);
        alt {
          [] SIPP.receive (
            Response_401_r_1(
              v_CallId,
              loc_CSeq_s)) -> value vl_Response {
            TAck.stop;
            // resent the REGISTER message with Authorization header include
            // Extract challenge and calculate credentials for a response.
            if (ischosen (vl_Response
                .msgHeader
                .wwwAuthenticate
                .challenge[0]  /*!!!!!!!!!!!!!!*/
                .digestCln)) {
              vl_challenge :=
              vl_Response
              .msgHeader
              .wwwAuthenticate
              .challenge[0] /*!!!!!!!!!!!!!!*/
              .digestCln;
              vl_Credentials :=
              calculateCredentials(
                "REGISTER",
                vl_challenge,
                loc_User,
                loc_password);
            } else {
              log ("No scheme in www-Authenticate header !!");
              setverdict (inconc);
              stop;
            }
            
            // Increment CSeq sequence number of and add the credentials
            // to the original saved REGEISTER message.
            loc_CSeq_s.method := "REGISTER";
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            v_CSeq := loc_CSeq_s;
            v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
            
            v_Raw_Authorization :=
            "Authorization: " & f_convertCredentials(vl_Credentials);
            
            // Re-send the saved REGISTER with Authorization header
            // included.
            SIPP.send (
              Raw_REGISTER_Request_s_1a(
                v_Raw_RequestUri,
                v_Raw_CallId,
                v_Raw_CSeq,
                v_Raw_Contact,
                v_Raw_From,
                v_Raw_To,
                v_Raw_Via,
                v_Raw_Authorization)) to v_sent_label;
          }
          [] SIPP.receive (
            Response_407_r_1(
              v_CallId,
              loc_CSeq_s)) -> value vl_Response {
            TAck.stop;
            // resent the REGISTER message with Authorization header include
            // Extract challenge and calculate credentials for a response.
            if (ischosen (vl_Response
                .msgHeader
                .proxyAuthenticate
                .challenge[0]  /*!!!!!!!!!!!!!!*/
                .digestCln)) {
              vl_challenge :=
              vl_Response
              .msgHeader
              .proxyAuthenticate
              .challenge[0]  /*!!!!!!!!!!!!!!*/
              .digestCln;
              vl_Credentials :=
              calculateCredentials(
                "REGISTER",
                vl_challenge,
                loc_User,
                loc_password);
              
            } else {
              log ("No scheme in Proxy-Authenticate header !!");
              setverdict (inconc);
              stop;
            }
            // Increment CSeq sequence number of and add the credentials
            // to the original saved REGEISTER message.
            loc_CSeq_s.method := "REGISTER";
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            v_CSeq := loc_CSeq_s;
            v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
            
            v_Raw_Authorization :=
            "Proxy-Authorization: " & f_convertCredentials(vl_Credentials);	
            
            // Re-send the saved REGISTER with Authorization header
            // included.
            SIPP.send (
              Raw_REGISTER_Request_s_1a(
                v_Raw_RequestUri,
                v_Raw_CallId,
                v_Raw_CSeq,
                v_Raw_Contact,
                v_Raw_From,
                v_Raw_To,
                v_Raw_Via,
                v_Raw_Authorization)) to v_sent_label;
          }
          [(not (PC_STATELESS))
            and mandatory] SIPP.receive (
            Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
            repeat;
          }
          [] SIPP.receive (
            Response_200_r_1(v_CallId, loc_CSeq_s)) {
            TAck.stop;
            log ("Authorization was not requested as expected");
            setverdict (inconc);
            stop
          }
          [] SIPP.receive {
            all timer.stop;
            setverdict (inconc);
            stop
          }
          [] TAck.timeout {
            setverdict (inconc);
            stop
          }
        }
      }
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (
          Response_REGISTER_200_r_1(loc_CallId, loc_CSeq_s)) {
          TAck.stop;
          setverdict (pass)
        }
        
        [(not (PC_STATELESS))
          and mandatory] SIPP.receive (
          Response_1XX_r_1(loc_CallId, loc_CSeq_s)) {
          repeat;
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (fail);
          stop
        }
        [] TAck.timeout {
          setverdict (fail);
          stop
        }
      }
    } //end awaitingRegisterOkResponseRaw
    
    function awaitingResponse(in template Response loc_Response) runs on SipComponent {
      var Response vl_Response;
      
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (loc_Response) {
          TAck.stop;
          setverdict (pass);
        }
        [] SIPP.receive (
          Response_Any_r_1) -> value vl_Response sender v_sent_label {
          all timer.stop;
          setverdict (inconc);
          setHeadersOnReceiptOfResponse(vl_Response.msgHeader.cSeq, vl_Response);
          terminateUASCall(vl_Response, v_CSeq);
        }
        [] TAck.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    
    function contactRegistration(inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      
      setHeadersForRegister(loc_CSeq_s);
      SIPP.send (
        REGISTER_Request_s_1(
          v_RequestUri,
          v_CallIdReg,
          loc_CSeq_s,
          v_Contact,
          v_From,
          v_To,
          v_Via)) to v_sent_label;
      v_Branch := BRANCH_COOKIE & getRndTag();
      v_Via := {
        fieldName := VIA_E,
        viaBody := { valueof(ViaBody_ETS_IPADDR(v_Branch))}
      };
      awaitingRegisterOkResponse(
        REGISTER_Request_s_1(
          v_RequestUri,
          v_CallIdReg,
          loc_CSeq_s,
          v_Contact,
          v_From,
          v_To,
          v_Via),
        v_CallId,
        loc_CSeq_s,
        vl_Response);
    }
    
    function establishACall(CSeq loc_CSeq_s) runs on SipComponent {
      setHeadersPtcInvite(loc_CSeq_s);
      SIPP.send (
        INVITE_Request_s_1(
          v_RequestUri,
          v_CallId,
          loc_CSeq_s,
          v_From,
          v_To,
          v_Via,
          v_Contact)) to v_sent_label;
      if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
        v_CSeq := loc_CSeq_s;
        v_RequestFor407 :=
        valueof(INVITE_Request_s_1(
            v_RequestUri,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Contact));
        v_CSeq.seqNumber := v_CSeq.seqNumber + 1;
      };
      
      awaitingPRInvite200OK(
        Response_INVITE_200_r_1(v_CallId, v_CSeq),
        loc_CSeq_s);
      send200OKACK(loc_CSeq_s);
    }
    
    function awaitingInviteRequest() runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      
      TWait.start (PX_TWAIT);
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          TWait.stop;
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (inconc);
          stop;
        }
        [] TWait.timeout {
          setverdict (inconc);
          stop;
        }
      }
    }
    
    function awaitingFirstAnyFinalResp(
      out Response loc_Response,
      inout CSeq loc_CSeq_s) runs on SipComponent {
      var boolean vl_Enabled := true;
      
      TResp.start (PX_TRESP);
      alt {
        [PX_REGISTRATION_AUTHENTICATION_ENABLED
          and vl_Enabled] ALTSTEP_407(loc_CSeq_s) {
          TResp.stop;
          TResp.start (PX_TRESP);
          vl_Enabled := false;
          repeat;
        }
        
        [] SIPP.receive (
          Response_NonOK_Final_r_1(
            v_CallId,
            loc_CSeq_s)) -> value loc_Response sender v_sent_label {
          TResp.stop;
          setverdict (pass);
        }
        [] SIPP.receive (Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
          repeat;
        }
        
        [] SIPP.receive {
          all timer.stop;
          setverdict (inconc);
          cancelPRMtcCall();
          stop;
        }
        [] TResp.timeout {
          setverdict (inconc);
          cancelPRMtcCall();
          stop;
        }
      }
    }
    
    function awaitingFirstAnyResp(
      out Response loc_Response,
      inout CSeq loc_CSeq_s) runs on SipComponent {
      var boolean vl_Enabled := true;
      
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (Response_100_r_1(v_CallId, loc_CSeq_s)) {
          repeat;
        }
        [] SIPP.receive (
          Response_Any_r_2(
            v_CallId,
            loc_CSeq_s)) -> value loc_Response sender v_sent_label {
          TResp.stop;
          setverdict (pass);
        }
        [] TResp.timeout {
          setverdict (inconc);
          cancelCall(
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_Cancel_To,
            v_reqHostPort,
            v_Via);
          stop;
        }
      }
    }
    
    function awaitingFirstAnyResp2(
      out Response loc_Response,
      inout CSeq loc_CSeq_s) runs on SipComponent {
      var boolean vl_Enabled := true;
      
      TResp.start (PX_TRESP);
      alt {
        [PX_REGISTRATION_AUTHENTICATION_ENABLED
          and vl_Enabled] ALTSTEP_407(loc_CSeq_s) {
          TResp.stop;
          TResp.start (PX_TRESP);
          vl_Enabled := false;
          repeat;
        }
        [] SIPP.receive (
          Response_Any_r_2(
            v_CallId,
            loc_CSeq_s)) -> value loc_Response sender v_sent_label {
          TResp.stop;
          setverdict (pass);
        }
        [] TResp.timeout {
          setverdict (inconc);
          cancelCall(
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_Cancel_To,
            v_reqHostPort,
            v_Via);
          stop;
        }
      }
    }
    
    function awaiting481ResponseOnCancelInProcState
    (inout CSeq loc_CSeq_s,
      in CSeq loc_CSeq_INVITE
    ) runs on SipComponent {
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (
          Response_481_r_1(v_CallId, loc_CSeq_s)) {
          setverdict (pass);
          terminateCallAfterCancelInProcState(loc_CSeq_s)
        }
        [] SIPP.receive (
          Response_487_r_1(v_CallId, loc_CSeq_INVITE)) {
          setverdict (fail);
          TAck.stop;
          sendACK(loc_CSeq_s)
        }
        [] SIPP.receive (
          Response_4XX_r_1(v_CallId, loc_CSeq_s)) {
          setverdict (fail);
          terminateCallAfterCancelInProcState(loc_CSeq_s)
        }
        [] SIPP.receive {
          repeat;
        }
        [] TAck.timeout {
          setverdict (fail);
          loc_CSeq_s.method := "INVITE";
          cancelCall(
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_Cancel_To,
            v_reqHostPort,
            v_Via);
          stop;
        }
      }
    }
    
    function awaitingAckRequest(inout CSeq loc_CSeq_s) runs on SipComponent {
      var ACK_Request vl_ACK_Request;
      
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (
          ACK_Request_r_1(v_CallId)) -> value vl_ACK_Request {
          TAck.stop;
        }
        [] SIPP.receive (INVITE_Request_r_1) {
          repeat;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TAck.timeout {
          setverdict (inconc);
          stop;
        }
      }
    }
    
    function awaiting200OKAckRequest(inout CSeq loc_CSeq_s) runs on SipComponent {
      var ACK_Request vl_ACK_Request;
      
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (
          ACK_Request_r_1(v_CallId)) -> value vl_ACK_Request {
          TAck.stop;
          setverdict (pass);
        }
        [] SIPP.receive (INVITE_Request_r_1) {
          repeat;
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (fail);
          rejectInvite(loc_CSeq_s);
          stop;
        }
        [] TAck.timeout {
          setverdict (fail);
          rejectInvite(loc_CSeq_s);
          stop;
        }
      }
    }
    function awaiting200OKAckRequest2(inout CSeq loc_CSeq_s) runs on SipComponent {
      var ACK_Request vl_ACK_Request;
      
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (
          ACK_Request_r_1(v_CallId)) -> value vl_ACK_Request {
          TAck.stop;
          setverdict (pass);
        }
        [] SIPP.receive (INVITE_Request_r_1) {
          repeat;
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (inconc);
          rejectInvite(loc_CSeq_s);
          stop;
        }
        [] TAck.timeout {
          setverdict (inconc);
          rejectInvite(loc_CSeq_s);
          stop;
        }
      }
    }
    function awaitingAdditionalResponse(
      in template Response loc_Response,
      inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (
          loc_Response) -> value vl_Response sender v_sent_label {
          TResp.stop;
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          setverdict (pass);
        }
        [] SIPP.receive {
          repeat;
        }
        [] TResp.timeout {
          setverdict (inconc);
          cancelCall(
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_Cancel_To,
            v_reqHostPort,
            v_Via);
          stop;
        }
      }
    }
    function awaitingNoAckRequest(inout CSeq loc_CSeq_s) runs on SipComponent {
      var ACK_Request vl_ACK_Request;
      
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (
          ACK_Request_r_1(v_CallId)) -> value vl_ACK_Request {
          TAck.stop;
          log ("BEGIN_TRACE_INFO Did not expect ACK_Request. END_TRACE_INFO");
          setverdict (fail);
          rejectInvite(loc_CSeq_s);
          stop;
        }
        [] SIPP.receive (INVITE_Request_r_1) {
          repeat;
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (inconc);
          rejectInvite(loc_CSeq_s);
          stop;
        }
        [] TAck.timeout {
          setverdict (pass);
        }
      }
    }
    function awaitingWithOpt1XX(
      in template Response loc_Response,
      inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      
      TResp.start (PX_TRESP);
      action ("Please accept the call!");
      alt {
        [] SIPP.receive (
          loc_Response) -> value vl_Response sender v_sent_label {
          TResp.stop;
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          setverdict (pass);
        }
        [] SIPP.receive (Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
          repeat;
        }
        [] SIPP.receive (
          Response_Any_r_1) -> value vl_Response sender v_sent_label {
          all timer.stop;
          setverdict (fail);
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          terminateUASCall(vl_Response, loc_CSeq_s);
          TResp.start (PX_TRESP);
          alt {
            [] SIPP.receive (
              Response_Any_r_1) -> value vl_Response sender v_sent_label {
              setverdict (inconc);
              TResp.stop;
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                valueof(vl_Response));
              terminateUASCall(valueof(vl_Response), loc_CSeq_s);
            }
            [] TResp.timeout {
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
            }
          }
        }
        [] TResp.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    
    function awaitingWithOpt1XX2(
      in template Response loc_Response,
      inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (
          loc_Response) -> value vl_Response sender v_sent_label {
          TResp.stop;
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          setverdict (pass);
        }
        [] SIPP.receive (Response_1XX_r_1(?, ?)) {
          repeat;
        }
        [] SIPP.receive (
          Response_Any_r_1) -> value vl_Response sender v_sent_label {
          all timer.stop;
          setverdict (fail);
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          terminateUASCall(vl_Response, loc_CSeq_s);
          TResp.start (PX_TRESP);
          alt {
            [] SIPP.receive (
              Response_Any_r_1) -> value vl_Response sender v_sent_label {
              setverdict (inconc);
              TResp.stop;
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                vl_Response);
              terminateUASCall(vl_Response, loc_CSeq_s);
            }
            [] TResp.timeout {
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
            }
          }
        }
        [] TResp.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function awaitingPRPtcCheck(inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      var boolean vl_Enabled := true;
      
      cpA.send (CM_Rsp_Rcved);
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
          repeat;
        }
        [PX_REGISTRATION_AUTHENTICATION_ENABLED
          and vl_Enabled] ALTSTEP_407(loc_CSeq_s) {
          TResp.stop;
          TResp.start (PX_TRESP);
          vl_Enabled := false;
          repeat;
        }
        [] SIPP.receive (
          Response_Final_r(
            v_CallId,
            loc_CSeq_s)) -> value vl_Response sender v_sent_label {
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          terminatePRMtcCall(vl_Response, loc_CSeq_s);
        }
        [] TResp.timeout {
          setverdict (fail);
          cancelCall(
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_Cancel_To,
            v_reqHostPort,
            v_Via);
          stop;
        }
      }
      if (v_bye_sent) {
        awaitingOkResponse(loc_CSeq_s);
      }
      TResp.start (PX_TRESP);
      alt {
        [] cpA.receive (CM_Check_Done) {
          setverdict (pass);
          TResp.stop;
          stop;
        }
        [] TResp.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    
    function awaitingPRPtcCheck_Options(inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      var boolean loc_Enabled := true;
      
      cpA.send (CM_Rsp_Rcved);
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
          repeat;
        }
        [PX_REGISTRATION_AUTHENTICATION_ENABLED
          and loc_Enabled] ALTSTEP_407(loc_CSeq_s) {
          TResp.stop;
          TResp.start (PX_TRESP);
          loc_Enabled := false;
          repeat;
        }
        [] SIPP.receive (
          Response_Final_r(
            v_CallId,
            loc_CSeq_s)) -> value vl_Response sender v_sent_label {
        }
        [] TResp.timeout {
          setverdict (fail);
          cancelCall(
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_Cancel_To,
            v_reqHostPort,
            v_Via);
          stop;
        }
      }
      TResp.start (PX_TRESP);
      alt {
        [] cpA.receive (CM_Check_Done) {
          setverdict (pass);
          TResp.stop;
          stop;
        }
        [] TResp.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    
    function awaitingPRPtcCheck2(inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      var boolean loc_Enabled := true;
      
      cpA.send (CM_Rsp_Rcved);
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
          repeat;
        }
        [PX_REGISTRATION_AUTHENTICATION_ENABLED
          and loc_Enabled] ALTSTEP_407Raw(loc_CSeq_s) {
          TResp.stop;
          TResp.start (PX_TRESP);
          loc_Enabled := false;
          repeat;
        }
        [] SIPP.receive (
          Response_Final_r(
            v_CallId,
            loc_CSeq_s)) -> value vl_Response sender v_sent_label {
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          terminatePRMtcCall(vl_Response, loc_CSeq_s);
        }
        [] TResp.timeout {
          setverdict (fail);
          cancelCall(
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_Cancel_To,
            v_reqHostPort,
            v_Via);
          stop;
        }
      }
      if (v_bye_sent) {
        awaitingOkResponse(loc_CSeq_s);
      }
      TResp.start (PX_TRESP);
      alt {
        [] cpA.receive (CM_Check_Done) {
          setverdict (pass);
          TResp.stop;
          stop;
        }
        [] TResp.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function awaitingPRPtcCheck_NoForward(inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      
      TResp.start (PX_TRESP);
      alt {
        [] cpA.receive (CM_Check_Done) {
          setverdict (pass);
          TResp.stop;
          stop;
        }
        [] TResp.timeout {
          setverdict (pass);
          stop;
        }
      }
    }
    function awaitingPRTwoPtcCheck(inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
          repeat;
        }
        [] SIPP.receive (
          Response_Final_r(
            v_CallId,
            loc_CSeq_s)) -> value vl_Response sender v_sent_label {
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          terminatePRMtcCall(vl_Response, loc_CSeq_s);
        }
        [] TResp.timeout {
          setverdict (fail);
          cancelCall(
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_Cancel_To,
            v_reqHostPort,
            v_Via);
          stop;
        }
      }
    }
    function awaitingPRTwoPtcCheck_Options(inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
          repeat;
        }
        [] SIPP.receive (
          Response_Final_r(
            v_CallId,
            loc_CSeq_s)) -> value vl_Response sender v_sent_label {
        }
        [] TResp.timeout {
          setverdict (fail);
          
          stop;
        }
      }
    }
    function awaitingPRCANCELPtcCheck(inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      var boolean vl_Enabled := true;
      
      TResp.start (PX_TRESP);
      alt {
        [] cpA.receive (CM_Check_Done) {
          setverdict (pass);
          TResp.stop;
          stop;
        }
        [] SIPP.receive (Response: ?) {
          repeat;
        }
        [] SIPP.receive (Request: ?) {
          repeat;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TResp.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    
    function awaitingPRResponse(
      in template Response loc_Response,
      inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      var boolean vl_Enabled := true;
      
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (
          loc_Response) -> value vl_Response sender v_sent_label {
          TResp.stop;
          setverdict (pass);
        }
        
        [] SIPP.receive (Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
          repeat;
        }
        [PX_REGISTRATION_AUTHENTICATION_ENABLED
          and vl_Enabled] ALTSTEP_407(loc_CSeq_s) {
          TResp.stop;
          TResp.start (PX_TRESP);
          vl_Enabled := false;
          repeat;
        }
        [] SIPP.receive (Response: ?) -> value vl_Response {
          all timer.stop;
          setverdict (fail);
          terminatePRMtcCall(vl_Response, loc_CSeq_s);
          stop;
        }
        [] SIPP.receive (Request: ?) {
          TResp.stop;
          setverdict (fail);
          cancelCall(
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_Cancel_To,
            v_reqHostPort,
            v_Via);
          stop;
        }
        [] TResp.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function awaitingPRResponse_100Resp(
      in template Response loc_Response,
      inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      var boolean vl_Enabled := true;
      
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (
          loc_Response) -> value vl_Response sender v_sent_label {
          TResp.stop;
          setverdict (pass);
        }
        [PX_REGISTRATION_AUTHENTICATION_ENABLED
          and vl_Enabled] ALTSTEP_407(loc_CSeq_s) {
          TResp.stop;
          TResp.start (PX_TRESP);
          vl_Enabled := false;
          repeat;
        }
        [] SIPP.receive (Response_Any_r_1) -> value vl_Response {
          TResp.stop;
          setverdict (fail);
          terminatePRMtcCall(vl_Response, loc_CSeq_s);
          stop;
        }
        [] TResp.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function awaitingPRResponse2(
      in template Response loc_Response,
      inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      
      TResp.start (PX_TRESP * 2.0);
      alt {
        [] SIPP.receive (
          loc_Response) -> value vl_Response sender v_sent_label {
          TResp.stop;
          setverdict (pass);
        }
        [] SIPP.receive (Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
          repeat;
        }
        [] SIPP.receive (Response_Any_r_1) -> value vl_Response {
          all timer.stop;
          setverdict (fail);
          terminatePRMtcCall_ByeAlreadySent(
            vl_Response,
            loc_CSeq_s);
          stop;
        }
        [] SIPP.receive (Request: ?) {
          TResp.stop;
          setverdict (fail);
          cancelCall(
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_Cancel_To,
            v_reqHostPort,
            v_Via);
          stop;
        }
        [] TResp.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    
    function awaitingPRResponse3(
      in template Response loc_Response,
      inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (
          loc_Response) -> value vl_Response sender v_sent_label {
          TResp.stop;
          setverdict (pass);
        }
        [] SIPP.receive (Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
          repeat;
        }
        [] SIPP.receive (Response_Any_r_1) -> value vl_Response {
          all timer.stop;
          setverdict (fail);
        }
        [] SIPP.receive (Request: ?) {
          TResp.stop;
          setverdict (fail);
          cancelCall(
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_Cancel_To,
            v_reqHostPort,
            v_Via);
          stop;
        }
        [] TResp.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function awaitingPRInviteFinal(inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (
          Response_NonOK_Final_r_1(
            v_CallId,
            loc_CSeq_s)) -> value vl_Response sender v_sent_label {
          TResp.stop;
          setverdict (pass);
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          sendACK(loc_CSeq_s);
          stop;
        }
        [] SIPP.receive (Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
          repeat;
        }
        [] SIPP.receive (Request: ?) {
          repeat;
        }
        [] SIPP.receive (Response: ?) {
          repeat;
        }
        [] TResp.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    
    function awaitingPRInviteNoFinal(inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      var boolean vl_Enabled := true;
      
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (
          Response_NonOK_Final_r_1(
            v_CallId,
            loc_CSeq_s)) -> value vl_Response sender v_sent_label {
          TResp.stop;
          setverdict (pass);
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          sendACK(loc_CSeq_s);
        }
        [] SIPP.receive (Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
          repeat;
        }
        
        [PX_REGISTRATION_AUTHENTICATION_ENABLED
          and vl_Enabled] ALTSTEP_407(loc_CSeq_s) {
          TResp.stop;
          TResp.start (PX_TRESP);
          vl_Enabled := false;
          repeat;
        }
        [] SIPP.receive (Request: ?) {
          repeat;
        }
        [] SIPP.receive (Response: ?) {
          repeat;
        }
        [] TResp.timeout {
          setverdict (fail);
          stop;
        }
      }
      awaitingRespPtcCheck(loc_CSeq_s);
      
    }
    function awaitingPRInviteNon200OK(
      in template Response loc_Response,
      inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      var boolean vl_Enabled := true;
      
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (
          loc_Response) -> value vl_Response sender v_sent_label {
          TResp.stop;
          setverdict (pass);
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          synchroniseCheckDone();
          sendACK(loc_CSeq_s);
        }
        [] SIPP.receive (Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
          repeat;
        }
        [PX_REGISTRATION_AUTHENTICATION_ENABLED
          and vl_Enabled] ALTSTEP_407(loc_CSeq_s) {
          TResp.stop;
          TResp.start (PX_TRESP);
          vl_Enabled := false;
          repeat;
        }
        [] SIPP.receive (Response_Any_r_1) -> value vl_Response {
          TResp.stop;
          setverdict (fail);
          terminatePRMtcCall(vl_Response, loc_CSeq_s);
          stop;
        }
        [] SIPP.receive (Request: ?) {
          TResp.stop;
          setverdict (fail);
          cancelCall(
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_Cancel_To,
            v_reqHostPort,
            v_Via);
          stop;
        }
        [] TResp.timeout {
          setverdict (fail);
          cancelCall(
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_Cancel_To,
            v_reqHostPort,
            v_Via);
          stop;
        }
      }
    }
    function awaitingPRInviteNon200OK_1(
      in template Response loc_Response,
      inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      var boolean vl_Enabled := true;
      
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (
          loc_Response) -> value vl_Response sender v_sent_label {
          TResp.stop;
          setverdict (pass);
          if (ispresent (vl_Response.msgHeader.callId)) {
            v_CallId := vl_Response.msgHeader.callId;
          } else {
            v_CallId := {
              fieldName := CALL_ID_E,
              callid := ""
            }; 
          }
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          synchroniseCheckDone();
          sendACK(loc_CSeq_s);
        }
        [] SIPP.receive (Response_1XX_r_2(v_CallId, loc_CSeq_s)) {
          repeat;
        }
        [PX_REGISTRATION_AUTHENTICATION_ENABLED
          and vl_Enabled] ALTSTEP_407_1(loc_CSeq_s) {
          TResp.stop;
          TResp.start (PX_TRESP);
          vl_Enabled := false;
          repeat;
        }
        [] SIPP.receive (Response_Any_r_1) -> value vl_Response {
          TResp.stop;
          setverdict (fail);
          terminatePRMtcCall(vl_Response, loc_CSeq_s);
          stop;
        }
        [] SIPP.receive (Request: ?) {
          TResp.stop;
          setverdict (fail);
          cancelCall(
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_Cancel_To,
            v_reqHostPort,
            v_Via);
          stop;
        }
        [] TResp.timeout {
          setverdict (fail);
          cancelCall(
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_Cancel_To,
            v_reqHostPort,
            v_Via);
          stop;
        }
      }
    }
    function awaitingPRCancelNon200OK(
      in template Response loc_Response,
      inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (
          loc_Response) -> value vl_Response sender v_sent_label {
          TResp.stop;
          setverdict (pass);
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          synchroniseCheckDone();
          //sendACK(loc_CSeq_s);
        }
        [] SIPP.receive (Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
          repeat;
        }
        [] SIPP.receive (Response_Any_r_1) -> value vl_Response {
          TResp.stop;
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          //sendACK(loc_CSeq_s);
          setverdict (fail);
          stop;
        }
        [] SIPP.receive (Request: ?) {
          TResp.stop;
          setverdict (fail);
          stop;
        }
        [] TResp.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function awaitingPRInvite200OK(
      in template Response loc_Response,
      inout CSeq loc_CSeq_s) runs on SipComponent {
      var Response vl_Response;
      var boolean vl_Enabled := true;
      
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (loc_Response) -> value vl_Response {
          TResp.stop;
          setverdict (pass);
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
        }
        [] SIPP.receive (Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
          repeat;
        }
        [PX_REGISTRATION_AUTHENTICATION_ENABLED
          and vl_Enabled] ALTSTEP_407(loc_CSeq_s) {
          TResp.stop;
          TResp.start (PX_TRESP);
          vl_Enabled := false;
          repeat;
        }
        [] SIPP.receive (Response_Any_r_1) -> value vl_Response {
          all timer.stop;
          setverdict (fail);
          if (v_reg_done) {
            removeRegistration(loc_CSeq_s);
          }
          terminatePRMtcCall(vl_Response, loc_CSeq_s);
          stop;
        }
        [] SIPP.receive (Request: ?) {
          TResp.stop;
          setverdict (fail);
          if (v_reg_done) {
            removeRegistration(loc_CSeq_s);
          }
          cancelCall(
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_Cancel_To,
            v_reqHostPort,
            v_Via);
          stop;
        }
        [] TResp.timeout {
          setverdict (fail);
          if (v_reg_done) {
            removeRegistration(loc_CSeq_s);
          }
          cancelPRMtcCall();
          stop;
        }
      }
    }
    function awaitingRespPtcCheck(inout CSeq loc_CSeq_s) runs on SipComponent {
      TResp.start (PX_TRESP);
      alt {
        [] cpA.receive (CM_Check_Done) {
          setverdict (pass);
          TResp.stop;
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TResp.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    
    // Function waiting for a 401 Unauthorized response
    function awaitingUnauthorizedResponse(
      inout CSeq loc_CSeq_s,
      template Request loc_Request,
      charstring loc_User,
      charstring loc_password) runs on SipComponent {
      var CommaParam_List vl_challenge;
      // var charstring vl_Credentials;
      var Credentials vl_Credentials;
      var Response vl_Response;
      var Request vl_Request := valueof(loc_Request);
      
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (
          Response_401_r_1(
            v_CallId,
            loc_CSeq_s)) -> value vl_Response {
          TAck.stop;
          // resent the REGISTER message with Authorization header include
          // Extract challenge and calculate credentials for a response.
          if (ischosen (vl_Response
              .msgHeader
              .wwwAuthenticate
              .challenge[0]          //!!!!!!!!!!!!!!!!!!!
              .digestCln)) {
            vl_challenge :=
            vl_Response
            .msgHeader
            .wwwAuthenticate
            .challenge[0]   //!!!!!!!!!!!!!!!!!!!
            .digestCln;
            vl_Credentials :=
            calculateCredentials(
              "REGISTER",
              vl_challenge,
              loc_User,
              loc_password);
            
          } else {
            log ("No scheme in www-Authenticate header !!");
            setverdict (inconc);
            stop;
          }
          
          // Increment CSeq sequence number of and add the credentials
          // to the original saved REGEISTER message.
          loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
          vl_Request.msgHeader.cSeq.seqNumber :=
          loc_CSeq_s.seqNumber;
          vl_Request.msgHeader.authorization.fieldName :=
          AUTHORIZATION_E;
          vl_Request.msgHeader.authorization.body := vl_Credentials;
          
          // Re-send the saved REGISTER with Authorization header
          // included.
          SIPP.send (vl_Request) to v_sent_label;
          awaitingOkResponse(loc_CSeq_s);
        }
        [] SIPP.receive (
          Response_407_r_1(
            v_CallId,
            loc_CSeq_s)) -> value vl_Response {
          TAck.stop;
          // resent the REGISTER message with Proxyauthorization header include
          // Extract challenge and calculate credentials for a response.
          if (ischosen (vl_Response
              .msgHeader
              .proxyAuthenticate
              .challenge[0]  /*!!!!!!!!!!!!!!*/
              .digestCln)) {
            vl_challenge :=
            vl_Response
            .msgHeader
            .proxyAuthenticate
            .challenge[0]  /*!!!!!!!!!!!!!!*/
            .digestCln;
            vl_Credentials :=
            calculateCredentials(
              "REGISTER",
              vl_challenge,
              loc_User,
              loc_password);
            //              setverdict (fail);
          } else {
            log ("No scheme in Proxy Authenticate header!!");
            setverdict (inconc);
            stop;
          }
          
          // Increment CSeq sequence number of and add the credentials
          // to the original saved REGEISTER message.
          loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
          vl_Request.msgHeader.cSeq.seqNumber :=
          loc_CSeq_s.seqNumber;
          vl_Request.msgHeader.proxyAuthorization.fieldName :=
          PROXY_AUTHORIZATION_E;
          vl_Request.msgHeader.proxyAuthorization.credentials :=
          vl_Credentials;
          
          // Re-send the saved REGISTER with Authorization header
          // included.
          SIPP.send (vl_Request) to v_sent_label;
          awaitingOkResponse(loc_CSeq_s);
        }
        [
          not (PC_STATELESS)] SIPP.receive (
          Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
          repeat;
        }
        
        [] SIPP.receive (Response_200_r_1(v_CallId, loc_CSeq_s)) {
          TAck.stop;
          log ("Authorization was not requested as expected");
          setverdict (inconc)
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (inconc);
          stop
        }
        [] TAck.timeout {
          setverdict (inconc);
          stop
        }
      }
    } // end of awaitingUnauthorizedResponse
    //      Function waiting for a 401 Unauthorized response
    
    function awaitingUnauthorizedResponse_CallIdReg(
      inout CSeq loc_CSeq_s,
      template Request loc_Request,
      charstring loc_User) runs on SipComponent {
      
      var CommaParam_List vl_challenge;
      // var charstring vl_Credentials;
      var Credentials vl_Credentials;
      var Response vl_Response;
      var Request vl_Request := valueof(loc_Request);
      
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (
          Response_401_r_1(
            v_CallIdReg,
            loc_CSeq_s)) -> value vl_Response {
          TAck.stop;
          // resent the REGISTER message with Authorization header include
          // Extract challenge and calculate credentials for a response.
          if (ischosen (vl_Response
              .msgHeader
              .wwwAuthenticate
              .challenge[0]    /*!!!!!!!!!!!!!!*/
              .digestCln)) {
            vl_challenge :=
            vl_Response
            .msgHeader
            .wwwAuthenticate
            .challenge[0]   /*!!!!!!!!!!!!!!*/
            .digestCln;
            vl_Credentials :=
            calculateCredentials(
              "REGISTER",
              vl_challenge,
              PX_RFC2617_USERNAME,
              PX_RFC2617_PASSWD);
            
          } else {
            log ("No scheme in www-Authenticate header !!");
            setverdict (inconc);
            stop;
          }
          
          // Increment CSeq sequence number of and add the credentials
          // to the original saved REGEISTER message.
          loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
          vl_Request.msgHeader.cSeq.seqNumber :=
          loc_CSeq_s.seqNumber;
          vl_Request.msgHeader.authorization.fieldName :=
          AUTHORIZATION_E;
          vl_Request.msgHeader.authorization.body := vl_Credentials;
          
          // Re-send the saved REGISTER with Authorization header
          // included.
          SIPP.send (vl_Request) to v_sent_label;
          awaitingOkResponse(loc_CSeq_s);
        }
        [] SIPP.receive (
          Response_407_r_1(
            v_CallIdReg,
            loc_CSeq_s)) -> value vl_Response {
          TAck.stop;
          // resent the REGISTER message with Proxyauthorization header include
          // Extract challenge and calculate credentials for a response.
          if (ischosen (vl_Response
              .msgHeader
              .proxyAuthenticate
              .challenge[0] /*!!!!!!!!!!!!!!*/
              .digestCln)) {
            vl_challenge :=
            vl_Response
            .msgHeader
            .proxyAuthenticate
            .challenge[0]   /*!!!!!!!!!!!!!!*/
            .digestCln;
            vl_Credentials :=
            calculateCredentials(
              "REGISTER",
              vl_challenge,
              loc_User,
              PX_RFC2617_PASSWD);
            //                   setverdict (fail);
          } else {
            log ("No scheme in Proxy Authenticate header!!");
            setverdict (inconc);
            stop;
          }
          
          // Increment CSeq sequence number of and add the credentials
          // to the original saved REGEISTER message.
          loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
          vl_Request.msgHeader.cSeq.seqNumber :=
          loc_CSeq_s.seqNumber;
          vl_Request.msgHeader.proxyAuthorization.fieldName :=
          PROXY_AUTHORIZATION_E;
          vl_Request.msgHeader.proxyAuthorization.credentials :=
          vl_Credentials;
          
          // Re-send the saved REGISTER with Authorization header
          // included.
          SIPP.send (vl_Request) to v_sent_label;
          awaitingOkResponse_CallIdReg(loc_CSeq_s);
        }
        [
          not (PC_STATELESS)] SIPP.receive (
          Response_1XX_r_1(v_CallIdReg, loc_CSeq_s)) {
          repeat;
        }
        
        [] SIPP.receive (
          Response_200_r_1(v_CallIdReg, loc_CSeq_s)) {
          TAck.stop;
          log ("Authorization was not requested as expected");
          setverdict (inconc)
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (inconc);
          stop
        }
        [] TAck.timeout {
          setverdict (inconc);
          stop
        }
      }
    } // end of awaitingUnauthorizedResponse
    
    function checkNoFurtherMessages() runs on SipComponent {
      TNoAct.start (PX_TNOACT);
      alt {
        [] TNoAct.timeout {
          setverdict (pass);
          stop;
        }
      }
    }
    
    function checkNoMessage(float loc_time_value) runs on SipComponent {
      TDelay.start (loc_time_value);
      alt {
        [] TDelay.timeout {
          setverdict (pass);
        }
      }
    }
    function checkCompletedState(
      in template Response loc_Response,
      inout CSeq loc_CSeq_s) runs on SipComponent {
      setverdict (pass);
    }
    function checkProceedingState() runs on SipComponent {
      setverdict (pass);
    }
    function checkInitialState() runs on SipComponent {
      setverdict (pass);
    }
    function checkServerConfirmedState() runs on SipComponent {
      if (PX_TRANSPORT == "UDP") {
        TNoAct.start (PX_TNOACT);
        alt {
          [] SIPP.receive {
            all timer.stop;
            setverdict (fail);
          }
          [] TNoAct.timeout {
            setverdict (pass);
          }
        }
      } else {
        setverdict (pass);
      }
    }
    function checkUACTerminatedState(inout CSeq loc_CSeq_s) runs on SipComponent {
      sendBYE(
        v_CallId,
        loc_CSeq_s,
        v_callee_From,
        v_callee_To,
        v_reqHostPort,
        v_Route);
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (Response_481_r_1(v_CallId, loc_CSeq_s)) {
          TAck.stop;
          setverdict (pass);
        }
        [] SIPP.receive (Request: ?) {
          repeat;
        }
        [] SIPP.receive (Response: ?) {
          repeat;
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (fail);
        }
        [] TAck.timeout {
          setverdict (fail);
        }
      }
    }
    function checkServerTerminatedState(inout CSeq loc_CSeq_s) runs on SipComponent {
      sendACK(loc_CSeq_s);
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (Response_481_r_1(v_CallId, loc_CSeq_s)) {
          TAck.stop;
          setverdict (pass);
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (fail);
        }
        [] TAck.timeout {
          setverdict (pass);
        }
      }
    }
    function checkNumberOfBinding(
      in CallId loc_CallId,
      inout CSeq loc_CSeq_s,
      integer loc_nb_of_binding) runs on SipComponent {
      var Response vl_Response;
      var SemicolonParam_List vl_params;
      
      loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
      vl_params := valueof(v_Via.viaBody[0].viaParams);
      vl_params[0].id := BRANCH_ID;
      vl_params[0].paramValue := BRANCH_COOKIE & getRndTag();
      v_Via.viaBody[0].viaParams := vl_params;
      vl_params := {
        {
          id := TAG_ID,
          paramValue := getRndTag()
        }
      };
      v_From.fromParams := vl_params;
      SIPP.send (
        REGISTER_Request_s_3(
          v_RequestUri,
          loc_CallId,
          loc_CSeq_s,
          v_From,
          v_To,
          v_Via)) to v_sent_label;
      awaitingRegisterOkResponse(
        REGISTER_Request_s_3(
          v_RequestUri,
          loc_CallId,
          loc_CSeq_s,
          v_From,
          v_To,
          v_Via),
        loc_CallId,
        loc_CSeq_s,
        vl_Response);
      if (ispresent (vl_Response.msgHeader.contact)) {
        var Contact vl_contact :=
        valueof(vl_Response.msgHeader.contact);
        
        if (sizeof (vl_contact.contactBody.contactAddresses)
          == loc_nb_of_binding) {
          setverdict (pass);
        } else {
          setverdict (fail);
        }
      } else {
        setverdict (fail);
      }
    }
    function checkNumberOfBinding1(
      in CallId loc_CallId,
      inout CSeq loc_CSeq_s,
      integer loc_nb_of_binding) runs on SipComponent {
      var Response vl_Response;
      var SemicolonParam_List vl_params;
      
      vl_params := valueof(v_Via.viaBody[0].viaParams);
      vl_params[0].id := BRANCH_ID;
      vl_params[0].paramValue := BRANCH_COOKIE & getRndTag();
      v_Via.viaBody[0].viaParams := vl_params;
      vl_params := {
        {
          id := TAG_ID,
          paramValue := getRndTag()
        }
      };
      v_From.fromParams := vl_params;
      SIPP.send (
        REGISTER_Request_s_3(
          v_RequestUri,
          loc_CallId,
          loc_CSeq_s,
          v_From,
          v_To,
          v_Via)) to v_sent_label;
      awaitingRegisterOkResponse(
        REGISTER_Request_s_3(
          v_RequestUri,
          loc_CallId,
          loc_CSeq_s,
          v_From,
          v_To,
          v_Via),
        loc_CallId,
        loc_CSeq_s,
        vl_Response);
      if (ispresent (vl_Response.msgHeader.contact)) {
        var Contact vl_contact :=
        valueof(vl_Response.msgHeader.contact);
        
        if (sizeof (vl_contact.contactBody.contactAddresses)
          == loc_nb_of_binding) {
          setverdict (pass);
        } else {
          setverdict (fail);
        }
      } else {
        setverdict (fail);
      }
    }
    function checkRemoveBinding(
      in CallId loc_CallId,
      //RGy (2007-09-21) Parameter type is changed to inout as actual value is passed in and changed
      inout CSeq loc_CSeq_s) runs on SipComponent {
      var SemicolonParam_List vl_params;
      var Request vl_Request;
      
      loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
      vl_params := valueof(v_Via.viaBody[0].viaParams);
      vl_params[0].id := BRANCH_ID;
      vl_params[0].paramValue := BRANCH_COOKIE & getRndTag();
      v_Via.viaBody[0].viaParams := vl_params;
      vl_params := {
        {
          id := TAG_ID,
          paramValue := getRndTag()
        }
      };
      v_From.fromParams := vl_params;
      // REGISTER without contact
      vl_Request :=
      valueof(
        REGISTER_Request_s_3(
          v_RequestUri,
          loc_CallId,
          loc_CSeq_s,
          v_From,
          v_To,
          v_Via));
      SIPP.send (
        REGISTER_Request_s_3(
          v_RequestUri,
          loc_CallId,
          loc_CSeq_s,
          v_From,
          v_To,
          v_Via)) to v_sent_label;
      TAck.start (PX_TACK);
      
      if (PX_REGISTRATION_AUTHENTICATION_ENABLED) {
        var CommaParam_List vl_challenge;
        //var charstring vl_Credentials;
        var Credentials vl_Credentials;
        var Response vl_Response;
        
        TAck.start (PX_TACK);
        alt {
          [] SIPP.receive (
            Response_401_r_1(
              loc_CallId,
              loc_CSeq_s)) -> value vl_Response {
            TAck.stop;
            // resent the REGISTER message with Authorization header include
            // Extract challenge and calculate credentials for a response.
            if (ischosen (vl_Response
                .msgHeader
                .wwwAuthenticate
                .challenge[0]   /*!!!!!!!!!!!*/
                .digestCln)) {
              vl_challenge :=
              vl_Response
              .msgHeader
              .wwwAuthenticate
              .challenge[0]    /*!!!!!!!!!!!!!*/
              .digestCln;
              vl_Credentials :=
              calculateCredentials(
                "REGISTER",
                vl_challenge,
                PX_RFC2617_USERNAME,
                PX_RFC2617_PASSWD);
              
            } else {
              log ("No scheme in www-Authenticate header !!");
              setverdict (inconc);
              stop;
            }
            
            // Increment CSeq sequence number of and add the credentials
            // to the original saved REGEISTER message.
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            vl_Request.msgHeader.cSeq.seqNumber :=
            loc_CSeq_s.seqNumber;
            vl_Request.msgHeader.authorization.fieldName :=
            AUTHORIZATION_E;
            vl_Request.msgHeader.authorization.body :=
            vl_Credentials;
            
            // Re-send the saved REGISTER with Authorization header
            // included.
            SIPP.send (vl_Request) to v_sent_label;
          }
          [] SIPP.receive (
            Response_407_r_1(
              loc_CallId,
              loc_CSeq_s)) -> value vl_Response {
            TAck.stop;
            // resent the REGISTER message with Proxyauthorization header include
            // Extract challenge and calculate credentials for a response.
            if (ischosen (vl_Response
                .msgHeader
                .proxyAuthenticate
                .challenge[0]     /*!!!!!!!!!!!!!!!!*/
                .digestCln)) {
              vl_challenge :=
              vl_Response
              .msgHeader
              .proxyAuthenticate
              .challenge[0]      /*!!!!!!!!!*/
              .digestCln;                            
              vl_Credentials :=
              calculateCredentials(
                "REGISTER",
                vl_challenge,
                PX_RFC2617_USERNAME,
                PX_RFC2617_PASSWD);
              setverdict (fail);
            } else {
              log ("No scheme in Proxy Authenticate header!!");
              setverdict (inconc);
              stop;
            }
            
            // Increment CSeq sequence number of and add the credentials
            // to the original saved REGEISTER message.
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            vl_Request.msgHeader.cSeq.seqNumber :=
            loc_CSeq_s.seqNumber;
            vl_Request.msgHeader.proxyAuthorization.fieldName :=
            PROXY_AUTHORIZATION_E;
            vl_Request.msgHeader.proxyAuthorization.credentials :=
            vl_Credentials;
            
            // Re-send the saved REGISTER with Authorization header
            // included.
            SIPP.send (vl_Request) to v_sent_label;
          }
          
          [(not (PC_STATELESS))
            and mandatory] SIPP.receive (
            Response_1XX_r_1(loc_CallId, loc_CSeq_s)) {
            repeat;
          }
          [] SIPP.receive (
            Response_200_r_2(loc_CallId, loc_CSeq_s)) {
            TAck.stop;
            log ("Authorization was not requested as expected");
            setverdict (inconc);
            stop
          }
          [] SIPP.receive {
            all timer.stop;
            setverdict (inconc);
            stop
          }
          [] TAck.timeout {
            setverdict (inconc);
            stop
          }
        }
      }
      
      alt {
        [] SIPP.receive (
          Response_REGISTER_200_r_2(loc_CallId, loc_CSeq_s)) {
          TAck.stop;
          setverdict (pass);
        }
        [
          not (PC_STATELESS)] SIPP.receive (
          Response_1XX_r_1(loc_CallId, loc_CSeq_s)) {
          repeat;
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (fail);
          stop;
        }
        [] TAck.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function repeatOEBYE(inout CSeq loc_CSeq_s) runs on SipComponent {
      var BYE_Request vl_BYE_Request;
      
      TWait.start (PX_TWAIT);
      alt {
        [] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request {
          TWait.stop;
          setverdict (pass);
          setHeadersOnReceiptOfBye(vl_BYE_Request);
        }
        [] SIPP.receive {
          all timer.stop;
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
          setverdict (fail);
          stop;
        }
        [] TWait.timeout {
          terminateCall(
            v_CallId,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
          setverdict (inconc);
          stop;
        }
      }
    }
    function repeatINVITE(
      in CallId loc_CallId,
      inout CSeq loc_CSeq_s,
      float loc_time_value) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      
      TRept.start (loc_time_value);
      alt {
        [] SIPP.receive (
          INVITE_Request_r_10(
            v_CallId,
            v_CSeq)) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          TRept.stop;
          setverdict (pass);
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (fail);
          rejectInvite(loc_CSeq_s);
          stop;
        }
        [] TRept.timeout {
          setverdict (fail);
          rejectInvite(loc_CSeq_s);
          stop;
        }
      }
    }
    function repeatREGISTER(
      in CallId loc_CallId,
      inout CSeq loc_CSeq_s,
      // loc_time_value is changed to in parameter as its value is not changed
      // inside the function but often called with a PIXIT values
      float loc_time_value) runs on SipComponent {
      var REGISTER_Request vl_REGISTER_Request;
      
      TRept.start (loc_time_value);
      alt {
        [] SIPP.receive (
          REGISTER_Request_r_17(
            v_CallId,
            v_CSeq)) -> value vl_REGISTER_Request sender v_sent_label {
          setHeadersOnReceiptOfRegister(vl_REGISTER_Request);
          TRept.stop;
          setverdict (pass);
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (fail);
          stop;
        }
        [] TRept.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function repeatOPTIONS(
      in CallId loc_CallId,
      inout CSeq loc_CSeq_s,
      float loc_time_value) runs on SipComponent {
      var OPTIONS_Request vl_OPTIONS_Request;
      
      TRept.start (loc_time_value);
      alt {
        [] SIPP.receive (
          OPTIONS_Request_r_9(
            v_CallId,
            v_CSeq)) -> value vl_OPTIONS_Request sender v_sent_label {
          setHeadersOnReceiptOfOptions(vl_OPTIONS_Request);
          TRept.stop;
          setverdict (pass);
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (fail);
          stop;
        }
        [] TRept.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function catchRetrans(
      in CallId loc_CallId,
      inout CSeq loc_CSeq_s,
      float loc_time_value) runs on SipComponent {
      TRept.start (loc_time_value);
      alt {
        [] SIPP.receive (Request: ?) {
          repeat;
        }
        [] SIPP.receive (Response: ?) {
          repeat;
        }
        [] TRept.timeout {}
      }
    }
    function repeatLastResponse(
      inout Response loc_Response,
      inout CSeq loc_CSeq_s) runs on SipComponent {
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (Response_100_r_1(v_CallId, loc_CSeq_s)) {
          repeat;
        }
        [] SIPP.receive (loc_Response) {
          TResp.stop;
          setverdict (pass);
        }
        [] SIPP.receive (
          Response_Any_r_1) -> value loc_Response sender v_sent_label {
          setverdict (inconc);
          TResp.stop;
          setHeadersOnReceiptOfResponse(loc_CSeq_s, loc_Response);
          terminateUASCall(loc_Response, loc_CSeq_s);
          TResp.start (PX_TRESP);
          alt {
            [] SIPP.receive (
              Response_Any_r_1) -> value loc_Response sender v_sent_label {
              setverdict (inconc);
              TResp.stop;
              setHeadersOnReceiptOfResponse(
                loc_CSeq_s,
                loc_Response);
              terminateUASCall(loc_Response, loc_CSeq_s);
            }
            [] TResp.timeout {
              cancelCall(
                v_CallId,
                loc_CSeq_s,
                v_From,
                v_Cancel_To,
                v_reqHostPort,
                v_Via);
              stop;
            }
          }
        }
        [] TResp.timeout {
          setverdict (fail);
          cancelCall(
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_Cancel_To,
            v_reqHostPort,
            v_Via);
          stop;
        }
      }
    }
    function repeatPRLastResponse(
      inout Response loc_Response,
      inout CSeq loc_CSeq_s) runs on SipComponent {
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (loc_Response) {
          TResp.stop;
          setverdict (pass);
        }
        [] SIPP.receive (
          Response_Any_r_2(
            v_CallId,
            loc_CSeq_s)) -> value loc_Response sender v_sent_label {
          setHeadersOnReceiptOfResponse(loc_CSeq_s, loc_Response);
          log ("BEGIN_TRACE_INFO Not the last response received but the new one. END_TRACE_INFO");
          repeat;
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (fail);
          cancelCall(
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_Cancel_To,
            v_reqHostPort,
            v_Via);
          stop;
        }
        [] TResp.timeout {
          setverdict (fail);
          cancelCall(
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_Cancel_To,
            v_reqHostPort,
            v_Via);
          stop;
        }
      }
    }
    function repeatRespInTime(
      in template Response loc_Response,
      inout CSeq loc_CSeq_s,
      in float loc_delay) runs on SipComponent {
      var Response vl_Response;
      
      TResp.start (loc_delay);
      alt {
        [] SIPP.receive (loc_Response) -> value vl_Response {
          setHeadersOnReceiptOfResponse(loc_CSeq_s, vl_Response);
          TResp.stop;
          setverdict (pass);
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (fail);
          sendACK(loc_CSeq_s);
          stop;
        }
        [] TResp.timeout {
          setverdict (fail);
          sendACK(loc_CSeq_s);
          stop;
        }
      }
    }
    function repeatINVITE200OK(
      inout CSeq loc_CSeq_s,
      in float loc_delay) runs on SipComponent {
      TResp.start (loc_delay);
      alt {
        [] SIPP.receive (Response_200_r_4(v_CallId, loc_CSeq_s)) {
          TResp.stop;
          setverdict (pass);
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (fail);
          send200OKACK(loc_CSeq_s);
          terminateCall(
            v_CallId,
            loc_CSeq_s,
            v_caller_From,
            v_caller_To,
            v_reqHostPort,
            v_Route);
          stop;
        }
        [] TResp.timeout {
          setverdict (fail);
          send200OKACK(loc_CSeq_s);
          terminateCall(
            v_CallId,
            loc_CSeq_s,
            v_caller_From,
            v_caller_To,
            v_reqHostPort,
            v_Route);
          stop;
        }
      }
    }
    function notRepeatBYE(in float loc_time_value) runs on SipComponent {
      var BYE_Request vl_BYE_Request;
      
      TNoRept.start (loc_time_value);
      alt {
        [] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request {
          TNoRept.stop;
          setverdict (fail);
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          send200OK();
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TNoRept.timeout {
          setverdict (pass);
        }
      }
    }
    function notRepeatINVITE(
      in CallId loc_CallId,
      inout CSeq loc_CSeq_s,
      in float loc_time_value) runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      
      TNoRept.start (loc_time_value);
      alt {
        [] SIPP.receive (
          INVITE_Request_r_10(
            v_CallId,
            v_CSeq)) -> value vl_INVITE_Request sender v_sent_label {
          TNoRept.stop;
          setverdict (fail);
          log ("BEGIN_TRACE_INFO No INVITE_Request expected !! END_TRACE_INFO");
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (inconc);
          rejectInvite(loc_CSeq_s);
          stop;
        }
        [] TNoRept.timeout {
          setverdict (pass);
        }
      }
    }
    
    function notRepeatREGISTER(
      in CallId loc_CallId,
      inout CSeq loc_CSeq_s,
      in float loc_time_value) runs on SipComponent {
      var REGISTER_Request vl_REGISTER_Request;
      
      TNoRept.start (loc_time_value);
      alt {
        [] SIPP.receive (
          REGISTER_Request_r_17(
            v_CallId,
            v_CSeq)) -> value vl_REGISTER_Request sender v_sent_label {
          TNoRept.stop;
          setverdict (fail);
          log ("BEGIN_TRACE_INFO No REGISTER_Request expected !! END_TRACE_INFO");
          setHeadersOnReceiptOfRegister(vl_REGISTER_Request);
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (inconc);
          stop;
        }
        [] TNoRept.timeout {
          setverdict (pass);
        }
      }
    }
    function notRepeatOPTIONS(
      in CallId loc_CallId,
      inout CSeq loc_CSeq_s,
      in float loc_time_value) runs on SipComponent {
      var OPTIONS_Request vl_OPTIONS_Request;
      
      TNoRept.start (loc_time_value);
      alt {
        [] SIPP.receive (
          OPTIONS_Request_r_9(
            v_CallId,
            v_CSeq)) -> value vl_OPTIONS_Request sender v_sent_label {
          TNoRept.stop;
          setverdict (fail);
          log ("BEGIN_TRACE_INFO No OPTIONS_Request expected !! END_TRACE_INFO");
          setHeadersOnReceiptOfOptions(vl_OPTIONS_Request);
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (inconc);
          stop;
        }
        [] TNoRept.timeout {
          setverdict (pass);
        }
      }
    }
    function notRepeatPRRespInTime(
      in Response loc_Response,
      inout CSeq loc_CSeq_s,
      in float loc_delay) runs on SipComponent {
      TResp.start (loc_delay);
      alt {
        [] SIPP.receive (loc_Response) -> value loc_Response {
          TResp.stop;
          setverdict (fail);
          terminatePRMtcCall(loc_Response, loc_CSeq_s);
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TResp.timeout {
          setverdict (pass);
        }
      }
    }
    function notRepeatRespInTime(
      in Response loc_Response,
      inout CSeq loc_CSeq_s,
      in float loc_delay) runs on SipComponent {
      TResp.start (loc_delay);
      alt {
        [] SIPP.receive (loc_Response) -> value loc_Response {
          TResp.stop;
          setverdict (fail);
          terminateUASCall(loc_Response, loc_CSeq_s);
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TResp.timeout {
          setverdict (pass);
        }
      }
    }
    function notRepeatRespInTime2(in float loc_delay) runs on SipComponent {
      TResp.start (loc_delay);
      alt {
        [] SIPP.receive {
          TResp.stop;
          setverdict (fail);
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TResp.timeout {
          setverdict (pass);
        }
      }
    }
    function notRepeatINVITE200OK(
      inout CSeq loc_CSeq_s,
      in float loc_delay) runs on SipComponent {
      TResp.start (loc_delay);
      alt {
        [] SIPP.receive {
          all timer.stop;
          setverdict (fail);
          send200OKACK(loc_CSeq_s);
          terminateCall(
            v_CallId,
            loc_CSeq_s,
            v_caller_From,
            v_caller_To,
            v_reqHostPort,
            v_Route);
          stop;
        }
        [] TResp.timeout {
          setverdict (pass);
        }
      }
    }
    function send200OKInvite() runs on SipComponent {
      if (v_BOO_RecordRoute) {
        SIPP.send (
          Response_200_Invite_WithRoute_s_1(
            v_CallId,
            v_CSeq,
            v_caller_From,
            v_caller_To,
            v_Via,
            v_RecordRoute)) to v_sent_label;
      } else {
        SIPP.send (
          Response_200_Invite_s_1(
            v_CallId,
            v_CSeq,
            v_caller_From,
            v_caller_To,
            v_Via)) to v_sent_label;
      }
    }
    function send200OKInviteContact() runs on SipComponent {
      if (v_BOO_RecordRoute) {
        SIPP.send (
          Response_200_Invite_WithRoute_s_1b(
            v_CallId,
            v_CSeq,
            v_caller_From,
            v_caller_To,
            v_Via,
            v_Contact,
            v_RecordRoute)) to v_sent_label;
      } else {
        SIPP.send (
          Response_200_Invite_s_2(
            v_CallId,
            v_CSeq,
            v_caller_From,
            v_caller_To,
            v_Via,
            v_Contact)) to v_sent_label;
      }
    }
    function send200OKInviteParam() runs on SipComponent {
      if (v_BOO_RecordRoute) {
        SIPP.send (
          Response_200_Invite_WithRoute_s_1(
            v_CallId,
            v_CSeq,
            v_From,
            v_To,
            v_Via,
            v_RecordRoute)) to v_sent_label;
      } else {
        SIPP.send (
          Response_200_Invite_s_1(
            v_CallId,
            v_CSeq,
            v_From,
            v_To,
            v_Via)) to v_sent_label;
      }
    }
    function send200OK() runs on SipComponent {
      if (v_BOO_RecordRoute) {
        SIPP.send (
          Response_200_withRoute_s_1(
            v_CallId,
            v_CSeq,
            v_From,
            v_To,
            v_Via,
            v_RecordRoute)) to v_sent_label;
      } else {
        SIPP.send (
          Response_200_s_1(
            v_CallId,
            v_CSeq,
            v_From,
            v_To,
            v_Via)) to v_sent_label;
      }
    }
    function sendACK(inout CSeq loc_CSeq_s) runs on SipComponent {
      loc_CSeq_s.method := "ACK";
      buildRequestURI(v_reqHostPort, v_To);
      if (v_BOO_Route) {
        SIPP.send (
          ACK_Request_s_2(
            v_RequestUri,
            v_reqHostPort,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Route)) to v_sent_label;
      } else {
        SIPP.send (
          ACK_Request_s_1(
            v_RequestUri,
            v_reqHostPort,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via)) to v_sent_label;
      }
    }
    function send200OKACK(inout CSeq loc_CSeq_s) runs on SipComponent {
      var SemicolonParam_List vl_params;
      
      loc_CSeq_s.method := "ACK";
      buildRequestURI(v_reqHostPort, v_To);
      if (v_BOO_Route) {
        SIPP.send (
          ACK_Request_s_2(
            v_RequestUri,
            v_reqHostPort,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via,
            v_Route)) to v_sent_label;
      } else {
        SIPP.send (
          ACK_Request_s_1(
            v_RequestUri,
            v_reqHostPort,
            v_CallId,
            loc_CSeq_s,
            v_From,
            v_To,
            v_Via)) to v_sent_label;
      }
    }
    
    function send200OKACK2(inout CSeq loc_CSeq_s) runs on SipComponent {
      var SemicolonParam_List vl_params;
      
      loc_CSeq_s.method := "ACK";
      buildRequestURI(v_reqHostPort, v_To);
      
      SIPP.send (
        ACK_Request_s_1(
          v_RequestUri,
          v_reqHostPort,
          v_CallId,
          loc_CSeq_s,
          v_From,
          v_To,
          v_Via)) to v_sent_label;
      
    }
    function sendBYE(
      CallId loc_currentCallId,
      inout CSeq loc_CSeq_s,
      From loc_From,
      To loc_To,
      HostPort loc_reqHostPort,
      Route loc_Route) runs on SipComponent {
      
      v_bye_sent := true;
      loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
      loc_CSeq_s.method := "BYE";
      buildRequestURI(loc_reqHostPort, loc_To);
      v_Branch := BRANCH_COOKIE & getRndTag();
      v_Via := {
        fieldName := VIA_E,
        viaBody := { valueof(ViaBody_ETS_IPADDR(v_Branch))}
      };
      if (v_BOO_Route) {
        SIPP.send (
          BYE_Request_s_1(
            v_RequestUri,
            loc_currentCallId,
            loc_CSeq_s,
            loc_From,
            loc_To,
            loc_reqHostPort,
            loc_Route,
            v_Branch)) to v_sent_label;
      } else {
        SIPP.send (
          BYE_Request_noroute_s_1(
            v_RequestUri,
            loc_currentCallId,
            loc_CSeq_s,
            loc_From,
            loc_To,
            loc_reqHostPort,
            v_Branch)) to v_sent_label;
      }
    }
    function sendBYE2(
      CallId loc_currentCallId,
      inout CSeq loc_CSeq_s,
      From loc_From,
      To loc_To,
      HostPort loc_reqHostPort,
      Route loc_Route) runs on SipComponent {
      
      loc_CSeq_s.method := "BYE";
      buildRequestURI(loc_reqHostPort, loc_To);
      v_Branch := BRANCH_COOKIE & getRndTag();
      v_Via := {
        fieldName := VIA_E,
        viaBody := { valueof(ViaBody_ETS_IPADDR(v_Branch))}
      };
      if (v_BOO_Route) {
        SIPP.send (
          BYE_Request_s_1(
            v_RequestUri,
            loc_currentCallId,
            loc_CSeq_s,
            loc_From,
            loc_To,
            loc_reqHostPort,
            loc_Route,
            v_Branch)) to v_sent_label;
      } else {
        SIPP.send (
          BYE_Request_noroute_s_1(
            v_RequestUri,
            loc_currentCallId,
            loc_CSeq_s,
            loc_From,
            loc_To,
            loc_reqHostPort,
            v_Branch)) to v_sent_label;
      }
    }
    function waitForTimeout(in float loc_time_value) runs on SipComponent {
      TWait.start (loc_time_value);
      alt {
        [] SIPP.receive (INVITE_Request_r_1) {
          repeat;
        }
        [] SIPP.receive (Response: ?) {
          repeat;
        }
        [] TWait.timeout {
          setverdict (pass);
        }
      }
    }
    function waitForTimeout2(in float loc_time_value) runs on SipComponent {
      TWait.start (loc_time_value);
      alt {
        [] SIPP.receive (BYE_Request_r_1(?)) {
          repeat;
        }
        [] SIPP.receive (Response: ?) {
          repeat;
        }
        [] TWait.timeout {
          setverdict (pass);
        }
      }
    }
    function waitForTimeout3(in float loc_time_value) runs on SipComponent {
      TWait.start (loc_time_value);
      alt {
        [] SIPP.receive (Response_Any_r_1) {
          repeat;
        }
        [] TWait.timeout {
          setverdict (pass);
        }
      }
    }
    function waitForTimeout_Register(in float loc_time_value) runs on SipComponent {
      TWait.start (loc_time_value);
      alt {
        [] SIPP.receive (REGISTER_Request_r_1) {
          repeat;
        }
        [] TWait.timeout {
          setverdict (pass);
        }
      }
    }
    function waitForTimeout_Options(in float loc_time_value) runs on SipComponent {
      TWait.start (loc_time_value);
      alt {
        [] SIPP.receive (OPTIONS_Request_r_1) {
          repeat;
        }
        [] TWait.timeout {
          setverdict (pass);
        }
      }
    }
  }
  group PtcSubTrees {
    function acceptPTCACall(inout CSeq loc_CSeq_s) runs on SipComponent {
      awaitingInviteRequest();
      sendPTC200OKInvite();
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          TResp.stop;
        }
        [] SIPP.receive (INVITE_Request_r_1) {
          repeat;
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (inconc);
          stop;
        }
        [] TResp.timeout {
          setverdict (inconc);
          stop;
        }
      }
    }
    function acceptPTCReleaseCall() runs on SipComponent {
      var BYE_Request vl_BYE_Request;
      
      TWait.start (PX_TWAIT);
      alt {
        [] SIPP.receive (
          BYE_Request_r_1(v_CallIdReg)) -> value vl_BYE_Request sender v_sent_label {
          TWait.stop;
          setHeadersOnReceiptOfBye(vl_BYE_Request);
          if (v_BOO_RecordRoute) {
            SIPP.send (
              Response_200_PTC_s_1(
                v_CallIdReg,
                v_CSeq,
                v_From,
                v_To,
                v_Via,
                v_RecordRoute)) to v_sent_label;
          } else {
            SIPP.send (
              Response_200_s_1(
                v_CallIdReg,
                v_CSeq,
                v_From,
                v_To,
                v_Via)) to v_sent_label;
          }
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (inconc);
          if (v_reg_done) {
            removeRegistration(v_CSeq);
          }
          terminatePTCCall(
            v_CallIdReg,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
          stop;
        }
        [] TWait.timeout {
          if (v_reg_done) {
            removeRegistration(v_CSeq);
          }
          terminatePTCCall(
            v_CallIdReg,
            v_CSeq,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
          setverdict (inconc);
          stop;
        }
      }
    }
    function repeatPTCBYE() runs on SipComponent {
      var BYE_Request vl_BYE_Request;
      
      TWait.start (PX_TWAIT);
      alt {
        [] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request {
          TWait.stop;
          setverdict (pass);
          setHeadersOnReceiptOfBye(vl_BYE_Request);
        }
        [] SIPP.receive {
          all timer.stop;
          send200OK();
          setverdict (fail);
          stop;
        }
        [] TWait.timeout {
          all timer.stop;
          send200OK();
          setverdict (fail);
          stop;
        }
      }
    }
    function sendPTCAnsw(
      in integer loc_status,
      in charstring loc_reasonPhrase) runs on SipComponent {
      if (v_BOO_RecordRoute) {
        SIPP.send (
          Response_XXX_with_route_s_1(
            v_CallId,
            v_CSeq,
            v_From,
            v_To,
            v_Via,
            v_RecordRoute,
            loc_status,
            loc_reasonPhrase)) to v_sent_label;
      } else {
        SIPP.send (
          Response_XXX_noroute_s_1(
            v_CallId,
            v_CSeq,
            v_From,
            v_To,
            v_Via,
            loc_status,
            loc_reasonPhrase)) to v_sent_label;
      }
    }
    function terminatePTCCall(
      CallId loc_currentCallId,
      inout CSeq loc_CSeq_s,
      From loc_From,
      To loc_To,
      HostPort loc_reqHostPort,
      Route loc_Route) runs on SipComponent {
      
      sendBYE(
        loc_currentCallId,
        loc_CSeq_s,
        loc_From,
        loc_To,
        loc_reqHostPort,
        loc_Route);
      TResp.start (PX_TRESP);
      alt {
        [] SIPP.receive (
          Response_Final_r(loc_currentCallId, loc_CSeq_s)) {
          TResp.stop;
          removeRegistration(loc_CSeq_s);
          stop;
        }
        [] SIPP.receive {
          repeat;
        }
        [] TResp.timeout {
          removeRegistration(loc_CSeq_s);
          stop;
        }
      }
    }
    function sendPTC200OKInvite() runs on SipComponent {
      if (v_BOO_RecordRoute) {
        SIPP.send (
          Response_200_PTCInvite_s_1(
            v_CallId,
            v_CSeq,
            v_caller_From,
            v_caller_To,
            v_Via,
            v_RecordRoute)) to v_sent_label;
      } else {
        SIPP.send (
          Response_200_PTCInvite_noroute_s_1(
            v_CallId,
            v_CSeq,
            v_caller_From,
            v_caller_To,
            v_Via)) to v_sent_label;
      }
    }
    function sendPTC2XXOKInvite(
      in integer loc_status,
      in charstring loc_reasonPhrase) runs on SipComponent {
      
      if (v_BOO_RecordRoute) {
        SIPP.send (
          Response_2XX_PTCInvite_s_1(
            v_CallId,
            v_CSeq,
            v_From,
            v_To,
            v_Via,
            v_RecordRoute,
            loc_status,
            loc_reasonPhrase)) to v_sent_label;
      } else {
        SIPP.send (
          Response_2XX_PTCInvite_noroute_s_1(
            v_CallId,
            v_CSeq,
            v_From,
            v_To,
            v_Via,
            loc_status,
            loc_reasonPhrase)) to v_sent_label;
      }
    }
    function tryingPTCBYE() runs on SipComponent {
      var INVITE_Request vl_INVITE_Request;
      var BYE_Request vl_BYE_Request;
      
      alt {
        [] SIPP.receive (
          INVITE_Request_r_1) -> value vl_INVITE_Request sender v_sent_label {
          setHeadersOnReceiptOfInvite(vl_INVITE_Request);
          sendPTC200OKInvite();
          setverdict (pass);
          repeat;
        }
        [] SIPP.receive (ACK_Request_r_1(?)) {
          repeat;
        }
        [] SIPP.receive (
          BYE_Request_r_1(v_CallId)) -> value vl_BYE_Request sender v_sent_label {
          setHeadersOnReceiptOfBye(vl_BYE_Request);
        }
        [] cpA.receive (CM_Stop) {
          all timer.stop;
          stop;
        }
        [] SIPP.receive (Response: ?) {
          repeat;
        }
        [] SIPP.receive (Request: ?) {
          repeat;
        }
        [] TGuard.timeout {
          setverdict (fail);
          stop;
        }
      }
    }
    function rejectPTCInvite(inout CSeq loc_CSeq_s) runs on SipComponent {
      SIPP.send (
        Response_486_s_1(
          v_CallId,
          v_CSeq,
          v_callee_From,
          v_callee_To,
          v_Via)) to v_sent_label;
      TAck.start (PX_TACK);
      alt {
        [] SIPP.receive (ACK_Request_r_1(v_CallId)) {
          TAck.stop;
          setverdict (pass);
        }
        [] SIPP.receive (INVITE_Request_r_1) {
          repeat;
        }
        [] SIPP.receive {
          all timer.stop;
          setverdict (inconc);
          terminatePTCCall(
            v_CallId,
            loc_CSeq_s,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
          stop;
        }
        [] TAck.timeout {
          setverdict (inconc);
          terminatePTCCall(
            v_CallId,
            loc_CSeq_s,
            v_callee_From,
            v_callee_To,
            v_reqHostPort,
            v_Route);
          stop;
        }
      }
    }
  }
  group DefaultsTestStep {
    altstep ALTSTEP_407(inout CSeq loc_CSeq_s) runs on SipComponent {
      [else
      ] {
        var CommaParam_List vl_challenge;
        //var charstring vl_Credentials;
        var Credentials vl_Credentials;
        var Response vl_Response;
        var Request vl_Request := valueof(v_RequestFor407);
        
        TAck.start (PX_TACK);
        alt {
          [] SIPP.receive (
            Response_401_r_1(
              v_CallId,
              loc_CSeq_s)) -> value vl_Response {
            TAck.stop;
            // resent the REGISTER message with Authorization header included
            // Extract challenge and calculate credentials for a response.
            if (ischosen (vl_Response
                .msgHeader
                .wwwAuthenticate
                .challenge[0]  /*!!!!!!!!!!!!!!*/
                .digestCln)) {
              vl_challenge :=
              vl_Response
              .msgHeader
              .wwwAuthenticate
              .challenge[0]   /*!!!!!!!!!!!!!!*/
              .digestCln;
              vl_Credentials :=
              calculateCredentials(
                "INVITE",
                vl_challenge,
                PX_RFC2617_USERNAME,
                PX_RFC2617_PASSWD);
              
            } else {
              log ("No scheme in www-Authenticate header !!");
              setverdict (inconc);
              stop;
            }
            
            //send200OKACK(loc_CSeq_s);
            // Increment CSeq sequence number of and add the credentials
            // to the original saved REGEISTER message.
            loc_CSeq_s.method := "INVITE";
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            vl_Request.msgHeader.cSeq.seqNumber :=
            loc_CSeq_s.seqNumber;
            vl_Request.msgHeader.authorization.fieldName :=
            AUTHORIZATION_E;
            vl_Request.msgHeader.authorization.body :=
            vl_Credentials;
            
            // Re-send the saved REGISTER with Authorization header
            // included.
            SIPP.send (vl_Request) to v_sent_label;
          }
          [] SIPP.receive (
            Response_407_r_1(
              v_CallId,
              loc_CSeq_s)) -> value vl_Response {
            TAck.stop;
            // resent the REGISTER message with Proxyauthorization header included
            // Extract challenge and calculate credentials for a response.
            if (ischosen (vl_Response
                .msgHeader
                .proxyAuthenticate
                .challenge[0]   /*!!!!!!!!!!!!!!*/
                .digestCln)) {
              vl_challenge :=
              vl_Response
              .msgHeader
              .proxyAuthenticate
              .challenge[0]  /*!!!!!!!!!!!!!!*/
              .digestCln;
              vl_Credentials :=
              calculateCredentials(
                "INVITE",
                vl_challenge,
                PX_RFC2617_USERNAME,
                PX_RFC2617_PASSWD);
              //                        setverdict (fail);
            } else {
              log ("No scheme in Proxy Authenticate header!!");
              setverdict (inconc);
              stop;
            }
            
            //send200OKACK(loc_CSeq_s);
            // Increment CSeq sequence number of and add the credentials
            // to the original saved REGEISTER message.
            loc_CSeq_s.method := "INVITE";
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            vl_Request.msgHeader.cSeq.seqNumber :=
            loc_CSeq_s.seqNumber;
            vl_Request.msgHeader.proxyAuthorization.fieldName :=
            PROXY_AUTHORIZATION_E;
            vl_Request.msgHeader.proxyAuthorization.credentials :=
            vl_Credentials;
            
            // Re-send the saved REGISTER with Authorization header
            // included.
            SIPP.send (vl_Request) to v_sent_label;
          }
          [(not (PC_STATELESS))
            and mandatory] SIPP.receive (
            Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
            repeat;
          }
          [] SIPP.receive (
            Response_200_r_1(v_CallId, loc_CSeq_s)) {
            TAck.stop;
            log ("Authorization was not requested as expected");
            setverdict (inconc);
            stop
          }
          [] SIPP.receive {
            all timer.stop;
            setverdict (inconc);
          }
          [] TAck.timeout {
            setverdict (inconc);
          }
        }
      }
    }
    
    altstep ALTSTEP_407_1(inout CSeq loc_CSeq_s) runs on SipComponent {
      [else
      ] {
        var CommaParam_List vl_challenge;
        //var charstring vl_Credentials;
        var Credentials vl_Credentials;
        var Response vl_Response;
        var Request vl_Request := valueof(v_RequestFor407);
        
        TAck.start (PX_TACK);
        alt {
          [] SIPP.receive (
            Response_401_r_1(
              *,
              loc_CSeq_s)) -> value vl_Response {
            TAck.stop;
            // resent the REGISTER message with Authorization header include
            // Extract challenge and calculate credentials for a response.
            if (ischosen (vl_Response
                .msgHeader
                .wwwAuthenticate
                .challenge[0]  /*!!!!!!!!!!!!!!*/
                .digestCln)) {
              vl_challenge :=
              vl_Response
              .msgHeader
              .wwwAuthenticate
              .challenge[0] /*!!!!!!!!!!!!!!*/
              .digestCln;
              vl_Credentials :=
              calculateCredentials(
                "INVITE",
                vl_challenge,
                PX_RFC2617_USERNAME,
                PX_RFC2617_PASSWD);
              
            } else {
              log ("No scheme in www-Authenticate header !!");
              setverdict (inconc);
              stop;
            }
            
            //send200OKACK(loc_CSeq_s);
            // Increment CSeq sequence number of and add the credentials
            // to the original saved REGEISTER message.
            loc_CSeq_s.method := "INVITE";
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            vl_Request.msgHeader.cSeq.seqNumber :=
            loc_CSeq_s.seqNumber;
            vl_Request.msgHeader.authorization.fieldName :=
            AUTHORIZATION_E;
            vl_Request.msgHeader.authorization.body :=
            vl_Credentials;
            
            // Re-send the saved REGISTER with Authorization header
            // included.
            SIPP.send (vl_Request) to v_sent_label;
          }
          [] SIPP.receive (
            Response_407_r_1(
              *,
              loc_CSeq_s)) -> value vl_Response {
            TAck.stop;
            // resent the REGISTER message with Proxyauthorization header include
            // Extract challenge and calculate credentials for a response.
            if (ischosen (vl_Response
                .msgHeader
                .proxyAuthenticate
                .challenge[0]  /*!!!!!!!!!!!!!!*/
                .digestCln)) {
              vl_challenge :=
              vl_Response
              .msgHeader
              .proxyAuthenticate
              .challenge[0]  /*!!!!!!!!!!!!!!*/
              .digestCln;
              vl_Credentials :=
              calculateCredentials(
                "INVITE",
                vl_challenge,
                PX_RFC2617_USERNAME,
                PX_RFC2617_PASSWD);
              //                        setverdict (fail);
            } else {
              log ("No scheme in Proxy Authenticate header!!");
              setverdict (inconc);
              stop;
            }
            
            //send200OKACK(loc_CSeq_s);
            // Increment CSeq sequence number of and add the credentials
            // to the original saved REGEISTER message.
            loc_CSeq_s.method := "INVITE";
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            vl_Request.msgHeader.cSeq.seqNumber :=
            loc_CSeq_s.seqNumber;
            vl_Request.msgHeader.proxyAuthorization.fieldName :=
            PROXY_AUTHORIZATION_E;
            vl_Request.msgHeader.proxyAuthorization.credentials :=
            vl_Credentials;
            
            // Re-send the saved REGISTER with Authorization header
            // included.
            SIPP.send (vl_Request) to v_sent_label;
          }
          [(not (PC_STATELESS))
            and mandatory] SIPP.receive (
            Response_1XX_r_1(*, loc_CSeq_s)) {
            repeat;
          }
          [] SIPP.receive (Response_200_r_1(*, loc_CSeq_s)) {
            TAck.stop;
            log ("Authorization was not requested as expected");
            setverdict (inconc);
            stop
          }
          [] SIPP.receive {
            all timer.stop;
            setverdict (inconc);
          }
          [] TAck.timeout {
            setverdict (inconc);
          }
        }
      }
    }
    
    altstep ALTSTEP_407Raw(inout CSeq loc_CSeq_s) runs on SipComponent {
      [else
      ] {
        var CommaParam_List vl_challenge;
        //var charstring vl_Credentials;
        var Credentials vl_Credentials;
        var Response vl_Response;
        var charstring vl_len_sdp := int2str (lengthof (px_sdpBody));
        
        TAck.start (PX_TACK);
        alt {
          [] SIPP.receive (
            Response_401_r_1(
              v_CallId,
              loc_CSeq_s)) -> value vl_Response {
            TAck.stop;
            // resent the REGISTER message with Authorization header include
            // Extract challenge and calculate credentials for a response.
            if (ischosen (vl_Response
                .msgHeader
                .wwwAuthenticate
                .challenge[0]   /*!!!!!!!!!!!!!!*/
                .digestCln)) {
              vl_challenge :=
              vl_Response
              .msgHeader
              .wwwAuthenticate
              .challenge[0]   /*!!!!!!!!!!!!!!*/
              .digestCln;
              vl_Credentials :=
              calculateCredentials(
                "INVITE",
                vl_challenge,
                PX_RFC2617_USERNAME,
                PX_RFC2617_PASSWD);
            } else {
              log ("No scheme in www-Authenticate header !!");
              setverdict (inconc);
              stop;
            }
            
            send200OKACK(loc_CSeq_s);
            // Increment CSeq sequence number of and add the credentials
            // to the original saved REGEISTER message.
            loc_CSeq_s.method := "INVITE";
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            v_CSeq := loc_CSeq_s;
            v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
            
            v_Raw_Authorization :=
            "Authorization: " & f_convertCredentials(vl_Credentials);
            
            // Re-send the saved REGISTER with Authorization header
            // included.
            SIPP.send (
              Raw_INVITE_Request_s_1a(
                v_Raw_RequestUri,
                v_Raw_CallId,
                v_Raw_CSeq,
                v_Raw_Contact,
                v_Raw_From,
                v_Raw_To,
                v_Raw_Via,
                vl_len_sdp,
                px_sdpBody,
                v_Raw_Authorization)) to v_sent_label;
          }
          [] SIPP.receive (
            Response_407_r_1(
              v_CallId,
              loc_CSeq_s)) -> value vl_Response {
            TAck.stop;
            // resent the REGISTER message with Authorization header include
            // Extract challenge and calculate credentials for a response.
            if (ischosen (vl_Response
                .msgHeader
                .proxyAuthenticate
                .challenge[0]  /*!!!!!!!!!!!!!!*/
                .digestCln)) {
              vl_challenge :=
              vl_Response
              .msgHeader
              .proxyAuthenticate
              .challenge[0]  /*!!!!!!!!!!!!!!*/
              .digestCln;
              vl_Credentials :=
              calculateCredentials(
                "INVITE",
                vl_challenge,
                PX_RFC2617_USERNAME,
                PX_RFC2617_PASSWD);
              
            } else {
              log ("No scheme in Proxy-Authenticate header !!");
              setverdict (inconc);
              stop;
            }
            
            send200OKACK(loc_CSeq_s);
            // Increment CSeq sequence number of and add the credentials
            // to the original saved REGEISTER message.
            loc_CSeq_s.method := "INVITE";
            loc_CSeq_s.seqNumber := loc_CSeq_s.seqNumber + 1;
            v_CSeq := loc_CSeq_s;
            v_Raw_CSeq := buildRaw_CSeqHeader(v_CSeq);
            
            v_Raw_Authorization :=
            "Proxy-Authorization: " & f_convertCredentials(vl_Credentials);	
            
            // Re-send the saved REGISTER with Authorization header
            // included.
            SIPP.send (
              Raw_INVITE_Request_s_1a(
                v_Raw_RequestUri,
                v_Raw_CallId,
                v_Raw_CSeq,
                v_Raw_Contact,
                v_Raw_From,
                v_Raw_To,
                v_Raw_Via,
                vl_len_sdp,
                px_sdpBody,
                v_Raw_Authorization)) to v_sent_label;
          }
          [(not (PC_STATELESS))
            and mandatory] SIPP.receive (
            Response_1XX_r_1(v_CallId, loc_CSeq_s)) {
            repeat;
          }
          [] SIPP.receive (
            Response_200_r_1(v_CallId, loc_CSeq_s)) {
            TAck.stop;
            log ("Authorization was not requested as expected");
            setverdict (inconc);
            stop
          }
          [] SIPP.receive {
            all timer.stop;
            setverdict (inconc);
          }
          [] TAck.timeout {
            setverdict (inconc);
          }
        }
      }
    }
    
    altstep defaultRGRT() runs on SipComponent {
      [] any timer.timeout {
        setverdict (fail);
        stop;
      }
      [] SIPP.receive {
        all timer.stop;
        setverdict (fail);
        stop;
      }
    }
    
    altstep defaultRGRR() runs on SipComponent {
      [] any timer.timeout {
        setverdict (fail);
        stop;
      }
      [] SIPP.receive {
        all timer.stop;
        setverdict (fail);
        stop;
      }
    }
    
    altstep defaultCCOE() runs on SipComponent {
      [] SIPP.receive {
        all timer.stop;
        setverdict (fail);
        stop;
      }
      [] any timer.timeout {
        setverdict (fail);
        stop;
      }
    }
    
    altstep defaultCCTE() runs on SipComponent {
      [] any timer.timeout {
        setverdict (fail);
        stop;
      }
      [] SIPP.receive {
        all timer.stop;
        setverdict (fail);
        stop;
      }
    }
    
    altstep defaultCCPR() runs on SipComponent {
      [] any timer.timeout {
        setverdict (fail);
        stop;
      }
      [] SIPP.receive {
        all timer.stop;
        setverdict (fail);
        stop;
      }
    }
    
    altstep defaultCCPR2() runs on SipComponent {
      [] any timer.timeout {
        setverdict (fail);
        stop;
      }
      [] SIPP.receive {
        all timer.stop;
        setverdict (fail);
        stop;
      }
    }
    
    altstep defaultCCRD() runs on SipComponent {
      [] any timer.timeout {
        setverdict (fail);
        stop;
      }
      [] SIPP.receive {
        all timer.stop;
        setverdict (fail);
        stop;
      }
    }
    
    altstep defaultCCPRPTC() runs on SipComponent {
      [] any timer.timeout {
        setverdict (fail);
        stop;
      }
      [] cpA.receive (CM_Stop) {
        all timer.stop;
        setverdict (fail);
        stop;
      }
      [] SIPP.receive {
        all timer.stop;
        setverdict (fail);
        stop;
      }
    }
    
    altstep defaultCCPRPTC2() runs on SipComponent {
      [] any timer.timeout {
        setverdict (fail);
        stop;
      }
      [] cpB.receive (CM_Stop) {
        all timer.stop;
        setverdict (fail);
        stop;
      }
      [] SIPP.receive {
        all timer.stop;
        setverdict (fail);
        stop;
      }
    }
    
    altstep defaultCCRDPTC() runs on SipComponent {
      [] any timer.timeout {
        setverdict (fail);
        stop;
      }
      [] cpA.receive (CM_Stop) {
        all timer.stop;
        setverdict (fail);
        stop;
      }
      [] SIPP.receive {
        all timer.stop;
        setverdict (fail);
        stop;
      }
    }
  } //end group DefaultsTestStep
  
  group calc {
    // Function to extract paramValue related to id from CommanParam_List
    // containing challenge.
    function extractParamValueFromChallenge(
      in CommaParam_List loc_challenge,
      in charstring loc_id) return charstring {
      
      var charstring vl_result := "";
      var integer vl_len := sizeof (loc_challenge);
      var charstring vl_id := putInLowercase(loc_id);
      
      for (var integer i := 0; i < vl_len; i := i + 1) {
        if (putInLowercase(loc_challenge[i].id) == vl_id) {
          vl_result := loc_challenge[i].paramValue;
        }
      }
      
      if ((vl_result == "") and (loc_id == "algorithm")) {
        var charstring vl_tmpchar :=
        "Cannot acquire value for "
        & loc_id
        & " from credentials. Set default MD5";
        log (vl_tmpchar);
        vl_result := "MD5";
      } else
      if (vl_result == "") {
        var charstring vl_tmpchar :=
        "Cannot acquire value for "
        & loc_id
        & " from credentials.";
        log (vl_tmpchar);
      }
      
      return vl_result;
    }
    function stripQuotationMarks(in charstring loc_value) return charstring {
      var charstring vl_result;
      
      if (lengthof (loc_value) > 2) {
        vl_result := substr (loc_value, 1, lengthof (loc_value) - 2);
      } else {
        vl_result := ""
      }
      return vl_result;
    }
  }
}
}
