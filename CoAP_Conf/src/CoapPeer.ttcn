/******************************************************************************
 * Copyright (c) 2000-2016 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Wu-Hen Chang, Antal
 *
 ******************************************************************************/
module CoapPeer
{
	import from CoAP_Types all;
	import from IPL4asp_Types all;
	import from IPL4asp_PortType all;
	import from CoapCommon all;
	
	modulepar
	{
		charstring tsp_remoteHost := "localhost";
		integer tsp_remotePort := 30000;

		charstring tsp_localHost := "localhost";
		integer tsp_localPort := 20000;
		
		float tsp_CoapPeer_maxResponseTime := 0.0;
		boolean tsp_cherryPickOptionCheck := true;		
	}  

	type component COAP_CT extends CFW_BASE_CT
	{
	    var CoapContext ctx := CoapContext_empty; 
	    
		var CoAP_ReqResp msgToSend := c_CoAP_ReqResp_empty;
		var CoAP_ReqResp lastReceived := c_CoAP_ReqResp_empty;
	  
    	port IPL4asp_PT IPL4_PCO;
	}

	type record CoapContext
	{
		integer connId,
		integer connId_listen,
		charstring remoteHost,
		integer remotePort,
		charstring localHost,
		integer localPort,
		boolean cherryPickOptionsCheck
	}	
	with { extension "done" }

	const CoapContext CoapContext_empty :=
	{
		connId := -1,
		connId_listen := -1,
		remoteHost := "",
		remotePort := -1,
		localHost := "",
		localPort := -1,
		cherryPickOptionsCheck := false
	}
	
	const CoAP_ReqResp c_CoAP_ReqResp_empty :=
	{
	  	header := 
	  	{
    		version := 1,
    		msg_type := CONFIRMABLE,
    		code :=
    		{
    			class := 0,
    			detail := 0
			},
    		message_id := 0
	  	},
    	token := ''O,
    	options := omit,
    	payload := omit
	}
		
	template CoAP_ReqResp t_CoAP_ReqResp_empty :=
	{
	  	header := 
	  	{
    		version := ?,
    		msg_type := ?,
    		code :=
    		{
    			class := ?,
    			detail := ?
			},
    		message_id := ?
	  	},
    	token := ?,
    	options := *,
    	payload := *
	}
	
	function f_CP_init() runs on COAP_CT
    {
		log(%definitionId, " started");
		var Result vl_result;
    
		log("Mapping started");
		map(self:IPL4_PCO,system:IPL4_PCO);
		var f_IPL4_getMsgLen vl_f := refers(f_COAP_getMsgLength);
		f_IPL4_setGetMsgLen(IPL4_PCO, -1, vl_f, {});
    
		log("Setting up the listening socket");
		vl_result := f_IPL4_listen(IPL4_PCO, ctx.localHost, ctx.localPort, {udp := {}}, {{reuseAddress := {enable := true}}});
		f_CP_checkResult(vl_result);
		ctx.connId_listen := vl_result.connId;
   
		log("Connecting the socket to the remote");
		vl_result := f_IPL4_connect(IPL4_PCO, ctx.remoteHost, ctx.remotePort, ctx.localHost, ctx.localPort, -1,{udp := {}}, {{reuseAddress := {enable := true}}});
		f_CP_checkResult(vl_result);
		ctx.connId := vl_result.connId;
		
		ctx.cherryPickOptionsCheck := tsp_cherryPickOptionCheck;
	            
		log(%definitionId, " finished");
	}
	
	function f_CP_getContext() runs on COAP_CT
	return CoapContext
	{
		return ctx;
	}
	
	function f_CP_setContext(in CoapContext p_ctx) runs on COAP_CT
	{
	  ctx := p_ctx;
	}
	
	function f_CP_setMessageToSend(in CoAP_ReqResp p_msg) runs on COAP_CT
	{
	  msgToSend := p_msg;
	}
	
	function f_CP_send() runs on COAP_CT
	{
	  	var octetstring v_encoded;
	  	
	  	if (msgToSend.header.message_id == 0)
	  	{
	  	  msgToSend.header.message_id := float2int(int2float(65000)*rnd());
	  	}
	  
	  	f_CoAP_enc(CoAP_Message: {msg := msgToSend}, v_encoded);
	  
	  	var ASP_SendTo vl_send;

		vl_send.connId := ctx.connId;
		vl_send.remName := ctx.remoteHost;
		vl_send.remPort := ctx.remotePort;
		vl_send.proto := {udp := {}}

		vl_send.msg := v_encoded;

		log("COAP PDU: ", msgToSend);
		IPL4_PCO.send(vl_send);
	}
	
	function f_CP_receive() runs on COAP_CT
	{
	  // Activate default
	  
	  timer t_Timeout := tsp_CoapPeer_maxResponseTime;	  
	  if (tsp_CoapPeer_maxResponseTime > 0.0) { t_Timeout.start; }
	  
	  var ASP_RecvFrom v_ipl4Recv;
	  var ASP_Event v_ipl4Event;
	  
	  alt
	  {
	    [] IPL4_PCO.receive(ASP_RecvFrom:?) -> value v_ipl4Recv
	    {
	      log("Received: ", v_ipl4Recv);
	      
	      var CoAP_Message v_coapMsg;
	      f_CoAP_dec(v_ipl4Recv.msg, v_coapMsg);
	      
	      if (ischosen(v_coapMsg.msg))
	      {
	        lastReceived := v_coapMsg.msg;
	        log("COAP PDU: ", lastReceived);
	      }
	    }
	    [] IPL4_PCO.receive(ASP_Event:?) -> value v_ipl4Event
	    {
	      log("Received: ", v_ipl4Event);
	      repeat;
	    }
	    [] t_Timeout.timeout
	    {
	      lastReceived := c_CoAP_ReqResp_empty;
	    }
	    
	    // Deactivate default
	  }
	}
	
	function f_CP_check(in template CoAP_ReqResp p_expected) runs on COAP_CT
	return ReturnBoolean
	{
		// TODO: checks		
		if (not f_COAP_isRequest(lastReceived) and lastReceived.header.msg_type == CONFIRMABLE) {
		  // Check if the mid is the same in the req and in the rsp
		  if (not msgToSend.header.message_id == lastReceived.header.message_id) {
		    log("CHECK: header.message_id mismatch in request and response");
		    return false;
		  }
		}
		
		if (ctx.cherryPickOptionsCheck) {

			var template CoAP_ReqResp v_expected_withoutOptions := p_expected;		
			v_expected_withoutOptions.options := *;
			if (not match(lastReceived, v_expected_withoutOptions)) {
			  log("CHECK: last received is not matching with expected template");
			  return false; 
			}
		
			// Check options 1-by-1
			if (ispresent(p_expected.options) and sizeof(p_expected.options)>0)
			{
			  	if (not ispresent(lastReceived.options)) {
			  	  log("CHECK: Options are epxected but last received messages have them omitted");
			  	  return false;
			  	}
				var boolean optionsCheck := true;
				for (var integer i:=0; i<sizeof(p_expected.options); i:=i+1) {
				  var template CoAP_Options v_currentExpectedOption := p_expected.options[i];
		    	  var boolean optionCheck := false;    	  
				  for (var integer j:=0; j<sizeof(lastReceived.options); j:=j+1) {
				    var CoAP_Options v_currentReceivedOption := lastReceived.options[j];
				    if (match(v_currentReceivedOption, v_currentExpectedOption)) {
				      optionCheck := true;
				    }
				  }
				  if (not optionCheck) {
				    log("CHECK: Option mismatch!");
				    log("EXPECTED: ",v_currentExpectedOption);
				    log("RECEIVED: ",lastReceived.options);
				    optionsCheck := false;
				  }
				}		
				if (not optionsCheck) {
				  return false;
				}
			}
		}
		else {
		  if (not match(lastReceived, p_expected)) {
			  log("CHECK: last received is not matching with expected template");
			  return false;
			}
		}
		
		log("CHECK: return true");
		return true;
	}
		
	function f_CP_sendMessage(in integer pl_connId, in octetstring pl_msg)
	runs on COAP_CT
	{
	}

	function f_CP_checkResult(in Result pl_result)
	{
		if (ispresent(pl_result.errorCode))
		{
			log("Error: ", pl_result.errorCode, pl_result.os_error_text);
			setverdict(fail);
			stop;
		}
	}
	
	function f_COAP_getMsgLength(in octetstring stream, inout ro_integer args)
	return integer
	{
		return lengthof(stream);
		// Only for UDP
		// For TCP other frameing is needed (see IETF: COAP mapping to TCP);
	}
	
	function f_COAP_isRequest(in CoAP_ReqResp p_msg)
	return boolean
	{
	  if (p_msg.header.code.class == 0) {
	    return true;
	  }
	  else {
	  	return false;
	  }
	}
}
