/******************************************************************************
* Copyright (c) 2016  Ericsson AB
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*  Antal Wu-Hen Chang- initial implementation and initial documentation
*  Naum Spaseski
******************************************************************************/

module CoapApplication {

	import from CoAP_Types all;
	import from IPL4asp_Types all;
	import from IPL4asp_PortType all;
	import from CoapCommon all;
	
	modulepar
	{
		charstring tsp_remoteHost := "localhost";
		integer tsp_remotePort := 30001;

		charstring tsp_localHost := "localhost";
		integer tsp_localPort := 20001;
		
		float tsp_CoapApplication_maxResponseTime := 0.0;
	}
	
	type component COAP_APP_CT extends CFW_BASE_CT
	{
	    var CoapAppContext ctx := CoapAppContext_empty;
	    
	    var COAP_APP_PDU msgToSend := c_COAP_APP_PDU_empty;
		var COAP_APP_PDU lastReceived := c_COAP_APP_PDU_empty;
  
    	port IPL4asp_PT IPL4_PCO;
	}
	
	type record CoapAppContext
	{
		integer connId,
		integer connId_listen,
		charstring remoteHost,
		integer remotePort,
		charstring localHost,
		integer localPort
	}	
	with { extension "done" }
	
	const CoapAppContext CoapAppContext_empty :=
	{
		connId := -1,
		connId_listen := -1,
		remoteHost := "",
		remotePort := -1,
		localHost := "",
		localPort := -1
	}
	
	type union COAP_APP_PDU
	{
	  charstring text,
	  CoapPdu coapPdu
	}
	
	const COAP_APP_PDU c_COAP_APP_PDU_empty :=
	{
	  text := ""
	}	
	
	template COAP_APP_PDU t_COAP_APP_PDU_empty :=
	{
	  coapPdu := ?
	}
	
	type record CoapPdu
	{
	    CoapHeader header,
	    CoapOption_List options,
    	charstring payload 	optional
	}
	
	const CoapPdu c_CoapPdu_empty :=
	{
	  header := {
	    version := 1,
	    msg_type := "CONFIRMABLE",
	    code := 1 
	  },
	  options := {},
	  payload := omit	  
	}
	
	type record CoapHeader
	{
    	integer version,
    	charstring msg_type,
    	integer code
	}
	
	type union CoapOption
	{
	  integer 		maxAge,
	  charstring 	uriPath,
	  charstring	contentFormat
	}
	
	type set of CoapOption CoapOption_List;
	
	function f_CA_init() runs on COAP_APP_CT
    {
		log(%definitionId, " started");
		var Result vl_result;
    
		log("Mapping started");
		map(self:IPL4_PCO,system:IPL4_PCO);
		var f_IPL4_getMsgLen vl_f := refers(f_COAP_APP_getMsgLength);
		f_IPL4_setGetMsgLen(IPL4_PCO, -1, vl_f, {});
    
		log("Setting up the listening socket");
		vl_result := f_IPL4_listen(IPL4_PCO, ctx.localHost, ctx.localPort, {udp := {}}, {{reuseAddress := {enable := true}}});
		f_CA_checkResult(vl_result);
		ctx.connId_listen := vl_result.connId;
   
		log("Connecting the socket to the remote");
		vl_result := f_IPL4_connect(IPL4_PCO, ctx.remoteHost, ctx.remotePort, ctx.localHost, ctx.localPort, -1,{udp := {}}, {{reuseAddress := {enable := true}}});
		f_CA_checkResult(vl_result);
		ctx.connId := vl_result.connId;
            
		log(%definitionId, " finished");
	}
	
	function f_CA_getContext() runs on COAP_APP_CT
	return CoapAppContext
	{
		return ctx;
	}
	
	function f_CA_setContext(in CoapAppContext p_ctx) runs on COAP_APP_CT
	{
	  ctx := p_ctx;
	}
	
	function f_CA_setMessageToSend(in COAP_APP_PDU p_msg) runs on COAP_APP_CT
	{
	  msgToSend := p_msg;
	}
	
	function f_CA_send() runs on COAP_APP_CT
	{
	  	var octetstring v_encoded := ''O;
	  		  
	  	v_encoded := f_CA_enc_COAP_APP_PDU(msgToSend);
	  
	  	var ASP_SendTo vl_send;

		vl_send.connId := ctx.connId;
		vl_send.remName := ctx.remoteHost;
		vl_send.remPort := ctx.remotePort;
		vl_send.proto := {udp := {}}

		vl_send.msg := v_encoded;

		log("COAP APP PDU: ", msgToSend);
		IPL4_PCO.send(vl_send);
	}
	
	function f_CA_receive() runs on COAP_APP_CT
	{
	  // Activate default
	  
	  timer t_Timeout := tsp_CoapApplication_maxResponseTime;	  
	  if (tsp_CoapApplication_maxResponseTime > 0.0) { t_Timeout.start; }
	  
	  var ASP_RecvFrom v_ipl4Recv;
	  var ASP_Event v_ipl4Event;
	  
	  alt
	  {
	    [] IPL4_PCO.receive(ASP_RecvFrom:?) -> value v_ipl4Recv
	    {
	      log("Received: ", v_ipl4Recv);
	      
	      var COAP_APP_PDU v_pdu := c_COAP_APP_PDU_empty;
	      v_pdu := f_CA_dec_COAP_APP_PDU(v_ipl4Recv.msg);
	      
	      lastReceived := v_pdu;
    	  log("COAP APP PDU: ", lastReceived);
	    }
	    [] IPL4_PCO.receive(ASP_Event:?) -> value v_ipl4Event
	    {
	      log("Received: ", v_ipl4Event);
	      repeat;
	    }
	    [] t_Timeout.timeout
	    {
	      lastReceived := c_COAP_APP_PDU_empty;
	    }
	    
	    // Deactivate default
	  }
	}	
	
	function f_CA_check(in template COAP_APP_PDU p_expected) runs on COAP_APP_CT
	return ReturnBoolean
	{
	  if (not match(lastReceived, p_expected)) {
		  log("CHECK: last received is not matching with expected template");
			  return false;
  	  }
	
      return true;
	}
	
	function f_CA_checkResult(in Result pl_result)
	{
		if (ispresent(pl_result.errorCode))
		{
			log("Error: ", pl_result.errorCode, pl_result.os_error_text);
			setverdict(fail);
			stop;
		}
	}
	
	function f_COAP_APP_getMsgLength(in octetstring stream, inout ro_integer args)
	return integer
	{
		return lengthof(stream);
		// Only for UDP
		// For TCP other frameing is needed (see IETF: COAP mapping to TCP);
	}
	
	external function f_CA_enc_COAP_APP_PDU(in COAP_APP_PDU par) return octetstring 
		with { extension "prototype(convert) encode(JSON) printing(pretty)" }
	
	external function f_CA_dec_COAP_APP_PDU(in octetstring o) return COAP_APP_PDU 
		with { extension "prototype(convert) decode(JSON)" }

}
with { encode "JSON" }
