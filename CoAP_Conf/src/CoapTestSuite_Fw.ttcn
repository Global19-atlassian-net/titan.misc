/******************************************************************************
 * Copyright (c) 2000-2016 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Wu-Hen Chang, Antal
 *
 ******************************************************************************/
module CoapTestSuite_Fw {

	import from CoAP_Types all;
	import from CoapFramework all;
	import from CoapApplication all;

	testcase tc_example() runs on COAP_FW_CT
	{
	  setverdict(pass);
	  
	  var integer client := f_CFW_addCoapPeer("client");
	  var integer server := f_CFW_addCoapPeer("server");
	  
	  f_CFW_Peer_setRemote(client, "server");
	  f_CFW_Peer_setRemote(server, "client");
	  
	  f_CFW_init();
	  
	  f_CFW_Peer_setMessageToSend(client, valueof(t_coap));
	  f_CFW_Peer_send(client);
	  
	  f_CFW_Peer_receive(server);
	  if (not f_CFW_Peer_check(server, valueof(t_coap)))
	  {
	  	setverdict(fail);
	  }
	}
	
	testcase tc_client() runs on COAP_FW_CT
	{
	  setverdict(pass);
	  
	  var integer client := f_CFW_addCoapPeer("client");
	  
	  f_CFW_Peer_setRemote(client, "server");
	  
	  f_CFW_init();
	  
	  f_CFW_Peer_setMessageToSend(client, valueof(t_coap));
	  f_CFW_Peer_send(client);
	  
	  f_CFW_Peer_receive(client);
	  if (not f_CFW_Peer_check(client, t_coap))
	  {
	  	setverdict(fail);
	  }
	}
	
	template CoAP_ReqResp t_coap :=
	{
	  	header := 
	  	{
    		version := 1,
    		msg_type := CONFIRMABLE,
    		code := METHOD_GET,
    		message_id := 0
	  	},
    	token := ''O,
    	options := omit,
    	payload := omit
	}
	
	testcase tc_server() runs on COAP_FW_CT
	{
	  setverdict(pass);
	  
	  var integer client := f_CFW_addCoapPeer("client");
	  var integer ctrl := f_CFW_addCoapApplication("ctrl");

	  f_CFW_Peer_setRemote(client, "server");
	  f_CFW_App_setRemote(ctrl, "sut_app");
	  
	  f_CFW_init();
	  
	  f_CFW_App_setMessageToSend(ctrl, valueof(t_coapApp));
	  f_CFW_App_send(ctrl);
	  
	  f_CFW_Peer_receive(client);
	  if (not f_CFW_Peer_check(client, t_coapExpected))
	  {
	  	setverdict(fail);
	  }
	}
	
	template COAP_APP_PDU t_coapApp :=
	{
	  coapPdu := {
	  	header := {
	    	version := 1,
	    	msg_type := "CONFIRMABLE",
	    	code := 1 
	  	},
	  	payload := omit	  
	  }
	}
	
	template CoAP_ReqResp t_coapExpected :=
	{
	  	header := 
	  	{
    		version := 1,
    		msg_type := CONFIRMABLE,
    		code := METHOD_GET,
    		message_id := ?
	  	},
    	token := ?,
    	options := *,
    	payload := omit
	}
}
