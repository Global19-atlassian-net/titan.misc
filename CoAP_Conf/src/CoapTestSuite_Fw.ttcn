/******************************************************************************
* Copyright (c) 2016  Ericsson AB
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*  Mate Kovacs - initial implementation and initial documentation
*  Antal Wu-Hen Chang
*  Naum Spaseski
******************************************************************************/
module CoapTestSuite_Fw {

	import from CoAP_Types all;
	import from CoapFramework all;
	import from CoapApplication all;

	testcase tc_example() runs on COAP_FW_CT
	{
	  setverdict(pass);
	  
	  var integer client := f_CFW_addCoapPeer("client");
	  var integer server := f_CFW_addCoapPeer("server");
	  
	  f_CFW_Peer_setRemote(client, "server");
	  f_CFW_Peer_setRemote(server, "client");
	  
	  f_CFW_init();
	  
	  f_CFW_Peer_setMessageToSend(client, valueof(t_coap));
	  f_CFW_Peer_send(client);
	  
	  f_CFW_Peer_receive(server);
	  if (not f_CFW_Peer_check(server, valueof(t_coap)))
	  {
	  	setverdict(fail);
	  }
	}
	
	testcase tc_client() runs on COAP_FW_CT
	{
	  setverdict(pass);
	  
	  var integer client := f_CFW_addCoapPeer("client");
	  
	  f_CFW_Peer_setRemote(client, "server");
	  
	  f_CFW_init();
	  
	  f_CFW_Peer_setMessageToSend(client, valueof(t_coap));
	  f_CFW_Peer_send(client);
	  
	  f_CFW_Peer_receive(client);
	  if (not f_CFW_Peer_check(client, t_coap))
	  {
	  	setverdict(fail);
	  }
	}
	
	template CoAP_ReqResp t_coap :=
	{
	  	header := 
	  	{
    		version := 1,
    		msg_type := CONFIRMABLE,
    		code := METHOD_GET,
    		message_id := 0
	  	},
    	token := ''O,
    	options := omit,
    	payload := omit
	}
	
	testcase tc_server() runs on COAP_FW_CT
	{
	  setverdict(pass);
	  
	  var integer client := f_CFW_addCoapPeer("client");
	  var integer ctrl := f_CFW_addCoapApplication("ctrl");

	  f_CFW_Peer_setRemote(client, "server");
	  f_CFW_App_setRemote(ctrl, "sut_app");
	  
	  f_CFW_init();
	  
	  f_CFW_App_setMessageToSend(ctrl, valueof(t_coapApp));
	  f_CFW_App_send(ctrl);
	  
	  f_CFW_Peer_receive(client);
	  if (not f_CFW_Peer_check(client, t_coapExpected))
	  {
	  	setverdict(fail);
	  }
	}
	
	template COAP_APP_PDU t_coapApp :=
	{
	  coapPdu := {
	  	header := {
	    	version := 1,
	    	msg_type := "CONFIRMABLE",
	    	code := 1 
	  	},
	  	payload := omit	  
	  }
	}
	
	template CoAP_ReqResp t_coapExpected :=
	{
	  	header := 
	  	{
    		version := 1,
    		msg_type := CONFIRMABLE,
    		code := METHOD_GET,
    		message_id := ?
	  	},
    	token := ?,
    	options := *,
    	payload := omit
	}
	
	testcase tc_block_encdec() runs on COAP_FW_CT
	{
	  var template CoAP_Message t_msg;
	  
	  log("1 byte long block options");
	  f_test_encdec(t_coap_block1(1, true, 1));	  
	  f_test_encdec(t_coap_block2(2, false, 3));
	  
	  log("2 bytes long block options");
  	  f_test_encdec(t_coap_block1(16, true, 1));
	  f_test_encdec(t_coap_block2(17, false, 3));
	  
 	  log("3 bytes long block options");
  	  f_test_encdec(t_coap_block1(1024, true, 1));
	  f_test_encdec(t_coap_block2(1025, false, 3));
	}
	
	function f_test_encdec(template CoAP_Message p_msg) {
	  var octetstring v_enc;
	  var CoAP_Message v_dec;
	  
	  f_CoAP_enc(valueof(p_msg), v_enc);
	  
	  log("Encoded: ", v_enc);
	  
	  f_CoAP_dec(v_enc, v_dec);
	  
	  if (not match(v_dec, p_msg)) {
	    setverdict(fail);
	  }
	  else {
	    setverdict(pass);
	  }
	}
	
	template CoAP_Message t_coap_block1(integer p_num, boolean p_m, integer p_szx) :=
	{
	  msg := {
	  	header := 
	  	{
    		version := 1,
    		msg_type := CONFIRMABLE,
    		code := METHOD_GET,
    		message_id := 0
	  	},
    	token := ''O,
    	options := {
    	  {
    	    block1 := {
    	      num := p_num,
    	      m := p_m,
    	      szx := p_szx
    	    }
		  }
    	},
    	payload := omit
	  }
	}
	
	template CoAP_Message t_coap_block2(integer p_num, boolean p_m, integer p_szx) :=
	{
	  msg := {
	  	header := 
	  	{
    		version := 1,
    		msg_type := CONFIRMABLE,
    		code := METHOD_GET,
    		message_id := 0
	  	},
    	token := ''O,
    	options := {
    	  {
    	    block2 := {
    	      num := p_num,
    	      m := p_m,
    	      szx := p_szx
    	    }
		  }
    	},
    	payload := omit
	  }
	}
}
